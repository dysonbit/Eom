
Eom_MPU6500_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  0800af58  0800af58  0000bf58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbcc  0800bbcc  0000d1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbcc  0800bbcc  0000cbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbd4  0800bbd4  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd4  0800bbd4  0000cbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbd8  0800bbd8  0000cbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800bbdc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200001f4  0800bdd0  0000d1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800bdd0  0000daa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147aa  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c2  00000000  00000000  000219ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00024b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  00025d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001955f  00000000  00000000  00026b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a60  00000000  00000000  00040064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093755  00000000  00000000  00058ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c6c  00000000  00000000  000ec25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f1ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af3c 	.word	0x0800af3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800af3c 	.word	0x0800af3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <mpu6500_read_accel_raw>:
  * @param  accel_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  accel_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  accel_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_accel_raw(int16_t* accel_x, int16_t* accel_y, int16_t* accel_z) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    // 加速度计数据寄存器地址是连续的: ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ..., ACCEL_ZOUT_L
    // 可以通过一次I2C读取6个字节
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2306      	movs	r3, #6
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	223b      	movs	r2, #59	@ 0x3b
 8000fa4:	21d0      	movs	r1, #208	@ 0xd0
 8000fa6:	4817      	ldr	r0, [pc, #92]	@ (8001004 <mpu6500_read_accel_raw+0x80>)
 8000fa8:	f003 fa06 	bl	80043b8 <HAL_I2C_Mem_Read>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11f      	bne.n	8000ff2 <mpu6500_read_accel_raw+0x6e>
        *accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000fb2:	7c3b      	ldrb	r3, [r7, #16]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7c7b      	ldrb	r3, [r7, #17]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	801a      	strh	r2, [r3, #0]
        *accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000fc6:	7cbb      	ldrb	r3, [r7, #18]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	801a      	strh	r2, [r3, #0]
        *accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000fda:	7d3b      	ldrb	r3, [r7, #20]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
        return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e004      	b.n	8000ffc <mpu6500_read_accel_raw+0x78>
    }
    printf("MPU6500 Read Accel Raw Error\r\n");
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <mpu6500_read_accel_raw+0x84>)
 8000ff4:	f007 fcb2 	bl	800895c <puts>
    return -1;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e8 	.word	0x200002e8
 8001008:	0800af7c 	.word	0x0800af7c

0800100c <mpu6500_read_gyro_raw>:
  * @param  gyro_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  gyro_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  gyro_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_gyro_raw(int16_t* gyro_x, int16_t* gyro_y, int16_t* gyro_z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
     // 陀螺仪数据寄存器地址是连续的: GYRO_XOUT_H, ..., GYRO_ZOUT_L
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, GYRO_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2243      	movs	r2, #67	@ 0x43
 800102c:	21d0      	movs	r1, #208	@ 0xd0
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <mpu6500_read_gyro_raw+0x80>)
 8001030:	f003 f9c2 	bl	80043b8 <HAL_I2C_Mem_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11f      	bne.n	800107a <mpu6500_read_gyro_raw+0x6e>
        *gyro_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7c7b      	ldrb	r3, [r7, #17]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	801a      	strh	r2, [r3, #0]
        *gyro_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 800104e:	7cbb      	ldrb	r3, [r7, #18]
 8001050:	b21b      	sxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	801a      	strh	r2, [r3, #0]
        *gyro_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001062:	7d3b      	ldrb	r3, [r7, #20]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	801a      	strh	r2, [r3, #0]
        return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <mpu6500_read_gyro_raw+0x78>
    }
    printf("MPU6500 Read Gyro Raw Error\r\n");
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <mpu6500_read_gyro_raw+0x84>)
 800107c:	f007 fc6e 	bl	800895c <puts>
    return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002e8 	.word	0x200002e8
 8001090:	0800af9c 	.word	0x0800af9c

08001094 <mpu6500_write_byte>:
  * @param  reg_addr: 目标寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void mpu6500_write_byte(uint8_t reg_addr, uint8_t data)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	21d0      	movs	r1, #208	@ 0xd0
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <mpu6500_write_byte+0x4c>)
 80010bc:	f003 f882 	bl	80041c4 <HAL_I2C_Mem_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <mpu6500_write_byte+0x42>
    {
        // 错误处理，例如打印错误信息或进入 Error_Handler()
        printf("MPU6500 Write Error: reg 0x%X, status %d\r\n", reg_addr, status);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <mpu6500_write_byte+0x50>)
 80010d2:	f007 fbd3 	bl	800887c <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002e8 	.word	0x200002e8
 80010e4:	0800afbc 	.word	0x0800afbc

080010e8 <mpu6500_read_byte>:
  * @brief  从 MPU6500 指定寄存器读取一个字节数据
  * @param  reg_addr: 目标寄存器地址
  * @retval 读取到的数据
  */
uint8_t mpu6500_read_byte(uint8_t reg_addr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &read_data, 1, HAL_MAX_DELAY);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	21d0      	movs	r1, #208	@ 0xd0
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <mpu6500_read_byte+0x4c>)
 8001110:	f003 f952 	bl	80043b8 <HAL_I2C_Mem_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <mpu6500_read_byte+0x42>
    {
        // 错误处理
        printf("MPU6500 Read Error: reg 0x%X, status %d\r\n", reg_addr, status);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <mpu6500_read_byte+0x50>)
 8001126:	f007 fba9 	bl	800887c <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
    return read_data;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002e8 	.word	0x200002e8
 8001138:	0800afe8 	.word	0x0800afe8

0800113c <mpu6500_init>:
  * @brief  初始化 MPU6500
  * @param  None
  * @retval 0: 成功, -1: 失败
  */
int  mpu6500_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    uint8_t who_am_i_val = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    HAL_Delay(100); // 等待 MPU6500 上电稳定
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f002 fb46 	bl	80037d8 <HAL_Delay>

    // 1. 检查设备是否在线
    // 尝试3次，超时100ms，使用 HAL_I2C_IsDeviceReady 更好
    status = HAL_I2C_IsDeviceReady(&hi2c2, MPU6500_I2C_ADDR, 3, 100);
 800114c:	2364      	movs	r3, #100	@ 0x64
 800114e:	2203      	movs	r2, #3
 8001150:	21d0      	movs	r1, #208	@ 0xd0
 8001152:	482d      	ldr	r0, [pc, #180]	@ (8001208 <mpu6500_init+0xcc>)
 8001154:	f003 fb62 	bl	800481c <HAL_I2C_IsDeviceReady>
 8001158:	4603      	mov	r3, r0
 800115a:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <mpu6500_init+0x36>
    {
        printf("MPU6500 not found on I2C2. Status: %d\r\n", status);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	4619      	mov	r1, r3
 8001166:	4829      	ldr	r0, [pc, #164]	@ (800120c <mpu6500_init+0xd0>)
 8001168:	f007 fb88 	bl	800887c <iprintf>
        // Error_Handler(); // 初始化失败通常应该阻止程序继续
        return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e045      	b.n	80011fe <mpu6500_init+0xc2>
    }
    else
    {
        printf("MPU6500 found on I2C2.\r\n");
 8001172:	4827      	ldr	r0, [pc, #156]	@ (8001210 <mpu6500_init+0xd4>)
 8001174:	f007 fbf2 	bl	800895c <puts>
    }

    // 2. 读取 WHO_AM_I 寄存器进行验证
    who_am_i_val = mpu6500_read_byte(WHO_AM_I_REG);
 8001178:	2075      	movs	r0, #117	@ 0x75
 800117a:	f7ff ffb5 	bl	80010e8 <mpu6500_read_byte>
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    printf("WHO_AM_I register value: 0x%X\r\n", who_am_i_val);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	@ (8001214 <mpu6500_init+0xd8>)
 8001188:	f007 fb78 	bl	800887c <iprintf>

    // MPU6500 的 WHO_AM_I 默认值是 0x70。根据模块型号也可能是 0x71 (MPU9250/6500), 0x68 (MPU6050), 0x73, 0x7D, 0x98。
    // 请根据你的 MPU6500 模块数据手册确认。
    if (who_am_i_val != 0x70 && who_am_i_val != 0x71 && who_am_i_val != 0x68 && who_am_i_val != 0x73 && who_am_i_val != 0x7D && who_am_i_val != 0x98) {
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b70      	cmp	r3, #112	@ 0x70
 8001190:	d016      	beq.n	80011c0 <mpu6500_init+0x84>
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b71      	cmp	r3, #113	@ 0x71
 8001196:	d013      	beq.n	80011c0 <mpu6500_init+0x84>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b68      	cmp	r3, #104	@ 0x68
 800119c:	d010      	beq.n	80011c0 <mpu6500_init+0x84>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b73      	cmp	r3, #115	@ 0x73
 80011a2:	d00d      	beq.n	80011c0 <mpu6500_init+0x84>
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011a8:	d00a      	beq.n	80011c0 <mpu6500_init+0x84>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b98      	cmp	r3, #152	@ 0x98
 80011ae:	d007      	beq.n	80011c0 <mpu6500_init+0x84>
        printf("MPU6500 WHO_AM_I check failed. Expected 0x70 or similar, got 0x%X\r\n", who_am_i_val);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4818      	ldr	r0, [pc, #96]	@ (8001218 <mpu6500_init+0xdc>)
 80011b6:	f007 fb61 	bl	800887c <iprintf>
        // Error_Handler(); // WHO_AM_I 错误通常是接线或设备问题
        return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e01e      	b.n	80011fe <mpu6500_init+0xc2>
    } else {
        printf("MPU6500 WHO_AM_I check passed.\r\n");
 80011c0:	4816      	ldr	r0, [pc, #88]	@ (800121c <mpu6500_init+0xe0>)
 80011c2:	f007 fbcb 	bl	800895c <puts>
    }

    HAL_Delay(50); // 等待稳定
 80011c6:	2032      	movs	r0, #50	@ 0x32
 80011c8:	f002 fb06 	bl	80037d8 <HAL_Delay>

    // 3. 唤醒 MPU6500 (清除 PWR_MGMT_1 寄存器的 SLEEP 位)
    mpu6500_write_byte(PWR_MGMT_1_REG, 0x00); // 设置 CLKSEL=0 (PLL)
 80011cc:	2100      	movs	r1, #0
 80011ce:	206b      	movs	r0, #107	@ 0x6b
 80011d0:	f7ff ff60 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011d4:	2032      	movs	r0, #50	@ 0x32
 80011d6:	f002 faff 	bl	80037d8 <HAL_Delay>
//    HAL_Delay(50);


    // 5. 配置陀螺仪量程
    //    0x18: ±2000 dps (对应灵敏度 16.4 LSB/dps) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(GYRO_CONFIG_REG, 0x18);
 80011da:	2118      	movs	r1, #24
 80011dc:	201b      	movs	r0, #27
 80011de:	f7ff ff59 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f002 faf8 	bl	80037d8 <HAL_Delay>

    // 6. 配置加速度计量程
    //    0x00: ±2g (对应灵敏度 16384 LSB/g) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(ACCEL_CONFIG_REG, 0x00);
 80011e8:	2100      	movs	r1, #0
 80011ea:	201c      	movs	r0, #28
 80011ec:	f7ff ff52 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f002 faf1 	bl	80037d8 <HAL_Delay>

    // 更多配置 (例如中断设置 INT_PIN_CFG, INT_ENABLE 等，如果需要中断)
    // mpu6500_write_byte(0x37, 0x02); // INT_PIN_CFG: INT_ANYRD_2CLEAR, LATCH_INT_EN=0
    // mpu6500_write_byte(0x38, 0x01); // INT_ENABLE: DATA_RDY_EN=1

    printf("MPU6500 configured successfully.\r\n");
 80011f6:	480a      	ldr	r0, [pc, #40]	@ (8001220 <mpu6500_init+0xe4>)
 80011f8:	f007 fbb0 	bl	800895c <puts>
    return 0; // 初始化成功
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002e8 	.word	0x200002e8
 800120c:	0800b014 	.word	0x0800b014
 8001210:	0800b03c 	.word	0x0800b03c
 8001214:	0800b054 	.word	0x0800b054
 8001218:	0800b074 	.word	0x0800b074
 800121c:	0800b0b8 	.word	0x0800b0b8
 8001220:	0800b0d8 	.word	0x0800b0d8

08001224 <hc05_init>:
static volatile uint16_t internal_rx_index = 0;

/**
 * @brief 初始化HC-05蓝牙模块接口
 */
HAL_StatusTypeDef hc05_init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    memset(internal_rx_buffer, 0, BLUETOOTH_RX_BUFFER_SIZE);
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <hc05_init+0x2c>)
 800122e:	f007 fc97 	bl	8008b60 <memset>
    internal_rx_index = 0;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <hc05_init+0x30>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
    data_received_flag = false;
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <hc05_init+0x34>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]

    // 启动UART中断接收，每次接收一个字节
    // 当一个字节接收完成后，会触发 HAL_UART_RxCpltCallback 回调函数
    return HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <hc05_init+0x38>)
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <hc05_init+0x3c>)
 8001244:	f005 fe87 	bl	8006f56 <HAL_UART_Receive_IT>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000210 	.word	0x20000210
 8001254:	20000292 	.word	0x20000292
 8001258:	20000291 	.word	0x20000291
 800125c:	20000290 	.word	0x20000290
 8001260:	2000090c 	.word	0x2000090c

08001264 <hc05_is_data_received>:

/**
 * @brief 检查是否有新的蓝牙数据接收完成
 */
bool hc05_is_data_received(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    return data_received_flag;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <hc05_is_data_received+0x14>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000291 	.word	0x20000291

0800127c <hc05_get_received_data>:

/**
 * @brief 获取接收到的蓝牙数据
 */
uint16_t hc05_get_received_data(uint8_t *buffer, uint16_t buffer_len) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
    if (!data_received_flag || buffer == NULL || buffer_len == 0) {
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <hc05_get_received_data+0x84>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <hc05_get_received_data+0x28>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <hc05_get_received_data+0x28>
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <hc05_get_received_data+0x2c>
        return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e026      	b.n	80012f6 <hc05_get_received_data+0x7a>
    }

    // 进入临界区：禁用中断，防止在读取数据时被新的中断打断
    HAL_NVIC_DisableIRQ(BLUETOOTH_USART_IRQn); // 或者直接使用 USART6_IRQn
 80012a8:	2047      	movs	r0, #71	@ 0x47
 80012aa:	f002 fbe2 	bl	8003a72 <HAL_NVIC_DisableIRQ>

    uint16_t len_to_copy = internal_rx_index;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <hc05_get_received_data+0x88>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	81fb      	strh	r3, [r7, #14]
    if (len_to_copy >= buffer_len) { // 防止缓冲区溢出
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <hc05_get_received_data+0x46>
        len_to_copy = buffer_len - 1; // 留一个字节给 '\0'
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	3b01      	subs	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
    }

    memcpy(buffer, internal_rx_buffer, len_to_copy);
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4910      	ldr	r1, [pc, #64]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f007 fcc8 	bl	8008c5e <memcpy>
    buffer[len_to_copy] = '\0'; // 添加字符串结束符
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

    // 重置标志和索引，清空缓冲区
    data_received_flag = false;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <hc05_get_received_data+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
    internal_rx_index = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <hc05_get_received_data+0x88>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
    memset(internal_rx_buffer, 0, BLUETOOTH_RX_BUFFER_SIZE);
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	2100      	movs	r1, #0
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012ea:	f007 fc39 	bl	8008b60 <memset>

    // 退出临界区：重新使能中断
    HAL_NVIC_EnableIRQ(BLUETOOTH_USART_IRQn);
 80012ee:	2047      	movs	r0, #71	@ 0x47
 80012f0:	f002 fbb1 	bl	8003a56 <HAL_NVIC_EnableIRQ>
    // 为了安全和清晰，通常在取走数据后，明确我们期望中断继续工作：
    // 实际上，因为我们的回调函数 hc05_uart_rx_callback_handler 总是重新调用 HAL_UART_Receive_IT，
    // 所以这里不需要再次调用。如果回调函数在收到完整消息后停止调用 HAL_UART_Receive_IT，那这里就需要。
    // 当前逻辑下，我们假设回调函数会持续接收。

    return len_to_copy;
 80012f4:	89fb      	ldrh	r3, [r7, #14]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000291 	.word	0x20000291
 8001304:	20000292 	.word	0x20000292
 8001308:	20000210 	.word	0x20000210

0800130c <hc05_transmit_data>:

/**
 * @brief 通过蓝牙发送数据 (阻塞方式)
 */
HAL_StatusTypeDef hc05_transmit_data(const uint8_t *data, uint16_t len) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
    if (data == NULL || len == 0) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <hc05_transmit_data+0x18>
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <hc05_transmit_data+0x1c>
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e007      	b.n	8001338 <hc05_transmit_data+0x2c>
    }
    // 使用阻塞式发送，可以根据需要改为中断或DMA发送
    return HAL_UART_Transmit(BLUETOOTH_UART_HANDLE, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <hc05_transmit_data+0x34>)
 8001332:	f005 fd85 	bl	8006e40 <HAL_UART_Transmit>
 8001336:	4603      	mov	r3, r0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000090c 	.word	0x2000090c

08001344 <hc05_uart_rx_callback_handler>:
/**
 * @brief UART接收回调处理函数 (由外部的 HAL_UART_RxCpltCallback 调用)
 * @param huart 发生中断的UART句柄指针
 * @note 这个函数是关键，用于处理中断接收到的字节
 */
void hc05_uart_rx_callback_handler(UART_HandleTypeDef *huart) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    // 检查是否是目标UART实例触发的中断
    if (huart->Instance == BLUETOOTH_UART_HANDLE->Instance) { // 例如 USART6
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d142      	bne.n	80013de <hc05_uart_rx_callback_handler+0x9a>
        if (data_received_flag) {
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12b      	bne.n	80013ba <hc05_uart_rx_callback_handler+0x76>
            // 意味着如果主程序不及时取走，single_byte_rx_data 会被新数据覆盖，但 internal_rx_buffer 中的内容不变。
            // 更健壮的做法是使用环形缓冲区。
            // 为了简单，我们假设主程序会及时取走数据。
        } else {
            // 将接收到的单个字节存入内部缓冲区
            if (internal_rx_index < BLUETOOTH_RX_BUFFER_SIZE - 1) { // 留一个字节给可能的'\0'
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	2b7e      	cmp	r3, #126	@ 0x7e
 800136a:	d81f      	bhi.n	80013ac <hc05_uart_rx_callback_handler+0x68>
                internal_rx_buffer[internal_rx_index++] = single_byte_rx_data;
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	b291      	uxth	r1, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001378:	8011      	strh	r1, [r2, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 8001382:	5499      	strb	r1, [r3, r2]
                // 1. 接收到特定的结束符 (如 '\n' 或 '\r')
                // 2. 接收到固定长度的数据
                // 3. 缓冲区满
                // HC05模块的AT指令通常以 "\r\n" 结束，数据透传时则根据应用定义。
                // 这里我们以换行符 '\n' 作为简单示例的结束标志，或者缓冲区满。
                if (single_byte_rx_data == '\n' || internal_rx_index >= (BLUETOOTH_RX_BUFFER_SIZE - 1)) {
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d004      	beq.n	8001396 <hc05_uart_rx_callback_handler+0x52>
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b7e      	cmp	r3, #126	@ 0x7e
 8001394:	d911      	bls.n	80013ba <hc05_uart_rx_callback_handler+0x76>
                    // 可选：如果想把换行符也包含，则不需要下面的 internal_rx_index-- 操作
                    // 如果不想包含换行符作为数据内容，可以 internal_rx_index--; internal_rx_buffer[internal_rx_index] = '\0';
                    internal_rx_buffer[internal_rx_index] = '\0'; // 确保字符串结束
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
                    data_received_flag = true; // 设置数据接收完成标志
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e006      	b.n	80013ba <hc05_uart_rx_callback_handler+0x76>
                    // 直到 hc05_get_received_data 被调用并清空标志和缓冲区。
                    // HAL_UART_Receive_IT 仍然需要被调用以接收后续数据（即使它们可能暂时不被存入buffer）。
                }
            } else {
                // 缓冲区已满，但没有收到结束符
                internal_rx_buffer[BLUETOOTH_RX_BUFFER_SIZE - 1] = '\0'; // 确保字符串结束
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                data_received_flag = true; // 设置数据接收完成标志，表示缓冲区满了
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
        // 修改：仅当数据未满或未标记为已接收时，才继续填充缓冲区并重新启动。
        // 当data_received_flag为true时，我们应该停止接收到缓冲区，直到数据被取走。
        // HAL_UART_Receive_IT应该在数据被取走(hc05_get_received_data)后，或者在初始化(hc05_init)时调用。

        // 改进的逻辑：如果数据已满并标记，则不立即重启IT，等待数据被取走。
        if (!data_received_flag) {
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <hc05_uart_rx_callback_handler+0x90>
            HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013d0:	f005 fdc1 	bl	8006f56 <HAL_UART_Receive_IT>
        // 然后在 hc05_get_received_data() 的末尾添加:
        // if (!data_received_flag) { // 确保在取走数据后，如果之前因为flag=true而没启动，现在启动
        //    HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
        // }
        // 为了简单起见，保持原始的每次回调都重新启动：
        HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013da:	f005 fdbc 	bl	8006f56 <HAL_UART_Receive_IT>
    }
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000090c 	.word	0x2000090c
 80013ec:	20000291 	.word	0x20000291
 80013f0:	20000292 	.word	0x20000292
 80013f4:	20000290 	.word	0x20000290
 80013f8:	20000210 	.word	0x20000210

080013fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b4e      	ldr	r3, [pc, #312]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a4d      	ldr	r2, [pc, #308]	@ (8001550 <MX_GPIO_Init+0x154>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a3f      	ldr	r2, [pc, #252]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <MX_GPIO_Init+0x154>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_GPIO_Init+0x154>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	4833      	ldr	r0, [pc, #204]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001488:	f002 fd24 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	4831      	ldr	r0, [pc, #196]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001494:	f002 fd1e 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gyro_cs_GPIO_Port, gyro_cs_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149e:	482d      	ldr	r0, [pc, #180]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014a0:	f002 fd18 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80014a4:	2313      	movs	r3, #19
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4827      	ldr	r0, [pc, #156]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014b8:	f002 fb88 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80014bc:	2320      	movs	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014d4:	f002 fb7a 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	481b      	ldr	r0, [pc, #108]	@ (800155c <MX_GPIO_Init+0x160>)
 80014ee:	f002 fb6d 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4813      	ldr	r0, [pc, #76]	@ (8001558 <MX_GPIO_Init+0x15c>)
 800150c:	f002 fb5e 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001526:	f002 fb51 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : gyro_cs_Pin */
  GPIO_InitStruct.Pin = gyro_cs_Pin;
 800152a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(gyro_cs_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001544:	f002 fb42 	bl	8003bcc <HAL_GPIO_Init>

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400

08001560 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f002 fccd 	bl	8003f3c <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 fcb4 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000294 	.word	0x20000294
 80015b4:	40005400 	.word	0x40005400
 80015b8:	00061a80 	.word	0x00061a80

080015bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f002 fc9f 	bl	8003f3c <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fc86 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002e8 	.word	0x200002e8
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a3b      	ldr	r2, [pc, #236]	@ (8001724 <HAL_I2C_MspInit+0x10c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12d      	bne.n	8001696 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a39      	ldr	r2, [pc, #228]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <HAL_I2C_MspInit+0x114>)
 8001674:	f002 faaa 	bl	8003bcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001694:	e041      	b.n	800171a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_I2C_MspInit+0x118>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13c      	bne.n	800171a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4814      	ldr	r0, [pc, #80]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016da:	f002 fa77 	bl	8003bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016de:	2308      	movs	r3, #8
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80016ee:	2309      	movs	r3, #9
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016fa:	f002 fa67 	bl	8003bcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400
 8001730:	40005800 	.word	0x40005800

08001734 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <__io_putchar+0x20>)
 8001746:	f005 fb7b 	bl	8006e40 <HAL_UART_Transmit>
  return ch;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200008c4 	.word	0x200008c4

08001758 <calibrate_mpu6500_bias>:
  * @brief  Calibrates MPU6500 sensor bias.
  *         Requires the robot to be held stationary and balanced during execution.
  * @param  num_samples: Number of samples to collect for averaging.
  * @retval None
  */
void calibrate_mpu6500_bias(uint16_t num_samples) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
    printf("\r\n--- MPU6500 Calibration Start ---\r\n");
 8001762:	4869      	ldr	r0, [pc, #420]	@ (8001908 <calibrate_mpu6500_bias+0x1b0>)
 8001764:	f007 f8fa 	bl	800895c <puts>
    printf("Please hold the robot VERTICAL and STATIONARY for %d seconds...\r\n", num_samples / 1000); // Assuming 1ms delay per sample
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4a68      	ldr	r2, [pc, #416]	@ (800190c <calibrate_mpu6500_bias+0x1b4>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	b29b      	uxth	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	4866      	ldr	r0, [pc, #408]	@ (8001910 <calibrate_mpu6500_bias+0x1b8>)
 8001778:	f007 f880 	bl	800887c <iprintf>

    // Give user time to position the robot
    HAL_Delay(3000); // 3 seconds initial delay
 800177c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001780:	f002 f82a 	bl	80037d8 <HAL_Delay>

    // Accumulate sums
    int32_t gyro_x_sum = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyro_y_sum = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t gyro_z_sum = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    float accel_pitch_angle_sum = 0.0f;
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    int16_t accel_x_raw, accel_y_raw, accel_z_raw;
    int16_t gyro_x_raw, gyro_y_raw, gyro_z_raw;
    float current_accel_pitch_angle;

    // Collect samples
    for (uint16_t i = 0; i < num_samples; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	83fb      	strh	r3, [r7, #30]
 800179a:	e063      	b.n	8001864 <calibrate_mpu6500_bias+0x10c>
        // Read raw data
        if (mpu6500_read_accel_raw(&accel_x_raw, &accel_y_raw, &accel_z_raw) != 0) {
 800179c:	f107 0212 	add.w	r2, r7, #18
 80017a0:	f107 0114 	add.w	r1, r7, #20
 80017a4:	f107 0316 	add.w	r3, r7, #22
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fbeb 	bl	8000f84 <mpu6500_read_accel_raw>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <calibrate_mpu6500_bias+0x64>
            printf("Calibration Error: Failed to read accel raw.\r\n");
 80017b4:	4857      	ldr	r0, [pc, #348]	@ (8001914 <calibrate_mpu6500_bias+0x1bc>)
 80017b6:	f007 f8d1 	bl	800895c <puts>
            // Optionally skip this sample or break calibration
            continue; // Skip this sample
 80017ba:	e050      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }
        if (mpu6500_read_gyro_raw(&gyro_x_raw, &gyro_y_raw, &gyro_z_raw) != 0) {
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	f107 010e 	add.w	r1, r7, #14
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc1f 	bl	800100c <mpu6500_read_gyro_raw>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <calibrate_mpu6500_bias+0x84>
            printf("Calibration Error: Failed to read gyro raw.\r\n");
 80017d4:	4850      	ldr	r0, [pc, #320]	@ (8001918 <calibrate_mpu6500_bias+0x1c0>)
 80017d6:	f007 f8c1 	bl	800895c <puts>
            // Optionally skip this sample or break calibration
             continue; // Skip this sample
 80017da:	e040      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }

        // Accumulate gyro raw sums
        gyro_x_sum += gyro_x_raw;
 80017dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e0:	461a      	mov	r2, r3
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	4413      	add	r3, r2
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        gyro_y_sum += gyro_y_raw;
 80017e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ec:	461a      	mov	r2, r3
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	4413      	add	r3, r2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyro_z_sum += gyro_z_raw;
 80017f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f8:	461a      	mov	r2, r3
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	4413      	add	r3, r2
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

        // Calculate accelerometer pitch angle for this sample (based on Accel X and Z)
        // atan2f handles the case where the first parameter is 0.
        // If accel_z_raw is 0 (e.g., MPU horizontal), atan2f(accel_x_raw, 0) would give +/-90 or 0/180 depending on accel_x_raw sign.
        // In vertical calibration, accel_z_raw is expected to be large (~16384), so 0 is very unlikely.
        current_accel_pitch_angle = atan2f((float)accel_x_raw, (float)accel_z_raw) * (180.0f / M_PI);
 8001800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001810:	ee07 3a10 	vmov	s14, r3
 8001814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001818:	eef0 0a47 	vmov.f32	s1, s14
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f009 fa0e 	bl	800ac40 <atan2f>
 8001824:	ee10 3a10 	vmov	r3, s0
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe95 	bl	8000558 <__aeabi_f2d>
 800182e:	a334      	add	r3, pc, #208	@ (adr r3, 8001900 <calibrate_mpu6500_bias+0x1a8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fee8 	bl	8000608 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9ba 	bl	8000bb8 <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
        accel_pitch_angle_sum += current_accel_pitch_angle;
 8001848:	ed97 7a08 	vldr	s14, [r7, #32]
 800184c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a08 	vstr	s15, [r7, #32]

        // Add a small delay to ensure distinct readings
        HAL_Delay(1); // 1ms delay per sample
 8001858:	2001      	movs	r0, #1
 800185a:	f001 ffbd 	bl	80037d8 <HAL_Delay>
    for (uint16_t i = 0; i < num_samples; i++) {
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	3301      	adds	r3, #1
 8001862:	83fb      	strh	r3, [r7, #30]
 8001864:	8bfa      	ldrh	r2, [r7, #30]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d397      	bcc.n	800179c <calibrate_mpu6500_bias+0x44>
    }

    // Calculate averages (biases)
    // Ensure num_samples is not zero to avoid division by zero
    if (num_samples > 0) {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d021      	beq.n	80018b6 <calibrate_mpu6500_bias+0x15e>
         g_gyro_x_bias_raw = (int16_t)(gyro_x_sum / num_samples);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001876:	fb92 f3f3 	sdiv	r3, r2, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 800187e:	801a      	strh	r2, [r3, #0]
         g_gyro_y_bias_raw = (int16_t)(gyro_y_sum / num_samples);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001884:	fb92 f3f3 	sdiv	r3, r2, r3
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 800188c:	801a      	strh	r2, [r3, #0]
         g_gyro_z_bias_raw = (int16_t)(gyro_z_sum / num_samples);
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	fb92 f3f3 	sdiv	r3, r2, r3
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 800189a:	801a      	strh	r2, [r3, #0]
         g_accel_pitch_bias_deg = accel_pitch_angle_sum / num_samples;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80018aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018b0:	edc3 7a00 	vstr	s15, [r3]
 80018b4:	e002      	b.n	80018bc <calibrate_mpu6500_bias+0x164>
    } else {
         printf("Calibration Warning: num_samples is 0.\r\n");
 80018b6:	481d      	ldr	r0, [pc, #116]	@ (800192c <calibrate_mpu6500_bias+0x1d4>)
 80018b8:	f007 f850 	bl	800895c <puts>
         // Biases remain 0
    }


    printf("Calibration Complete.\r\n");
 80018bc:	481c      	ldr	r0, [pc, #112]	@ (8001930 <calibrate_mpu6500_bias+0x1d8>)
 80018be:	f007 f84d 	bl	800895c <puts>
    printf("Gyro Bias Raw: X=%d, Y=%d, Z=%d\r\n", g_gyro_x_bias_raw, g_gyro_y_bias_raw, g_gyro_z_bias_raw);
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <calibrate_mpu6500_bias+0x1dc>)
 80018da:	f006 ffcf 	bl	800887c <iprintf>
    printf("Accel Pitch Bias (deg): %.2f\r\n", g_accel_pitch_bias_deg);
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4812      	ldr	r0, [pc, #72]	@ (8001938 <calibrate_mpu6500_bias+0x1e0>)
 80018ee:	f006 ffc5 	bl	800887c <iprintf>
    printf("--- MPU6500 Calibration End ---\r\n");
 80018f2:	4812      	ldr	r0, [pc, #72]	@ (800193c <calibrate_mpu6500_bias+0x1e4>)
 80018f4:	f007 f832 	bl	800895c <puts>
}
 80018f8:	bf00      	nop
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	1a63c1f8 	.word	0x1a63c1f8
 8001904:	404ca5dc 	.word	0x404ca5dc
 8001908:	0800b0fc 	.word	0x0800b0fc
 800190c:	10624dd3 	.word	0x10624dd3
 8001910:	0800b124 	.word	0x0800b124
 8001914:	0800b168 	.word	0x0800b168
 8001918:	0800b198 	.word	0x0800b198
 800191c:	20000752 	.word	0x20000752
 8001920:	20000754 	.word	0x20000754
 8001924:	20000756 	.word	0x20000756
 8001928:	20000758 	.word	0x20000758
 800192c:	0800b1c8 	.word	0x0800b1c8
 8001930:	0800b1f0 	.word	0x0800b1f0
 8001934:	0800b208 	.word	0x0800b208
 8001938:	0800b22c 	.word	0x0800b22c
 800193c:	0800b24c 	.word	0x0800b24c

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001944:	b0d6      	sub	sp, #344	@ 0x158
 8001946:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  char oled_buffer[30]; // 用于在OLED上显示字符串，大小根据需要调整
  float gyro_z_value = 0.0f;
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f001 fed0 	bl	80036f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 fa66 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f7ff fd50 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195c:	f001 fdc6 	bl	80034ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001960:	f7ff fdfe 	bl	8001560 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001964:	f001 fb10 	bl	8002f88 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001968:	f7ff fe28 	bl	80015bc <MX_I2C2_Init>
  MX_TIM5_Init();
 800196c:	f001 fc7a 	bl	8003264 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001970:	f001 fde6 	bl	8003540 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001974:	f001 fbce 	bl	8003114 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001978:	f001 fc20 	bl	80031bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // 启动编码器模式
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // 启动电机1编码器
 800197c:	213c      	movs	r1, #60	@ 0x3c
 800197e:	48b0      	ldr	r0, [pc, #704]	@ (8001c40 <main+0x300>)
 8001980:	f004 fb28 	bl	8005fd4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // 启动电机2编码器
 8001984:	213c      	movs	r1, #60	@ 0x3c
 8001986:	48af      	ldr	r0, [pc, #700]	@ (8001c44 <main+0x304>)
 8001988:	f004 fb24 	bl	8005fd4 <HAL_TIM_Encoder_Start>
  int hc05=0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (hc05_init() != HAL_OK) {
 8001992:	f7ff fc47 	bl	8001224 <hc05_init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <main+0x6e>
        printf("BT failed");
 800199c:	48aa      	ldr	r0, [pc, #680]	@ (8001c48 <main+0x308>)
 800199e:	f006 ff6d 	bl	800887c <iprintf>
        hc05=-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        // 初始化失败处理
        Error_Handler();
 80019aa:	f000 fab3 	bl	8001f14 <Error_Handler>
    }
    // ... hc05_init() OK ...

    const char* test_msg = "Hello from STM32!\r\n";
 80019ae:	4ba7      	ldr	r3, [pc, #668]	@ (8001c4c <main+0x30c>)
 80019b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    if (hc05_transmit_data((uint8_t*)test_msg, strlen(test_msg)) == HAL_OK) {
 80019b4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80019b8:	f7fe fc62 	bl	8000280 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80019c6:	f7ff fca1 	bl	800130c <hc05_transmit_data>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <main+0x98>
        printf("Test message sent to Bluetooth.\r\n");
 80019d0:	489f      	ldr	r0, [pc, #636]	@ (8001c50 <main+0x310>)
 80019d2:	f006 ffc3 	bl	800895c <puts>
 80019d6:	e002      	b.n	80019de <main+0x9e>

    } else {
        printf("Failed to send test message to Bluetooth.\r\n");
 80019d8:	489e      	ldr	r0, [pc, #632]	@ (8001c54 <main+0x314>)
 80019da:	f006 ffbf 	bl	800895c <puts>
    }
//  // 初始化OLED (使用 hi2c1)
  if (ssd1306_Init(&hi2c1) != 0 ){
 80019de:	489e      	ldr	r0, [pc, #632]	@ (8001c58 <main+0x318>)
 80019e0:	f000 fbd0 	bl	8002184 <ssd1306_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <main+0xb4>
      printf("OLED SSD1306 initialization failed!\r\n");
 80019ea:	489c      	ldr	r0, [pc, #624]	@ (8001c5c <main+0x31c>)
 80019ec:	f006 ffb6 	bl	800895c <puts>
      Error_Handler(); // 初始化失败
 80019f0:	f000 fa90 	bl	8001f14 <Error_Handler>
  }
  printf("OLED SSD1306 initialized successfully.\r\n");
 80019f4:	489a      	ldr	r0, [pc, #616]	@ (8001c60 <main+0x320>)
 80019f6:	f006 ffb1 	bl	800895c <puts>


  // 初始化MPU6500 (使用 hi2c2, mpu6500.c 中应使用 extern I2C_HandleTypeDef hi2c2;)
  if(mpu6500_init()==-1){
 80019fa:	f7ff fb9f 	bl	800113c <mpu6500_init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d114      	bne.n	8001a30 <main+0xf0>
      ssd1306_Fill(Black);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 fcc8 	bl	800239c <ssd1306_Fill>
      ssd1306_SetCursor(0,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 fd82 	bl	8002518 <ssd1306_SetCursor>
      ssd1306_WriteString("MPU Fail", Font_7x10, White);
 8001a14:	4a93      	ldr	r2, [pc, #588]	@ (8001c64 <main+0x324>)
 8001a16:	2301      	movs	r3, #1
 8001a18:	ca06      	ldmia	r2, {r1, r2}
 8001a1a:	4893      	ldr	r0, [pc, #588]	@ (8001c68 <main+0x328>)
 8001a1c:	f000 fe1c 	bl	8002658 <ssd1306_WriteString>
      ssd1306_UpdateScreen(&hi2c1);
 8001a20:	488d      	ldr	r0, [pc, #564]	@ (8001c58 <main+0x318>)
 8001a22:	f000 fcd5 	bl	80023d0 <ssd1306_UpdateScreen>
      HAL_Delay(1000);
 8001a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a2a:	f001 fed5 	bl	80037d8 <HAL_Delay>
 8001a2e:	e002      	b.n	8001a36 <main+0xf6>
  } else {
	    printf("MPU6500 initialized.\r\n");
 8001a30:	488e      	ldr	r0, [pc, #568]	@ (8001c6c <main+0x32c>)
 8001a32:	f006 ff93 	bl	800895c <puts>
	}// 这个函数内部应该有打印信息指示是否成功
  // Calibrate MPU6500 bias
//   Need to hold the robot stationary and balanced during this process
  calibrate_mpu6500_bias(2000); // Collect 2000 samples (takes ~2 seconds + initial delay)
 8001a36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a3a:	f7ff fe8d 	bl	8001758 <calibrate_mpu6500_bias>

  // 清屏并显示初始文本
  ssd1306_Fill(Black);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fcac 	bl	800239c <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8001a44:	2100      	movs	r1, #0
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 fd66 	bl	8002518 <ssd1306_SetCursor>
  ssd1306_WriteString("OLED Init OK", Font_7x10, White);
 8001a4c:	4a85      	ldr	r2, [pc, #532]	@ (8001c64 <main+0x324>)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	ca06      	ldmia	r2, {r1, r2}
 8001a52:	4887      	ldr	r0, [pc, #540]	@ (8001c70 <main+0x330>)
 8001a54:	f000 fe00 	bl	8002658 <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c1);
 8001a58:	487f      	ldr	r0, [pc, #508]	@ (8001c58 <main+0x318>)
 8001a5a:	f000 fcb9 	bl	80023d0 <ssd1306_UpdateScreen>
//        HAL_Delay(1000);
//        Error_Handler();
//    }

    // 初始化电机模块 (会启动 TIM1 PWM 通道)
    Motor_Init();
 8001a5e:	f000 fa65 	bl	8001f2c <Motor_Init>
    printf("Motor module initialized.\r\n");
 8001a62:	4884      	ldr	r0, [pc, #528]	@ (8001c74 <main+0x334>)
 8001a64:	f006 ff7a 	bl	800895c <puts>

    // 启动控制循环定时器 TIM5 的中断
    if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8001a68:	4883      	ldr	r0, [pc, #524]	@ (8001c78 <main+0x338>)
 8001a6a:	f004 f8a1 	bl	8005bb0 <HAL_TIM_Base_Start_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <main+0x13e>
    	printf("Failed to start control loop timer (TIM5)!\r\n");
 8001a74:	4881      	ldr	r0, [pc, #516]	@ (8001c7c <main+0x33c>)
 8001a76:	f006 ff71 	bl	800895c <puts>
    	Error_Handler(); // 启动定时器失败是严重错误
 8001a7a:	f000 fa4b 	bl	8001f14 <Error_Handler>
    }
    printf("Control Loop Timer (TIM5) Started.\r\n");
 8001a7e:	4880      	ldr	r0, [pc, #512]	@ (8001c80 <main+0x340>)
 8001a80:	f006 ff6c 	bl	800895c <puts>
        STATE_MOVING_FORWARD_PULSE
    } RobotMoveState;

    static RobotMoveState current_move_state = STATE_BALANCING_AT_ZERO; // 初始状态为原地平衡
    static uint32_t last_state_change_time = 0;
    int instruction=0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    char PID[64]={0};
 8001a8a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a8e:	2240      	movs	r2, #64	@ 0x40
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 f864 	bl	8008b60 <memset>
    int len = sprintf(PID, "Kp:%.2f Kd:%.1f",
 8001a98:	4b7a      	ldr	r3, [pc, #488]	@ (8001c84 <main+0x344>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd5b 	bl	8000558 <__aeabi_f2d>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	4b78      	ldr	r3, [pc, #480]	@ (8001c88 <main+0x348>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001ab8:	e9cd 2300 	strd	r2, r3, [sp]
 8001abc:	4622      	mov	r2, r4
 8001abe:	462b      	mov	r3, r5
 8001ac0:	4972      	ldr	r1, [pc, #456]	@ (8001c8c <main+0x34c>)
 8001ac2:	f006 ff53 	bl	800896c <siprintf>
 8001ac6:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
                      g_balance_kp, g_balance_kd);
    for(int i=0;i<len;i++){
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001ad0:	e00d      	b.n	8001aee <main+0x1ae>
    	printf("%c",PID[i]);
 8001ad2:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8001ad6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 fede 	bl	80088a0 <putchar>
    for(int i=0;i<len;i++){
 8001ae4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001aee:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbeb      	blt.n	8001ad2 <main+0x192>
    }
    HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f001 fe6b 	bl	80037d8 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    	  	 printf("test");

          if (hc05_is_data_received()) {
 8001b02:	f7ff fbaf 	bl	8001264 <hc05_is_data_received>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d039      	beq.n	8001b80 <main+0x240>
              printf("success");
 8001b0c:	4860      	ldr	r0, [pc, #384]	@ (8001c90 <main+0x350>)
 8001b0e:	f006 feb5 	bl	800887c <iprintf>
              uint8_t received_buffer[BLUETOOTH_RX_BUFFER_SIZE];
              uint16_t len = hc05_get_received_data(received_buffer, BLUETOOTH_RX_BUFFER_SIZE);
 8001b12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fbaf 	bl	800127c <hc05_get_received_data>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
              if (len > 0) {
 8001b24:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d029      	beq.n	8001b80 <main+0x240>
//                  printf("BT:");
                  // 处理接收到的数据 received_buffer，长度为 len
                  // 例如，通过另一个 UART 打印出来，或者回传给蓝牙

                  printf("BT Rcvd: %s\n", (char*)received_buffer);
 8001b2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b30:	4619      	mov	r1, r3
 8001b32:	4858      	ldr	r0, [pc, #352]	@ (8001c94 <main+0x354>)
 8001b34:	f006 fea2 	bl	800887c <iprintf>
                  instruction=(int)received_buffer[0]-48;
 8001b38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3b30      	subs	r3, #48	@ 0x30
 8001b44:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
                  for(int i=0;i<10;i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001b4e:	e010      	b.n	8001b72 <main+0x232>
                  {
                	  printf("%c ",received_buffer[i]);
 8001b50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b54:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8001b58:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	484d      	ldr	r0, [pc, #308]	@ (8001c98 <main+0x358>)
 8001b64:	f006 fe8a 	bl	800887c <iprintf>
                  for(int i=0;i<10;i++)
 8001b68:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001b72:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	ddea      	ble.n	8001b50 <main+0x210>
                  }
                  printf("\n");
 8001b7a:	200a      	movs	r0, #10
 8001b7c:	f006 fe90 	bl	80088a0 <putchar>
              }
          }
          if(instruction==1){
 8001b80:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d111      	bne.n	8001bac <main+0x26c>
        	                                left_right = 3.0f;
 8001b88:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <main+0x35c>)
 8001b8a:	4a45      	ldr	r2, [pc, #276]	@ (8001ca0 <main+0x360>)
 8001b8c:	601a      	str	r2, [r3, #0]
                                      		g_target_linear_speed_mps = 0.02f;
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <main+0x364>)
 8001b90:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <main+0x368>)
 8001b92:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(100);
 8001b94:	2064      	movs	r0, #100	@ 0x64
 8001b96:	f001 fe1f 	bl	80037d8 <HAL_Delay>
                                      	    g_target_linear_speed_mps = 0.0f;
 8001b9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <main+0x364>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(2000);
 8001ba2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ba6:	f001 fe17 	bl	80037d8 <HAL_Delay>
 8001baa:	e08e      	b.n	8001cca <main+0x38a>
                                        }else if(instruction==2){
 8001bac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d111      	bne.n	8001bd8 <main+0x298>
                                        	left_right = 3.0f;
 8001bb4:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <main+0x35c>)
 8001bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca0 <main+0x360>)
 8001bb8:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = -0.02f;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <main+0x364>)
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cac <main+0x36c>)
 8001bbe:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(100);
 8001bc0:	2064      	movs	r0, #100	@ 0x64
 8001bc2:	f001 fe09 	bl	80037d8 <HAL_Delay>
                                           	g_target_linear_speed_mps = 0.0f;
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <main+0x364>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(2000);
 8001bce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bd2:	f001 fe01 	bl	80037d8 <HAL_Delay>
 8001bd6:	e078      	b.n	8001cca <main+0x38a>
                                        }else if(instruction==3){
 8001bd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d115      	bne.n	8001c0c <main+0x2cc>
                                        	left_right = 1.0f;
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <main+0x35c>)
 8001be2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001be6:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.01f;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <main+0x364>)
 8001bea:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <main+0x370>)
 8001bec:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(50);
 8001bee:	2032      	movs	r0, #50	@ 0x32
 8001bf0:	f001 fdf2 	bl	80037d8 <HAL_Delay>
                                           	left_right = 3.0f;
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <main+0x35c>)
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca0 <main+0x360>)
 8001bf8:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.0f;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <main+0x364>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(1500);
 8001c02:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c06:	f001 fde7 	bl	80037d8 <HAL_Delay>
 8001c0a:	e05e      	b.n	8001cca <main+0x38a>
                                        }else if(instruction==4){
 8001c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d14f      	bne.n	8001cb4 <main+0x374>
                                        	left_right = 2.0f;
 8001c14:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <main+0x35c>)
 8001c16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c1a:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.01f;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <main+0x364>)
 8001c1e:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <main+0x370>)
 8001c20:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(50);
 8001c22:	2032      	movs	r0, #50	@ 0x32
 8001c24:	f001 fdd8 	bl	80037d8 <HAL_Delay>
                                           	left_right = 3.0f;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <main+0x35c>)
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <main+0x360>)
 8001c2c:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.0f;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <main+0x364>)
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(1500);
 8001c36:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c3a:	f001 fdcd 	bl	80037d8 <HAL_Delay>
 8001c3e:	e044      	b.n	8001cca <main+0x38a>
 8001c40:	200007ec 	.word	0x200007ec
 8001c44:	20000834 	.word	0x20000834
 8001c48:	0800b3ac 	.word	0x0800b3ac
 8001c4c:	0800b3b8 	.word	0x0800b3b8
 8001c50:	0800b3cc 	.word	0x0800b3cc
 8001c54:	0800b3f0 	.word	0x0800b3f0
 8001c58:	20000294 	.word	0x20000294
 8001c5c:	0800b41c 	.word	0x0800b41c
 8001c60:	0800b444 	.word	0x0800b444
 8001c64:	20000000 	.word	0x20000000
 8001c68:	0800b46c 	.word	0x0800b46c
 8001c6c:	0800b478 	.word	0x0800b478
 8001c70:	0800b490 	.word	0x0800b490
 8001c74:	0800b4a0 	.word	0x0800b4a0
 8001c78:	2000087c 	.word	0x2000087c
 8001c7c:	0800b4bc 	.word	0x0800b4bc
 8001c80:	0800b4e8 	.word	0x0800b4e8
 8001c84:	20000008 	.word	0x20000008
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	0800b50c 	.word	0x0800b50c
 8001c90:	0800b51c 	.word	0x0800b51c
 8001c94:	0800b524 	.word	0x0800b524
 8001c98:	0800b534 	.word	0x0800b534
 8001c9c:	2000001c 	.word	0x2000001c
 8001ca0:	40400000 	.word	0x40400000
 8001ca4:	20000794 	.word	0x20000794
 8001ca8:	3ca3d70a 	.word	0x3ca3d70a
 8001cac:	bca3d70a 	.word	0xbca3d70a
 8001cb0:	3c23d70a 	.word	0x3c23d70a
                                        }else{
                                        	left_right = 3.0f;
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001dec <main+0x4ac>)
 8001cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8001df0 <main+0x4b0>)
 8001cb8:	601a      	str	r2, [r3, #0]
                                      	 	g_target_linear_speed_mps = 0.0f;
 8001cba:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <main+0x4b4>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(1000);
 8001cc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc6:	f001 fd87 	bl	80037d8 <HAL_Delay>




    	      	  static uint32_t print_counter = 0;
    	  if (++print_counter % 100 == 0) { // Print approximately every 1 second (adjust frequency as needed)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <main+0x4b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a49      	ldr	r2, [pc, #292]	@ (8001df8 <main+0x4b8>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <main+0x4b8>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b48      	ldr	r3, [pc, #288]	@ (8001dfc <main+0x4bc>)
 8001cda:	fba3 1302 	umull	r1, r3, r3, r2
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2164      	movs	r1, #100	@ 0x64
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10c      	bne.n	8001d06 <main+0x3c6>
    	       print_counter = 0;
 8001cec:	4b42      	ldr	r3, [pc, #264]	@ (8001df8 <main+0x4b8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

//    	        Calculate current pitch error for printing (error is calculated in the IRQ, but recalculate here for printing convenience)
    	       float current_pitch_error = g_target_pitch_angle - g_pitch_angle;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <main+0x4c0>)
 8001cf4:	ed93 7a00 	vldr	s14, [r3]
 8001cf8:	4b42      	ldr	r3, [pc, #264]	@ (8001e04 <main+0x4c4>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
//    	              g_motor_output_left,  // Final motor output (left)
//    	              g_motor_output_right  // Final motor output (right)
//    	              );
    	  }

    		  ssd1306_Fill(Black);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 fb48 	bl	800239c <ssd1306_Fill>
    		  ssd1306_SetCursor(0, 0);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 fc02 	bl	8002518 <ssd1306_SetCursor>
    		  char angle[64]={0};
 8001d14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d18:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	2340      	movs	r3, #64	@ 0x40
 8001d20:	461a      	mov	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	f006 ff1c 	bl	8008b60 <memset>
    		  sprintf(angle,"Pitch: %.3f",g_pitch_angle);
 8001d28:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <main+0x4c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fc13 	bl	8000558 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	1d38      	adds	r0, r7, #4
 8001d38:	4933      	ldr	r1, [pc, #204]	@ (8001e08 <main+0x4c8>)
 8001d3a:	f006 fe17 	bl	800896c <siprintf>
    		  ssd1306_WriteString(angle, Font_7x10, White);
 8001d3e:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <main+0x4cc>)
 8001d40:	1d38      	adds	r0, r7, #4
 8001d42:	2301      	movs	r3, #1
 8001d44:	ca06      	ldmia	r2, {r1, r2}
 8001d46:	f000 fc87 	bl	8002658 <ssd1306_WriteString>
    		  ssd1306_SetCursor(0, 14);
 8001d4a:	210e      	movs	r1, #14
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 fbe3 	bl	8002518 <ssd1306_SetCursor>
    		  ssd1306_WriteString("Distance:", Font_7x10, White);
 8001d52:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <main+0x4cc>)
 8001d54:	2301      	movs	r3, #1
 8001d56:	ca06      	ldmia	r2, {r1, r2}
 8001d58:	482d      	ldr	r0, [pc, #180]	@ (8001e10 <main+0x4d0>)
 8001d5a:	f000 fc7d 	bl	8002658 <ssd1306_WriteString>
    		  ssd1306_SetCursor(0, 28);
 8001d5e:	211c      	movs	r1, #28
 8001d60:	2000      	movs	r0, #0
 8001d62:	f000 fbd9 	bl	8002518 <ssd1306_SetCursor>

    		  ssd1306_WriteString(PID, Font_7x10, White);
 8001d66:	4a29      	ldr	r2, [pc, #164]	@ (8001e0c <main+0x4cc>)
 8001d68:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	ca06      	ldmia	r2, {r1, r2}
 8001d70:	f000 fc72 	bl	8002658 <ssd1306_WriteString>
    		  ssd1306_UpdateScreen(&hi2c1);
 8001d74:	4827      	ldr	r0, [pc, #156]	@ (8001e14 <main+0x4d4>)
 8001d76:	f000 fb2b 	bl	80023d0 <ssd1306_UpdateScreen>
    		   char msg[64]={0};
 8001d7a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d82:	4618      	mov	r0, r3
 8001d84:	2340      	movs	r3, #64	@ 0x40
 8001d86:	461a      	mov	r2, r3
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f006 fee9 	bl	8008b60 <memset>
    		   sprintf(msg,"Pitch:%f Accel:%f gyro:%f\r\n",g_pitch_angle,g_accel_angle,g_gyro_x_dps);
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <main+0x4c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	4680      	mov	r8, r0
 8001d9a:	4689      	mov	r9, r1
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <main+0x4d8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbd9 	bl	8000558 <__aeabi_f2d>
 8001da6:	4604      	mov	r4, r0
 8001da8:	460d      	mov	r5, r1
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <main+0x4dc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbd2 	bl	8000558 <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001dbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dc0:	e9cd 4500 	strd	r4, r5, [sp]
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	4915      	ldr	r1, [pc, #84]	@ (8001e20 <main+0x4e0>)
 8001dca:	f006 fdcf 	bl	800896c <siprintf>
    	      hc05_transmit_data((uint8_t*)msg, strlen(msg));
 8001dce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fa54 	bl	8000280 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fa92 	bl	800130c <hc05_transmit_data>
    while (1){
 8001de8:	e68b      	b.n	8001b02 <main+0x1c2>
 8001dea:	bf00      	nop
 8001dec:	2000001c 	.word	0x2000001c
 8001df0:	40400000 	.word	0x40400000
 8001df4:	20000794 	.word	0x20000794
 8001df8:	2000033c 	.word	0x2000033c
 8001dfc:	51eb851f 	.word	0x51eb851f
 8001e00:	20000770 	.word	0x20000770
 8001e04:	2000075c 	.word	0x2000075c
 8001e08:	0800b538 	.word	0x0800b538
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	0800b544 	.word	0x0800b544
 8001e14:	20000294 	.word	0x20000294
 8001e18:	20000760 	.word	0x20000760
 8001e1c:	20000764 	.word	0x20000764
 8001e20:	0800b550 	.word	0x0800b550

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	@ 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	2230      	movs	r2, #48	@ 0x30
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f006 fe94 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e58:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e70:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e9c:	23a8      	movs	r3, #168	@ 0xa8
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 f997 	bl	80051e0 <HAL_RCC_OscConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001eb8:	f000 f82c 	bl	8001f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fbf8 	bl	80056d0 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ee6:	f000 f815 	bl	8001f14 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <HAL_UART_RxCpltCallback>:
  * @brief  UART接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    // 调用蓝牙模块的内部回调处理函数
    hc05_uart_rx_callback_handler(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fa1d 	bl	8001344 <hc05_uart_rx_callback_handler>


}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f18:	b672      	cpsid	i
}
 8001f1a:	bf00      	nop
  // 假设是 PA5 (Nucleo 板载 LED)
  // 请确保 led_GPIO_Port 和 led_Pin 宏定义正确
  // 或者直接使用 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  while (1)
  {
    HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); // 使用 main.h 中定义的宏
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <Error_Handler+0x14>)
 8001f20:	f001 fff1 	bl	8003f06 <HAL_GPIO_TogglePin>
 8001f24:	e7fa      	b.n	8001f1c <Error_Handler+0x8>
 8001f26:	bf00      	nop
 8001f28:	40020000 	.word	0x40020000

08001f2c <Motor_Init>:
/**
  * @brief 初始化电机控制模块
  * @note  此函数应在定时器和GPIO初始化之后调用。
  *        它会启动PWM通道。
  */
void Motor_Init(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    // 启动所有四个 PWM 通道
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); } // Motor A AIN1 (Speed/PWM)
 8001f30:	2100      	movs	r1, #0
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <Motor_Init+0x54>)
 8001f34:	f003 fef8 	bl	8005d28 <HAL_TIM_PWM_Start>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <Motor_Init+0x16>
 8001f3e:	f7ff ffe9 	bl	8001f14 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) { Error_Handler(); } // Motor A AIN2 (High/PWM)
 8001f42:	2108      	movs	r1, #8
 8001f44:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <Motor_Init+0x54>)
 8001f46:	f003 feef 	bl	8005d28 <HAL_TIM_PWM_Start>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <Motor_Init+0x28>
 8001f50:	f7ff ffe0 	bl	8001f14 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); } // Motor B BIN1 (Speed/PWM)
 8001f54:	210c      	movs	r1, #12
 8001f56:	480a      	ldr	r0, [pc, #40]	@ (8001f80 <Motor_Init+0x54>)
 8001f58:	f003 fee6 	bl	8005d28 <HAL_TIM_PWM_Start>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <Motor_Init+0x3a>
 8001f62:	f7ff ffd7 	bl	8001f14 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); } // Motor B BIN2 (High/PWM)
 8001f66:	2104      	movs	r1, #4
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <Motor_Init+0x54>)
 8001f6a:	f003 fedd 	bl	8005d28 <HAL_TIM_PWM_Start>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <Motor_Init+0x4c>
 8001f74:	f7ff ffce 	bl	8001f14 <Error_Handler>

    // 初始状态停止电机
    Car_Stop();
 8001f78:	f000 f8c2 	bl	8002100 <Car_Stop>
    // printf("Motor PWM channels started.\r\n");
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200007a4 	.word	0x200007a4

08001f84 <Motor_SetSpeed>:
  * @brief 设置指定电机的速度和方向 (Slow Decay PWM - Two PWM Inputs)
  * @param motor_idx: 电机索引 (MOTOR_A 或 MOTOR_B)
  * @param speed_percent: 速度百分比 (-100 到 100)。
  *                       正值表示前进，负值表示后退，0表示停止。
  */
void Motor_SetSpeed(uint8_t motor_idx, int16_t speed_percent) {
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
    uint32_t pwm_val_for_variable_pin; // 用于可变PWM信号的占空比 (0 = 最快，PWM_PERIOD = 最慢/制动)
    uint32_t pwm_val_for_fixed_pin;    // 用于固定高电平的占空比 (通常是 PWM_PERIOD，表示100%占空比)
    int16_t abs_speed_percent;

    // 限制速度百分比在 -100 到 100 之间
    if (speed_percent > 100) speed_percent = 100;
 8001f94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f98:	2b64      	cmp	r3, #100	@ 0x64
 8001f9a:	dd01      	ble.n	8001fa0 <Motor_SetSpeed+0x1c>
 8001f9c:	2364      	movs	r3, #100	@ 0x64
 8001f9e:	80bb      	strh	r3, [r7, #4]
    if (speed_percent < -100) speed_percent = -100;
 8001fa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fa4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001fa8:	da02      	bge.n	8001fb0 <Motor_SetSpeed+0x2c>
 8001faa:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8001fae:	80bb      	strh	r3, [r7, #4]

    // 获取速度百分比的绝对值用于计算 PWM 幅度
    if (speed_percent >= 0) {
 8001fb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db02      	blt.n	8001fbe <Motor_SetSpeed+0x3a>
        abs_speed_percent = speed_percent;
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	81fb      	strh	r3, [r7, #14]
 8001fbc:	e003      	b.n	8001fc6 <Motor_SetSpeed+0x42>
    } else {
        abs_speed_percent = -speed_percent; // abs(speed_percent)
 8001fbe:	88bb      	ldrh	r3, [r7, #4]
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	81fb      	strh	r3, [r7, #14]
    }

    // 根据速度百分比设置 PWM 值和固定高电平值
    if (speed_percent == 0) {
 8001fc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <Motor_SetSpeed+0x54>
        // 停止 (滑行模式): 两个控制引脚都设为低电平 (0%占空比)
        pwm_val_for_variable_pin = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
        pwm_val_for_fixed_pin = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e023      	b.n	8002020 <Motor_SetSpeed+0x9c>
    } else {
        // 对于慢衰减模式，我们需要的PWM占空比与期望速度成反比。
        // 例如：100% 速度对应 0% PWM 占空比 (0值)
        //       10% 速度对应 90% PWM 占空比 (0.9 * PWM_PERIOD 值)
        pwm_val_for_variable_pin = (uint32_t)((float)(100 - abs_speed_percent) * PWM_PERIOD / 100.0f);
 8001fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fdc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80020c4 <Motor_SetSpeed+0x140>
 8001fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff0:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80020c8 <Motor_SetSpeed+0x144>
 8001ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffc:	ee17 3a90 	vmov	r3, s15
 8002000:	617b      	str	r3, [r7, #20]
        // 确保即使是非常小的非零速度百分比，也能产生实际的驱动。
        // 如果计算出的 pwm_val_for_variable_pin 等于 PWM_PERIOD
        // 而 abs_speed_percent 却大于 0，说明由于浮点精度或PWM_PERIOD值小，
        // 导致计算结果实际是100%占空比，这会导致电机停止（制动效果）。
        // 此时我们将其设置为 PWM_PERIOD - 1，以确保有微小的非零驱动。
        if (abs_speed_percent > 0 && pwm_val_for_variable_pin >= PWM_PERIOD) {
 8002002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002006:	2b00      	cmp	r3, #0
 8002008:	dd07      	ble.n	800201a <Motor_SetSpeed+0x96>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f240 3246 	movw	r2, #838	@ 0x346
 8002010:	4293      	cmp	r3, r2
 8002012:	d902      	bls.n	800201a <Motor_SetSpeed+0x96>
             pwm_val_for_variable_pin = PWM_PERIOD - 1; // 确保不完全制动
 8002014:	f240 3346 	movw	r3, #838	@ 0x346
 8002018:	617b      	str	r3, [r7, #20]
        }

        // 固定高电平的引脚，始终保持100%占空比
        pwm_val_for_fixed_pin = PWM_PERIOD;
 800201a:	f240 3347 	movw	r3, #839	@ 0x347
 800201e:	613b      	str	r3, [r7, #16]
    }

    // 根据电机索引和方向设置对应的 PWM 通道
    if (motor_idx == MOTOR_A) {
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d122      	bne.n	800206c <Motor_SetSpeed+0xe8>
        // Motor A: AIN1 (PA8, TIM1_CH1), AIN2 (PA10, TIM1_CH3)
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: AIN1=High, AIN2=PWM)
 8002026:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	dd08      	ble.n	8002040 <Motor_SetSpeed+0xbc>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin);     // AIN1 = 固定高电平
 800202e:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin);  // AIN2 = 可变PWM
 8002036:	4b25      	ldr	r3, [pc, #148]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	63da      	str	r2, [r3, #60]	@ 0x3c
        } else { // 停止 (speed_percent == 0) - 已在上面统一处理
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
        }
    }
}
 800203e:	e03a      	b.n	80020b6 <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: AIN1=PWM, AIN2=High)
 8002040:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da08      	bge.n	800205a <Motor_SetSpeed+0xd6>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_variable_pin);  // AIN1 = 可变PWM
 8002048:	4b20      	ldr	r3, [pc, #128]	@ (80020cc <Motor_SetSpeed+0x148>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_fixed_pin);     // AIN2 = 固定高电平
 8002050:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002058:	e02d      	b.n	80020b6 <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin); // AIN1 = 0 (实际上是0，因为fixed_pwm_value和variable_pwm_value都为0)
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <Motor_SetSpeed+0x148>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin); // AIN2 = 0
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800206a:	e024      	b.n	80020b6 <Motor_SetSpeed+0x132>
    } else if (motor_idx == MOTOR_B) {
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d121      	bne.n	80020b6 <Motor_SetSpeed+0x132>
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: BIN1=High, BIN2=PWM)
 8002072:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	dd08      	ble.n	800208c <Motor_SetSpeed+0x108>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin);     // BIN1 = 固定高电平
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <Motor_SetSpeed+0x148>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin);  // BIN2 = 可变PWM
 8002082:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800208a:	e014      	b.n	80020b6 <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: BIN1=PWM, BIN2=High)
 800208c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	da08      	bge.n	80020a6 <Motor_SetSpeed+0x122>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_variable_pin);  // BIN1 = 可变PWM
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <Motor_SetSpeed+0x148>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_fixed_pin);     // BIN2 = 固定高电平
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <Motor_SetSpeed+0x148>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020a4:	e007      	b.n	80020b6 <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <Motor_SetSpeed+0x148>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <Motor_SetSpeed+0x148>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	4451c000 	.word	0x4451c000
 80020c8:	42c80000 	.word	0x42c80000
 80020cc:	200007a4 	.word	0x200007a4

080020d0 <Car_Move>:
/**
  * @brief 控制小车整体移动
  * @param speed_A_percent: 电机A的速度百分比 (-100 到 100)
  * @param speed_B_percent: 电机B的速度百分比 (-100 到 100)
  */
void Car_Move(int16_t speed_A_percent, int16_t speed_B_percent) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	4613      	mov	r3, r2
 80020de:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_A, speed_A_percent);
 80020e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e4:	4619      	mov	r1, r3
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff ff4c 	bl	8001f84 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_B, speed_B_percent);
 80020ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f0:	4619      	mov	r1, r3
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff ff46 	bl	8001f84 <Motor_SetSpeed>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <Car_Stop>:
}

/**
  * @brief 小车停止
  */
void Car_Stop(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    Car_Move(0, 0);
 8002104:	2100      	movs	r1, #0
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff ffe2 	bl	80020d0 <Car_Move>
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <ssd1306_WriteCommand>:
 * @brief Sends a command byte to SSD1306.
 * @param hi2c Pointer to I2C handle.
 * @param command Command byte to send.
 * @retval 0 on success, 1 on error.
 */
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af04      	add	r7, sp, #16
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
    if (HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, SSD1306_CMD, 1, &command, 1, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 800211c:	2364      	movs	r3, #100	@ 0x64
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	2301      	movs	r3, #1
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	1cfb      	adds	r3, r7, #3
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	2200      	movs	r2, #0
 800212c:	2178      	movs	r1, #120	@ 0x78
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f002 f848 	bl	80041c4 <HAL_I2C_Mem_Write>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <ssd1306_WriteCommand+0x2e>
        SSD1306_LOG("I2C Error: Write Command 0x%02X failed\n", command);
        return 1; // Error
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <ssd1306_WriteCommand+0x30>
    }
    return 0; // Success
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <ssd1306_WriteData>:
 * @param hi2c Pointer to I2C handle.
 * @param data Pointer to data buffer.
 * @param size Number of bytes to send.
 * @retval 0 on success, 1 on error.
 */
static uint8_t ssd1306_WriteData(I2C_HandleTypeDef *hi2c, uint8_t* data, size_t size) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af04      	add	r7, sp, #16
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
    if (HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, SSD1306_DATA, 1, data, size, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	b29b      	uxth	r3, r3
 8002158:	2264      	movs	r2, #100	@ 0x64
 800215a:	9202      	str	r2, [sp, #8]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	2240      	movs	r2, #64	@ 0x40
 8002166:	2178      	movs	r1, #120	@ 0x78
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f002 f82b 	bl	80041c4 <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <ssd1306_WriteData+0x30>
         SSD1306_LOG("I2C Error: Write Data (%d bytes) failed\n", size);
        return 1; // Error
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <ssd1306_WriteData+0x32>
    }
    return 0; // Success
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <ssd1306_Init>:

/**
 * @brief Initializes the SSD1306 OLED display.
 */
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    // Wait for I2C device ready (important!)
    if (HAL_I2C_IsDeviceReady(hi2c, SSD1306_I2C_ADDR, 3, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 800218c:	2364      	movs	r3, #100	@ 0x64
 800218e:	2203      	movs	r2, #3
 8002190:	2178      	movs	r1, #120	@ 0x78
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f002 fb42 	bl	800481c <HAL_I2C_IsDeviceReady>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <ssd1306_Init+0x1e>
         SSD1306_LOG("I2C Error: Device not ready at address 0x%02X\n", SSD1306_I2C_ADDR);
        return 1; // Device not found or communication error
 800219e:	2301      	movs	r3, #1
 80021a0:	e0f6      	b.n	8002390 <ssd1306_Init+0x20c>
    }

    // Short delay after power-on can sometimes help
    HAL_Delay(100);
 80021a2:	2064      	movs	r0, #100	@ 0x64
 80021a4:	f001 fb18 	bl	80037d8 <HAL_Delay>

    // Initialization Sequence
    if (ssd1306_WriteCommand(hi2c, 0xAE)) return 1; // Display OFF
 80021a8:	21ae      	movs	r1, #174	@ 0xae
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffb0 	bl	8002110 <ssd1306_WriteCommand>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <ssd1306_Init+0x36>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0ea      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD5)) return 1; // Set Display Clock Divide Ratio/Oscillator Frequency
 80021ba:	21d5      	movs	r1, #213	@ 0xd5
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffa7 	bl	8002110 <ssd1306_WriteCommand>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <ssd1306_Init+0x48>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0e1      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x80)) return 1; // Default Ratio 0x80
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff9e 	bl	8002110 <ssd1306_WriteCommand>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <ssd1306_Init+0x5a>
 80021da:	2301      	movs	r3, #1
 80021dc:	e0d8      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xA8)) return 1; // Set MUX Ratio
 80021de:	21a8      	movs	r1, #168	@ 0xa8
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff95 	bl	8002110 <ssd1306_WriteCommand>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <ssd1306_Init+0x6c>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cf      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1)) return 1; // Height - 1 (e.g., 63 for 128x64)
 80021f0:	213f      	movs	r1, #63	@ 0x3f
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff8c 	bl	8002110 <ssd1306_WriteCommand>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <ssd1306_Init+0x7e>
 80021fe:	2301      	movs	r3, #1
 8002200:	e0c6      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD3)) return 1; // Set Display Offset
 8002202:	21d3      	movs	r1, #211	@ 0xd3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff83 	bl	8002110 <ssd1306_WriteCommand>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <ssd1306_Init+0x90>
 8002210:	2301      	movs	r3, #1
 8002212:	e0bd      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x00)) return 1; // No offset
 8002214:	2100      	movs	r1, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff7a 	bl	8002110 <ssd1306_WriteCommand>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <ssd1306_Init+0xa2>
 8002222:	2301      	movs	r3, #1
 8002224:	e0b4      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x40 | 0x0)) return 1; // Set Display Start Line (0)
 8002226:	2140      	movs	r1, #64	@ 0x40
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff71 	bl	8002110 <ssd1306_WriteCommand>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <ssd1306_Init+0xb4>
 8002234:	2301      	movs	r3, #1
 8002236:	e0ab      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x8D)) return 1; // Charge Pump Setting
 8002238:	218d      	movs	r1, #141	@ 0x8d
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff68 	bl	8002110 <ssd1306_WriteCommand>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <ssd1306_Init+0xc6>
 8002246:	2301      	movs	r3, #1
 8002248:	e0a2      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x14)) return 1; // Enable Charge Pump (0x10 to disable if VCC is external)
 800224a:	2114      	movs	r1, #20
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff5f 	bl	8002110 <ssd1306_WriteCommand>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <ssd1306_Init+0xd8>
 8002258:	2301      	movs	r3, #1
 800225a:	e099      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x20)) return 1; // Set Memory Addressing Mode
 800225c:	2120      	movs	r1, #32
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff56 	bl	8002110 <ssd1306_WriteCommand>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <ssd1306_Init+0xea>
 800226a:	2301      	movs	r3, #1
 800226c:	e090      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x00)) return 1; // 0x00 = Horizontal Addressing Mode
 800226e:	2100      	movs	r1, #0
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff4d 	bl	8002110 <ssd1306_WriteCommand>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <ssd1306_Init+0xfc>
 800227c:	2301      	movs	r3, #1
 800227e:	e087      	b.n	8002390 <ssd1306_Init+0x20c>

    // Set Segment Re-map (controls left-right orientation)
    // 0xA1 mirrors horizontally (column 127 is mapped to SEG0)
    // 0xA0 is normal (column 0 is mapped to SEG0)
    if (ssd1306_WriteCommand(hi2c, 0xA1)) return 1; // Choose 0xA0 or 0xA1 based on your wiring/module
 8002280:	21a1      	movs	r1, #161	@ 0xa1
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff44 	bl	8002110 <ssd1306_WriteCommand>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <ssd1306_Init+0x10e>
 800228e:	2301      	movs	r3, #1
 8002290:	e07e      	b.n	8002390 <ssd1306_Init+0x20c>

    // Set COM Output Scan Direction (controls up-down orientation)
    // 0xC8 mirrors vertically (scan from COM[N-1] down to COM0)
    // 0xC0 is normal (scan from COM0 up to COM[N-1])
    if (ssd1306_WriteCommand(hi2c, 0xC8)) return 1; // Choose 0xC0 or 0xC8 based on your wiring/module
 8002292:	21c8      	movs	r1, #200	@ 0xc8
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff3b 	bl	8002110 <ssd1306_WriteCommand>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <ssd1306_Init+0x120>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e075      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xDA)) return 1; // Set COM Pins Hardware Configuration
 80022a4:	21da      	movs	r1, #218	@ 0xda
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff32 	bl	8002110 <ssd1306_WriteCommand>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <ssd1306_Init+0x132>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06c      	b.n	8002390 <ssd1306_Init+0x20c>
    if (SSD1306_HEIGHT == 32) {
        if (ssd1306_WriteCommand(hi2c, 0x02)) return 1; // Config for 128x32
    } else { // Default to 64
         if (ssd1306_WriteCommand(hi2c, 0x12)) return 1; // Config for 128x64
 80022b6:	2112      	movs	r1, #18
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <ssd1306_WriteCommand>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <ssd1306_Init+0x144>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e063      	b.n	8002390 <ssd1306_Init+0x20c>
    }

    if (ssd1306_WriteCommand(hi2c, 0x81)) return 1; // Contrast Control
 80022c8:	2181      	movs	r1, #129	@ 0x81
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff20 	bl	8002110 <ssd1306_WriteCommand>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <ssd1306_Init+0x156>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e05a      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xCF)) return 1; // Set Contrast Value (adjust as needed 0x00-0xFF)
 80022da:	21cf      	movs	r1, #207	@ 0xcf
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff17 	bl	8002110 <ssd1306_WriteCommand>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <ssd1306_Init+0x168>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e051      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD9)) return 1; // Set Pre-charge Period
 80022ec:	21d9      	movs	r1, #217	@ 0xd9
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff0e 	bl	8002110 <ssd1306_WriteCommand>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <ssd1306_Init+0x17a>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e048      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xF1)) return 1; // Recommended value
 80022fe:	21f1      	movs	r1, #241	@ 0xf1
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff05 	bl	8002110 <ssd1306_WriteCommand>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <ssd1306_Init+0x18c>
 800230c:	2301      	movs	r3, #1
 800230e:	e03f      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xDB)) return 1; // Set VCOMH Deselect Level
 8002310:	21db      	movs	r1, #219	@ 0xdb
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fefc 	bl	8002110 <ssd1306_WriteCommand>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <ssd1306_Init+0x19e>
 800231e:	2301      	movs	r3, #1
 8002320:	e036      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x40)) return 1; // Recommended value 0x40 (~0.77 VCC)
 8002322:	2140      	movs	r1, #64	@ 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fef3 	bl	8002110 <ssd1306_WriteCommand>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <ssd1306_Init+0x1b0>
 8002330:	2301      	movs	r3, #1
 8002332:	e02d      	b.n	8002390 <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xA4)) return 1; // Set Entire Display ON/OFF (A4=Output follows RAM, A5=Output ignores RAM)
 8002334:	21a4      	movs	r1, #164	@ 0xa4
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff feea 	bl	8002110 <ssd1306_WriteCommand>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <ssd1306_Init+0x1c2>
 8002342:	2301      	movs	r3, #1
 8002344:	e024      	b.n	8002390 <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xA6)) return 1; // Set Normal/Inverse Display (A6=Normal, A7=Inverse)
 8002346:	21a6      	movs	r1, #166	@ 0xa6
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fee1 	bl	8002110 <ssd1306_WriteCommand>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <ssd1306_Init+0x1d4>
 8002354:	2301      	movs	r3, #1
 8002356:	e01b      	b.n	8002390 <ssd1306_Init+0x20c>

    // Clear screen buffer
    ssd1306_Fill(Black);
 8002358:	2000      	movs	r0, #0
 800235a:	f000 f81f 	bl	800239c <ssd1306_Fill>
    // Send buffer to screen RAM (initial clear)
    // No need to check return here, as failure likely means init already failed
    ssd1306_UpdateScreen(hi2c); // Ignore return value here, focus on init commands
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f836 	bl	80023d0 <ssd1306_UpdateScreen>

    // Turn display ON
    if (ssd1306_WriteCommand(hi2c, 0xAF)) return 1;
 8002364:	21af      	movs	r1, #175	@ 0xaf
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fed2 	bl	8002110 <ssd1306_WriteCommand>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <ssd1306_Init+0x1f2>
 8002372:	2301      	movs	r3, #1
 8002374:	e00c      	b.n	8002390 <ssd1306_Init+0x20c>

    // Initialize state
    SSD1306.CurrentX = 0;
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <ssd1306_Init+0x214>)
 8002378:	2200      	movs	r2, #0
 800237a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <ssd1306_Init+0x214>)
 800237e:	2200      	movs	r2, #0
 8002380:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <ssd1306_Init+0x214>)
 8002384:	2201      	movs	r2, #1
 8002386:	715a      	strb	r2, [r3, #5]
    SSD1306.Inverted = 0; // Default to non-inverted
 8002388:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <ssd1306_Init+0x214>)
 800238a:	2200      	movs	r2, #0
 800238c:	711a      	strb	r2, [r3, #4]

    SSD1306_LOG("SSD1306 Initialized Successfully.\n");
    return 0; // Initialization successful
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000740 	.word	0x20000740

0800239c <ssd1306_Fill>:

/**
 * @brief Fills the entire screen buffer with a specified color.
 */
void ssd1306_Fill(SSD1306_COLOR color) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
    uint8_t fill_byte = (color == Black) ? 0x00 : 0xFF;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <ssd1306_Fill+0x14>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <ssd1306_Fill+0x16>
 80023b0:	23ff      	movs	r3, #255	@ 0xff
 80023b2:	73fb      	strb	r3, [r7, #15]
    memset(SSD1306_Buffer, fill_byte, sizeof(SSD1306_Buffer));
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ba:	4619      	mov	r1, r3
 80023bc:	4803      	ldr	r0, [pc, #12]	@ (80023cc <ssd1306_Fill+0x30>)
 80023be:	f006 fbcf 	bl	8008b60 <memset>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000340 	.word	0x20000340

080023d0 <ssd1306_UpdateScreen>:

/**
 * @brief Sends the screen buffer content to the OLED display RAM.
 */
uint8_t ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    if (!SSD1306.Initialized) return 1; // Don't update if not initialized
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <ssd1306_UpdateScreen+0xa0>)
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <ssd1306_UpdateScreen+0x14>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e041      	b.n	8002468 <ssd1306_UpdateScreen+0x98>

    // Set Column Address Range (0 - 127)
    if (ssd1306_WriteCommand(hi2c, 0x21)) return 1; // Set column address
 80023e4:	2121      	movs	r1, #33	@ 0x21
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fe92 	bl	8002110 <ssd1306_WriteCommand>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <ssd1306_UpdateScreen+0x26>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e038      	b.n	8002468 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, 0)) return 1;    // Column start address (0)
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fe89 	bl	8002110 <ssd1306_WriteCommand>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <ssd1306_UpdateScreen+0x38>
 8002404:	2301      	movs	r3, #1
 8002406:	e02f      	b.n	8002468 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, SSD1306_WIDTH - 1)) return 1; // Column end address (127)
 8002408:	217f      	movs	r1, #127	@ 0x7f
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fe80 	bl	8002110 <ssd1306_WriteCommand>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <ssd1306_UpdateScreen+0x4a>
 8002416:	2301      	movs	r3, #1
 8002418:	e026      	b.n	8002468 <ssd1306_UpdateScreen+0x98>

    // Set Page Address Range (0 - 7 for 64 high, 0-3 for 32 high)
    if (ssd1306_WriteCommand(hi2c, 0x22)) return 1; // Set page address
 800241a:	2122      	movs	r1, #34	@ 0x22
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fe77 	bl	8002110 <ssd1306_WriteCommand>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <ssd1306_UpdateScreen+0x5c>
 8002428:	2301      	movs	r3, #1
 800242a:	e01d      	b.n	8002468 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, 0)) return 1;    // Page start address (0)
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fe6e 	bl	8002110 <ssd1306_WriteCommand>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <ssd1306_UpdateScreen+0x6e>
 800243a:	2301      	movs	r3, #1
 800243c:	e014      	b.n	8002468 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, (SSD1306_HEIGHT / 8) - 1)) return 1; // Page end address
 800243e:	2107      	movs	r1, #7
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fe65 	bl	8002110 <ssd1306_WriteCommand>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <ssd1306_UpdateScreen+0x80>
 800244c:	2301      	movs	r3, #1
 800244e:	e00b      	b.n	8002468 <ssd1306_UpdateScreen+0x98>

    // Send the entire buffer data
    if (ssd1306_WriteData(hi2c, SSD1306_Buffer, sizeof(SSD1306_Buffer))) {
 8002450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002454:	4907      	ldr	r1, [pc, #28]	@ (8002474 <ssd1306_UpdateScreen+0xa4>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fe76 	bl	8002148 <ssd1306_WriteData>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <ssd1306_UpdateScreen+0x96>
        return 1; // I2C data transfer failed
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <ssd1306_UpdateScreen+0x98>
    }

    return 0; // Success
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000740 	.word	0x20000740
 8002474:	20000340 	.word	0x20000340

08002478 <ssd1306_DrawPixel>:

/**
 * @brief Draws a single pixel at the specified coordinates in the buffer.
 */
void ssd1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR color) {
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
 8002482:	460b      	mov	r3, r1
 8002484:	80bb      	strh	r3, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	70fb      	strb	r3, [r7, #3]
    // Check boundaries
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b7f      	cmp	r3, #127	@ 0x7f
 800248e:	d838      	bhi.n	8002502 <ssd1306_DrawPixel+0x8a>
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	2b3f      	cmp	r3, #63	@ 0x3f
 8002494:	d835      	bhi.n	8002502 <ssd1306_DrawPixel+0x8a>
        return; // Out of bounds
    }

    // Handle inversion if needed
    if (SSD1306.Inverted) {
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <ssd1306_DrawPixel+0x98>)
 8002498:	791b      	ldrb	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	70fb      	strb	r3, [r7, #3]
    }

    // Calculate buffer index and bit mask
    // Buffer is organized as horizontal pages of 8 rows
    uint16_t byte_index = x + (y / 8) * SSD1306_WIDTH;
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	01db      	lsls	r3, r3, #7
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4413      	add	r3, r2
 80024ba:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_mask = 1 << (y % 8);
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	737b      	strb	r3, [r7, #13]

    // Modify buffer
    if (color == White) {
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d109      	bne.n	80024e4 <ssd1306_DrawPixel+0x6c>
        SSD1306_Buffer[byte_index] |= bit_mask;  // Set bit
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <ssd1306_DrawPixel+0x9c>)
 80024d4:	5cd1      	ldrb	r1, [r2, r3]
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	7b7a      	ldrb	r2, [r7, #13]
 80024da:	430a      	orrs	r2, r1
 80024dc:	b2d1      	uxtb	r1, r2
 80024de:	4a0d      	ldr	r2, [pc, #52]	@ (8002514 <ssd1306_DrawPixel+0x9c>)
 80024e0:	54d1      	strb	r1, [r2, r3]
 80024e2:	e00f      	b.n	8002504 <ssd1306_DrawPixel+0x8c>
    } else {
        SSD1306_Buffer[byte_index] &= ~bit_mask; // Clear bit
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002514 <ssd1306_DrawPixel+0x9c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	b25a      	sxtb	r2, r3
 80024ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	4013      	ands	r3, r2
 80024f6:	b25a      	sxtb	r2, r3
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	b2d1      	uxtb	r1, r2
 80024fc:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <ssd1306_DrawPixel+0x9c>)
 80024fe:	54d1      	strb	r1, [r2, r3]
 8002500:	e000      	b.n	8002504 <ssd1306_DrawPixel+0x8c>
        return; // Out of bounds
 8002502:	bf00      	nop
    }
}
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000740 	.word	0x20000740
 8002514:	20000340 	.word	0x20000340

08002518 <ssd1306_SetCursor>:

/**
 * @brief Sets the current cursor position for text writing.
 */
void ssd1306_SetCursor(uint16_t x, uint16_t y) {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	460a      	mov	r2, r1
 8002522:	80fb      	strh	r3, [r7, #6]
 8002524:	4613      	mov	r3, r2
 8002526:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = (x < SSD1306_WIDTH) ? x : SSD1306_WIDTH -1;
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b7f      	cmp	r3, #127	@ 0x7f
 800252c:	bf28      	it	cs
 800252e:	237f      	movcs	r3, #127	@ 0x7f
 8002530:	b29a      	uxth	r2, r3
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <ssd1306_SetCursor+0x38>)
 8002534:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = (y < SSD1306_HEIGHT) ? y : SSD1306_HEIGHT -1;
 8002536:	88bb      	ldrh	r3, [r7, #4]
 8002538:	2b3f      	cmp	r3, #63	@ 0x3f
 800253a:	bf28      	it	cs
 800253c:	233f      	movcs	r3, #63	@ 0x3f
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <ssd1306_SetCursor+0x38>)
 8002542:	805a      	strh	r2, [r3, #2]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	20000740 	.word	0x20000740

08002554 <ssd1306_WriteChar>:


/**
 * @brief Writes a single character to the screen buffer (Modified Logic).
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b08b      	sub	sp, #44	@ 0x2c
 8002558:	af00      	add	r7, sp, #0
 800255a:	4604      	mov	r4, r0
 800255c:	1d38      	adds	r0, r7, #4
 800255e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002562:	461a      	mov	r2, r3
 8002564:	4623      	mov	r3, r4
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	4613      	mov	r3, r2
 800256a:	73bb      	strb	r3, [r7, #14]
    // Handle non-printable ASCII characters or replace with space
    if (ch < ' ' || ch > '~') {
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b1f      	cmp	r3, #31
 8002570:	d902      	bls.n	8002578 <ssd1306_WriteChar+0x24>
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b7e      	cmp	r3, #126	@ 0x7e
 8002576:	d901      	bls.n	800257c <ssd1306_WriteChar+0x28>
        ch = ' '; // Replace unsupported characters with a space
 8002578:	2320      	movs	r3, #32
 800257a:	73fb      	strb	r3, [r7, #15]
    }

    // Check remaining space on screen
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800257c:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <ssd1306_WriteChar+0x100>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	793b      	ldrb	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	2b7f      	cmp	r3, #127	@ 0x7f
 8002588:	dc06      	bgt.n	8002598 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800258a:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <ssd1306_WriteChar+0x100>)
 800258c:	885b      	ldrh	r3, [r3, #2]
 800258e:	461a      	mov	r2, r3
 8002590:	797b      	ldrb	r3, [r7, #5]
 8002592:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002594:	2b3f      	cmp	r3, #63	@ 0x3f
 8002596:	dd01      	ble.n	800259c <ssd1306_WriteChar+0x48>
        // Not enough space to draw the character fully
        SSD1306_LOG("WriteChar Error: Not enough space for char '%c' at (%d, %d)\n", ch, SSD1306.CurrentX, SSD1306.CurrentY);
        return 0; // Indicate failure (no space)
 8002598:	2300      	movs	r3, #0
 800259a:	e056      	b.n	800264a <ssd1306_WriteChar+0xf6>
    }

    // Calculate offset in the font data array
    // Assumes font data is Width bytes per char, contiguous for ASCII ' ' through '~'
    // Assumes Font.data is uint8_t* as corrected in header
    const uint8_t* font_char_ptr = &Font.data[(ch - ' ') * Font.FontWidth];
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	3a20      	subs	r2, #32
 80025a2:	7939      	ldrb	r1, [r7, #4]
 80025a4:	fb01 f202 	mul.w	r2, r1, r2
 80025a8:	4413      	add	r3, r2
 80025aa:	61fb      	str	r3, [r7, #28]

    // Draw character column by column
    for (uint32_t i = 0; i < Font.FontWidth; i++) { // Iterate through columns
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	e03e      	b.n	8002630 <ssd1306_WriteChar+0xdc>
        uint8_t column_data = font_char_ptr[i];     // Get the byte representing the column (8 pixels)
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	76fb      	strb	r3, [r7, #27]

        for (uint32_t j = 0; j < 8; j++) {          // Iterate through the 8 pixels in the column byte
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	e030      	b.n	8002624 <ssd1306_WriteChar+0xd0>
            // Check if the pixel is within the defined FontHeight
            if (j >= Font.FontHeight) {
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	461a      	mov	r2, r3
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d227      	bcs.n	800261c <ssd1306_WriteChar+0xc8>
                continue; // Don't draw pixels beyond the font's defined height
            }

            // Calculate target pixel coordinates
            uint16_t target_x = SSD1306.CurrentX + i;
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <ssd1306_WriteChar+0x100>)
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	833b      	strh	r3, [r7, #24]
            uint16_t target_y = SSD1306.CurrentY + j;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <ssd1306_WriteChar+0x100>)
 80025da:	885a      	ldrh	r2, [r3, #2]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	82fb      	strh	r3, [r7, #22]

            // Check if the current pixel bit is set in the font data
            if ((column_data >> j) & 0x01) {
 80025e4:	7efa      	ldrb	r2, [r7, #27]
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	fa42 f303 	asr.w	r3, r2, r3
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <ssd1306_WriteChar+0xae>
                ssd1306_DrawPixel(target_x, target_y, color); // Draw foreground pixel
 80025f4:	7bba      	ldrb	r2, [r7, #14]
 80025f6:	8af9      	ldrh	r1, [r7, #22]
 80025f8:	8b3b      	ldrh	r3, [r7, #24]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff3c 	bl	8002478 <ssd1306_DrawPixel>
 8002600:	e00d      	b.n	800261e <ssd1306_WriteChar+0xca>
            } else {
                // Draw background pixel (important to overwrite previous content)
                ssd1306_DrawPixel(target_x, target_y, (SSD1306_COLOR)!color);
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	8af9      	ldrh	r1, [r7, #22]
 8002612:	8b3b      	ldrh	r3, [r7, #24]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff2f 	bl	8002478 <ssd1306_DrawPixel>
 800261a:	e000      	b.n	800261e <ssd1306_WriteChar+0xca>
                continue; // Don't draw pixels beyond the font's defined height
 800261c:	bf00      	nop
        for (uint32_t j = 0; j < 8; j++) {          // Iterate through the 8 pixels in the column byte
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	3301      	adds	r3, #1
 8002622:	623b      	str	r3, [r7, #32]
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b07      	cmp	r3, #7
 8002628:	d9cb      	bls.n	80025c2 <ssd1306_WriteChar+0x6e>
    for (uint32_t i = 0; i < Font.FontWidth; i++) { // Iterate through columns
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	3301      	adds	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002630:	793b      	ldrb	r3, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	4293      	cmp	r3, r2
 8002638:	d3bb      	bcc.n	80025b2 <ssd1306_WriteChar+0x5e>
         //       unless the font data format and this loop are adapted.
         //       For the provided Font7x10_Table, this is likely the intended behavior.
    }

    // Update cursor position for the next character
    SSD1306.CurrentX += Font.FontWidth;
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <ssd1306_WriteChar+0x100>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	793a      	ldrb	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <ssd1306_WriteChar+0x100>)
 8002646:	801a      	strh	r2, [r3, #0]

    return ch; // Return the character that was written
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	372c      	adds	r7, #44	@ 0x2c
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000740 	.word	0x20000740

08002658 <ssd1306_WriteString>:

/**
 * @brief Writes a string to the screen buffer.
 */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	1d38      	adds	r0, r7, #4
 8002662:	e880 0006 	stmia.w	r0, {r1, r2}
 8002666:	70fb      	strb	r3, [r7, #3]
    char last_char_written = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
    while (*str) {
 800266c:	e030      	b.n	80026d0 <ssd1306_WriteString+0x78>
        // Handle newline character '\n'
        if (*str == '\n') {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b0a      	cmp	r3, #10
 8002674:	d111      	bne.n	800269a <ssd1306_WriteString+0x42>
            SSD1306.CurrentX = 0; // Move cursor to beginning of the line
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
            SSD1306.CurrentY += Font.FontHeight; // Move cursor down one font height
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 800267e:	885b      	ldrh	r3, [r3, #2]
 8002680:	797a      	ldrb	r2, [r7, #5]
 8002682:	4413      	add	r3, r2
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 8002688:	805a      	strh	r2, [r3, #2]
            // Optional: Implement screen wrap-around or scrolling if Y exceeds height
            if (SSD1306.CurrentY >= SSD1306_HEIGHT) {
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 800268c:	885b      	ldrh	r3, [r3, #2]
 800268e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002690:	d91b      	bls.n	80026ca <ssd1306_WriteString+0x72>
                 SSD1306.CurrentY = 0; // Simple wrap-around to top
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 8002694:	2200      	movs	r2, #0
 8002696:	805a      	strh	r2, [r3, #2]
 8002698:	e017      	b.n	80026ca <ssd1306_WriteString+0x72>
            }
        }
        // Handle carriage return '\r' (often ignored or treated like \n)
        else if (*str == '\r') {
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b0d      	cmp	r3, #13
 80026a0:	d103      	bne.n	80026aa <ssd1306_WriteString+0x52>
             SSD1306.CurrentX = 0; // Move cursor to beginning of the line
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <ssd1306_WriteString+0x8c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e00f      	b.n	80026ca <ssd1306_WriteString+0x72>
        }
        // Write normal character
        else {
            char written_char = ssd1306_WriteChar(*str, Font, color);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	7818      	ldrb	r0, [r3, #0]
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	ca06      	ldmia	r2, {r1, r2}
 80026b4:	f7ff ff4e 	bl	8002554 <ssd1306_WriteChar>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75bb      	strb	r3, [r7, #22]
            if (written_char == 0) {
 80026bc:	7dbb      	ldrb	r3, [r7, #22]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <ssd1306_WriteString+0x6e>
                // Writing failed (likely out of space), stop processing the string
                 SSD1306_LOG("WriteString Error: Failed to write char '%c', stopping.\n", *str);
                return last_char_written; // Return the last char that *was* successfully written
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	e009      	b.n	80026da <ssd1306_WriteString+0x82>
            }
            last_char_written = written_char;
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	75fb      	strb	r3, [r7, #23]
        }
        str++; // Move to the next character in the string
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ca      	bne.n	800266e <ssd1306_WriteString+0x16>
    }
    return last_char_written; // Return the last character written from the string
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000740 	.word	0x20000740

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	@ (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <MemManage_Handler+0x4>

08002750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <UsageFault_Handler+0x4>

08002760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278e:	f001 f803 	bl	8003798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b096      	sub	sp, #88	@ 0x58
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800279e:	481e      	ldr	r0, [pc, #120]	@ (8002818 <TIM5_IRQHandler+0x80>)
 80027a0:	f003 fca6 	bl	80060f0 <HAL_TIM_IRQHandler>
	// -------------------------------------------------------------------------

	// 1. 读取当前编码器计数值
	// 注意：TIM3用于左轮，TIM4用于右轮。编码器模式下，计数器会自动增减，反映方向。
	// 读取后，立即清零计数器，以便下一个控制周期重新计数。
	uint16_t current_count_left = __HAL_TIM_GET_COUNTER(&htim3);
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <TIM5_IRQHandler+0x84>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
//	__HAL_TIM_SET_COUNTER(&htim3, 0); // 将左轮编码器计数器清零

	uint16_t current_count_right = __HAL_TIM_GET_COUNTER(&htim4);
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <TIM5_IRQHandler+0x88>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

	// 2. 计算每个控制周期内的编码器计数差值 (delta)
	// 由于计数器已清零，delta就是本次读取到的值。将其转换为int32_t以便处理负值。
//	g_encoder_delta_left = - (int32_t)current_count_left; // 加了个负号因为是相反的
//	g_encoder_delta_right = (int32_t)current_count_right;
	int32_t delta_left = (int32_t)current_count_left - (int32_t)g_encoder_count_left_prev;
 80027b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <TIM5_IRQHandler+0x8c>)
 80027be:	8812      	ldrh	r2, [r2, #0]
 80027c0:	b292      	uxth	r2, r2
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	657b      	str	r3, [r7, #84]	@ 0x54
	int32_t delta_right = (int32_t)current_count_right - (int32_t)g_encoder_count_right_prev;
 80027c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80027ca:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <TIM5_IRQHandler+0x90>)
 80027cc:	8812      	ldrh	r2, [r2, #0]
 80027ce:	b292      	uxth	r2, r2
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	653b      	str	r3, [r7, #80]	@ 0x50

	// 处理环绕 (Overflow/Underflow)
	// 如果差值的绝对值大于计数器周期的一半 (65535 / 2 = 32767.5)
	const int32_t HALF_PERIOD = 65536 / 2; // Using 65536 for uint16_t period
 80027d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int32_t FULL_PERIOD = 65536;
 80027da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027de:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (delta_left > HALF_PERIOD) { // 向下溢出 (例如从很小的正数跳到很大的正数)
 80027e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dd04      	ble.n	80027f2 <TIM5_IRQHandler+0x5a>
	    delta_left -= FULL_PERIOD;
 80027e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80027f0:	e008      	b.n	8002804 <TIM5_IRQHandler+0x6c>
	} else if (delta_left < -HALF_PERIOD) { // 向上溢出 (例如从很小的负数(大无符号数)跳到很小的负数)
 80027f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f4:	425b      	negs	r3, r3
 80027f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027f8:	429a      	cmp	r2, r3
 80027fa:	da03      	bge.n	8002804 <TIM5_IRQHandler+0x6c>
	    delta_left += FULL_PERIOD;
 80027fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002800:	4413      	add	r3, r2
 8002802:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	if (delta_right > HALF_PERIOD) { // 向下溢出
 8002804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002808:	429a      	cmp	r2, r3
 800280a:	dd0f      	ble.n	800282c <TIM5_IRQHandler+0x94>
	    delta_right -= FULL_PERIOD;
 800280c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	653b      	str	r3, [r7, #80]	@ 0x50
 8002814:	e013      	b.n	800283e <TIM5_IRQHandler+0xa6>
 8002816:	bf00      	nop
 8002818:	2000087c 	.word	0x2000087c
 800281c:	200007ec 	.word	0x200007ec
 8002820:	20000834 	.word	0x20000834
 8002824:	20000778 	.word	0x20000778
 8002828:	2000077a 	.word	0x2000077a
	} else if (delta_right < -HALF_PERIOD) { // 向上溢出
 800282c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282e:	425b      	negs	r3, r3
 8002830:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002832:	429a      	cmp	r2, r3
 8002834:	da03      	bge.n	800283e <TIM5_IRQHandler+0xa6>
	    delta_right += FULL_PERIOD;
 8002836:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	4413      	add	r3, r2
 800283c:	653b      	str	r3, [r7, #80]	@ 0x50
	// 3. **修正编码器计数方向**
	// 根据你的测试，左轮计数方向与右轮相反
	// 假设我们希望小车前进时，左右轮计数delta都为正。
	// 右轮：前转 -> 向上计数 (正 delta) - 保持不变
	// 左轮：前转 -> 向下计数 (负 delta) - 需要反转符号
	g_encoder_delta_left = -delta_left; // 反转左轮计数差值的符号
 800283e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002840:	425b      	negs	r3, r3
 8002842:	4ac6      	ldr	r2, [pc, #792]	@ (8002b5c <TIM5_IRQHandler+0x3c4>)
 8002844:	6013      	str	r3, [r2, #0]
	g_encoder_delta_right = delta_right; // 右轮保持不变
 8002846:	4ac6      	ldr	r2, [pc, #792]	@ (8002b60 <TIM5_IRQHandler+0x3c8>)
 8002848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284a:	6013      	str	r3, [r2, #0]


	// 4. 更新上一次的计数值
	g_encoder_count_left_prev = current_count_left;
 800284c:	4ac5      	ldr	r2, [pc, #788]	@ (8002b64 <TIM5_IRQHandler+0x3cc>)
 800284e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002852:	8013      	strh	r3, [r2, #0]
	g_encoder_count_right_prev = current_count_right;
 8002854:	4ac4      	ldr	r2, [pc, #784]	@ (8002b68 <TIM5_IRQHandler+0x3d0>)
 8002856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800285a:	8013      	strh	r3, [r2, #0]

	// 5. 将编码器计数差值转换为轮子转速 (转/秒, RPS)
	// 转速 = (计数差值 / 每转总计数) / 控制周期时间
	g_left_wheel_speed_rps = (float)g_encoder_delta_left / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 800285c:	4bbf      	ldr	r3, [pc, #764]	@ (8002b5c <TIM5_IRQHandler+0x3c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002868:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8002b6c <TIM5_IRQHandler+0x3d4>
 800286c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002870:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002b70 <TIM5_IRQHandler+0x3d8>
 8002874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002878:	4bbe      	ldr	r3, [pc, #760]	@ (8002b74 <TIM5_IRQHandler+0x3dc>)
 800287a:	edc3 7a00 	vstr	s15, [r3]
	g_right_wheel_speed_rps = (float)g_encoder_delta_right / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 800287e:	4bb8      	ldr	r3, [pc, #736]	@ (8002b60 <TIM5_IRQHandler+0x3c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288a:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8002b6c <TIM5_IRQHandler+0x3d4>
 800288e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002892:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8002b70 <TIM5_IRQHandler+0x3d8>
 8002896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289a:	4bb7      	ldr	r3, [pc, #732]	@ (8002b78 <TIM5_IRQHandler+0x3e0>)
 800289c:	edc3 7a00 	vstr	s15, [r3]

	// 6. 将轮子转速转换为小车线速度 (米/秒, MPS)
	// 线速度 = 转速 * 车轮周长
	// 车轮周长 = PI * 直径
	float wheel_circumference = WHEEL_DIAMETER_M * M_PI;
 80028a0:	4bb6      	ldr	r3, [pc, #728]	@ (8002b7c <TIM5_IRQHandler+0x3e4>)
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
	float left_wheel_linear_speed_mps = g_left_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 80028a4:	4bb3      	ldr	r3, [pc, #716]	@ (8002b74 <TIM5_IRQHandler+0x3dc>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002b80 <TIM5_IRQHandler+0x3e8>
 80028ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float right_wheel_linear_speed_mps = g_right_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 80028b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002b78 <TIM5_IRQHandler+0x3e0>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002b80 <TIM5_IRQHandler+0x3e8>
 80028c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// 7. 计算小车整体的线速度和角速度
	// 小车线速度 (向前/向后) 是左右轮线速度的平均值
	g_robot_linear_speed_mps = (left_wheel_linear_speed_mps + right_wheel_linear_speed_mps) / 2.0f;
 80028c8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80028cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	4ba9      	ldr	r3, [pc, #676]	@ (8002b84 <TIM5_IRQHandler+0x3ec>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
//	 g_robot_linear_speed_mps = -g_robot_linear_speed_mps;
//	 printf("g_robot_linear_speed_mps: %d", g_robot_linear_speed_mps);


	// 小车角速度 (原地转弯) 是左右轮线速度的差值除以轮距
	float angular_speed_radps = (right_wheel_linear_speed_mps - left_wheel_linear_speed_mps) / WHEEL_TRACK_M;
 80028e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80028e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80028ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ee:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8002b88 <TIM5_IRQHandler+0x3f0>
 80028f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	// 将弧度/秒转换为度/秒
	g_robot_angular_speed_dps = angular_speed_radps * (180.0f / M_PI);
 80028fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80028fe:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8002b8c <TIM5_IRQHandler+0x3f4>
 8002902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002906:	4ba2      	ldr	r3, [pc, #648]	@ (8002b90 <TIM5_IRQHandler+0x3f8>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 姿态数据处理 (MPU6500) BEGIN
	// -------------------------------------------------------------------------

	// Read raw sensor data from MPU6500
	mpu6500_read_accel_raw(&g_accel_x_raw, &g_accel_y_raw, &g_accel_z_raw);
 800290c:	4aa1      	ldr	r2, [pc, #644]	@ (8002b94 <TIM5_IRQHandler+0x3fc>)
 800290e:	49a2      	ldr	r1, [pc, #648]	@ (8002b98 <TIM5_IRQHandler+0x400>)
 8002910:	48a2      	ldr	r0, [pc, #648]	@ (8002b9c <TIM5_IRQHandler+0x404>)
 8002912:	f7fe fb37 	bl	8000f84 <mpu6500_read_accel_raw>
	mpu6500_read_gyro_raw(&g_gyro_x_raw, &g_gyro_y_raw, &g_gyro_z_raw);
 8002916:	4aa2      	ldr	r2, [pc, #648]	@ (8002ba0 <TIM5_IRQHandler+0x408>)
 8002918:	49a2      	ldr	r1, [pc, #648]	@ (8002ba4 <TIM5_IRQHandler+0x40c>)
 800291a:	48a3      	ldr	r0, [pc, #652]	@ (8002ba8 <TIM5_IRQHandler+0x410>)
 800291c:	f7fe fb76 	bl	800100c <mpu6500_read_gyro_raw>

	// Apply bias correction to Gyro raw data
	int16_t gyro_x_corrected_raw = g_gyro_x_raw - g_gyro_x_bias_raw;
 8002920:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba8 <TIM5_IRQHandler+0x410>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b21b      	sxth	r3, r3
 8002926:	b29a      	uxth	r2, r3
 8002928:	4ba0      	ldr	r3, [pc, #640]	@ (8002bac <TIM5_IRQHandler+0x414>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b21b      	sxth	r3, r3
 800292e:	b29b      	uxth	r3, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t gyro_y_corrected_raw = g_gyro_y_raw - g_gyro_y_bias_raw;
 8002936:	4b9b      	ldr	r3, [pc, #620]	@ (8002ba4 <TIM5_IRQHandler+0x40c>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b21b      	sxth	r3, r3
 800293c:	b29a      	uxth	r2, r3
 800293e:	4b9c      	ldr	r3, [pc, #624]	@ (8002bb0 <TIM5_IRQHandler+0x418>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b21b      	sxth	r3, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t gyro_z_corrected_raw = g_gyro_z_raw - g_gyro_z_bias_raw;
 800294c:	4b94      	ldr	r3, [pc, #592]	@ (8002ba0 <TIM5_IRQHandler+0x408>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b21b      	sxth	r3, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b97      	ldr	r3, [pc, #604]	@ (8002bb4 <TIM5_IRQHandler+0x41c>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b21b      	sxth	r3, r3
 800295a:	b29b      	uxth	r3, r3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	b29b      	uxth	r3, r3
 8002960:	847b      	strh	r3, [r7, #34]	@ 0x22

	// Convert bias-corrected Gyro data and raw Accel data to physical units
	float accel_x_g = (float)g_accel_x_raw / ACCEL_SENSITIVITY_2G;
 8002962:	4b8e      	ldr	r3, [pc, #568]	@ (8002b9c <TIM5_IRQHandler+0x404>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b21b      	sxth	r3, r3
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002970:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8002bb8 <TIM5_IRQHandler+0x420>
 8002974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002978:	edc7 7a07 	vstr	s15, [r7, #28]
	float accel_y_g = (float)g_accel_y_raw / ACCEL_SENSITIVITY_2G;
 800297c:	4b86      	ldr	r3, [pc, #536]	@ (8002b98 <TIM5_IRQHandler+0x400>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b21b      	sxth	r3, r3
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800298a:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8002bb8 <TIM5_IRQHandler+0x420>
 800298e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002992:	edc7 7a06 	vstr	s15, [r7, #24]
	float accel_z_g = (float)g_accel_z_raw / ACCEL_SENSITIVITY_2G;
 8002996:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <TIM5_IRQHandler+0x3fc>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b21b      	sxth	r3, r3
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a4:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8002bb8 <TIM5_IRQHandler+0x420>
 80029a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ac:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	g_gyro_x_dps = (float)gyro_x_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Pitch rate
 80029b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029bc:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002bbc <TIM5_IRQHandler+0x424>
 80029c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <TIM5_IRQHandler+0x428>)
 80029c6:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_y_dps = (float)gyro_y_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Roll rate
 80029ca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d6:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002bbc <TIM5_IRQHandler+0x424>
 80029da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029de:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <TIM5_IRQHandler+0x42c>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_z_dps = (float)gyro_z_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Yaw rate
 80029e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f0:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002bbc <TIM5_IRQHandler+0x424>
 80029f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f8:	4b73      	ldr	r3, [pc, #460]	@ (8002bc8 <TIM5_IRQHandler+0x430>)
 80029fa:	edc3 7a00 	vstr	s15, [r3]

	// Calculate accelerometer angle (Pitch)
	if (accel_z_g == 0.0f) accel_z_g = 0.001f;
 80029fe:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	d101      	bne.n	8002a10 <TIM5_IRQHandler+0x278>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bcc <TIM5_IRQHandler+0x434>)
 8002a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	g_accel_angle = atan2f(accel_x_g, accel_z_g) * (180.0f / M_PI);
 8002a10:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 8002a14:	ed97 0a07 	vldr	s0, [r7, #28]
 8002a18:	f008 f912 	bl	800ac40 <atan2f>
 8002a1c:	eef0 7a40 	vmov.f32	s15, s0
 8002a20:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002b8c <TIM5_IRQHandler+0x3f4>
 8002a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a28:	4b69      	ldr	r3, [pc, #420]	@ (8002bd0 <TIM5_IRQHandler+0x438>)
 8002a2a:	edc3 7a00 	vstr	s15, [r3]
	g_accel_angle -= g_accel_pitch_bias_deg;
 8002a2e:	4b69      	ldr	r3, [pc, #420]	@ (8002bd4 <TIM5_IRQHandler+0x43c>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	4b66      	ldr	r3, [pc, #408]	@ (8002bd0 <TIM5_IRQHandler+0x438>)
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3e:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <TIM5_IRQHandler+0x438>)
 8002a40:	edc3 7a00 	vstr	s15, [r3]

	// Sensor fusion (Complementary Filter)
	g_pitch_angle = COMPLEMENTARY_FILTER_KP * (g_pitch_angle + g_gyro_x_dps * CONTROL_LOOP_PERIOD_S) + (1.0f - COMPLEMENTARY_FILTER_KP) * g_accel_angle;
 8002a44:	4b5e      	ldr	r3, [pc, #376]	@ (8002bc0 <TIM5_IRQHandler+0x428>)
 8002a46:	edd3 7a00 	vldr	s15, [r3]
 8002a4a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002b70 <TIM5_IRQHandler+0x3d8>
 8002a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a52:	4b61      	ldr	r3, [pc, #388]	@ (8002bd8 <TIM5_IRQHandler+0x440>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002bdc <TIM5_IRQHandler+0x444>
 8002a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a64:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8002bdc <TIM5_IRQHandler+0x444>
 8002a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a70:	4b57      	ldr	r3, [pc, #348]	@ (8002bd0 <TIM5_IRQHandler+0x438>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	4b56      	ldr	r3, [pc, #344]	@ (8002bd8 <TIM5_IRQHandler+0x440>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 速度环 PID 控制 BEGIN
	// -------------------------------------------------------------------------

	// 1. 计算速度误差
	float speed_error = g_target_linear_speed_mps - g_robot_linear_speed_mps;
 8002a84:	4b56      	ldr	r3, [pc, #344]	@ (8002be0 <TIM5_IRQHandler+0x448>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b84 <TIM5_IRQHandler+0x3ec>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	edc7 7a05 	vstr	s15, [r7, #20]

	// 2. 累积积分误差并进行抗积分饱和 (Anti-Windup)
	g_speed_integral_error += speed_error * CONTROL_LOOP_PERIOD_S;
 8002a98:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002b70 <TIM5_IRQHandler+0x3d8>
 8002a9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aae:	4b4d      	ldr	r3, [pc, #308]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
	// 限制积分项的累积，防止电机长时间饱和导致过冲
	if (g_speed_integral_error > INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = INTEGRAL_ERROR_MAX_ABS;
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002be8 <TIM5_IRQHandler+0x450>
 8002abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	dd02      	ble.n	8002ace <TIM5_IRQHandler+0x336>
 8002ac8:	4b46      	ldr	r3, [pc, #280]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002aca:	4a48      	ldr	r2, [pc, #288]	@ (8002bec <TIM5_IRQHandler+0x454>)
 8002acc:	601a      	str	r2, [r3, #0]
	if (g_speed_integral_error < -INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = -INTEGRAL_ERROR_MAX_ABS;
 8002ace:	4b45      	ldr	r3, [pc, #276]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002bf0 <TIM5_IRQHandler+0x458>
 8002ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	d502      	bpl.n	8002ae8 <TIM5_IRQHandler+0x350>
 8002ae2:	4b40      	ldr	r3, [pc, #256]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002ae4:	4a43      	ldr	r2, [pc, #268]	@ (8002bf4 <TIM5_IRQHandler+0x45c>)
 8002ae6:	601a      	str	r2, [r3, #0]

	// 3. 计算微分项 (使用当前速度的导数，而不是误差的导数，更稳定)
	// 速度的导数就是加速度
	float speed_derivative_term = (g_robot_linear_speed_mps - g_speed_prev_linear_speed_mps) / CONTROL_LOOP_PERIOD_S;
 8002ae8:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <TIM5_IRQHandler+0x3ec>)
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	4b42      	ldr	r3, [pc, #264]	@ (8002bf8 <TIM5_IRQHandler+0x460>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002af8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002b70 <TIM5_IRQHandler+0x3d8>
 8002afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b00:	edc7 7a04 	vstr	s15, [r7, #16]
	g_speed_prev_linear_speed_mps = g_robot_linear_speed_mps; // 更新上一次速度
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <TIM5_IRQHandler+0x3ec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf8 <TIM5_IRQHandler+0x460>)
 8002b0a:	6013      	str	r3, [r2, #0]

	// 4. 计算速度环 PID 输出
	// 这里的输出是期望的倾斜角度（度）
	float speed_pid_output = g_speed_kp * speed_error +
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <TIM5_IRQHandler+0x464>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b16:	ee27 7a27 	vmul.f32	s14, s14, s15
	                         g_speed_ki * g_speed_integral_error - // 积分项
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <TIM5_IRQHandler+0x468>)
 8002b1c:	edd3 6a00 	vldr	s13, [r3]
 8002b20:	4b30      	ldr	r3, [pc, #192]	@ (8002be4 <TIM5_IRQHandler+0x44c>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 8002b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
	                         g_speed_kd * speed_derivative_term;   // 微分项，注意这里是负号，因为我们希望通过反向的加速度来减小速度偏差
 8002b2e:	4b35      	ldr	r3, [pc, #212]	@ (8002c04 <TIM5_IRQHandler+0x46c>)
 8002b30:	edd3 6a00 	vldr	s13, [r3]
 8002b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 8002b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b40:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
//    printf("speed_pid_output: %.2f\r\n", speed_pid_output);

	// 5. 限制速度环PID输出，作为平衡环的目标倾斜角度
	// 确保目标角度不会过大，防止小车摔倒
	if (speed_pid_output > SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = SPEED_PID_OUTPUT_MAX_DEG;
 8002b44:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002b48:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	dd5a      	ble.n	8002c0c <TIM5_IRQHandler+0x474>
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <TIM5_IRQHandler+0x470>)
 8002b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b5a:	e057      	b.n	8002c0c <TIM5_IRQHandler+0x474>
 8002b5c:	2000077c 	.word	0x2000077c
 8002b60:	20000780 	.word	0x20000780
 8002b64:	20000778 	.word	0x20000778
 8002b68:	2000077a 	.word	0x2000077a
 8002b6c:	47f00000 	.word	0x47f00000
 8002b70:	3c23d70a 	.word	0x3c23d70a
 8002b74:	20000784 	.word	0x20000784
 8002b78:	20000788 	.word	0x20000788
 8002b7c:	3e5692c3 	.word	0x3e5692c3
 8002b80:	3e5692c3 	.word	0x3e5692c3
 8002b84:	2000078c 	.word	0x2000078c
 8002b88:	3e3126e9 	.word	0x3e3126e9
 8002b8c:	42652ee0 	.word	0x42652ee0
 8002b90:	20000790 	.word	0x20000790
 8002b94:	2000074a 	.word	0x2000074a
 8002b98:	20000748 	.word	0x20000748
 8002b9c:	20000746 	.word	0x20000746
 8002ba0:	20000750 	.word	0x20000750
 8002ba4:	2000074e 	.word	0x2000074e
 8002ba8:	2000074c 	.word	0x2000074c
 8002bac:	20000752 	.word	0x20000752
 8002bb0:	20000754 	.word	0x20000754
 8002bb4:	20000756 	.word	0x20000756
 8002bb8:	46800000 	.word	0x46800000
 8002bbc:	41833333 	.word	0x41833333
 8002bc0:	20000764 	.word	0x20000764
 8002bc4:	20000768 	.word	0x20000768
 8002bc8:	2000076c 	.word	0x2000076c
 8002bcc:	3a83126f 	.word	0x3a83126f
 8002bd0:	20000760 	.word	0x20000760
 8002bd4:	20000758 	.word	0x20000758
 8002bd8:	2000075c 	.word	0x2000075c
 8002bdc:	3f7ae148 	.word	0x3f7ae148
 8002be0:	20000794 	.word	0x20000794
 8002be4:	20000798 	.word	0x20000798
 8002be8:	3dcccccd 	.word	0x3dcccccd
 8002bec:	3dcccccd 	.word	0x3dcccccd
 8002bf0:	bdcccccd 	.word	0xbdcccccd
 8002bf4:	bdcccccd 	.word	0xbdcccccd
 8002bf8:	2000079c 	.word	0x2000079c
 8002bfc:	20000010 	.word	0x20000010
 8002c00:	20000014 	.word	0x20000014
 8002c04:	20000018 	.word	0x20000018
 8002c08:	40a00000 	.word	0x40a00000
	if (speed_pid_output < -SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = -SPEED_PID_OUTPUT_MAX_DEG;
 8002c0c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002c10:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8002c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	d501      	bpl.n	8002c22 <TIM5_IRQHandler+0x48a>
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002d98 <TIM5_IRQHandler+0x600>)
 8002c20:	64bb      	str	r3, [r7, #72]	@ 0x48

	// 将速度环的输出作为平衡环的目标角度
	// 如果小车向前加速，speed_error为负，speed_pid_output为负，则g_target_pitch_angle为负，
	// 意味着期望小车向后倾斜以减速。
	g_target_pitch_angle = speed_pid_output;
 8002c22:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <TIM5_IRQHandler+0x604>)
 8002c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c26:	6013      	str	r3, [r2, #0]

	// PID Control Calculation
	// PID inputs: Pitch error (current angle - target angle) and Pitch rate (g_gyro_x_dps)

	// Note: g_target_pitch_angle is now dynamically set by the speed loop
	float pitch_error = g_target_pitch_angle - g_pitch_angle; // Angle error for P and I terms
 8002c28:	4b5c      	ldr	r3, [pc, #368]	@ (8002d9c <TIM5_IRQHandler+0x604>)
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002da0 <TIM5_IRQHandler+0x608>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	edc7 7a03 	vstr	s15, [r7, #12]

	// **关键修正：平衡环D项符号**
	// 如果小车向前倾斜 (g_gyro_x_dps > 0)，需要向后推以减小角速度，所以D项贡献应为负。
	float control_output = g_balance_kp * pitch_error - g_balance_kd * g_gyro_x_dps; // ***重要：g_balance_kd前加负号***
 8002c3c:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <TIM5_IRQHandler+0x60c>)
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <TIM5_IRQHandler+0x610>)
 8002c4c:	edd3 6a00 	vldr	s13, [r3]
 8002c50:	4b56      	ldr	r3, [pc, #344]	@ (8002dac <TIM5_IRQHandler+0x614>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	edc7 7a02 	vstr	s15, [r7, #8]

	// Map Control Output to Motor Speed Percentage
	int16_t motor_speed = (int16_t)control_output;
 8002c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6a:	ee17 3a90 	vmov	r3, s15
 8002c6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	// **处理电机最小启动阈值（死区补偿）**
	// 如果计算出的速度在0和最小启动阈值之间（非零），将其提升到最小阈值
	if (motor_speed > 0 && motor_speed < MIN_MOTOR_SPEED_PERCENTAGE) {
 8002c72:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	dd07      	ble.n	8002c8a <TIM5_IRQHandler+0x4f2>
 8002c7a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	dc03      	bgt.n	8002c8a <TIM5_IRQHandler+0x4f2>
	    motor_speed = MIN_MOTOR_SPEED_PERCENTAGE;
 8002c82:	2305      	movs	r3, #5
 8002c84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002c88:	e00c      	b.n	8002ca4 <TIM5_IRQHandler+0x50c>
	} else if (motor_speed < 0 && motor_speed > -MIN_MOTOR_SPEED_PERCENTAGE) {
 8002c8a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da08      	bge.n	8002ca4 <TIM5_IRQHandler+0x50c>
 8002c92:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c96:	f113 0f04 	cmn.w	r3, #4
 8002c9a:	db03      	blt.n	8002ca4 <TIM5_IRQHandler+0x50c>
	    motor_speed = -MIN_MOTOR_SPEED_PERCENTAGE;
 8002c9c:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002ca0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	}
	// 如果control_output接近0，则强制motor_speed为0，防止死区补偿导致在静止时抖动
	// 注意：这里使用 fabs(control_output) < FLOAT_ZERO_THRESHOLD 进行浮点数比较
	if (fabs(control_output) < FLOAT_ZERO_THRESHOLD) {
 8002ca4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca8:	eef0 7ae7 	vabs.f32	s15, s15
 8002cac:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002db0 <TIM5_IRQHandler+0x618>
 8002cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	d502      	bpl.n	8002cc0 <TIM5_IRQHandler+0x528>
	    motor_speed = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	}


	// Apply motor speed limits (-100 to 100 percent)
	if (motor_speed > 100) motor_speed = 100;
 8002cc0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002cc4:	2b64      	cmp	r3, #100	@ 0x64
 8002cc6:	dd02      	ble.n	8002cce <TIM5_IRQHandler+0x536>
 8002cc8:	2364      	movs	r3, #100	@ 0x64
 8002cca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	if (motor_speed < -100) motor_speed = -100;
 8002cce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002cd2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002cd6:	da03      	bge.n	8002ce0 <TIM5_IRQHandler+0x548>
 8002cd8:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8002cdc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	// Basic Safety Check: Stop motor if tilt angle exceeds a safe threshold
	float safety_angle_threshold = 30.0f; // Degrees (adjust as needed, e.g., 30 degrees)
 8002ce0:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <TIM5_IRQHandler+0x61c>)
 8002ce2:	607b      	str	r3, [r7, #4]

	if (fabs(g_pitch_angle) > safety_angle_threshold) {
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <TIM5_IRQHandler+0x608>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	eef0 7ae7 	vabs.f32	s15, s15
 8002cee:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	d506      	bpl.n	8002d0a <TIM5_IRQHandler+0x572>
	    // Stop motors if the robot is falling
	    g_motor_output_left = 0;
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <TIM5_IRQHandler+0x620>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	801a      	strh	r2, [r3, #0]
	    g_motor_output_right = 0;
 8002d02:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <TIM5_IRQHandler+0x624>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	e037      	b.n	8002d7a <TIM5_IRQHandler+0x5e2>
	    // TODO: Add other safety actions like an alarm or state change
	}
	// 将 "=" 改为 "=="
	// 同时，为了浮点数比较的健壮性，使用 fabs 和 FLOAT_ZERO_THRESHOLD
	else if (fabs(left_right - 1.0f) < FLOAT_ZERO_THRESHOLD) { // 检查是否是左转指令
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <TIM5_IRQHandler+0x628>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d18:	eef0 7ae7 	vabs.f32	s15, s15
 8002d1c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002db0 <TIM5_IRQHandler+0x618>
 8002d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d507      	bpl.n	8002d3a <TIM5_IRQHandler+0x5a2>
	    g_motor_output_left = motor_speed;
 8002d2a:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <TIM5_IRQHandler+0x620>)
 8002d2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d30:	8013      	strh	r3, [r2, #0]
	    g_motor_output_right = 0;
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <TIM5_IRQHandler+0x624>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e01f      	b.n	8002d7a <TIM5_IRQHandler+0x5e2>
	}
	else if (fabs(left_right - 2.0f) < FLOAT_ZERO_THRESHOLD) { // 检查是否是右转指令
 8002d3a:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <TIM5_IRQHandler+0x628>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d48:	eef0 7ae7 	vabs.f32	s15, s15
 8002d4c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002db0 <TIM5_IRQHandler+0x618>
 8002d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d507      	bpl.n	8002d6a <TIM5_IRQHandler+0x5d2>
		g_motor_output_left = 0;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <TIM5_IRQHandler+0x620>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	801a      	strh	r2, [r3, #0]
	    g_motor_output_right = motor_speed;
 8002d60:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <TIM5_IRQHandler+0x624>)
 8002d62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d66:	8013      	strh	r3, [r2, #0]
 8002d68:	e007      	b.n	8002d7a <TIM5_IRQHandler+0x5e2>

	}
	else {
	    // If within safe angle, apply the calculated motor speed
	    g_motor_output_left = motor_speed;
 8002d6a:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <TIM5_IRQHandler+0x620>)
 8002d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d70:	8013      	strh	r3, [r2, #0]
	    g_motor_output_right = motor_speed;
 8002d72:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <TIM5_IRQHandler+0x624>)
 8002d74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d78:	8013      	strh	r3, [r2, #0]
	}

	// Apply Motor Speed using the Motor module functions
	    Car_Move(g_motor_output_left, g_motor_output_right);
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <TIM5_IRQHandler+0x620>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	4a0e      	ldr	r2, [pc, #56]	@ (8002dbc <TIM5_IRQHandler+0x624>)
 8002d82:	8812      	ldrh	r2, [r2, #0]
 8002d84:	b212      	sxth	r2, r2
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f9a1 	bl	80020d0 <Car_Move>


	// --- PID control calculation and Motor application END ---

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	3758      	adds	r7, #88	@ 0x58
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	c0a00000 	.word	0xc0a00000
 8002d9c:	20000770 	.word	0x20000770
 8002da0:	2000075c 	.word	0x2000075c
 8002da4:	20000008 	.word	0x20000008
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000764 	.word	0x20000764
 8002db0:	3a83126f 	.word	0x3a83126f
 8002db4:	41f00000 	.word	0x41f00000
 8002db8:	20000774 	.word	0x20000774
 8002dbc:	20000776 	.word	0x20000776
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <USART6_IRQHandler+0x10>)
 8002dca:	f004 f8e9 	bl	8006fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000090c 	.word	0x2000090c

08002dd8 <_getpid>:
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	f005 ff07 	bl	8008c04 <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <_exit+0x12>

08002e1e <_read>:
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e00a      	b.n	8002e46 <_read+0x28>
 8002e30:	f3af 8000 	nop.w
 8002e34:	4601      	mov	r1, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	60ba      	str	r2, [r7, #8]
 8002e3c:	b2ca      	uxtb	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dbf0      	blt.n	8002e30 <_read+0x12>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_write>:
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e009      	b.n	8002e7e <_write+0x26>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	60ba      	str	r2, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fc5e 	bl	8001734 <__io_putchar>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	dbf1      	blt.n	8002e6a <_write+0x12>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_close>:
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_fstat>:
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_isatty>:
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_lseek>:
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	2300      	movs	r3, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_sbrk>:
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
 8002f28:	f005 fe6c 	bl	8008c04 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
 8002f38:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20018000 	.word	0x20018000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	200007a0 	.word	0x200007a0
 8002f60:	20000aa8 	.word	0x20000aa8

08002f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b096      	sub	sp, #88	@ 0x58
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]
 8002fb6:	615a      	str	r2, [r3, #20]
 8002fb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fdcd 	bl	8008b60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fc6:	4b51      	ldr	r3, [pc, #324]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fc8:	4a51      	ldr	r2, [pc, #324]	@ (8003110 <MX_TIM1_Init+0x188>)
 8002fca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fce:	2253      	movs	r2, #83	@ 0x53
 8002fd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 8002fd8:	4b4c      	ldr	r3, [pc, #304]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fda:	f240 3247 	movw	r2, #839	@ 0x347
 8002fde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fe6:	4b49      	ldr	r3, [pc, #292]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fec:	4b47      	ldr	r3, [pc, #284]	@ (800310c <MX_TIM1_Init+0x184>)
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ff2:	4846      	ldr	r0, [pc, #280]	@ (800310c <MX_TIM1_Init+0x184>)
 8002ff4:	f002 fd8c 	bl	8005b10 <HAL_TIM_Base_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002ffe:	f7fe ff89 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003006:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003008:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800300c:	4619      	mov	r1, r3
 800300e:	483f      	ldr	r0, [pc, #252]	@ (800310c <MX_TIM1_Init+0x184>)
 8003010:	f003 fa20 	bl	8006454 <HAL_TIM_ConfigClockSource>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800301a:	f7fe ff7b 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800301e:	483b      	ldr	r0, [pc, #236]	@ (800310c <MX_TIM1_Init+0x184>)
 8003020:	f002 fe28 	bl	8005c74 <HAL_TIM_PWM_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800302a:	f7fe ff73 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003036:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800303a:	4619      	mov	r1, r3
 800303c:	4833      	ldr	r0, [pc, #204]	@ (800310c <MX_TIM1_Init+0x184>)
 800303e:	f003 fddb 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003048:	f7fe ff64 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304c:	2360      	movs	r3, #96	@ 0x60
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306c:	2200      	movs	r2, #0
 800306e:	4619      	mov	r1, r3
 8003070:	4826      	ldr	r0, [pc, #152]	@ (800310c <MX_TIM1_Init+0x184>)
 8003072:	f003 f92d 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800307c:	f7fe ff4a 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003084:	2204      	movs	r2, #4
 8003086:	4619      	mov	r1, r3
 8003088:	4820      	ldr	r0, [pc, #128]	@ (800310c <MX_TIM1_Init+0x184>)
 800308a:	f003 f921 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003094:	f7fe ff3e 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800309c:	2208      	movs	r2, #8
 800309e:	4619      	mov	r1, r3
 80030a0:	481a      	ldr	r0, [pc, #104]	@ (800310c <MX_TIM1_Init+0x184>)
 80030a2:	f003 f915 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80030ac:	f7fe ff32 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030b4:	220c      	movs	r2, #12
 80030b6:	4619      	mov	r1, r3
 80030b8:	4814      	ldr	r0, [pc, #80]	@ (800310c <MX_TIM1_Init+0x184>)
 80030ba:	f003 f909 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80030c4:	f7fe ff26 	bl	8001f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80030e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	4619      	mov	r1, r3
 80030ec:	4807      	ldr	r0, [pc, #28]	@ (800310c <MX_TIM1_Init+0x184>)
 80030ee:	f003 fdf1 	bl	8006cd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80030f8:	f7fe ff0c 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030fc:	4803      	ldr	r0, [pc, #12]	@ (800310c <MX_TIM1_Init+0x184>)
 80030fe:	f000 f9bb 	bl	8003478 <HAL_TIM_MspPostInit>

}
 8003102:	bf00      	nop
 8003104:	3758      	adds	r7, #88	@ 0x58
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200007a4 	.word	0x200007a4
 8003110:	40010000 	.word	0x40010000

08003114 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	@ 0x30
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	2224      	movs	r2, #36	@ 0x24
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f005 fd1c 	bl	8008b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003130:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 8003132:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <MX_TIM3_Init+0xa4>)
 8003134:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003136:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 8003138:	2200      	movs	r2, #0
 800313a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313c:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 8003144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003148:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003156:	2303      	movs	r3, #3
 8003158:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800315e:	2301      	movs	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800316e:	2301      	movs	r3, #1
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	4619      	mov	r1, r3
 8003180:	480c      	ldr	r0, [pc, #48]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 8003182:	f002 fe81 	bl	8005e88 <HAL_TIM_Encoder_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800318c:	f7fe fec2 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4805      	ldr	r0, [pc, #20]	@ (80031b4 <MX_TIM3_Init+0xa0>)
 800319e:	f003 fd2b 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80031a8:	f7fe feb4 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	3730      	adds	r7, #48	@ 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200007ec 	.word	0x200007ec
 80031b8:	40000400 	.word	0x40000400

080031bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fcc8 	bl	8008b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <MX_TIM4_Init+0xa4>)
 80031dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80031de:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <MX_TIM4_Init+0xa0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031fe:	2303      	movs	r3, #3
 8003200:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003216:	2301      	movs	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800321a:	2300      	movs	r3, #0
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	4619      	mov	r1, r3
 8003228:	480c      	ldr	r0, [pc, #48]	@ (800325c <MX_TIM4_Init+0xa0>)
 800322a:	f002 fe2d 	bl	8005e88 <HAL_TIM_Encoder_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003234:	f7fe fe6e 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4805      	ldr	r0, [pc, #20]	@ (800325c <MX_TIM4_Init+0xa0>)
 8003246:	f003 fcd7 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003250:	f7fe fe60 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	3730      	adds	r7, #48	@ 0x30
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000834 	.word	0x20000834
 8003260:	40000800 	.word	0x40000800

08003264 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003278:	463b      	mov	r3, r7
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <MX_TIM5_Init+0x94>)
 8003282:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <MX_TIM5_Init+0x98>)
 8003284:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003286:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <MX_TIM5_Init+0x94>)
 8003288:	2253      	movs	r2, #83	@ 0x53
 800328a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <MX_TIM5_Init+0x94>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <MX_TIM5_Init+0x94>)
 8003294:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003298:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <MX_TIM5_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <MX_TIM5_Init+0x94>)
 80032a2:	2280      	movs	r2, #128	@ 0x80
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80032a6:	4814      	ldr	r0, [pc, #80]	@ (80032f8 <MX_TIM5_Init+0x94>)
 80032a8:	f002 fc32 	bl	8005b10 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80032b2:	f7fe fe2f 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	4619      	mov	r1, r3
 80032c2:	480d      	ldr	r0, [pc, #52]	@ (80032f8 <MX_TIM5_Init+0x94>)
 80032c4:	f003 f8c6 	bl	8006454 <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f7fe fe21 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032da:	463b      	mov	r3, r7
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	@ (80032f8 <MX_TIM5_Init+0x94>)
 80032e0:	f003 fc8a 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80032ea:	f7fe fe13 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000087c 	.word	0x2000087c
 80032fc:	40000c00 	.word	0x40000c00

08003300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <HAL_TIM_Base_MspInit+0x70>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a16      	ldr	r2, [pc, #88]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800332e:	e01a      	b.n	8003366 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a10      	ldr	r2, [pc, #64]	@ (8003378 <HAL_TIM_Base_MspInit+0x78>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d115      	bne.n	8003366 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	6413      	str	r3, [r2, #64]	@ 0x40
 800334a:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <HAL_TIM_Base_MspInit+0x74>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2101      	movs	r1, #1
 800335a:	2032      	movs	r0, #50	@ 0x32
 800335c:	f000 fb5f 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003360:	2032      	movs	r0, #50	@ 0x32
 8003362:	f000 fb78 	bl	8003a56 <HAL_NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40023800 	.word	0x40023800
 8003378:	40000c00 	.word	0x40000c00

0800337c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08c      	sub	sp, #48	@ 0x30
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a32      	ldr	r2, [pc, #200]	@ (8003464 <HAL_TIM_Encoder_MspInit+0xe8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d12c      	bne.n	80033f8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033d6:	23c0      	movs	r3, #192	@ 0xc0
 80033d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e6:	2302      	movs	r3, #2
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ea:	f107 031c 	add.w	r3, r7, #28
 80033ee:	4619      	mov	r1, r3
 80033f0:	481e      	ldr	r0, [pc, #120]	@ (800346c <HAL_TIM_Encoder_MspInit+0xf0>)
 80033f2:	f000 fbeb 	bl	8003bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80033f6:	e030      	b.n	800345a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <HAL_TIM_Encoder_MspInit+0xf4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12b      	bne.n	800345a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	4a17      	ldr	r2, [pc, #92]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6413      	str	r3, [r2, #64]	@ 0x40
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6313      	str	r3, [r2, #48]	@ 0x30
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_TIM_Encoder_MspInit+0xec>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800343a:	23c0      	movs	r3, #192	@ 0xc0
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800344a:	2302      	movs	r3, #2
 800344c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	4807      	ldr	r0, [pc, #28]	@ (8003474 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003456:	f000 fbb9 	bl	8003bcc <HAL_GPIO_Init>
}
 800345a:	bf00      	nop
 800345c:	3730      	adds	r7, #48	@ 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40000400 	.word	0x40000400
 8003468:	40023800 	.word	0x40023800
 800346c:	40020000 	.word	0x40020000
 8003470:	40000800 	.word	0x40000800
 8003474:	40020400 	.word	0x40020400

08003478 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a12      	ldr	r2, [pc, #72]	@ (80034e0 <HAL_TIM_MspPostInit+0x68>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d11e      	bne.n	80034d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <HAL_TIM_MspPostInit+0x6c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <HAL_TIM_MspPostInit+0x6c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034aa:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_TIM_MspPostInit+0x6c>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80034b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80034ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	4619      	mov	r1, r3
 80034d2:	4805      	ldr	r0, [pc, #20]	@ (80034e8 <HAL_TIM_MspPostInit+0x70>)
 80034d4:	f000 fb7a 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020000 	.word	0x40020000

080034ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 80034f2:	4a12      	ldr	r2, [pc, #72]	@ (800353c <MX_USART2_UART_Init+0x50>)
 80034f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 80034f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003510:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 8003512:	220c      	movs	r2, #12
 8003514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003522:	4805      	ldr	r0, [pc, #20]	@ (8003538 <MX_USART2_UART_Init+0x4c>)
 8003524:	f003 fc3c 	bl	8006da0 <HAL_UART_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800352e:	f7fe fcf1 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200008c4 	.word	0x200008c4
 800353c:	40004400 	.word	0x40004400

08003540 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <MX_USART6_UART_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 800354c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003550:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003566:	220c      	movs	r2, #12
 8003568:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_USART6_UART_Init+0x4c>)
 8003578:	f003 fc12 	bl	8006da0 <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003582:	f7fe fcc7 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000090c 	.word	0x2000090c
 8003590:	40011400 	.word	0x40011400

08003594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	@ 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a36      	ldr	r2, [pc, #216]	@ (800368c <HAL_UART_MspInit+0xf8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12c      	bne.n	8003610 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	4b35      	ldr	r3, [pc, #212]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	4a34      	ldr	r2, [pc, #208]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c6:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	4a2d      	ldr	r2, [pc, #180]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ee:	230c      	movs	r3, #12
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035fe:	2307      	movs	r3, #7
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	4619      	mov	r1, r3
 8003608:	4822      	ldr	r0, [pc, #136]	@ (8003694 <HAL_UART_MspInit+0x100>)
 800360a:	f000 fadf 	bl	8003bcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800360e:	e038      	b.n	8003682 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a20      	ldr	r2, [pc, #128]	@ (8003698 <HAL_UART_MspInit+0x104>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d133      	bne.n	8003682 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b1c      	ldr	r3, [pc, #112]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 8003624:	f043 0320 	orr.w	r3, r3, #32
 8003628:	6453      	str	r3, [r2, #68]	@ 0x44
 800362a:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6313      	str	r3, [r2, #48]	@ 0x30
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_UART_MspInit+0xfc>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003652:	23c0      	movs	r3, #192	@ 0xc0
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003662:	2308      	movs	r3, #8
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4619      	mov	r1, r3
 800366c:	480b      	ldr	r0, [pc, #44]	@ (800369c <HAL_UART_MspInit+0x108>)
 800366e:	f000 faad 	bl	8003bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2101      	movs	r1, #1
 8003676:	2047      	movs	r0, #71	@ 0x47
 8003678:	f000 f9d1 	bl	8003a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800367c:	2047      	movs	r0, #71	@ 0x47
 800367e:	f000 f9ea 	bl	8003a56 <HAL_NVIC_EnableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3730      	adds	r7, #48	@ 0x30
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40004400 	.word	0x40004400
 8003690:	40023800 	.word	0x40023800
 8003694:	40020000 	.word	0x40020000
 8003698:	40011400 	.word	0x40011400
 800369c:	40020800 	.word	0x40020800

080036a0 <Reset_Handler>:
 80036a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d8 <LoopFillZerobss+0xe>
 80036a4:	f7ff fc5e 	bl	8002f64 <SystemInit>
 80036a8:	480c      	ldr	r0, [pc, #48]	@ (80036dc <LoopFillZerobss+0x12>)
 80036aa:	490d      	ldr	r1, [pc, #52]	@ (80036e0 <LoopFillZerobss+0x16>)
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <LoopFillZerobss+0x1a>)
 80036ae:	2300      	movs	r3, #0
 80036b0:	e002      	b.n	80036b8 <LoopCopyDataInit>

080036b2 <CopyDataInit>:
 80036b2:	58d4      	ldr	r4, [r2, r3]
 80036b4:	50c4      	str	r4, [r0, r3]
 80036b6:	3304      	adds	r3, #4

080036b8 <LoopCopyDataInit>:
 80036b8:	18c4      	adds	r4, r0, r3
 80036ba:	428c      	cmp	r4, r1
 80036bc:	d3f9      	bcc.n	80036b2 <CopyDataInit>
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <LoopFillZerobss+0x1e>)
 80036c0:	4c0a      	ldr	r4, [pc, #40]	@ (80036ec <LoopFillZerobss+0x22>)
 80036c2:	2300      	movs	r3, #0
 80036c4:	e001      	b.n	80036ca <LoopFillZerobss>

080036c6 <FillZerobss>:
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	3204      	adds	r2, #4

080036ca <LoopFillZerobss>:
 80036ca:	42a2      	cmp	r2, r4
 80036cc:	d3fb      	bcc.n	80036c6 <FillZerobss>
 80036ce:	f005 fa9f 	bl	8008c10 <__libc_init_array>
 80036d2:	f7fe f935 	bl	8001940 <main>
 80036d6:	4770      	bx	lr
 80036d8:	20018000 	.word	0x20018000
 80036dc:	20000000 	.word	0x20000000
 80036e0:	200001f4 	.word	0x200001f4
 80036e4:	0800bbdc 	.word	0x0800bbdc
 80036e8:	200001f4 	.word	0x200001f4
 80036ec:	20000aa4 	.word	0x20000aa4

080036f0 <ADC_IRQHandler>:
 80036f0:	e7fe      	b.n	80036f0 <ADC_IRQHandler>
	...

080036f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <HAL_Init+0x40>)
 80036fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <HAL_Init+0x40>)
 800370a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800370e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	@ (8003734 <HAL_Init+0x40>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800371a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 f973 	bl	8003a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	2000      	movs	r0, #0
 8003724:	f000 f808 	bl	8003738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7fe ffde 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023c00 	.word	0x40023c00

08003738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x54>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_InitTick+0x58>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f999 	bl	8003a8e <HAL_SYSTICK_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e00e      	b.n	8003784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d80a      	bhi.n	8003782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800376c:	2200      	movs	r2, #0
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f000 f953 	bl	8003a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003778:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <HAL_InitTick+0x5c>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000020 	.word	0x20000020
 8003790:	20000028 	.word	0x20000028
 8003794:	20000024 	.word	0x20000024

08003798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800379c:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x20>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x24>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_IncTick+0x24>)
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000028 	.word	0x20000028
 80037bc:	20000954 	.word	0x20000954

080037c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return uwTick;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_GetTick+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000954 	.word	0x20000954

080037d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff ffee 	bl	80037c0 <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d005      	beq.n	80037fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <HAL_Delay+0x44>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037fe:	bf00      	nop
 8003800:	f7ff ffde 	bl	80037c0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d8f7      	bhi.n	8003800 <HAL_Delay+0x28>
  {
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000028 	.word	0x20000028

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	@ (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	db12      	blt.n	80038f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	490a      	ldr	r1, [pc, #40]	@ (8003904 <__NVIC_DisableIRQ+0x44>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2001      	movs	r0, #1
 80038e2:	fa00 f202 	lsl.w	r2, r0, r2
 80038e6:	3320      	adds	r3, #32
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038ec:	f3bf 8f4f 	dsb	sy
}
 80038f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038f2:	f3bf 8f6f 	isb	sy
}
 80038f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	@ (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	@ (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
         );
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	@ 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039d4:	d301      	bcc.n	80039da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00f      	b.n	80039fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039da:	4a0a      	ldr	r2, [pc, #40]	@ (8003a04 <SysTick_Config+0x40>)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e2:	210f      	movs	r1, #15
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f7ff ff8e 	bl	8003908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <SysTick_Config+0x40>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f2:	4b04      	ldr	r3, [pc, #16]	@ (8003a04 <SysTick_Config+0x40>)
 80039f4:	2207      	movs	r2, #7
 80039f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	e000e010 	.word	0xe000e010

08003a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff05 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff1a 	bl	8003868 <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff8e 	bl	800395c <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5d 	bl	8003908 <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff0d 	bl	8003884 <__NVIC_EnableIRQ>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff1d 	bl	80038c0 <__NVIC_DisableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff94 	bl	80039c4 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff fe84 	bl	80037c0 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d008      	beq.n	8003ad8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2280      	movs	r2, #128	@ 0x80
 8003aca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e052      	b.n	8003b7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0216 	bic.w	r2, r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003af6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <HAL_DMA_Abort+0x62>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0208 	bic.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	e013      	b.n	8003b52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2a:	f7ff fe49 	bl	80037c0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d90c      	bls.n	8003b52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e015      	b.n	8003b7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e4      	bne.n	8003b2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	223f      	movs	r2, #63	@ 0x3f
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	@ 0x80
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e00c      	b.n	8003bbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e159      	b.n	8003e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8148 	bne.w	8003e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a2 	beq.w	8003e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d62:	4b54      	ldr	r3, [pc, #336]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a52      	ldr	r2, [pc, #328]	@ (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a49      	ldr	r2, [pc, #292]	@ (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x202>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a48      	ldr	r2, [pc, #288]	@ (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x1fe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a47      	ldr	r2, [pc, #284]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a46      	ldr	r2, [pc, #280]	@ (8003ec8 <HAL_GPIO_Init+0x2fc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x1f6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a45      	ldr	r2, [pc, #276]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x1f2>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e008      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e004      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e002      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_GPIO_Init+0x204>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	f002 0203 	and.w	r2, r2, #3
 8003dd6:	0092      	lsls	r2, r2, #2
 8003dd8:	4093      	lsls	r3, r2
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de0:	4935      	ldr	r1, [pc, #212]	@ (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dee:	4b38      	ldr	r3, [pc, #224]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e12:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e18:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e42:	4b23      	ldr	r3, [pc, #140]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed0 <HAL_GPIO_Init+0x304>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	f67f aea2 	bls.w	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3724      	adds	r7, #36	@ 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	041a      	lsls	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f18:	887a      	ldrh	r2, [r7, #2]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	041a      	lsls	r2, r3, #16
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43d9      	mvns	r1, r3
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	400b      	ands	r3, r1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	619a      	str	r2, [r3, #24]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e12b      	b.n	80041a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fb58 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f001 fd8e 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4a81      	ldr	r2, [pc, #516]	@ (80041b0 <HAL_I2C_Init+0x274>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d807      	bhi.n	8003fc0 <HAL_I2C_Init+0x84>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a80      	ldr	r2, [pc, #512]	@ (80041b4 <HAL_I2C_Init+0x278>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	bf94      	ite	ls
 8003fb8:	2301      	movls	r3, #1
 8003fba:	2300      	movhi	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e006      	b.n	8003fce <HAL_I2C_Init+0x92>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80041b8 <HAL_I2C_Init+0x27c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bf94      	ite	ls
 8003fc8:	2301      	movls	r3, #1
 8003fca:	2300      	movhi	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e0e7      	b.n	80041a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a78      	ldr	r2, [pc, #480]	@ (80041bc <HAL_I2C_Init+0x280>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	0c9b      	lsrs	r3, r3, #18
 8003fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a6a      	ldr	r2, [pc, #424]	@ (80041b0 <HAL_I2C_Init+0x274>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d802      	bhi.n	8004010 <HAL_I2C_Init+0xd4>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3301      	adds	r3, #1
 800400e:	e009      	b.n	8004024 <HAL_I2C_Init+0xe8>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	4a69      	ldr	r2, [pc, #420]	@ (80041c0 <HAL_I2C_Init+0x284>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	099b      	lsrs	r3, r3, #6
 8004022:	3301      	adds	r3, #1
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	430b      	orrs	r3, r1
 800402a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004036:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	495c      	ldr	r1, [pc, #368]	@ (80041b0 <HAL_I2C_Init+0x274>)
 8004040:	428b      	cmp	r3, r1
 8004042:	d819      	bhi.n	8004078 <HAL_I2C_Init+0x13c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e59      	subs	r1, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004052:	1c59      	adds	r1, r3, #1
 8004054:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004058:	400b      	ands	r3, r1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_I2C_Init+0x138>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e59      	subs	r1, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fbb1 f3f3 	udiv	r3, r1, r3
 800406c:	3301      	adds	r3, #1
 800406e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004072:	e051      	b.n	8004118 <HAL_I2C_Init+0x1dc>
 8004074:	2304      	movs	r3, #4
 8004076:	e04f      	b.n	8004118 <HAL_I2C_Init+0x1dc>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d111      	bne.n	80040a4 <HAL_I2C_Init+0x168>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e58      	subs	r0, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e012      	b.n	80040ca <HAL_I2C_Init+0x18e>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	0099      	lsls	r1, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Init+0x196>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e022      	b.n	8004118 <HAL_I2C_Init+0x1dc>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10e      	bne.n	80040f8 <HAL_I2C_Init+0x1bc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1e58      	subs	r0, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	440b      	add	r3, r1
 80040e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040f6:	e00f      	b.n	8004118 <HAL_I2C_Init+0x1dc>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e58      	subs	r0, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	0099      	lsls	r1, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6809      	ldr	r1, [r1, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004146:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6911      	ldr	r1, [r2, #16]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68d2      	ldr	r2, [r2, #12]
 8004152:	4311      	orrs	r1, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	430b      	orrs	r3, r1
 800415a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	000186a0 	.word	0x000186a0
 80041b4:	001e847f 	.word	0x001e847f
 80041b8:	003d08ff 	.word	0x003d08ff
 80041bc:	431bde83 	.word	0x431bde83
 80041c0:	10624dd3 	.word	0x10624dd3

080041c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041de:	f7ff faef 	bl	80037c0 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	f040 80d9 	bne.w	80043a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2319      	movs	r3, #25
 80041f8:	2201      	movs	r2, #1
 80041fa:	496d      	ldr	r1, [pc, #436]	@ (80043b0 <HAL_I2C_Mem_Write+0x1ec>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fdb9 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	e0cc      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_I2C_Mem_Write+0x56>
 8004216:	2302      	movs	r3, #2
 8004218:	e0c5      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d007      	beq.n	8004240 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2221      	movs	r2, #33	@ 0x21
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	@ 0x40
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a4d      	ldr	r2, [pc, #308]	@ (80043b4 <HAL_I2C_Mem_Write+0x1f0>)
 8004280:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004282:	88f8      	ldrh	r0, [r7, #6]
 8004284:	893a      	ldrh	r2, [r7, #8]
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4603      	mov	r3, r0
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fbf0 	bl	8004a78 <I2C_RequestMemoryWrite>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d052      	beq.n	8004344 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e081      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fe7e 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e06b      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_I2C_Mem_Write+0x180>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1aa      	bne.n	80042a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fe71 	bl	8005038 <I2C_WaitOnBTFFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	2b04      	cmp	r3, #4
 8004362:	d107      	bne.n	8004374 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e016      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	00100002 	.word	0x00100002
 80043b4:	ffff0000 	.word	0xffff0000

080043b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	@ 0x30
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043d2:	f7ff f9f5 	bl	80037c0 <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	f040 8214 	bne.w	800480e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2319      	movs	r3, #25
 80043ec:	2201      	movs	r2, #1
 80043ee:	497b      	ldr	r1, [pc, #492]	@ (80045dc <HAL_I2C_Mem_Read+0x224>)
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fcbf 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	e207      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Mem_Read+0x56>
 800440a:	2302      	movs	r3, #2
 800440c:	e200      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d007      	beq.n	8004434 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2222      	movs	r2, #34	@ 0x22
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2240      	movs	r2, #64	@ 0x40
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a5b      	ldr	r2, [pc, #364]	@ (80045e0 <HAL_I2C_Mem_Read+0x228>)
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004476:	88f8      	ldrh	r0, [r7, #6]
 8004478:	893a      	ldrh	r2, [r7, #8]
 800447a:	8979      	ldrh	r1, [r7, #10]
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	4603      	mov	r3, r0
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fb8c 	bl	8004ba4 <I2C_RequestMemoryRead>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1bc      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d113      	bne.n	80044c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e190      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d11b      	bne.n	8004506 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e170      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	2b02      	cmp	r3, #2
 800450c:	d11b      	bne.n	8004546 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	e150      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800455c:	e144      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	2b03      	cmp	r3, #3
 8004564:	f200 80f1 	bhi.w	800474a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	2b01      	cmp	r3, #1
 800456e:	d123      	bne.n	80045b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fda7 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e145      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045b6:	e117      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d14e      	bne.n	800465e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c6:	2200      	movs	r2, #0
 80045c8:	4906      	ldr	r1, [pc, #24]	@ (80045e4 <HAL_I2C_Mem_Read+0x22c>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fbd2 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e11a      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
 80045da:	bf00      	nop
 80045dc:	00100002 	.word	0x00100002
 80045e0:	ffff0000 	.word	0xffff0000
 80045e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800465c:	e0c4      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	2200      	movs	r2, #0
 8004666:	496c      	ldr	r1, [pc, #432]	@ (8004818 <HAL_I2C_Mem_Read+0x460>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fb83 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0cb      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c0:	2200      	movs	r2, #0
 80046c2:	4955      	ldr	r1, [pc, #340]	@ (8004818 <HAL_I2C_Mem_Read+0x460>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fb55 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e09d      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004748:	e04e      	b.n	80047e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fcba 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e058      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d124      	bne.n	80047e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d107      	bne.n	80047b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f aeb6 	bne.w	800455e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3728      	adds	r7, #40	@ 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	00010004 	.word	0x00010004

0800481c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	460b      	mov	r3, r1
 800482a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800482c:	f7fe ffc8 	bl	80037c0 <HAL_GetTick>
 8004830:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	f040 8111 	bne.w	8004a66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2319      	movs	r3, #25
 800484a:	2201      	movs	r2, #1
 800484c:	4988      	ldr	r1, [pc, #544]	@ (8004a70 <HAL_I2C_IsDeviceReady+0x254>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa90 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
 800485c:	e104      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_I2C_IsDeviceReady+0x50>
 8004868:	2302      	movs	r3, #2
 800486a:	e0fd      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d007      	beq.n	8004892 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2224      	movs	r2, #36	@ 0x24
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a70      	ldr	r2, [pc, #448]	@ (8004a74 <HAL_I2C_IsDeviceReady+0x258>)
 80048b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fa4e 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ec:	d103      	bne.n	80048f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0b6      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004908:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800490a:	f7fe ff59 	bl	80037c0 <HAL_GetTick>
 800490e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800493e:	e025      	b.n	800498c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fe ff3e 	bl	80037c0 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <HAL_I2C_IsDeviceReady+0x13a>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22a0      	movs	r2, #160	@ 0xa0
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b02      	cmp	r3, #2
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2ba0      	cmp	r3, #160	@ 0xa0
 8004996:	d005      	beq.n	80049a4 <HAL_I2C_IsDeviceReady+0x188>
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <HAL_I2C_IsDeviceReady+0x188>
 800499e:	7dbb      	ldrb	r3, [r7, #22]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0cd      	beq.n	8004940 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d129      	bne.n	8004a0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2319      	movs	r3, #25
 80049e6:	2201      	movs	r2, #1
 80049e8:	4921      	ldr	r1, [pc, #132]	@ (8004a70 <HAL_I2C_IsDeviceReady+0x254>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f9c2 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e036      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e02c      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2319      	movs	r3, #25
 8004a2e:	2201      	movs	r2, #1
 8004a30:	490f      	ldr	r1, [pc, #60]	@ (8004a70 <HAL_I2C_IsDeviceReady+0x254>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f99e 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e012      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f4ff af32 	bcc.w	80048b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00100002 	.word	0x00100002
 8004a74:	ffff0000 	.word	0xffff0000

08004a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	817b      	strh	r3, [r7, #10]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	813b      	strh	r3, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f960 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac8:	d103      	bne.n	8004ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e05f      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	492d      	ldr	r1, [pc, #180]	@ (8004ba0 <I2C_RequestMemoryWrite+0x128>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f9bb 	bl	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e04c      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fa46 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d107      	bne.n	8004b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e02b      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d105      	bne.n	8004b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	e021      	b.n	8004b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b60:	6a39      	ldr	r1, [r7, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fa20 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d107      	bne.n	8004b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e005      	b.n	8004b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	813b      	strh	r3, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8c2 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0aa      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	4952      	ldr	r1, [pc, #328]	@ (8004d70 <I2C_RequestMemoryRead+0x1cc>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f91d 	bl	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e097      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f9a8 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e076      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f982 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e050      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	6a39      	ldr	r1, [r7, #32]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f967 	bl	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e035      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f82b 	bl	8004d74 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d32:	d103      	bne.n	8004d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e013      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d40:	897b      	ldrh	r3, [r7, #10]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	4906      	ldr	r1, [pc, #24]	@ (8004d70 <I2C_RequestMemoryRead+0x1cc>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f886 	bl	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00010002 	.word	0x00010002

08004d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d84:	e048      	b.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d044      	beq.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fe fd17 	bl	80037c0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d139      	bne.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10d      	bne.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	e00c      	b.n	8004de4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d116      	bne.n	8004e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e023      	b.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10d      	bne.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	e00c      	b.n	8004e58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d093      	beq.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e76:	e071      	b.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e86:	d123      	bne.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e067      	b.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d041      	beq.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed8:	f7fe fc72 	bl	80037c0 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d136      	bne.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10c      	bne.n	8004f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf14      	ite	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	2300      	moveq	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e00b      	b.n	8004f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e021      	b.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d10c      	bne.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	43da      	mvns	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	e00b      	b.n	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2301      	movne	r3, #1
 8004f94:	2300      	moveq	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f af6d 	bne.w	8004e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb4:	e034      	b.n	8005020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8e3 	bl	8005182 <I2C_IsAcknowledgeFailed>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e034      	b.n	8005030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d028      	beq.n	8005020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fe fbf7 	bl	80037c0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11d      	bne.n	8005020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fee:	2b80      	cmp	r3, #128	@ 0x80
 8004ff0:	d016      	beq.n	8005020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e007      	b.n	8005030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502a:	2b80      	cmp	r3, #128	@ 0x80
 800502c:	d1c3      	bne.n	8004fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005044:	e034      	b.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f89b 	bl	8005182 <I2C_IsAcknowledgeFailed>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e034      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d028      	beq.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fe fbaf 	bl	80037c0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11d      	bne.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d016      	beq.n	80050b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e007      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d1c3      	bne.n	8005046 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d4:	e049      	b.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d119      	bne.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0210 	mvn.w	r2, #16
 80050ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e030      	b.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005118:	f7fe fb52 	bl	80037c0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11d      	bne.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d016      	beq.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e007      	b.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d1ae      	bne.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005198:	d11b      	bne.n	80051d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f043 0204 	orr.w	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e267      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d075      	beq.n	80052ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051fe:	4b88      	ldr	r3, [pc, #544]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b04      	cmp	r3, #4
 8005208:	d00c      	beq.n	8005224 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520a:	4b85      	ldr	r3, [pc, #532]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005212:	2b08      	cmp	r3, #8
 8005214:	d112      	bne.n	800523c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005216:	4b82      	ldr	r3, [pc, #520]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005222:	d10b      	bne.n	800523c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	4b7e      	ldr	r3, [pc, #504]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05b      	beq.n	80052e8 <HAL_RCC_OscConfig+0x108>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d157      	bne.n	80052e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e242      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005244:	d106      	bne.n	8005254 <HAL_RCC_OscConfig+0x74>
 8005246:	4b76      	ldr	r3, [pc, #472]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a75      	ldr	r2, [pc, #468]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e01d      	b.n	8005290 <HAL_RCC_OscConfig+0xb0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x98>
 800525e:	4b70      	ldr	r3, [pc, #448]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a6f      	ldr	r2, [pc, #444]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b6d      	ldr	r3, [pc, #436]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6c      	ldr	r2, [pc, #432]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0xb0>
 8005278:	4b69      	ldr	r3, [pc, #420]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a68      	ldr	r2, [pc, #416]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800527e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b66      	ldr	r3, [pc, #408]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a65      	ldr	r2, [pc, #404]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800528a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800528e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fe fa92 	bl	80037c0 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a0:	f7fe fa8e 	bl	80037c0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	@ 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e207      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0xc0>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fe fa7e 	bl	80037c0 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c8:	f7fe fa7a 	bl	80037c0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	@ 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1f3      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052da:	4b51      	ldr	r3, [pc, #324]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0xe8>
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d063      	beq.n	80053be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005302:	4b47      	ldr	r3, [pc, #284]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800530a:	2b08      	cmp	r3, #8
 800530c:	d11c      	bne.n	8005348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530e:	4b44      	ldr	r3, [pc, #272]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531a:	4b41      	ldr	r3, [pc, #260]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x152>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e1c7      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4937      	ldr	r1, [pc, #220]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	e03a      	b.n	80053be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d020      	beq.n	8005392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005350:	4b34      	ldr	r3, [pc, #208]	@ (8005424 <HAL_RCC_OscConfig+0x244>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fe fa33 	bl	80037c0 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535e:	f7fe fa2f 	bl	80037c0 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e1a8      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005370:	4b2b      	ldr	r3, [pc, #172]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537c:	4b28      	ldr	r3, [pc, #160]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4925      	ldr	r1, [pc, #148]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 800538c:	4313      	orrs	r3, r2
 800538e:	600b      	str	r3, [r1, #0]
 8005390:	e015      	b.n	80053be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005392:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <HAL_RCC_OscConfig+0x244>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe fa12 	bl	80037c0 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a0:	f7fe fa0e 	bl	80037c0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e187      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d036      	beq.n	8005438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d016      	beq.n	8005400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <HAL_RCC_OscConfig+0x248>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fe f9f2 	bl	80037c0 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e0:	f7fe f9ee 	bl	80037c0 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e167      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <HAL_RCC_OscConfig+0x240>)
 80053f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x200>
 80053fe:	e01b      	b.n	8005438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005400:	4b09      	ldr	r3, [pc, #36]	@ (8005428 <HAL_RCC_OscConfig+0x248>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005406:	f7fe f9db 	bl	80037c0 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	e00e      	b.n	800542c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540e:	f7fe f9d7 	bl	80037c0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d907      	bls.n	800542c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e150      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
 8005420:	40023800 	.word	0x40023800
 8005424:	42470000 	.word	0x42470000
 8005428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800542e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1ea      	bne.n	800540e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8097 	beq.w	8005574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544a:	4b81      	ldr	r3, [pc, #516]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	4b7d      	ldr	r3, [pc, #500]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	4a7c      	ldr	r2, [pc, #496]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 8005460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005464:	6413      	str	r3, [r2, #64]	@ 0x40
 8005466:	4b7a      	ldr	r3, [pc, #488]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005472:	2301      	movs	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005476:	4b77      	ldr	r3, [pc, #476]	@ (8005654 <HAL_RCC_OscConfig+0x474>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d118      	bne.n	80054b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005482:	4b74      	ldr	r3, [pc, #464]	@ (8005654 <HAL_RCC_OscConfig+0x474>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a73      	ldr	r2, [pc, #460]	@ (8005654 <HAL_RCC_OscConfig+0x474>)
 8005488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800548c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800548e:	f7fe f997 	bl	80037c0 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005496:	f7fe f993 	bl	80037c0 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e10c      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005654 <HAL_RCC_OscConfig+0x474>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d106      	bne.n	80054ca <HAL_RCC_OscConfig+0x2ea>
 80054bc:	4b64      	ldr	r3, [pc, #400]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c0:	4a63      	ldr	r2, [pc, #396]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c8:	e01c      	b.n	8005504 <HAL_RCC_OscConfig+0x324>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d10c      	bne.n	80054ec <HAL_RCC_OscConfig+0x30c>
 80054d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054de:	4b5c      	ldr	r3, [pc, #368]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ea:	e00b      	b.n	8005504 <HAL_RCC_OscConfig+0x324>
 80054ec:	4b58      	ldr	r3, [pc, #352]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f0:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f8:	4b55      	ldr	r3, [pc, #340]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	4a54      	ldr	r2, [pc, #336]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80054fe:	f023 0304 	bic.w	r3, r3, #4
 8005502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d015      	beq.n	8005538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550c:	f7fe f958 	bl	80037c0 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005512:	e00a      	b.n	800552a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fe f954 	bl	80037c0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0cb      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552a:	4b49      	ldr	r3, [pc, #292]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0ee      	beq.n	8005514 <HAL_RCC_OscConfig+0x334>
 8005536:	e014      	b.n	8005562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005538:	f7fe f942 	bl	80037c0 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553e:	e00a      	b.n	8005556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005540:	f7fe f93e 	bl	80037c0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0b5      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ee      	bne.n	8005540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005568:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	4a38      	ldr	r2, [pc, #224]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80a1 	beq.w	80056c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557e:	4b34      	ldr	r3, [pc, #208]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b08      	cmp	r3, #8
 8005588:	d05c      	beq.n	8005644 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d141      	bne.n	8005616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4b31      	ldr	r3, [pc, #196]	@ (8005658 <HAL_RCC_OscConfig+0x478>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005598:	f7fe f912 	bl	80037c0 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fe f90e 	bl	80037c0 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e087      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b2:	4b27      	ldr	r3, [pc, #156]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	019b      	lsls	r3, r3, #6
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	3b01      	subs	r3, #1
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	491b      	ldr	r1, [pc, #108]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <HAL_RCC_OscConfig+0x478>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fe f8e7 	bl	80037c0 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fe f8e3 	bl	80037c0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e05c      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x416>
 8005614:	e054      	b.n	80056c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCC_OscConfig+0x478>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fe f8d0 	bl	80037c0 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fe f8cc 	bl	80037c0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e045      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_OscConfig+0x470>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x444>
 8005642:	e03d      	b.n	80056c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d107      	bne.n	800565c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e038      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
 8005650:	40023800 	.word	0x40023800
 8005654:	40007000 	.word	0x40007000
 8005658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x4ec>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d028      	beq.n	80056bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d121      	bne.n	80056bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d11a      	bne.n	80056bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800568c:	4013      	ands	r3, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005694:	4293      	cmp	r3, r2
 8005696:	d111      	bne.n	80056bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	3b01      	subs	r3, #1
 80056a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d107      	bne.n	80056bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d001      	beq.n	80056c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0cc      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e4:	4b68      	ldr	r3, [pc, #416]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d90c      	bls.n	800570c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	4b65      	ldr	r3, [pc, #404]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b63      	ldr	r3, [pc, #396]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0b8      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005724:	4b59      	ldr	r3, [pc, #356]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4a58      	ldr	r2, [pc, #352]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800572e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800573c:	4b53      	ldr	r3, [pc, #332]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	4a52      	ldr	r2, [pc, #328]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005748:	4b50      	ldr	r3, [pc, #320]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	494d      	ldr	r1, [pc, #308]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d044      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	4b47      	ldr	r3, [pc, #284]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d119      	bne.n	80057ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e07f      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d003      	beq.n	800578e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578a:	2b03      	cmp	r3, #3
 800578c:	d107      	bne.n	800579e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578e:	4b3f      	ldr	r3, [pc, #252]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e06f      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e067      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ae:	4b37      	ldr	r3, [pc, #220]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f023 0203 	bic.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4934      	ldr	r1, [pc, #208]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057c0:	f7fd fffe 	bl	80037c0 <HAL_GetTick>
 80057c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057c6:	e00a      	b.n	80057de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c8:	f7fd fffa 	bl	80037c0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e04f      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057de:	4b2b      	ldr	r3, [pc, #172]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 020c 	and.w	r2, r3, #12
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d1eb      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057f0:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20c      	bcs.n	8005818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b22      	ldr	r3, [pc, #136]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	4b20      	ldr	r3, [pc, #128]	@ (8005888 <HAL_RCC_ClockConfig+0x1b8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e032      	b.n	800587e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005824:	4b19      	ldr	r3, [pc, #100]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4916      	ldr	r1, [pc, #88]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005842:	4b12      	ldr	r3, [pc, #72]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	490e      	ldr	r1, [pc, #56]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005856:	f000 f821 	bl	800589c <HAL_RCC_GetSysClockFreq>
 800585a:	4602      	mov	r2, r0
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	490a      	ldr	r1, [pc, #40]	@ (8005890 <HAL_RCC_ClockConfig+0x1c0>)
 8005868:	5ccb      	ldrb	r3, [r1, r3]
 800586a:	fa22 f303 	lsr.w	r3, r2, r3
 800586e:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005872:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <HAL_RCC_ClockConfig+0x1c8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fd ff5e 	bl	8003738 <HAL_InitTick>

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023c00 	.word	0x40023c00
 800588c:	40023800 	.word	0x40023800
 8005890:	0800b808 	.word	0x0800b808
 8005894:	20000020 	.word	0x20000020
 8005898:	20000024 	.word	0x20000024

0800589c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800589c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a0:	b094      	sub	sp, #80	@ 0x50
 80058a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058b4:	4b79      	ldr	r3, [pc, #484]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d00d      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x40>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	f200 80e1 	bhi.w	8005a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0x34>
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ce:	e0db      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d0:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058d4:	e0db      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058d6:	4b73      	ldr	r3, [pc, #460]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80058d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058da:	e0d8      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058dc:	4b6f      	ldr	r3, [pc, #444]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058e6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d063      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	2200      	movs	r2, #0
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	633b      	str	r3, [r7, #48]	@ 0x30
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
 800590a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f04f 0100 	mov.w	r1, #0
 800591a:	0159      	lsls	r1, r3, #5
 800591c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005920:	0150      	lsls	r0, r2, #5
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4621      	mov	r1, r4
 8005928:	1a51      	subs	r1, r2, r1
 800592a:	6139      	str	r1, [r7, #16]
 800592c:	4629      	mov	r1, r5
 800592e:	eb63 0301 	sbc.w	r3, r3, r1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005940:	4659      	mov	r1, fp
 8005942:	018b      	lsls	r3, r1, #6
 8005944:	4651      	mov	r1, sl
 8005946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800594a:	4651      	mov	r1, sl
 800594c:	018a      	lsls	r2, r1, #6
 800594e:	4651      	mov	r1, sl
 8005950:	ebb2 0801 	subs.w	r8, r2, r1
 8005954:	4659      	mov	r1, fp
 8005956:	eb63 0901 	sbc.w	r9, r3, r1
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596e:	4690      	mov	r8, r2
 8005970:	4699      	mov	r9, r3
 8005972:	4623      	mov	r3, r4
 8005974:	eb18 0303 	adds.w	r3, r8, r3
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	462b      	mov	r3, r5
 800597c:	eb49 0303 	adc.w	r3, r9, r3
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800598e:	4629      	mov	r1, r5
 8005990:	024b      	lsls	r3, r1, #9
 8005992:	4621      	mov	r1, r4
 8005994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005998:	4621      	mov	r1, r4
 800599a:	024a      	lsls	r2, r1, #9
 800599c:	4610      	mov	r0, r2
 800599e:	4619      	mov	r1, r3
 80059a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a2:	2200      	movs	r2, #0
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ac:	f7fb f954 	bl	8000c58 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4613      	mov	r3, r2
 80059b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b8:	e058      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ba:	4b38      	ldr	r3, [pc, #224]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	099b      	lsrs	r3, r3, #6
 80059c0:	2200      	movs	r2, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	4611      	mov	r1, r2
 80059c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ca:	623b      	str	r3, [r7, #32]
 80059cc:	2300      	movs	r3, #0
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	f04f 0000 	mov.w	r0, #0
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	0159      	lsls	r1, r3, #5
 80059e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059e6:	0150      	lsls	r0, r2, #5
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4641      	mov	r1, r8
 80059ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a10:	eb63 050b 	sbc.w	r5, r3, fp
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	00eb      	lsls	r3, r5, #3
 8005a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a22:	00e2      	lsls	r2, r4, #3
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	4643      	mov	r3, r8
 8005a2a:	18e3      	adds	r3, r4, r3
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	464b      	mov	r3, r9
 8005a30:	eb45 0303 	adc.w	r3, r5, r3
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a42:	4629      	mov	r1, r5
 8005a44:	028b      	lsls	r3, r1, #10
 8005a46:	4621      	mov	r1, r4
 8005a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	028a      	lsls	r2, r1, #10
 8005a50:	4610      	mov	r0, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a56:	2200      	movs	r2, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	61fa      	str	r2, [r7, #28]
 8005a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a60:	f7fb f8fa 	bl	8000c58 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	3301      	adds	r3, #1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a86:	e002      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3750      	adds	r7, #80	@ 0x50
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	00f42400 	.word	0x00f42400
 8005aa4:	007a1200 	.word	0x007a1200

08005aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aac:	4b03      	ldr	r3, [pc, #12]	@ (8005abc <HAL_RCC_GetHCLKFreq+0x14>)
 8005aae:	681b      	ldr	r3, [r3, #0]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000020 	.word	0x20000020

08005ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ac4:	f7ff fff0 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	0a9b      	lsrs	r3, r3, #10
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4903      	ldr	r1, [pc, #12]	@ (8005ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	0800b818 	.word	0x0800b818

08005ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005aec:	f7ff ffdc 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0b5b      	lsrs	r3, r3, #13
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4903      	ldr	r1, [pc, #12]	@ (8005b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800b818 	.word	0x0800b818

08005b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e041      	b.n	8005ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fd fbe2 	bl	8003300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fd7a 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d001      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e044      	b.n	8005c52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <HAL_TIM_Base_Start_IT+0xb0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d018      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x6c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf2:	d013      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x6c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c64 <HAL_TIM_Base_Start_IT+0xb4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00e      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x6c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a19      	ldr	r2, [pc, #100]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x6c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xbc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <HAL_TIM_Base_Start_IT+0x6c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a16      	ldr	r2, [pc, #88]	@ (8005c70 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d111      	bne.n	8005c40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d010      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3e:	e007      	b.n	8005c50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40014000 	.word	0x40014000

08005c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e041      	b.n	8005d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f839 	bl	8005d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 fcc8 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x24>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e022      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d109      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x3e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	bf14      	ite	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	e015      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x58>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e008      	b.n	8005d92 <HAL_TIM_PWM_Start+0x6a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	bf14      	ite	ne
 8005d8c:	2301      	movne	r3, #1
 8005d8e:	2300      	moveq	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e068      	b.n	8005e6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Start+0x82>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da8:	e013      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0x92>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005db8:	e00b      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dc8:	e003      	b.n	8005dd2 <HAL_TIM_PWM_Start+0xaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fee6 	bl	8006bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a23      	ldr	r2, [pc, #140]	@ (8005e74 <HAL_TIM_PWM_Start+0x14c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d107      	bne.n	8005dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <HAL_TIM_PWM_Start+0x14c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d018      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x10e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d013      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x10e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a19      	ldr	r2, [pc, #100]	@ (8005e78 <HAL_TIM_PWM_Start+0x150>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x10e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <HAL_TIM_PWM_Start+0x154>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x10e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <HAL_TIM_PWM_Start+0x158>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIM_PWM_Start+0x10e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a14      	ldr	r2, [pc, #80]	@ (8005e84 <HAL_TIM_PWM_Start+0x15c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d111      	bne.n	8005e5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b06      	cmp	r3, #6
 8005e46:	d010      	beq.n	8005e6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e58:	e007      	b.n	8005e6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40014000 	.word	0x40014000

08005e88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e097      	b.n	8005fcc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fd fa63 	bl	800337c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f000 fbb3 	bl	8006648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f28:	f023 030c 	bic.w	r3, r3, #12
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	4313      	orrs	r3, r2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	011a      	lsls	r2, r3, #4
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	031b      	lsls	r3, r3, #12
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fe4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ff4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ffc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d110      	bne.n	8006026 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d102      	bne.n	8006010 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800600a:	7b7b      	ldrb	r3, [r7, #13]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d001      	beq.n	8006014 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e069      	b.n	80060e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006024:	e031      	b.n	800608a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d110      	bne.n	800604e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d102      	bne.n	8006038 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006032:	7b3b      	ldrb	r3, [r7, #12]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d001      	beq.n	800603c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e055      	b.n	80060e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800604c:	e01d      	b.n	800608a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d108      	bne.n	8006066 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	7b7b      	ldrb	r3, [r7, #13]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d102      	bne.n	8006066 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006060:	7b3b      	ldrb	r3, [r7, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d001      	beq.n	800606a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e03e      	b.n	80060e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2202      	movs	r2, #2
 8006086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_TIM_Encoder_Start+0xc4>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d008      	beq.n	80060a8 <HAL_TIM_Encoder_Start+0xd4>
 8006096:	e00f      	b.n	80060b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2201      	movs	r2, #1
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fd83 	bl	8006bac <TIM_CCxChannelCmd>
      break;
 80060a6:	e016      	b.n	80060d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fd7b 	bl	8006bac <TIM_CCxChannelCmd>
      break;
 80060b6:	e00e      	b.n	80060d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2201      	movs	r2, #1
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fd73 	bl	8006bac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2201      	movs	r2, #1
 80060cc:	2104      	movs	r1, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fd6c 	bl	8006bac <TIM_CCxChannelCmd>
      break;
 80060d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa65 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa57 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa68 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d020      	beq.n	80061a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01b      	beq.n	80061a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0204 	mvn.w	r2, #4
 8006170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa3f 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 800618c:	e005      	b.n	800619a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa31 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fa42 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d020      	beq.n	80061ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0208 	mvn.w	r2, #8
 80061bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa19 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa0b 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa1c 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d020      	beq.n	8006238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0210 	mvn.w	r2, #16
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2208      	movs	r2, #8
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9f3 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9e5 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f9f6 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0201 	mvn.w	r2, #1
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9c3 	bl	80065e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fd86 	bl	8006d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9c7 	bl	8006632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0220 	mvn.w	r2, #32
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fd58 	bl	8006d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0ae      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	f200 809f 	bhi.w	800643c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006339 	.word	0x08006339
 8006308:	0800643d 	.word	0x0800643d
 800630c:	0800643d 	.word	0x0800643d
 8006310:	0800643d 	.word	0x0800643d
 8006314:	08006379 	.word	0x08006379
 8006318:	0800643d 	.word	0x0800643d
 800631c:	0800643d 	.word	0x0800643d
 8006320:	0800643d 	.word	0x0800643d
 8006324:	080063bb 	.word	0x080063bb
 8006328:	0800643d 	.word	0x0800643d
 800632c:	0800643d 	.word	0x0800643d
 8006330:	0800643d 	.word	0x0800643d
 8006334:	080063fb 	.word	0x080063fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fa0e 	bl	8006760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0204 	bic.w	r2, r2, #4
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	619a      	str	r2, [r3, #24]
      break;
 8006376:	e064      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa54 	bl	800682c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	619a      	str	r2, [r3, #24]
      break;
 80063b8:	e043      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fa9f 	bl	8006904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0208 	orr.w	r2, r2, #8
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0204 	bic.w	r2, r2, #4
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	61da      	str	r2, [r3, #28]
      break;
 80063f8:	e023      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fae9 	bl	80069d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	021a      	lsls	r2, r3, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	61da      	str	r2, [r3, #28]
      break;
 800643a:	e002      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x1c>
 800646c:	2302      	movs	r3, #2
 800646e:	e0b4      	b.n	80065da <HAL_TIM_ConfigClockSource+0x186>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a8:	d03e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0xd4>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ae:	f200 8087 	bhi.w	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	f000 8086 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x172>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d87f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b70      	cmp	r3, #112	@ 0x70
 80064c2:	d01a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0xa6>
 80064c4:	2b70      	cmp	r3, #112	@ 0x70
 80064c6:	d87b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b60      	cmp	r3, #96	@ 0x60
 80064ca:	d050      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x11a>
 80064cc:	2b60      	cmp	r3, #96	@ 0x60
 80064ce:	d877      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b50      	cmp	r3, #80	@ 0x50
 80064d2:	d03c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xfa>
 80064d4:	2b50      	cmp	r3, #80	@ 0x50
 80064d6:	d873      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	d058      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x13a>
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d86f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d064      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d86b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d060      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d867      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d05a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	e062      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	f000 fb2f 	bl	8006b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800651c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
      break;
 8006526:	e04f      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006538:	f000 fb18 	bl	8006b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800654a:	609a      	str	r2, [r3, #8]
      break;
 800654c:	e03c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fa8c 	bl	8006a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2150      	movs	r1, #80	@ 0x50
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fae5 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 800656c:	e02c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	461a      	mov	r2, r3
 800657c:	f000 faab 	bl	8006ad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2160      	movs	r1, #96	@ 0x60
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fad5 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 800658c:	e01c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fa6c 	bl	8006a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2140      	movs	r1, #64	@ 0x40
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fac5 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fabc 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 80065be:	e003      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e000      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3a      	ldr	r2, [pc, #232]	@ (8006744 <TIM_Base_SetConfig+0xfc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_Base_SetConfig+0x38>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006666:	d00b      	beq.n	8006680 <TIM_Base_SetConfig+0x38>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a37      	ldr	r2, [pc, #220]	@ (8006748 <TIM_Base_SetConfig+0x100>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_Base_SetConfig+0x38>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a36      	ldr	r2, [pc, #216]	@ (800674c <TIM_Base_SetConfig+0x104>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_Base_SetConfig+0x38>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a35      	ldr	r2, [pc, #212]	@ (8006750 <TIM_Base_SetConfig+0x108>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2b      	ldr	r2, [pc, #172]	@ (8006744 <TIM_Base_SetConfig+0xfc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01b      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a0:	d017      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a28      	ldr	r2, [pc, #160]	@ (8006748 <TIM_Base_SetConfig+0x100>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a27      	ldr	r2, [pc, #156]	@ (800674c <TIM_Base_SetConfig+0x104>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a26      	ldr	r2, [pc, #152]	@ (8006750 <TIM_Base_SetConfig+0x108>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a25      	ldr	r2, [pc, #148]	@ (8006754 <TIM_Base_SetConfig+0x10c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a24      	ldr	r2, [pc, #144]	@ (8006758 <TIM_Base_SetConfig+0x110>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a23      	ldr	r2, [pc, #140]	@ (800675c <TIM_Base_SetConfig+0x114>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d108      	bne.n	80066e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a0e      	ldr	r2, [pc, #56]	@ (8006744 <TIM_Base_SetConfig+0xfc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d103      	bne.n	8006718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d105      	bne.n	8006736 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	611a      	str	r2, [r3, #16]
  }
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40010000 	.word	0x40010000
 8006748:	40000400 	.word	0x40000400
 800674c:	40000800 	.word	0x40000800
 8006750:	40000c00 	.word	0x40000c00
 8006754:	40014000 	.word	0x40014000
 8006758:	40014400 	.word	0x40014400
 800675c:	40014800 	.word	0x40014800

08006760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0201 	bic.w	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0303 	bic.w	r3, r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f023 0302 	bic.w	r3, r3, #2
 80067a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <TIM_OC1_SetConfig+0xc8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10c      	bne.n	80067d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f023 0308 	bic.w	r3, r3, #8
 80067c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f023 0304 	bic.w	r3, r3, #4
 80067d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a13      	ldr	r2, [pc, #76]	@ (8006828 <TIM_OC1_SetConfig+0xc8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d111      	bne.n	8006802 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000

0800682c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f023 0210 	bic.w	r2, r3, #16
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0320 	bic.w	r3, r3, #32
 8006876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <TIM_OC2_SetConfig+0xd4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10d      	bne.n	80068a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <TIM_OC2_SetConfig+0xd4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d113      	bne.n	80068d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000

08006904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800694c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <TIM_OC3_SetConfig+0xd0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10d      	bne.n	800697e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a14      	ldr	r2, [pc, #80]	@ (80069d4 <TIM_OC3_SetConfig+0xd0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d113      	bne.n	80069ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40010000 	.word	0x40010000

080069d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a10      	ldr	r2, [pc, #64]	@ (8006a74 <TIM_OC4_SetConfig+0x9c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000

08006a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0201 	bic.w	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 030a 	bic.w	r3, r3, #10
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f023 0210 	bic.w	r2, r3, #16
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f043 0307 	orr.w	r3, r3, #7
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	609a      	str	r2, [r3, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1a      	ldr	r2, [r3, #32]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	401a      	ands	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1a      	ldr	r2, [r3, #32]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	fa01 f303 	lsl.w	r3, r1, r3
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
	...

08006bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e050      	b.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d018      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c5c:	d013      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a18      	ldr	r2, [pc, #96]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a16      	ldr	r2, [pc, #88]	@ (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a13      	ldr	r2, [pc, #76]	@ (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10c      	bne.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40014000 	.word	0x40014000

08006cd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e03d      	b.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e042      	b.n	8006e38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fc fbe4 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	@ 0x24
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fdbd 	bl	8007964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695a      	ldr	r2, [r3, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	@ 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d175      	bne.n	8006f4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_UART_Transmit+0x2c>
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e06e      	b.n	8006f4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2221      	movs	r2, #33	@ 0x21
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7e:	f7fc fc9f 	bl	80037c0 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e98:	d108      	bne.n	8006eac <HAL_UART_Transmit+0x6c>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	e003      	b.n	8006eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006eb4:	e02e      	b.n	8006f14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	@ 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fb1f 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e03a      	b.n	8006f4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10b      	bne.n	8006ef6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e007      	b.n	8006f06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1cb      	bne.n	8006eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2140      	movs	r1, #64	@ 0x40
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 faeb 	bl	8007504 <UART_WaitOnFlagUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e006      	b.n	8006f4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	4613      	mov	r3, r2
 8006f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d112      	bne.n	8006f96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_UART_Receive_IT+0x26>
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e00b      	b.n	8006f98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fb12 	bl	80075b6 <UART_Start_Receive_IT>
 8006f92:	4603      	mov	r3, r0
 8006f94:	e000      	b.n	8006f98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <HAL_UART_IRQHandler+0x66>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fbf2 	bl	80077e8 <UART_Receive_IT>
      return;
 8007004:	e25b      	b.n	80074be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 80de 	beq.w	80071cc <HAL_UART_IRQHandler+0x22c>
 8007010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007020:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80d1 	beq.w	80071cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <HAL_UART_IRQHandler+0xae>
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007046:	f043 0201 	orr.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <HAL_UART_IRQHandler+0xd2>
 800705a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706a:	f043 0202 	orr.w	r2, r3, #2
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_UART_IRQHandler+0xf6>
 800707e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f043 0204 	orr.w	r2, r3, #4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d011      	beq.n	80070c6 <HAL_UART_IRQHandler+0x126>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	f043 0208 	orr.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 81f2 	beq.w	80074b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <HAL_UART_IRQHandler+0x14e>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb7d 	bl	80077e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f8:	2b40      	cmp	r3, #64	@ 0x40
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d103      	bne.n	800711a <HAL_UART_IRQHandler+0x17a>
 8007112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d04f      	beq.n	80071ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa85 	bl	800762a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712a:	2b40      	cmp	r3, #64	@ 0x40
 800712c:	d141      	bne.n	80071b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800714c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3314      	adds	r3, #20
 8007156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800715a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800715e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1d9      	bne.n	800712e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d013      	beq.n	80071aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	4a7e      	ldr	r2, [pc, #504]	@ (8007380 <HAL_UART_IRQHandler+0x3e0>)
 8007188:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718e:	4618      	mov	r0, r3
 8007190:	f7fc fcf9 	bl	8003b86 <HAL_DMA_Abort_IT>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a8:	e00e      	b.n	80071c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f994 	bl	80074d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b0:	e00a      	b.n	80071c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f990 	bl	80074d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b8:	e006      	b.n	80071c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f98c 	bl	80074d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80071c6:	e175      	b.n	80074b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	bf00      	nop
    return;
 80071ca:	e173      	b.n	80074b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	f040 814f 	bne.w	8007474 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8148 	beq.w	8007474 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8141 	beq.w	8007474 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071f2:	2300      	movs	r3, #0
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	60bb      	str	r3, [r7, #8]
 8007206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b40      	cmp	r3, #64	@ 0x40
 8007214:	f040 80b6 	bne.w	8007384 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8145 	beq.w	80074b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007236:	429a      	cmp	r2, r3
 8007238:	f080 813e 	bcs.w	80074b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007242:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724e:	f000 8088 	beq.w	8007362 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	330c      	adds	r3, #12
 8007258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800726c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800727e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800728a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1d9      	bne.n	8007252 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3314      	adds	r3, #20
 80072a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3314      	adds	r3, #20
 80072be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e1      	bne.n	800729e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007300:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007304:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800730c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e3      	bne.n	80072da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	330c      	adds	r3, #12
 8007340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007344:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007346:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800734a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e3      	bne.n	8007320 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735c:	4618      	mov	r0, r3
 800735e:	f7fc fba2 	bl	8003aa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007370:	b29b      	uxth	r3, r3
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	b29b      	uxth	r3, r3
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f8b7 	bl	80074ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800737e:	e09b      	b.n	80074b8 <HAL_UART_IRQHandler+0x518>
 8007380:	080076f1 	.word	0x080076f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800738c:	b29b      	uxth	r3, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 808e 	beq.w	80074bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80073a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8089 	beq.w	80074bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80073ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80073d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e3      	bne.n	80073aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3314      	adds	r3, #20
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	623b      	str	r3, [r7, #32]
   return(result);
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3314      	adds	r3, #20
 8007402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007406:	633a      	str	r2, [r7, #48]	@ 0x30
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800740c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e3      	bne.n	80073e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	60fb      	str	r3, [r7, #12]
   return(result);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0310 	bic.w	r3, r3, #16
 800743e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800744c:	61fa      	str	r2, [r7, #28]
 800744e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	617b      	str	r3, [r7, #20]
   return(result);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e3      	bne.n	8007428 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f83d 	bl	80074ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007472:	e023      	b.n	80074bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747c:	2b00      	cmp	r3, #0
 800747e:	d009      	beq.n	8007494 <HAL_UART_IRQHandler+0x4f4>
 8007480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f943 	bl	8007718 <UART_Transmit_IT>
    return;
 8007492:	e014      	b.n	80074be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00e      	beq.n	80074be <HAL_UART_IRQHandler+0x51e>
 80074a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f983 	bl	80077b8 <UART_EndTransmit_IT>
    return;
 80074b2:	e004      	b.n	80074be <HAL_UART_IRQHandler+0x51e>
    return;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <HAL_UART_IRQHandler+0x51e>
      return;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <HAL_UART_IRQHandler+0x51e>
      return;
 80074bc:	bf00      	nop
  }
}
 80074be:	37e8      	adds	r7, #232	@ 0xe8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007514:	e03b      	b.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d037      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fc f94f 	bl	80037c0 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <UART_WaitOnFlagUntilTimeout+0x30>
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e03a      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d023      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b80      	cmp	r3, #128	@ 0x80
 800754a:	d020      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d01d      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b08      	cmp	r3, #8
 800755e:	d116      	bne.n	800758e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 f857 	bl	800762a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2208      	movs	r2, #8
 8007580:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e00f      	b.n	80075ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4013      	ands	r3, r2
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	bf0c      	ite	eq
 800759e:	2301      	moveq	r3, #1
 80075a0:	2300      	movne	r3, #0
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d0b4      	beq.n	8007516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	4613      	mov	r3, r2
 80075c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88fa      	ldrh	r2, [r7, #6]
 80075d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2222      	movs	r2, #34	@ 0x22
 80075e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0220 	orr.w	r2, r2, #32
 800761a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800762a:	b480      	push	{r7}
 800762c:	b095      	sub	sp, #84	@ 0x54
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007652:	643a      	str	r2, [r7, #64]	@ 0x40
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007658:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	61fb      	str	r3, [r7, #28]
   return(result);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3314      	adds	r3, #20
 8007684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007688:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800768c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d119      	bne.n	80076d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c2:	61ba      	str	r2, [r7, #24]
 80076c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6979      	ldr	r1, [r7, #20]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	613b      	str	r3, [r7, #16]
   return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076e4:	bf00      	nop
 80076e6:	3754      	adds	r7, #84	@ 0x54
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fee4 	bl	80074d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b21      	cmp	r3, #33	@ 0x21
 800772a:	d13e      	bne.n	80077aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007734:	d114      	bne.n	8007760 <UART_Transmit_IT+0x48>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d110      	bne.n	8007760 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007752:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]
 800775e:	e008      	b.n	8007772 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	1c59      	adds	r1, r3, #1
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6211      	str	r1, [r2, #32]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4619      	mov	r1, r3
 8007780:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10f      	bne.n	80077a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007794:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fe73 	bl	80074c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	@ 0x30
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b22      	cmp	r3, #34	@ 0x22
 80077fa:	f040 80ae 	bne.w	800795a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007806:	d117      	bne.n	8007838 <UART_Receive_IT+0x50>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d113      	bne.n	8007838 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	b29a      	uxth	r2, r3
 8007828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	1c9a      	adds	r2, r3, #2
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	629a      	str	r2, [r3, #40]	@ 0x28
 8007836:	e026      	b.n	8007886 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784a:	d007      	beq.n	800785c <UART_Receive_IT+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <UART_Receive_IT+0x82>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e008      	b.n	800787c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	b2da      	uxtb	r2, r3
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29b      	uxth	r3, r3
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4619      	mov	r1, r3
 8007894:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007896:	2b00      	cmp	r3, #0
 8007898:	d15d      	bne.n	8007956 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0220 	bic.w	r2, r2, #32
 80078a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d135      	bne.n	800794c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f023 0310 	bic.w	r3, r3, #16
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007906:	623a      	str	r2, [r7, #32]
 8007908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	69f9      	ldr	r1, [r7, #28]
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	61bb      	str	r3, [r7, #24]
   return(result);
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e5      	bne.n	80078e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b10      	cmp	r3, #16
 8007926:	d10a      	bne.n	800793e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fdd1 	bl	80074ec <HAL_UARTEx_RxEventCallback>
 800794a:	e002      	b.n	8007952 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7fa fad5 	bl	8001efc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e002      	b.n	800795c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3730      	adds	r7, #48	@ 0x30
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007968:	b0c0      	sub	sp, #256	@ 0x100
 800796a:	af00      	add	r7, sp, #0
 800796c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007980:	68d9      	ldr	r1, [r3, #12]
 8007982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	ea40 0301 	orr.w	r3, r0, r1
 800798c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	431a      	orrs	r2, r3
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079bc:	f021 010c 	bic.w	r1, r1, #12
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079ca:	430b      	orrs	r3, r1
 80079cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079de:	6999      	ldr	r1, [r3, #24]
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	ea40 0301 	orr.w	r3, r0, r1
 80079ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007c30 <UART_SetConfig+0x2cc>)
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d005      	beq.n	8007a04 <UART_SetConfig+0xa0>
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007c34 <UART_SetConfig+0x2d0>)
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d104      	bne.n	8007a0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7fe f870 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 8007a08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a0c:	e003      	b.n	8007a16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a0e:	f7fe f857 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 8007a12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a20:	f040 810c 	bne.w	8007c3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a36:	4622      	mov	r2, r4
 8007a38:	462b      	mov	r3, r5
 8007a3a:	1891      	adds	r1, r2, r2
 8007a3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a3e:	415b      	adcs	r3, r3
 8007a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a46:	4621      	mov	r1, r4
 8007a48:	eb12 0801 	adds.w	r8, r2, r1
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	eb43 0901 	adc.w	r9, r3, r1
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a66:	4690      	mov	r8, r2
 8007a68:	4699      	mov	r9, r3
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	eb18 0303 	adds.w	r3, r8, r3
 8007a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a74:	462b      	mov	r3, r5
 8007a76:	eb49 0303 	adc.w	r3, r9, r3
 8007a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a92:	460b      	mov	r3, r1
 8007a94:	18db      	adds	r3, r3, r3
 8007a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a98:	4613      	mov	r3, r2
 8007a9a:	eb42 0303 	adc.w	r3, r2, r3
 8007a9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007aa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007aa8:	f7f9 f8d6 	bl	8000c58 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4b61      	ldr	r3, [pc, #388]	@ (8007c38 <UART_SetConfig+0x2d4>)
 8007ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	011c      	lsls	r4, r3, #4
 8007aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ac8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007acc:	4642      	mov	r2, r8
 8007ace:	464b      	mov	r3, r9
 8007ad0:	1891      	adds	r1, r2, r2
 8007ad2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ad4:	415b      	adcs	r3, r3
 8007ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007adc:	4641      	mov	r1, r8
 8007ade:	eb12 0a01 	adds.w	sl, r2, r1
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007af4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007af8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007afc:	4692      	mov	sl, r2
 8007afe:	469b      	mov	fp, r3
 8007b00:	4643      	mov	r3, r8
 8007b02:	eb1a 0303 	adds.w	r3, sl, r3
 8007b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8007b10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	18db      	adds	r3, r3, r3
 8007b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b2e:	4613      	mov	r3, r2
 8007b30:	eb42 0303 	adc.w	r3, r2, r3
 8007b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b3e:	f7f9 f88b 	bl	8000c58 <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	4b3b      	ldr	r3, [pc, #236]	@ (8007c38 <UART_SetConfig+0x2d4>)
 8007b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2264      	movs	r2, #100	@ 0x64
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	1acb      	subs	r3, r1, r3
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b5e:	4b36      	ldr	r3, [pc, #216]	@ (8007c38 <UART_SetConfig+0x2d4>)
 8007b60:	fba3 2302 	umull	r2, r3, r3, r2
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b6c:	441c      	add	r4, r3
 8007b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	1891      	adds	r1, r2, r2
 8007b86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b88:	415b      	adcs	r3, r3
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b90:	4641      	mov	r1, r8
 8007b92:	1851      	adds	r1, r2, r1
 8007b94:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b96:	4649      	mov	r1, r9
 8007b98:	414b      	adcs	r3, r1
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ba8:	4659      	mov	r1, fp
 8007baa:	00cb      	lsls	r3, r1, #3
 8007bac:	4651      	mov	r1, sl
 8007bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb2:	4651      	mov	r1, sl
 8007bb4:	00ca      	lsls	r2, r1, #3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	189b      	adds	r3, r3, r2
 8007bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	eb42 0303 	adc.w	r3, r2, r3
 8007bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007be4:	460b      	mov	r3, r1
 8007be6:	18db      	adds	r3, r3, r3
 8007be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bea:	4613      	mov	r3, r2
 8007bec:	eb42 0303 	adc.w	r3, r2, r3
 8007bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007bfa:	f7f9 f82d 	bl	8000c58 <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4b0d      	ldr	r3, [pc, #52]	@ (8007c38 <UART_SetConfig+0x2d4>)
 8007c04:	fba3 1302 	umull	r1, r3, r3, r2
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	2164      	movs	r1, #100	@ 0x64
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	3332      	adds	r3, #50	@ 0x32
 8007c16:	4a08      	ldr	r2, [pc, #32]	@ (8007c38 <UART_SetConfig+0x2d4>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	f003 0207 	and.w	r2, r3, #7
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4422      	add	r2, r4
 8007c2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c2c:	e106      	b.n	8007e3c <UART_SetConfig+0x4d8>
 8007c2e:	bf00      	nop
 8007c30:	40011000 	.word	0x40011000
 8007c34:	40011400 	.word	0x40011400
 8007c38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c4e:	4642      	mov	r2, r8
 8007c50:	464b      	mov	r3, r9
 8007c52:	1891      	adds	r1, r2, r2
 8007c54:	6239      	str	r1, [r7, #32]
 8007c56:	415b      	adcs	r3, r3
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c5e:	4641      	mov	r1, r8
 8007c60:	1854      	adds	r4, r2, r1
 8007c62:	4649      	mov	r1, r9
 8007c64:	eb43 0501 	adc.w	r5, r3, r1
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	00eb      	lsls	r3, r5, #3
 8007c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c76:	00e2      	lsls	r2, r4, #3
 8007c78:	4614      	mov	r4, r2
 8007c7a:	461d      	mov	r5, r3
 8007c7c:	4643      	mov	r3, r8
 8007c7e:	18e3      	adds	r3, r4, r3
 8007c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c84:	464b      	mov	r3, r9
 8007c86:	eb45 0303 	adc.w	r3, r5, r3
 8007c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007caa:	4629      	mov	r1, r5
 8007cac:	008b      	lsls	r3, r1, #2
 8007cae:	4621      	mov	r1, r4
 8007cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	008a      	lsls	r2, r1, #2
 8007cb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cbc:	f7f8 ffcc 	bl	8000c58 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4b60      	ldr	r3, [pc, #384]	@ (8007e48 <UART_SetConfig+0x4e4>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	011c      	lsls	r4, r3, #4
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	61b9      	str	r1, [r7, #24]
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	1851      	adds	r1, r2, r1
 8007cf4:	6139      	str	r1, [r7, #16]
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	414b      	adcs	r3, r1
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d08:	4659      	mov	r1, fp
 8007d0a:	00cb      	lsls	r3, r1, #3
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d12:	4651      	mov	r1, sl
 8007d14:	00ca      	lsls	r2, r1, #3
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	189b      	adds	r3, r3, r2
 8007d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d24:	464b      	mov	r3, r9
 8007d26:	460a      	mov	r2, r1
 8007d28:	eb42 0303 	adc.w	r3, r2, r3
 8007d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d48:	4649      	mov	r1, r9
 8007d4a:	008b      	lsls	r3, r1, #2
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d52:	4641      	mov	r1, r8
 8007d54:	008a      	lsls	r2, r1, #2
 8007d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d5a:	f7f8 ff7d 	bl	8000c58 <__aeabi_uldivmod>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	4b38      	ldr	r3, [pc, #224]	@ (8007e48 <UART_SetConfig+0x4e4>)
 8007d66:	fba3 2301 	umull	r2, r3, r3, r1
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	2264      	movs	r2, #100	@ 0x64
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	1acb      	subs	r3, r1, r3
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	3332      	adds	r3, #50	@ 0x32
 8007d78:	4a33      	ldr	r2, [pc, #204]	@ (8007e48 <UART_SetConfig+0x4e4>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d84:	441c      	add	r4, r3
 8007d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007da4:	4641      	mov	r1, r8
 8007da6:	1851      	adds	r1, r2, r1
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	4649      	mov	r1, r9
 8007dac:	414b      	adcs	r3, r1
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	00cb      	lsls	r3, r1, #3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	00ca      	lsls	r2, r1, #3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	460a      	mov	r2, r1
 8007dda:	eb42 0303 	adc.w	r3, r2, r3
 8007dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dea:	667a      	str	r2, [r7, #100]	@ 0x64
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007df8:	4649      	mov	r1, r9
 8007dfa:	008b      	lsls	r3, r1, #2
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e02:	4641      	mov	r1, r8
 8007e04:	008a      	lsls	r2, r1, #2
 8007e06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e0a:	f7f8 ff25 	bl	8000c58 <__aeabi_uldivmod>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <UART_SetConfig+0x4e4>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	@ 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	3332      	adds	r3, #50	@ 0x32
 8007e26:	4a08      	ldr	r2, [pc, #32]	@ (8007e48 <UART_SetConfig+0x4e4>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 020f 	and.w	r2, r3, #15
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4422      	add	r2, r4
 8007e3a:	609a      	str	r2, [r3, #8]
}
 8007e3c:	bf00      	nop
 8007e3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e42:	46bd      	mov	sp, r7
 8007e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e48:	51eb851f 	.word	0x51eb851f

08007e4c <__cvt>:
 8007e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	ec57 6b10 	vmov	r6, r7, d0
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	460c      	mov	r4, r1
 8007e58:	4619      	mov	r1, r3
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	bfbb      	ittet	lt
 8007e5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e62:	461f      	movlt	r7, r3
 8007e64:	2300      	movge	r3, #0
 8007e66:	232d      	movlt	r3, #45	@ 0x2d
 8007e68:	700b      	strb	r3, [r1, #0]
 8007e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e70:	4691      	mov	r9, r2
 8007e72:	f023 0820 	bic.w	r8, r3, #32
 8007e76:	bfbc      	itt	lt
 8007e78:	4632      	movlt	r2, r6
 8007e7a:	4616      	movlt	r6, r2
 8007e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e80:	d005      	beq.n	8007e8e <__cvt+0x42>
 8007e82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e86:	d100      	bne.n	8007e8a <__cvt+0x3e>
 8007e88:	3401      	adds	r4, #1
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	e000      	b.n	8007e90 <__cvt+0x44>
 8007e8e:	2103      	movs	r1, #3
 8007e90:	ab03      	add	r3, sp, #12
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	ab02      	add	r3, sp, #8
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	ec47 6b10 	vmov	d0, r6, r7
 8007e9c:	4653      	mov	r3, sl
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	f000 ff76 	bl	8008d90 <_dtoa_r>
 8007ea4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	d119      	bne.n	8007ee0 <__cvt+0x94>
 8007eac:	f019 0f01 	tst.w	r9, #1
 8007eb0:	d00e      	beq.n	8007ed0 <__cvt+0x84>
 8007eb2:	eb00 0904 	add.w	r9, r0, r4
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec2:	b108      	cbz	r0, 8007ec8 <__cvt+0x7c>
 8007ec4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ec8:	2230      	movs	r2, #48	@ 0x30
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	454b      	cmp	r3, r9
 8007ece:	d31e      	bcc.n	8007f0e <__cvt+0xc2>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed4:	1b5b      	subs	r3, r3, r5
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	b004      	add	sp, #16
 8007edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ee4:	eb00 0904 	add.w	r9, r0, r4
 8007ee8:	d1e5      	bne.n	8007eb6 <__cvt+0x6a>
 8007eea:	7803      	ldrb	r3, [r0, #0]
 8007eec:	2b30      	cmp	r3, #48	@ 0x30
 8007eee:	d10a      	bne.n	8007f06 <__cvt+0xba>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8007efc:	b918      	cbnz	r0, 8007f06 <__cvt+0xba>
 8007efe:	f1c4 0401 	rsb	r4, r4, #1
 8007f02:	f8ca 4000 	str.w	r4, [sl]
 8007f06:	f8da 3000 	ldr.w	r3, [sl]
 8007f0a:	4499      	add	r9, r3
 8007f0c:	e7d3      	b.n	8007eb6 <__cvt+0x6a>
 8007f0e:	1c59      	adds	r1, r3, #1
 8007f10:	9103      	str	r1, [sp, #12]
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e7d9      	b.n	8007eca <__cvt+0x7e>

08007f16 <__exponent>:
 8007f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	bfba      	itte	lt
 8007f1c:	4249      	neglt	r1, r1
 8007f1e:	232d      	movlt	r3, #45	@ 0x2d
 8007f20:	232b      	movge	r3, #43	@ 0x2b
 8007f22:	2909      	cmp	r1, #9
 8007f24:	7002      	strb	r2, [r0, #0]
 8007f26:	7043      	strb	r3, [r0, #1]
 8007f28:	dd29      	ble.n	8007f7e <__exponent+0x68>
 8007f2a:	f10d 0307 	add.w	r3, sp, #7
 8007f2e:	461d      	mov	r5, r3
 8007f30:	270a      	movs	r7, #10
 8007f32:	461a      	mov	r2, r3
 8007f34:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f38:	fb07 1416 	mls	r4, r7, r6, r1
 8007f3c:	3430      	adds	r4, #48	@ 0x30
 8007f3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f42:	460c      	mov	r4, r1
 8007f44:	2c63      	cmp	r4, #99	@ 0x63
 8007f46:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	dcf1      	bgt.n	8007f32 <__exponent+0x1c>
 8007f4e:	3130      	adds	r1, #48	@ 0x30
 8007f50:	1e94      	subs	r4, r2, #2
 8007f52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f56:	1c41      	adds	r1, r0, #1
 8007f58:	4623      	mov	r3, r4
 8007f5a:	42ab      	cmp	r3, r5
 8007f5c:	d30a      	bcc.n	8007f74 <__exponent+0x5e>
 8007f5e:	f10d 0309 	add.w	r3, sp, #9
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	42ac      	cmp	r4, r5
 8007f66:	bf88      	it	hi
 8007f68:	2300      	movhi	r3, #0
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	4403      	add	r3, r0
 8007f6e:	1a18      	subs	r0, r3, r0
 8007f70:	b003      	add	sp, #12
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f7c:	e7ed      	b.n	8007f5a <__exponent+0x44>
 8007f7e:	2330      	movs	r3, #48	@ 0x30
 8007f80:	3130      	adds	r1, #48	@ 0x30
 8007f82:	7083      	strb	r3, [r0, #2]
 8007f84:	70c1      	strb	r1, [r0, #3]
 8007f86:	1d03      	adds	r3, r0, #4
 8007f88:	e7f1      	b.n	8007f6e <__exponent+0x58>
	...

08007f8c <_printf_float>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b08d      	sub	sp, #52	@ 0x34
 8007f92:	460c      	mov	r4, r1
 8007f94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f98:	4616      	mov	r6, r2
 8007f9a:	461f      	mov	r7, r3
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	f000 fde7 	bl	8008b70 <_localeconv_r>
 8007fa2:	6803      	ldr	r3, [r0, #0]
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f8 f96a 	bl	8000280 <strlen>
 8007fac:	2300      	movs	r3, #0
 8007fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	9005      	str	r0, [sp, #20]
 8007fb6:	3307      	adds	r3, #7
 8007fb8:	f023 0307 	bic.w	r3, r3, #7
 8007fbc:	f103 0208 	add.w	r2, r3, #8
 8007fc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fc4:	f8d4 b000 	ldr.w	fp, [r4]
 8007fc8:	f8c8 2000 	str.w	r2, [r8]
 8007fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fd4:	9307      	str	r3, [sp, #28]
 8007fd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8008254 <_printf_float+0x2c8>)
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	f7f8 fda8 	bl	8000b3c <__aeabi_dcmpun>
 8007fec:	bb70      	cbnz	r0, 800804c <_printf_float+0xc0>
 8007fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff2:	4b98      	ldr	r3, [pc, #608]	@ (8008254 <_printf_float+0x2c8>)
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	f7f8 fd82 	bl	8000b00 <__aeabi_dcmple>
 8007ffc:	bb30      	cbnz	r0, 800804c <_printf_float+0xc0>
 8007ffe:	2200      	movs	r2, #0
 8008000:	2300      	movs	r3, #0
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 fd71 	bl	8000aec <__aeabi_dcmplt>
 800800a:	b110      	cbz	r0, 8008012 <_printf_float+0x86>
 800800c:	232d      	movs	r3, #45	@ 0x2d
 800800e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008012:	4a91      	ldr	r2, [pc, #580]	@ (8008258 <_printf_float+0x2cc>)
 8008014:	4b91      	ldr	r3, [pc, #580]	@ (800825c <_printf_float+0x2d0>)
 8008016:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800801a:	bf8c      	ite	hi
 800801c:	4690      	movhi	r8, r2
 800801e:	4698      	movls	r8, r3
 8008020:	2303      	movs	r3, #3
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	f02b 0304 	bic.w	r3, fp, #4
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	9700      	str	r7, [sp, #0]
 8008030:	4633      	mov	r3, r6
 8008032:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008034:	4621      	mov	r1, r4
 8008036:	4628      	mov	r0, r5
 8008038:	f000 f9d2 	bl	80083e0 <_printf_common>
 800803c:	3001      	adds	r0, #1
 800803e:	f040 808d 	bne.w	800815c <_printf_float+0x1d0>
 8008042:	f04f 30ff 	mov.w	r0, #4294967295
 8008046:	b00d      	add	sp, #52	@ 0x34
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fd72 	bl	8000b3c <__aeabi_dcmpun>
 8008058:	b140      	cbz	r0, 800806c <_printf_float+0xe0>
 800805a:	464b      	mov	r3, r9
 800805c:	2b00      	cmp	r3, #0
 800805e:	bfbc      	itt	lt
 8008060:	232d      	movlt	r3, #45	@ 0x2d
 8008062:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008066:	4a7e      	ldr	r2, [pc, #504]	@ (8008260 <_printf_float+0x2d4>)
 8008068:	4b7e      	ldr	r3, [pc, #504]	@ (8008264 <_printf_float+0x2d8>)
 800806a:	e7d4      	b.n	8008016 <_printf_float+0x8a>
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008072:	9206      	str	r2, [sp, #24]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	d13b      	bne.n	80080f0 <_printf_float+0x164>
 8008078:	2306      	movs	r3, #6
 800807a:	6063      	str	r3, [r4, #4]
 800807c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008080:	2300      	movs	r3, #0
 8008082:	6022      	str	r2, [r4, #0]
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	ab0a      	add	r3, sp, #40	@ 0x28
 8008088:	e9cd a301 	strd	sl, r3, [sp, #4]
 800808c:	ab09      	add	r3, sp, #36	@ 0x24
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	ec49 8b10 	vmov	d0, r8, r9
 8008096:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff fed6 	bl	8007e4c <__cvt>
 80080a0:	9b06      	ldr	r3, [sp, #24]
 80080a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080a4:	2b47      	cmp	r3, #71	@ 0x47
 80080a6:	4680      	mov	r8, r0
 80080a8:	d129      	bne.n	80080fe <_printf_float+0x172>
 80080aa:	1cc8      	adds	r0, r1, #3
 80080ac:	db02      	blt.n	80080b4 <_printf_float+0x128>
 80080ae:	6863      	ldr	r3, [r4, #4]
 80080b0:	4299      	cmp	r1, r3
 80080b2:	dd41      	ble.n	8008138 <_printf_float+0x1ac>
 80080b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80080b8:	fa5f fa8a 	uxtb.w	sl, sl
 80080bc:	3901      	subs	r1, #1
 80080be:	4652      	mov	r2, sl
 80080c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80080c6:	f7ff ff26 	bl	8007f16 <__exponent>
 80080ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080cc:	1813      	adds	r3, r2, r0
 80080ce:	2a01      	cmp	r2, #1
 80080d0:	4681      	mov	r9, r0
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	dc02      	bgt.n	80080dc <_printf_float+0x150>
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	07d2      	lsls	r2, r2, #31
 80080da:	d501      	bpl.n	80080e0 <_printf_float+0x154>
 80080dc:	3301      	adds	r3, #1
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0a2      	beq.n	800802e <_printf_float+0xa2>
 80080e8:	232d      	movs	r3, #45	@ 0x2d
 80080ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ee:	e79e      	b.n	800802e <_printf_float+0xa2>
 80080f0:	9a06      	ldr	r2, [sp, #24]
 80080f2:	2a47      	cmp	r2, #71	@ 0x47
 80080f4:	d1c2      	bne.n	800807c <_printf_float+0xf0>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1c0      	bne.n	800807c <_printf_float+0xf0>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7bd      	b.n	800807a <_printf_float+0xee>
 80080fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008102:	d9db      	bls.n	80080bc <_printf_float+0x130>
 8008104:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008108:	d118      	bne.n	800813c <_printf_float+0x1b0>
 800810a:	2900      	cmp	r1, #0
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	dd0b      	ble.n	8008128 <_printf_float+0x19c>
 8008110:	6121      	str	r1, [r4, #16]
 8008112:	b913      	cbnz	r3, 800811a <_printf_float+0x18e>
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	07d0      	lsls	r0, r2, #31
 8008118:	d502      	bpl.n	8008120 <_printf_float+0x194>
 800811a:	3301      	adds	r3, #1
 800811c:	440b      	add	r3, r1
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	e7db      	b.n	80080e0 <_printf_float+0x154>
 8008128:	b913      	cbnz	r3, 8008130 <_printf_float+0x1a4>
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	07d2      	lsls	r2, r2, #31
 800812e:	d501      	bpl.n	8008134 <_printf_float+0x1a8>
 8008130:	3302      	adds	r3, #2
 8008132:	e7f4      	b.n	800811e <_printf_float+0x192>
 8008134:	2301      	movs	r3, #1
 8008136:	e7f2      	b.n	800811e <_printf_float+0x192>
 8008138:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800813c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813e:	4299      	cmp	r1, r3
 8008140:	db05      	blt.n	800814e <_printf_float+0x1c2>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	6121      	str	r1, [r4, #16]
 8008146:	07d8      	lsls	r0, r3, #31
 8008148:	d5ea      	bpl.n	8008120 <_printf_float+0x194>
 800814a:	1c4b      	adds	r3, r1, #1
 800814c:	e7e7      	b.n	800811e <_printf_float+0x192>
 800814e:	2900      	cmp	r1, #0
 8008150:	bfd4      	ite	le
 8008152:	f1c1 0202 	rsble	r2, r1, #2
 8008156:	2201      	movgt	r2, #1
 8008158:	4413      	add	r3, r2
 800815a:	e7e0      	b.n	800811e <_printf_float+0x192>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	055a      	lsls	r2, r3, #21
 8008160:	d407      	bmi.n	8008172 <_printf_float+0x1e6>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	4642      	mov	r2, r8
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	d12b      	bne.n	80081c8 <_printf_float+0x23c>
 8008170:	e767      	b.n	8008042 <_printf_float+0xb6>
 8008172:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008176:	f240 80dd 	bls.w	8008334 <_printf_float+0x3a8>
 800817a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	f7f8 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008186:	2800      	cmp	r0, #0
 8008188:	d033      	beq.n	80081f2 <_printf_float+0x266>
 800818a:	4a37      	ldr	r2, [pc, #220]	@ (8008268 <_printf_float+0x2dc>)
 800818c:	2301      	movs	r3, #1
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f af54 	beq.w	8008042 <_printf_float+0xb6>
 800819a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800819e:	4543      	cmp	r3, r8
 80081a0:	db02      	blt.n	80081a8 <_printf_float+0x21c>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	07d8      	lsls	r0, r3, #31
 80081a6:	d50f      	bpl.n	80081c8 <_printf_float+0x23c>
 80081a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af45 	beq.w	8008042 <_printf_float+0xb6>
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80081c0:	f104 0a1a 	add.w	sl, r4, #26
 80081c4:	45c8      	cmp	r8, r9
 80081c6:	dc09      	bgt.n	80081dc <_printf_float+0x250>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	079b      	lsls	r3, r3, #30
 80081cc:	f100 8103 	bmi.w	80083d6 <_printf_float+0x44a>
 80081d0:	68e0      	ldr	r0, [r4, #12]
 80081d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d4:	4298      	cmp	r0, r3
 80081d6:	bfb8      	it	lt
 80081d8:	4618      	movlt	r0, r3
 80081da:	e734      	b.n	8008046 <_printf_float+0xba>
 80081dc:	2301      	movs	r3, #1
 80081de:	4652      	mov	r2, sl
 80081e0:	4631      	mov	r1, r6
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f43f af2b 	beq.w	8008042 <_printf_float+0xb6>
 80081ec:	f109 0901 	add.w	r9, r9, #1
 80081f0:	e7e8      	b.n	80081c4 <_printf_float+0x238>
 80081f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dc39      	bgt.n	800826c <_printf_float+0x2e0>
 80081f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008268 <_printf_float+0x2dc>)
 80081fa:	2301      	movs	r3, #1
 80081fc:	4631      	mov	r1, r6
 80081fe:	4628      	mov	r0, r5
 8008200:	47b8      	blx	r7
 8008202:	3001      	adds	r0, #1
 8008204:	f43f af1d 	beq.w	8008042 <_printf_float+0xb6>
 8008208:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800820c:	ea59 0303 	orrs.w	r3, r9, r3
 8008210:	d102      	bne.n	8008218 <_printf_float+0x28c>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	07d9      	lsls	r1, r3, #31
 8008216:	d5d7      	bpl.n	80081c8 <_printf_float+0x23c>
 8008218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f af0d 	beq.w	8008042 <_printf_float+0xb6>
 8008228:	f04f 0a00 	mov.w	sl, #0
 800822c:	f104 0b1a 	add.w	fp, r4, #26
 8008230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008232:	425b      	negs	r3, r3
 8008234:	4553      	cmp	r3, sl
 8008236:	dc01      	bgt.n	800823c <_printf_float+0x2b0>
 8008238:	464b      	mov	r3, r9
 800823a:	e793      	b.n	8008164 <_printf_float+0x1d8>
 800823c:	2301      	movs	r3, #1
 800823e:	465a      	mov	r2, fp
 8008240:	4631      	mov	r1, r6
 8008242:	4628      	mov	r0, r5
 8008244:	47b8      	blx	r7
 8008246:	3001      	adds	r0, #1
 8008248:	f43f aefb 	beq.w	8008042 <_printf_float+0xb6>
 800824c:	f10a 0a01 	add.w	sl, sl, #1
 8008250:	e7ee      	b.n	8008230 <_printf_float+0x2a4>
 8008252:	bf00      	nop
 8008254:	7fefffff 	.word	0x7fefffff
 8008258:	0800b824 	.word	0x0800b824
 800825c:	0800b820 	.word	0x0800b820
 8008260:	0800b82c 	.word	0x0800b82c
 8008264:	0800b828 	.word	0x0800b828
 8008268:	0800b830 	.word	0x0800b830
 800826c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800826e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008272:	4553      	cmp	r3, sl
 8008274:	bfa8      	it	ge
 8008276:	4653      	movge	r3, sl
 8008278:	2b00      	cmp	r3, #0
 800827a:	4699      	mov	r9, r3
 800827c:	dc36      	bgt.n	80082ec <_printf_float+0x360>
 800827e:	f04f 0b00 	mov.w	fp, #0
 8008282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008286:	f104 021a 	add.w	r2, r4, #26
 800828a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800828c:	9306      	str	r3, [sp, #24]
 800828e:	eba3 0309 	sub.w	r3, r3, r9
 8008292:	455b      	cmp	r3, fp
 8008294:	dc31      	bgt.n	80082fa <_printf_float+0x36e>
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	459a      	cmp	sl, r3
 800829a:	dc3a      	bgt.n	8008312 <_printf_float+0x386>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07da      	lsls	r2, r3, #31
 80082a0:	d437      	bmi.n	8008312 <_printf_float+0x386>
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	ebaa 0903 	sub.w	r9, sl, r3
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	ebaa 0303 	sub.w	r3, sl, r3
 80082ae:	4599      	cmp	r9, r3
 80082b0:	bfa8      	it	ge
 80082b2:	4699      	movge	r9, r3
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	dc33      	bgt.n	8008322 <_printf_float+0x396>
 80082ba:	f04f 0800 	mov.w	r8, #0
 80082be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082c2:	f104 0b1a 	add.w	fp, r4, #26
 80082c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c8:	ebaa 0303 	sub.w	r3, sl, r3
 80082cc:	eba3 0309 	sub.w	r3, r3, r9
 80082d0:	4543      	cmp	r3, r8
 80082d2:	f77f af79 	ble.w	80081c8 <_printf_float+0x23c>
 80082d6:	2301      	movs	r3, #1
 80082d8:	465a      	mov	r2, fp
 80082da:	4631      	mov	r1, r6
 80082dc:	4628      	mov	r0, r5
 80082de:	47b8      	blx	r7
 80082e0:	3001      	adds	r0, #1
 80082e2:	f43f aeae 	beq.w	8008042 <_printf_float+0xb6>
 80082e6:	f108 0801 	add.w	r8, r8, #1
 80082ea:	e7ec      	b.n	80082c6 <_printf_float+0x33a>
 80082ec:	4642      	mov	r2, r8
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1c2      	bne.n	800827e <_printf_float+0x2f2>
 80082f8:	e6a3      	b.n	8008042 <_printf_float+0xb6>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	9206      	str	r2, [sp, #24]
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f ae9c 	beq.w	8008042 <_printf_float+0xb6>
 800830a:	9a06      	ldr	r2, [sp, #24]
 800830c:	f10b 0b01 	add.w	fp, fp, #1
 8008310:	e7bb      	b.n	800828a <_printf_float+0x2fe>
 8008312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	d1c0      	bne.n	80082a2 <_printf_float+0x316>
 8008320:	e68f      	b.n	8008042 <_printf_float+0xb6>
 8008322:	9a06      	ldr	r2, [sp, #24]
 8008324:	464b      	mov	r3, r9
 8008326:	4442      	add	r2, r8
 8008328:	4631      	mov	r1, r6
 800832a:	4628      	mov	r0, r5
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	d1c3      	bne.n	80082ba <_printf_float+0x32e>
 8008332:	e686      	b.n	8008042 <_printf_float+0xb6>
 8008334:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008338:	f1ba 0f01 	cmp.w	sl, #1
 800833c:	dc01      	bgt.n	8008342 <_printf_float+0x3b6>
 800833e:	07db      	lsls	r3, r3, #31
 8008340:	d536      	bpl.n	80083b0 <_printf_float+0x424>
 8008342:	2301      	movs	r3, #1
 8008344:	4642      	mov	r2, r8
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	f43f ae78 	beq.w	8008042 <_printf_float+0xb6>
 8008352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	f43f ae70 	beq.w	8008042 <_printf_float+0xb6>
 8008362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008366:	2200      	movs	r2, #0
 8008368:	2300      	movs	r3, #0
 800836a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800836e:	f7f8 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008372:	b9c0      	cbnz	r0, 80083a6 <_printf_float+0x41a>
 8008374:	4653      	mov	r3, sl
 8008376:	f108 0201 	add.w	r2, r8, #1
 800837a:	4631      	mov	r1, r6
 800837c:	4628      	mov	r0, r5
 800837e:	47b8      	blx	r7
 8008380:	3001      	adds	r0, #1
 8008382:	d10c      	bne.n	800839e <_printf_float+0x412>
 8008384:	e65d      	b.n	8008042 <_printf_float+0xb6>
 8008386:	2301      	movs	r3, #1
 8008388:	465a      	mov	r2, fp
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	f43f ae56 	beq.w	8008042 <_printf_float+0xb6>
 8008396:	f108 0801 	add.w	r8, r8, #1
 800839a:	45d0      	cmp	r8, sl
 800839c:	dbf3      	blt.n	8008386 <_printf_float+0x3fa>
 800839e:	464b      	mov	r3, r9
 80083a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083a4:	e6df      	b.n	8008166 <_printf_float+0x1da>
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	f104 0b1a 	add.w	fp, r4, #26
 80083ae:	e7f4      	b.n	800839a <_printf_float+0x40e>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4642      	mov	r2, r8
 80083b4:	e7e1      	b.n	800837a <_printf_float+0x3ee>
 80083b6:	2301      	movs	r3, #1
 80083b8:	464a      	mov	r2, r9
 80083ba:	4631      	mov	r1, r6
 80083bc:	4628      	mov	r0, r5
 80083be:	47b8      	blx	r7
 80083c0:	3001      	adds	r0, #1
 80083c2:	f43f ae3e 	beq.w	8008042 <_printf_float+0xb6>
 80083c6:	f108 0801 	add.w	r8, r8, #1
 80083ca:	68e3      	ldr	r3, [r4, #12]
 80083cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083ce:	1a5b      	subs	r3, r3, r1
 80083d0:	4543      	cmp	r3, r8
 80083d2:	dcf0      	bgt.n	80083b6 <_printf_float+0x42a>
 80083d4:	e6fc      	b.n	80081d0 <_printf_float+0x244>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f104 0919 	add.w	r9, r4, #25
 80083de:	e7f4      	b.n	80083ca <_printf_float+0x43e>

080083e0 <_printf_common>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	4616      	mov	r6, r2
 80083e6:	4698      	mov	r8, r3
 80083e8:	688a      	ldr	r2, [r1, #8]
 80083ea:	690b      	ldr	r3, [r1, #16]
 80083ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	bfb8      	it	lt
 80083f4:	4613      	movlt	r3, r2
 80083f6:	6033      	str	r3, [r6, #0]
 80083f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083fc:	4607      	mov	r7, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b10a      	cbz	r2, 8008406 <_printf_common+0x26>
 8008402:	3301      	adds	r3, #1
 8008404:	6033      	str	r3, [r6, #0]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	0699      	lsls	r1, r3, #26
 800840a:	bf42      	ittt	mi
 800840c:	6833      	ldrmi	r3, [r6, #0]
 800840e:	3302      	addmi	r3, #2
 8008410:	6033      	strmi	r3, [r6, #0]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	f015 0506 	ands.w	r5, r5, #6
 8008418:	d106      	bne.n	8008428 <_printf_common+0x48>
 800841a:	f104 0a19 	add.w	sl, r4, #25
 800841e:	68e3      	ldr	r3, [r4, #12]
 8008420:	6832      	ldr	r2, [r6, #0]
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	42ab      	cmp	r3, r5
 8008426:	dc26      	bgt.n	8008476 <_printf_common+0x96>
 8008428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	3b00      	subs	r3, #0
 8008430:	bf18      	it	ne
 8008432:	2301      	movne	r3, #1
 8008434:	0692      	lsls	r2, r2, #26
 8008436:	d42b      	bmi.n	8008490 <_printf_common+0xb0>
 8008438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800843c:	4641      	mov	r1, r8
 800843e:	4638      	mov	r0, r7
 8008440:	47c8      	blx	r9
 8008442:	3001      	adds	r0, #1
 8008444:	d01e      	beq.n	8008484 <_printf_common+0xa4>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	6922      	ldr	r2, [r4, #16]
 800844a:	f003 0306 	and.w	r3, r3, #6
 800844e:	2b04      	cmp	r3, #4
 8008450:	bf02      	ittt	eq
 8008452:	68e5      	ldreq	r5, [r4, #12]
 8008454:	6833      	ldreq	r3, [r6, #0]
 8008456:	1aed      	subeq	r5, r5, r3
 8008458:	68a3      	ldr	r3, [r4, #8]
 800845a:	bf0c      	ite	eq
 800845c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008460:	2500      	movne	r5, #0
 8008462:	4293      	cmp	r3, r2
 8008464:	bfc4      	itt	gt
 8008466:	1a9b      	subgt	r3, r3, r2
 8008468:	18ed      	addgt	r5, r5, r3
 800846a:	2600      	movs	r6, #0
 800846c:	341a      	adds	r4, #26
 800846e:	42b5      	cmp	r5, r6
 8008470:	d11a      	bne.n	80084a8 <_printf_common+0xc8>
 8008472:	2000      	movs	r0, #0
 8008474:	e008      	b.n	8008488 <_printf_common+0xa8>
 8008476:	2301      	movs	r3, #1
 8008478:	4652      	mov	r2, sl
 800847a:	4641      	mov	r1, r8
 800847c:	4638      	mov	r0, r7
 800847e:	47c8      	blx	r9
 8008480:	3001      	adds	r0, #1
 8008482:	d103      	bne.n	800848c <_printf_common+0xac>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	3501      	adds	r5, #1
 800848e:	e7c6      	b.n	800841e <_printf_common+0x3e>
 8008490:	18e1      	adds	r1, r4, r3
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	2030      	movs	r0, #48	@ 0x30
 8008496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800849a:	4422      	add	r2, r4
 800849c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084a4:	3302      	adds	r3, #2
 80084a6:	e7c7      	b.n	8008438 <_printf_common+0x58>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4622      	mov	r2, r4
 80084ac:	4641      	mov	r1, r8
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c8      	blx	r9
 80084b2:	3001      	adds	r0, #1
 80084b4:	d0e6      	beq.n	8008484 <_printf_common+0xa4>
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7d9      	b.n	800846e <_printf_common+0x8e>
	...

080084bc <_printf_i>:
 80084bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	7e0f      	ldrb	r7, [r1, #24]
 80084c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084c4:	2f78      	cmp	r7, #120	@ 0x78
 80084c6:	4691      	mov	r9, r2
 80084c8:	4680      	mov	r8, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	469a      	mov	sl, r3
 80084ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084d2:	d807      	bhi.n	80084e4 <_printf_i+0x28>
 80084d4:	2f62      	cmp	r7, #98	@ 0x62
 80084d6:	d80a      	bhi.n	80084ee <_printf_i+0x32>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	f000 80d1 	beq.w	8008680 <_printf_i+0x1c4>
 80084de:	2f58      	cmp	r7, #88	@ 0x58
 80084e0:	f000 80b8 	beq.w	8008654 <_printf_i+0x198>
 80084e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084ec:	e03a      	b.n	8008564 <_printf_i+0xa8>
 80084ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084f2:	2b15      	cmp	r3, #21
 80084f4:	d8f6      	bhi.n	80084e4 <_printf_i+0x28>
 80084f6:	a101      	add	r1, pc, #4	@ (adr r1, 80084fc <_printf_i+0x40>)
 80084f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008569 	.word	0x08008569
 8008504:	080084e5 	.word	0x080084e5
 8008508:	080084e5 	.word	0x080084e5
 800850c:	080084e5 	.word	0x080084e5
 8008510:	080084e5 	.word	0x080084e5
 8008514:	08008569 	.word	0x08008569
 8008518:	080084e5 	.word	0x080084e5
 800851c:	080084e5 	.word	0x080084e5
 8008520:	080084e5 	.word	0x080084e5
 8008524:	080084e5 	.word	0x080084e5
 8008528:	08008667 	.word	0x08008667
 800852c:	08008593 	.word	0x08008593
 8008530:	08008621 	.word	0x08008621
 8008534:	080084e5 	.word	0x080084e5
 8008538:	080084e5 	.word	0x080084e5
 800853c:	08008689 	.word	0x08008689
 8008540:	080084e5 	.word	0x080084e5
 8008544:	08008593 	.word	0x08008593
 8008548:	080084e5 	.word	0x080084e5
 800854c:	080084e5 	.word	0x080084e5
 8008550:	08008629 	.word	0x08008629
 8008554:	6833      	ldr	r3, [r6, #0]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6032      	str	r2, [r6, #0]
 800855c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008564:	2301      	movs	r3, #1
 8008566:	e09c      	b.n	80086a2 <_printf_i+0x1e6>
 8008568:	6833      	ldr	r3, [r6, #0]
 800856a:	6820      	ldr	r0, [r4, #0]
 800856c:	1d19      	adds	r1, r3, #4
 800856e:	6031      	str	r1, [r6, #0]
 8008570:	0606      	lsls	r6, r0, #24
 8008572:	d501      	bpl.n	8008578 <_printf_i+0xbc>
 8008574:	681d      	ldr	r5, [r3, #0]
 8008576:	e003      	b.n	8008580 <_printf_i+0xc4>
 8008578:	0645      	lsls	r5, r0, #25
 800857a:	d5fb      	bpl.n	8008574 <_printf_i+0xb8>
 800857c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008580:	2d00      	cmp	r5, #0
 8008582:	da03      	bge.n	800858c <_printf_i+0xd0>
 8008584:	232d      	movs	r3, #45	@ 0x2d
 8008586:	426d      	negs	r5, r5
 8008588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858c:	4858      	ldr	r0, [pc, #352]	@ (80086f0 <_printf_i+0x234>)
 800858e:	230a      	movs	r3, #10
 8008590:	e011      	b.n	80085b6 <_printf_i+0xfa>
 8008592:	6821      	ldr	r1, [r4, #0]
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	0608      	lsls	r0, r1, #24
 8008598:	f853 5b04 	ldr.w	r5, [r3], #4
 800859c:	d402      	bmi.n	80085a4 <_printf_i+0xe8>
 800859e:	0649      	lsls	r1, r1, #25
 80085a0:	bf48      	it	mi
 80085a2:	b2ad      	uxthmi	r5, r5
 80085a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80085a6:	4852      	ldr	r0, [pc, #328]	@ (80086f0 <_printf_i+0x234>)
 80085a8:	6033      	str	r3, [r6, #0]
 80085aa:	bf14      	ite	ne
 80085ac:	230a      	movne	r3, #10
 80085ae:	2308      	moveq	r3, #8
 80085b0:	2100      	movs	r1, #0
 80085b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085b6:	6866      	ldr	r6, [r4, #4]
 80085b8:	60a6      	str	r6, [r4, #8]
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	db05      	blt.n	80085ca <_printf_i+0x10e>
 80085be:	6821      	ldr	r1, [r4, #0]
 80085c0:	432e      	orrs	r6, r5
 80085c2:	f021 0104 	bic.w	r1, r1, #4
 80085c6:	6021      	str	r1, [r4, #0]
 80085c8:	d04b      	beq.n	8008662 <_printf_i+0x1a6>
 80085ca:	4616      	mov	r6, r2
 80085cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80085d0:	fb03 5711 	mls	r7, r3, r1, r5
 80085d4:	5dc7      	ldrb	r7, [r0, r7]
 80085d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085da:	462f      	mov	r7, r5
 80085dc:	42bb      	cmp	r3, r7
 80085de:	460d      	mov	r5, r1
 80085e0:	d9f4      	bls.n	80085cc <_printf_i+0x110>
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	d10b      	bne.n	80085fe <_printf_i+0x142>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	07df      	lsls	r7, r3, #31
 80085ea:	d508      	bpl.n	80085fe <_printf_i+0x142>
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	6861      	ldr	r1, [r4, #4]
 80085f0:	4299      	cmp	r1, r3
 80085f2:	bfde      	ittt	le
 80085f4:	2330      	movle	r3, #48	@ 0x30
 80085f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085fe:	1b92      	subs	r2, r2, r6
 8008600:	6122      	str	r2, [r4, #16]
 8008602:	f8cd a000 	str.w	sl, [sp]
 8008606:	464b      	mov	r3, r9
 8008608:	aa03      	add	r2, sp, #12
 800860a:	4621      	mov	r1, r4
 800860c:	4640      	mov	r0, r8
 800860e:	f7ff fee7 	bl	80083e0 <_printf_common>
 8008612:	3001      	adds	r0, #1
 8008614:	d14a      	bne.n	80086ac <_printf_i+0x1f0>
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
 800861a:	b004      	add	sp, #16
 800861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	f043 0320 	orr.w	r3, r3, #32
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	4832      	ldr	r0, [pc, #200]	@ (80086f4 <_printf_i+0x238>)
 800862a:	2778      	movs	r7, #120	@ 0x78
 800862c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	6831      	ldr	r1, [r6, #0]
 8008634:	061f      	lsls	r7, r3, #24
 8008636:	f851 5b04 	ldr.w	r5, [r1], #4
 800863a:	d402      	bmi.n	8008642 <_printf_i+0x186>
 800863c:	065f      	lsls	r7, r3, #25
 800863e:	bf48      	it	mi
 8008640:	b2ad      	uxthmi	r5, r5
 8008642:	6031      	str	r1, [r6, #0]
 8008644:	07d9      	lsls	r1, r3, #31
 8008646:	bf44      	itt	mi
 8008648:	f043 0320 	orrmi.w	r3, r3, #32
 800864c:	6023      	strmi	r3, [r4, #0]
 800864e:	b11d      	cbz	r5, 8008658 <_printf_i+0x19c>
 8008650:	2310      	movs	r3, #16
 8008652:	e7ad      	b.n	80085b0 <_printf_i+0xf4>
 8008654:	4826      	ldr	r0, [pc, #152]	@ (80086f0 <_printf_i+0x234>)
 8008656:	e7e9      	b.n	800862c <_printf_i+0x170>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	f023 0320 	bic.w	r3, r3, #32
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	e7f6      	b.n	8008650 <_printf_i+0x194>
 8008662:	4616      	mov	r6, r2
 8008664:	e7bd      	b.n	80085e2 <_printf_i+0x126>
 8008666:	6833      	ldr	r3, [r6, #0]
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	6961      	ldr	r1, [r4, #20]
 800866c:	1d18      	adds	r0, r3, #4
 800866e:	6030      	str	r0, [r6, #0]
 8008670:	062e      	lsls	r6, r5, #24
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	d501      	bpl.n	800867a <_printf_i+0x1be>
 8008676:	6019      	str	r1, [r3, #0]
 8008678:	e002      	b.n	8008680 <_printf_i+0x1c4>
 800867a:	0668      	lsls	r0, r5, #25
 800867c:	d5fb      	bpl.n	8008676 <_printf_i+0x1ba>
 800867e:	8019      	strh	r1, [r3, #0]
 8008680:	2300      	movs	r3, #0
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	4616      	mov	r6, r2
 8008686:	e7bc      	b.n	8008602 <_printf_i+0x146>
 8008688:	6833      	ldr	r3, [r6, #0]
 800868a:	1d1a      	adds	r2, r3, #4
 800868c:	6032      	str	r2, [r6, #0]
 800868e:	681e      	ldr	r6, [r3, #0]
 8008690:	6862      	ldr	r2, [r4, #4]
 8008692:	2100      	movs	r1, #0
 8008694:	4630      	mov	r0, r6
 8008696:	f7f7 fda3 	bl	80001e0 <memchr>
 800869a:	b108      	cbz	r0, 80086a0 <_printf_i+0x1e4>
 800869c:	1b80      	subs	r0, r0, r6
 800869e:	6060      	str	r0, [r4, #4]
 80086a0:	6863      	ldr	r3, [r4, #4]
 80086a2:	6123      	str	r3, [r4, #16]
 80086a4:	2300      	movs	r3, #0
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086aa:	e7aa      	b.n	8008602 <_printf_i+0x146>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	4632      	mov	r2, r6
 80086b0:	4649      	mov	r1, r9
 80086b2:	4640      	mov	r0, r8
 80086b4:	47d0      	blx	sl
 80086b6:	3001      	adds	r0, #1
 80086b8:	d0ad      	beq.n	8008616 <_printf_i+0x15a>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	079b      	lsls	r3, r3, #30
 80086be:	d413      	bmi.n	80086e8 <_printf_i+0x22c>
 80086c0:	68e0      	ldr	r0, [r4, #12]
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	4298      	cmp	r0, r3
 80086c6:	bfb8      	it	lt
 80086c8:	4618      	movlt	r0, r3
 80086ca:	e7a6      	b.n	800861a <_printf_i+0x15e>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4632      	mov	r2, r6
 80086d0:	4649      	mov	r1, r9
 80086d2:	4640      	mov	r0, r8
 80086d4:	47d0      	blx	sl
 80086d6:	3001      	adds	r0, #1
 80086d8:	d09d      	beq.n	8008616 <_printf_i+0x15a>
 80086da:	3501      	adds	r5, #1
 80086dc:	68e3      	ldr	r3, [r4, #12]
 80086de:	9903      	ldr	r1, [sp, #12]
 80086e0:	1a5b      	subs	r3, r3, r1
 80086e2:	42ab      	cmp	r3, r5
 80086e4:	dcf2      	bgt.n	80086cc <_printf_i+0x210>
 80086e6:	e7eb      	b.n	80086c0 <_printf_i+0x204>
 80086e8:	2500      	movs	r5, #0
 80086ea:	f104 0619 	add.w	r6, r4, #25
 80086ee:	e7f5      	b.n	80086dc <_printf_i+0x220>
 80086f0:	0800b832 	.word	0x0800b832
 80086f4:	0800b843 	.word	0x0800b843

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	6643      	str	r3, [r0, #100]	@ 0x64
 800870c:	81c2      	strh	r2, [r0, #14]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	@ 0x5c
 8008716:	f000 fa23 	bl	8008b60 <memset>
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <std+0x58>)
 800871c:	6263      	str	r3, [r4, #36]	@ 0x24
 800871e:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <std+0x5c>)
 8008720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008722:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <std+0x60>)
 8008724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008726:	4b0d      	ldr	r3, [pc, #52]	@ (800875c <std+0x64>)
 8008728:	6323      	str	r3, [r4, #48]	@ 0x30
 800872a:	4b0d      	ldr	r3, [pc, #52]	@ (8008760 <std+0x68>)
 800872c:	6224      	str	r4, [r4, #32]
 800872e:	429c      	cmp	r4, r3
 8008730:	d006      	beq.n	8008740 <std+0x48>
 8008732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008736:	4294      	cmp	r4, r2
 8008738:	d002      	beq.n	8008740 <std+0x48>
 800873a:	33d0      	adds	r3, #208	@ 0xd0
 800873c:	429c      	cmp	r4, r3
 800873e:	d105      	bne.n	800874c <std+0x54>
 8008740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008748:	f000 ba86 	b.w	8008c58 <__retarget_lock_init_recursive>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	080089b1 	.word	0x080089b1
 8008754:	080089d3 	.word	0x080089d3
 8008758:	08008a0b 	.word	0x08008a0b
 800875c:	08008a2f 	.word	0x08008a2f
 8008760:	20000958 	.word	0x20000958

08008764 <stdio_exit_handler>:
 8008764:	4a02      	ldr	r2, [pc, #8]	@ (8008770 <stdio_exit_handler+0xc>)
 8008766:	4903      	ldr	r1, [pc, #12]	@ (8008774 <stdio_exit_handler+0x10>)
 8008768:	4803      	ldr	r0, [pc, #12]	@ (8008778 <stdio_exit_handler+0x14>)
 800876a:	f000 b869 	b.w	8008840 <_fwalk_sglue>
 800876e:	bf00      	nop
 8008770:	2000002c 	.word	0x2000002c
 8008774:	0800a861 	.word	0x0800a861
 8008778:	2000003c 	.word	0x2000003c

0800877c <cleanup_stdio>:
 800877c:	6841      	ldr	r1, [r0, #4]
 800877e:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <cleanup_stdio+0x34>)
 8008780:	4299      	cmp	r1, r3
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	d001      	beq.n	800878c <cleanup_stdio+0x10>
 8008788:	f002 f86a 	bl	800a860 <_fflush_r>
 800878c:	68a1      	ldr	r1, [r4, #8]
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <cleanup_stdio+0x38>)
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <cleanup_stdio+0x1e>
 8008794:	4620      	mov	r0, r4
 8008796:	f002 f863 	bl	800a860 <_fflush_r>
 800879a:	68e1      	ldr	r1, [r4, #12]
 800879c:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <cleanup_stdio+0x3c>)
 800879e:	4299      	cmp	r1, r3
 80087a0:	d004      	beq.n	80087ac <cleanup_stdio+0x30>
 80087a2:	4620      	mov	r0, r4
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f002 b85a 	b.w	800a860 <_fflush_r>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	20000958 	.word	0x20000958
 80087b4:	200009c0 	.word	0x200009c0
 80087b8:	20000a28 	.word	0x20000a28

080087bc <global_stdio_init.part.0>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <global_stdio_init.part.0+0x30>)
 80087c0:	4c0b      	ldr	r4, [pc, #44]	@ (80087f0 <global_stdio_init.part.0+0x34>)
 80087c2:	4a0c      	ldr	r2, [pc, #48]	@ (80087f4 <global_stdio_init.part.0+0x38>)
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	4620      	mov	r0, r4
 80087c8:	2200      	movs	r2, #0
 80087ca:	2104      	movs	r1, #4
 80087cc:	f7ff ff94 	bl	80086f8 <std>
 80087d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087d4:	2201      	movs	r2, #1
 80087d6:	2109      	movs	r1, #9
 80087d8:	f7ff ff8e 	bl	80086f8 <std>
 80087dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087e0:	2202      	movs	r2, #2
 80087e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e6:	2112      	movs	r1, #18
 80087e8:	f7ff bf86 	b.w	80086f8 <std>
 80087ec:	20000a90 	.word	0x20000a90
 80087f0:	20000958 	.word	0x20000958
 80087f4:	08008765 	.word	0x08008765

080087f8 <__sfp_lock_acquire>:
 80087f8:	4801      	ldr	r0, [pc, #4]	@ (8008800 <__sfp_lock_acquire+0x8>)
 80087fa:	f000 ba2e 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 80087fe:	bf00      	nop
 8008800:	20000a99 	.word	0x20000a99

08008804 <__sfp_lock_release>:
 8008804:	4801      	ldr	r0, [pc, #4]	@ (800880c <__sfp_lock_release+0x8>)
 8008806:	f000 ba29 	b.w	8008c5c <__retarget_lock_release_recursive>
 800880a:	bf00      	nop
 800880c:	20000a99 	.word	0x20000a99

08008810 <__sinit>:
 8008810:	b510      	push	{r4, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	f7ff fff0 	bl	80087f8 <__sfp_lock_acquire>
 8008818:	6a23      	ldr	r3, [r4, #32]
 800881a:	b11b      	cbz	r3, 8008824 <__sinit+0x14>
 800881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008820:	f7ff bff0 	b.w	8008804 <__sfp_lock_release>
 8008824:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <__sinit+0x28>)
 8008826:	6223      	str	r3, [r4, #32]
 8008828:	4b04      	ldr	r3, [pc, #16]	@ (800883c <__sinit+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f5      	bne.n	800881c <__sinit+0xc>
 8008830:	f7ff ffc4 	bl	80087bc <global_stdio_init.part.0>
 8008834:	e7f2      	b.n	800881c <__sinit+0xc>
 8008836:	bf00      	nop
 8008838:	0800877d 	.word	0x0800877d
 800883c:	20000a90 	.word	0x20000a90

08008840 <_fwalk_sglue>:
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4607      	mov	r7, r0
 8008846:	4688      	mov	r8, r1
 8008848:	4614      	mov	r4, r2
 800884a:	2600      	movs	r6, #0
 800884c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008850:	f1b9 0901 	subs.w	r9, r9, #1
 8008854:	d505      	bpl.n	8008862 <_fwalk_sglue+0x22>
 8008856:	6824      	ldr	r4, [r4, #0]
 8008858:	2c00      	cmp	r4, #0
 800885a:	d1f7      	bne.n	800884c <_fwalk_sglue+0xc>
 800885c:	4630      	mov	r0, r6
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d907      	bls.n	8008878 <_fwalk_sglue+0x38>
 8008868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800886c:	3301      	adds	r3, #1
 800886e:	d003      	beq.n	8008878 <_fwalk_sglue+0x38>
 8008870:	4629      	mov	r1, r5
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	4306      	orrs	r6, r0
 8008878:	3568      	adds	r5, #104	@ 0x68
 800887a:	e7e9      	b.n	8008850 <_fwalk_sglue+0x10>

0800887c <iprintf>:
 800887c:	b40f      	push	{r0, r1, r2, r3}
 800887e:	b507      	push	{r0, r1, r2, lr}
 8008880:	4906      	ldr	r1, [pc, #24]	@ (800889c <iprintf+0x20>)
 8008882:	ab04      	add	r3, sp, #16
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	f853 2b04 	ldr.w	r2, [r3], #4
 800888a:	6881      	ldr	r1, [r0, #8]
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	f001 fe4b 	bl	800a528 <_vfiprintf_r>
 8008892:	b003      	add	sp, #12
 8008894:	f85d eb04 	ldr.w	lr, [sp], #4
 8008898:	b004      	add	sp, #16
 800889a:	4770      	bx	lr
 800889c:	20000038 	.word	0x20000038

080088a0 <putchar>:
 80088a0:	4b02      	ldr	r3, [pc, #8]	@ (80088ac <putchar+0xc>)
 80088a2:	4601      	mov	r1, r0
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	6882      	ldr	r2, [r0, #8]
 80088a8:	f002 b864 	b.w	800a974 <_putc_r>
 80088ac:	20000038 	.word	0x20000038

080088b0 <_puts_r>:
 80088b0:	6a03      	ldr	r3, [r0, #32]
 80088b2:	b570      	push	{r4, r5, r6, lr}
 80088b4:	6884      	ldr	r4, [r0, #8]
 80088b6:	4605      	mov	r5, r0
 80088b8:	460e      	mov	r6, r1
 80088ba:	b90b      	cbnz	r3, 80088c0 <_puts_r+0x10>
 80088bc:	f7ff ffa8 	bl	8008810 <__sinit>
 80088c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088c2:	07db      	lsls	r3, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_puts_r+0x22>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	0598      	lsls	r0, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_puts_r+0x22>
 80088cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088ce:	f000 f9c4 	bl	8008c5a <__retarget_lock_acquire_recursive>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	0719      	lsls	r1, r3, #28
 80088d6:	d502      	bpl.n	80088de <_puts_r+0x2e>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d135      	bne.n	800894a <_puts_r+0x9a>
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 f8e7 	bl	8008ab4 <__swsetup_r>
 80088e6:	b380      	cbz	r0, 800894a <_puts_r+0x9a>
 80088e8:	f04f 35ff 	mov.w	r5, #4294967295
 80088ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088ee:	07da      	lsls	r2, r3, #31
 80088f0:	d405      	bmi.n	80088fe <_puts_r+0x4e>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	059b      	lsls	r3, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_puts_r+0x4e>
 80088f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088fa:	f000 f9af 	bl	8008c5c <__retarget_lock_release_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	2b00      	cmp	r3, #0
 8008904:	da04      	bge.n	8008910 <_puts_r+0x60>
 8008906:	69a2      	ldr	r2, [r4, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	dc17      	bgt.n	800893c <_puts_r+0x8c>
 800890c:	290a      	cmp	r1, #10
 800890e:	d015      	beq.n	800893c <_puts_r+0x8c>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	7019      	strb	r1, [r3, #0]
 8008918:	68a3      	ldr	r3, [r4, #8]
 800891a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800891e:	3b01      	subs	r3, #1
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	2900      	cmp	r1, #0
 8008924:	d1ed      	bne.n	8008902 <_puts_r+0x52>
 8008926:	2b00      	cmp	r3, #0
 8008928:	da11      	bge.n	800894e <_puts_r+0x9e>
 800892a:	4622      	mov	r2, r4
 800892c:	210a      	movs	r1, #10
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f881 	bl	8008a36 <__swbuf_r>
 8008934:	3001      	adds	r0, #1
 8008936:	d0d7      	beq.n	80088e8 <_puts_r+0x38>
 8008938:	250a      	movs	r5, #10
 800893a:	e7d7      	b.n	80088ec <_puts_r+0x3c>
 800893c:	4622      	mov	r2, r4
 800893e:	4628      	mov	r0, r5
 8008940:	f000 f879 	bl	8008a36 <__swbuf_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d1e7      	bne.n	8008918 <_puts_r+0x68>
 8008948:	e7ce      	b.n	80088e8 <_puts_r+0x38>
 800894a:	3e01      	subs	r6, #1
 800894c:	e7e4      	b.n	8008918 <_puts_r+0x68>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	220a      	movs	r2, #10
 8008956:	701a      	strb	r2, [r3, #0]
 8008958:	e7ee      	b.n	8008938 <_puts_r+0x88>
	...

0800895c <puts>:
 800895c:	4b02      	ldr	r3, [pc, #8]	@ (8008968 <puts+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f7ff bfa5 	b.w	80088b0 <_puts_r>
 8008966:	bf00      	nop
 8008968:	20000038 	.word	0x20000038

0800896c <siprintf>:
 800896c:	b40e      	push	{r1, r2, r3}
 800896e:	b510      	push	{r4, lr}
 8008970:	b09d      	sub	sp, #116	@ 0x74
 8008972:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008974:	9002      	str	r0, [sp, #8]
 8008976:	9006      	str	r0, [sp, #24]
 8008978:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800897c:	480a      	ldr	r0, [pc, #40]	@ (80089a8 <siprintf+0x3c>)
 800897e:	9107      	str	r1, [sp, #28]
 8008980:	9104      	str	r1, [sp, #16]
 8008982:	490a      	ldr	r1, [pc, #40]	@ (80089ac <siprintf+0x40>)
 8008984:	f853 2b04 	ldr.w	r2, [r3], #4
 8008988:	9105      	str	r1, [sp, #20]
 800898a:	2400      	movs	r4, #0
 800898c:	a902      	add	r1, sp, #8
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008994:	f001 fca2 	bl	800a2dc <_svfiprintf_r>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	701c      	strb	r4, [r3, #0]
 800899c:	b01d      	add	sp, #116	@ 0x74
 800899e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a2:	b003      	add	sp, #12
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	20000038 	.word	0x20000038
 80089ac:	ffff0208 	.word	0xffff0208

080089b0 <__sread>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f900 	bl	8008bbc <_read_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	bfab      	itete	ge
 80089c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089c2:	89a3      	ldrhlt	r3, [r4, #12]
 80089c4:	181b      	addge	r3, r3, r0
 80089c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089ca:	bfac      	ite	ge
 80089cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089ce:	81a3      	strhlt	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__swrite>:
 80089d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	461f      	mov	r7, r3
 80089d8:	898b      	ldrh	r3, [r1, #12]
 80089da:	05db      	lsls	r3, r3, #23
 80089dc:	4605      	mov	r5, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	4616      	mov	r6, r2
 80089e2:	d505      	bpl.n	80089f0 <__swrite+0x1e>
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	2302      	movs	r3, #2
 80089ea:	2200      	movs	r2, #0
 80089ec:	f000 f8d4 	bl	8008b98 <_lseek_r>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	4628      	mov	r0, r5
 8008a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	f000 b8eb 	b.w	8008be0 <_write_r>

08008a0a <__sseek>:
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a12:	f000 f8c1 	bl	8008b98 <_lseek_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	bf15      	itete	ne
 8008a1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a26:	81a3      	strheq	r3, [r4, #12]
 8008a28:	bf18      	it	ne
 8008a2a:	81a3      	strhne	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__sclose>:
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 b8a1 	b.w	8008b78 <_close_r>

08008a36 <__swbuf_r>:
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	460e      	mov	r6, r1
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	b118      	cbz	r0, 8008a48 <__swbuf_r+0x12>
 8008a40:	6a03      	ldr	r3, [r0, #32]
 8008a42:	b90b      	cbnz	r3, 8008a48 <__swbuf_r+0x12>
 8008a44:	f7ff fee4 	bl	8008810 <__sinit>
 8008a48:	69a3      	ldr	r3, [r4, #24]
 8008a4a:	60a3      	str	r3, [r4, #8]
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	071a      	lsls	r2, r3, #28
 8008a50:	d501      	bpl.n	8008a56 <__swbuf_r+0x20>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	b943      	cbnz	r3, 8008a68 <__swbuf_r+0x32>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f82b 	bl	8008ab4 <__swsetup_r>
 8008a5e:	b118      	cbz	r0, 8008a68 <__swbuf_r+0x32>
 8008a60:	f04f 37ff 	mov.w	r7, #4294967295
 8008a64:	4638      	mov	r0, r7
 8008a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	6922      	ldr	r2, [r4, #16]
 8008a6c:	1a98      	subs	r0, r3, r2
 8008a6e:	6963      	ldr	r3, [r4, #20]
 8008a70:	b2f6      	uxtb	r6, r6
 8008a72:	4283      	cmp	r3, r0
 8008a74:	4637      	mov	r7, r6
 8008a76:	dc05      	bgt.n	8008a84 <__swbuf_r+0x4e>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f001 fef0 	bl	800a860 <_fflush_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d1ed      	bne.n	8008a60 <__swbuf_r+0x2a>
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	6022      	str	r2, [r4, #0]
 8008a90:	701e      	strb	r6, [r3, #0]
 8008a92:	6962      	ldr	r2, [r4, #20]
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d004      	beq.n	8008aa4 <__swbuf_r+0x6e>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	07db      	lsls	r3, r3, #31
 8008a9e:	d5e1      	bpl.n	8008a64 <__swbuf_r+0x2e>
 8008aa0:	2e0a      	cmp	r6, #10
 8008aa2:	d1df      	bne.n	8008a64 <__swbuf_r+0x2e>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f001 feda 	bl	800a860 <_fflush_r>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d0d9      	beq.n	8008a64 <__swbuf_r+0x2e>
 8008ab0:	e7d6      	b.n	8008a60 <__swbuf_r+0x2a>
	...

08008ab4 <__swsetup_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4b29      	ldr	r3, [pc, #164]	@ (8008b5c <__swsetup_r+0xa8>)
 8008ab8:	4605      	mov	r5, r0
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	460c      	mov	r4, r1
 8008abe:	b118      	cbz	r0, 8008ac8 <__swsetup_r+0x14>
 8008ac0:	6a03      	ldr	r3, [r0, #32]
 8008ac2:	b90b      	cbnz	r3, 8008ac8 <__swsetup_r+0x14>
 8008ac4:	f7ff fea4 	bl	8008810 <__sinit>
 8008ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008acc:	0719      	lsls	r1, r3, #28
 8008ace:	d422      	bmi.n	8008b16 <__swsetup_r+0x62>
 8008ad0:	06da      	lsls	r2, r3, #27
 8008ad2:	d407      	bmi.n	8008ae4 <__swsetup_r+0x30>
 8008ad4:	2209      	movs	r2, #9
 8008ad6:	602a      	str	r2, [r5, #0]
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	e033      	b.n	8008b4c <__swsetup_r+0x98>
 8008ae4:	0758      	lsls	r0, r3, #29
 8008ae6:	d512      	bpl.n	8008b0e <__swsetup_r+0x5a>
 8008ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aea:	b141      	cbz	r1, 8008afe <__swsetup_r+0x4a>
 8008aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d002      	beq.n	8008afa <__swsetup_r+0x46>
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 ff1b 	bl	8009930 <_free_r>
 8008afa:	2300      	movs	r3, #0
 8008afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	2300      	movs	r3, #0
 8008b08:	6063      	str	r3, [r4, #4]
 8008b0a:	6923      	ldr	r3, [r4, #16]
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f043 0308 	orr.w	r3, r3, #8
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	6923      	ldr	r3, [r4, #16]
 8008b18:	b94b      	cbnz	r3, 8008b2e <__swsetup_r+0x7a>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b24:	d003      	beq.n	8008b2e <__swsetup_r+0x7a>
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f001 fee7 	bl	800a8fc <__smakebuf_r>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	f013 0201 	ands.w	r2, r3, #1
 8008b36:	d00a      	beq.n	8008b4e <__swsetup_r+0x9a>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	60a2      	str	r2, [r4, #8]
 8008b3c:	6962      	ldr	r2, [r4, #20]
 8008b3e:	4252      	negs	r2, r2
 8008b40:	61a2      	str	r2, [r4, #24]
 8008b42:	6922      	ldr	r2, [r4, #16]
 8008b44:	b942      	cbnz	r2, 8008b58 <__swsetup_r+0xa4>
 8008b46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b4a:	d1c5      	bne.n	8008ad8 <__swsetup_r+0x24>
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
 8008b4e:	0799      	lsls	r1, r3, #30
 8008b50:	bf58      	it	pl
 8008b52:	6962      	ldrpl	r2, [r4, #20]
 8008b54:	60a2      	str	r2, [r4, #8]
 8008b56:	e7f4      	b.n	8008b42 <__swsetup_r+0x8e>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e7f7      	b.n	8008b4c <__swsetup_r+0x98>
 8008b5c:	20000038 	.word	0x20000038

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <_localeconv_r>:
 8008b70:	4800      	ldr	r0, [pc, #0]	@ (8008b74 <_localeconv_r+0x4>)
 8008b72:	4770      	bx	lr
 8008b74:	20000178 	.word	0x20000178

08008b78 <_close_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	@ (8008b94 <_close_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7fa f984 	bl	8002e90 <_close>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_close_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_close_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20000a94 	.word	0x20000a94

08008b98 <_lseek_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	@ (8008bb8 <_lseek_r+0x20>)
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f7fa f999 	bl	8002ede <_lseek>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_lseek_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_lseek_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20000a94 	.word	0x20000a94

08008bbc <_read_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d07      	ldr	r5, [pc, #28]	@ (8008bdc <_read_r+0x20>)
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	4608      	mov	r0, r1
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	602a      	str	r2, [r5, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f7fa f927 	bl	8002e1e <_read>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_read_r+0x1e>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_read_r+0x1e>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20000a94 	.word	0x20000a94

08008be0 <_write_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	@ (8008c00 <_write_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7fa f932 	bl	8002e58 <_write>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_write_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_write_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000a94 	.word	0x20000a94

08008c04 <__errno>:
 8008c04:	4b01      	ldr	r3, [pc, #4]	@ (8008c0c <__errno+0x8>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000038 	.word	0x20000038

08008c10 <__libc_init_array>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4d0d      	ldr	r5, [pc, #52]	@ (8008c48 <__libc_init_array+0x38>)
 8008c14:	4c0d      	ldr	r4, [pc, #52]	@ (8008c4c <__libc_init_array+0x3c>)
 8008c16:	1b64      	subs	r4, r4, r5
 8008c18:	10a4      	asrs	r4, r4, #2
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	42a6      	cmp	r6, r4
 8008c1e:	d109      	bne.n	8008c34 <__libc_init_array+0x24>
 8008c20:	4d0b      	ldr	r5, [pc, #44]	@ (8008c50 <__libc_init_array+0x40>)
 8008c22:	4c0c      	ldr	r4, [pc, #48]	@ (8008c54 <__libc_init_array+0x44>)
 8008c24:	f002 f98a 	bl	800af3c <_init>
 8008c28:	1b64      	subs	r4, r4, r5
 8008c2a:	10a4      	asrs	r4, r4, #2
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	42a6      	cmp	r6, r4
 8008c30:	d105      	bne.n	8008c3e <__libc_init_array+0x2e>
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c38:	4798      	blx	r3
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	e7ee      	b.n	8008c1c <__libc_init_array+0xc>
 8008c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c42:	4798      	blx	r3
 8008c44:	3601      	adds	r6, #1
 8008c46:	e7f2      	b.n	8008c2e <__libc_init_array+0x1e>
 8008c48:	0800bbd4 	.word	0x0800bbd4
 8008c4c:	0800bbd4 	.word	0x0800bbd4
 8008c50:	0800bbd4 	.word	0x0800bbd4
 8008c54:	0800bbd8 	.word	0x0800bbd8

08008c58 <__retarget_lock_init_recursive>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_acquire_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__retarget_lock_release_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <memcpy>:
 8008c5e:	440a      	add	r2, r1
 8008c60:	4291      	cmp	r1, r2
 8008c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c66:	d100      	bne.n	8008c6a <memcpy+0xc>
 8008c68:	4770      	bx	lr
 8008c6a:	b510      	push	{r4, lr}
 8008c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c74:	4291      	cmp	r1, r2
 8008c76:	d1f9      	bne.n	8008c6c <memcpy+0xe>
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <quorem>:
 8008c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7e:	6903      	ldr	r3, [r0, #16]
 8008c80:	690c      	ldr	r4, [r1, #16]
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	4607      	mov	r7, r0
 8008c86:	db7e      	blt.n	8008d86 <quorem+0x10c>
 8008c88:	3c01      	subs	r4, #1
 8008c8a:	f101 0814 	add.w	r8, r1, #20
 8008c8e:	00a3      	lsls	r3, r4, #2
 8008c90:	f100 0514 	add.w	r5, r0, #20
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cb0:	d32e      	bcc.n	8008d10 <quorem+0x96>
 8008cb2:	f04f 0a00 	mov.w	sl, #0
 8008cb6:	46c4      	mov	ip, r8
 8008cb8:	46ae      	mov	lr, r5
 8008cba:	46d3      	mov	fp, sl
 8008cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cc0:	b298      	uxth	r0, r3
 8008cc2:	fb06 a000 	mla	r0, r6, r0, sl
 8008cc6:	0c02      	lsrs	r2, r0, #16
 8008cc8:	0c1b      	lsrs	r3, r3, #16
 8008cca:	fb06 2303 	mla	r3, r6, r3, r2
 8008cce:	f8de 2000 	ldr.w	r2, [lr]
 8008cd2:	b280      	uxth	r0, r0
 8008cd4:	b292      	uxth	r2, r2
 8008cd6:	1a12      	subs	r2, r2, r0
 8008cd8:	445a      	add	r2, fp
 8008cda:	f8de 0000 	ldr.w	r0, [lr]
 8008cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ce8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cec:	b292      	uxth	r2, r2
 8008cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cf2:	45e1      	cmp	r9, ip
 8008cf4:	f84e 2b04 	str.w	r2, [lr], #4
 8008cf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cfc:	d2de      	bcs.n	8008cbc <quorem+0x42>
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	58eb      	ldr	r3, [r5, r3]
 8008d02:	b92b      	cbnz	r3, 8008d10 <quorem+0x96>
 8008d04:	9b01      	ldr	r3, [sp, #4]
 8008d06:	3b04      	subs	r3, #4
 8008d08:	429d      	cmp	r5, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	d32f      	bcc.n	8008d6e <quorem+0xf4>
 8008d0e:	613c      	str	r4, [r7, #16]
 8008d10:	4638      	mov	r0, r7
 8008d12:	f001 f97f 	bl	800a014 <__mcmp>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	db25      	blt.n	8008d66 <quorem+0xec>
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d22:	f8d1 c000 	ldr.w	ip, [r1]
 8008d26:	fa1f fe82 	uxth.w	lr, r2
 8008d2a:	fa1f f38c 	uxth.w	r3, ip
 8008d2e:	eba3 030e 	sub.w	r3, r3, lr
 8008d32:	4403      	add	r3, r0
 8008d34:	0c12      	lsrs	r2, r2, #16
 8008d36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d44:	45c1      	cmp	r9, r8
 8008d46:	f841 3b04 	str.w	r3, [r1], #4
 8008d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d4e:	d2e6      	bcs.n	8008d1e <quorem+0xa4>
 8008d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d58:	b922      	cbnz	r2, 8008d64 <quorem+0xea>
 8008d5a:	3b04      	subs	r3, #4
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	461a      	mov	r2, r3
 8008d60:	d30b      	bcc.n	8008d7a <quorem+0x100>
 8008d62:	613c      	str	r4, [r7, #16]
 8008d64:	3601      	adds	r6, #1
 8008d66:	4630      	mov	r0, r6
 8008d68:	b003      	add	sp, #12
 8008d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	d1cb      	bne.n	8008d0e <quorem+0x94>
 8008d76:	3c01      	subs	r4, #1
 8008d78:	e7c6      	b.n	8008d08 <quorem+0x8e>
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	3b04      	subs	r3, #4
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d1ef      	bne.n	8008d62 <quorem+0xe8>
 8008d82:	3c01      	subs	r4, #1
 8008d84:	e7ea      	b.n	8008d5c <quorem+0xe2>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e7ee      	b.n	8008d68 <quorem+0xee>
 8008d8a:	0000      	movs	r0, r0
 8008d8c:	0000      	movs	r0, r0
	...

08008d90 <_dtoa_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	69c7      	ldr	r7, [r0, #28]
 8008d96:	b097      	sub	sp, #92	@ 0x5c
 8008d98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d9c:	ec55 4b10 	vmov	r4, r5, d0
 8008da0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008da2:	9107      	str	r1, [sp, #28]
 8008da4:	4681      	mov	r9, r0
 8008da6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008da8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008daa:	b97f      	cbnz	r7, 8008dcc <_dtoa_r+0x3c>
 8008dac:	2010      	movs	r0, #16
 8008dae:	f000 fe09 	bl	80099c4 <malloc>
 8008db2:	4602      	mov	r2, r0
 8008db4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008db8:	b920      	cbnz	r0, 8008dc4 <_dtoa_r+0x34>
 8008dba:	4ba9      	ldr	r3, [pc, #676]	@ (8009060 <_dtoa_r+0x2d0>)
 8008dbc:	21ef      	movs	r1, #239	@ 0xef
 8008dbe:	48a9      	ldr	r0, [pc, #676]	@ (8009064 <_dtoa_r+0x2d4>)
 8008dc0:	f001 fe58 	bl	800aa74 <__assert_func>
 8008dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008dc8:	6007      	str	r7, [r0, #0]
 8008dca:	60c7      	str	r7, [r0, #12]
 8008dcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008dd0:	6819      	ldr	r1, [r3, #0]
 8008dd2:	b159      	cbz	r1, 8008dec <_dtoa_r+0x5c>
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	604a      	str	r2, [r1, #4]
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4093      	lsls	r3, r2
 8008ddc:	608b      	str	r3, [r1, #8]
 8008dde:	4648      	mov	r0, r9
 8008de0:	f000 fee6 	bl	8009bb0 <_Bfree>
 8008de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	1e2b      	subs	r3, r5, #0
 8008dee:	bfb9      	ittee	lt
 8008df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008df4:	9305      	strlt	r3, [sp, #20]
 8008df6:	2300      	movge	r3, #0
 8008df8:	6033      	strge	r3, [r6, #0]
 8008dfa:	9f05      	ldr	r7, [sp, #20]
 8008dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8009068 <_dtoa_r+0x2d8>)
 8008dfe:	bfbc      	itt	lt
 8008e00:	2201      	movlt	r2, #1
 8008e02:	6032      	strlt	r2, [r6, #0]
 8008e04:	43bb      	bics	r3, r7
 8008e06:	d112      	bne.n	8008e2e <_dtoa_r+0x9e>
 8008e08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e14:	4323      	orrs	r3, r4
 8008e16:	f000 855a 	beq.w	80098ce <_dtoa_r+0xb3e>
 8008e1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800907c <_dtoa_r+0x2ec>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 855c 	beq.w	80098de <_dtoa_r+0xb4e>
 8008e26:	f10a 0303 	add.w	r3, sl, #3
 8008e2a:	f000 bd56 	b.w	80098da <_dtoa_r+0xb4a>
 8008e2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e32:	2200      	movs	r2, #0
 8008e34:	ec51 0b17 	vmov	r0, r1, d7
 8008e38:	2300      	movs	r3, #0
 8008e3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008e3e:	f7f7 fe4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e42:	4680      	mov	r8, r0
 8008e44:	b158      	cbz	r0, 8008e5e <_dtoa_r+0xce>
 8008e46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e48:	2301      	movs	r3, #1
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e4e:	b113      	cbz	r3, 8008e56 <_dtoa_r+0xc6>
 8008e50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e52:	4b86      	ldr	r3, [pc, #536]	@ (800906c <_dtoa_r+0x2dc>)
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009080 <_dtoa_r+0x2f0>
 8008e5a:	f000 bd40 	b.w	80098de <_dtoa_r+0xb4e>
 8008e5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008e62:	aa14      	add	r2, sp, #80	@ 0x50
 8008e64:	a915      	add	r1, sp, #84	@ 0x54
 8008e66:	4648      	mov	r0, r9
 8008e68:	f001 f984 	bl	800a174 <__d2b>
 8008e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e70:	9002      	str	r0, [sp, #8]
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	d078      	beq.n	8008f68 <_dtoa_r+0x1d8>
 8008e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e90:	4619      	mov	r1, r3
 8008e92:	2200      	movs	r2, #0
 8008e94:	4b76      	ldr	r3, [pc, #472]	@ (8009070 <_dtoa_r+0x2e0>)
 8008e96:	f7f7 f9ff 	bl	8000298 <__aeabi_dsub>
 8008e9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009048 <_dtoa_r+0x2b8>)
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f7f7 fbb2 	bl	8000608 <__aeabi_dmul>
 8008ea4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009050 <_dtoa_r+0x2c0>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 f9f7 	bl	800029c <__adddf3>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	f7f7 fb3e 	bl	8000534 <__aeabi_i2d>
 8008eb8:	a367      	add	r3, pc, #412	@ (adr r3, 8009058 <_dtoa_r+0x2c8>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fba3 	bl	8000608 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 f9e7 	bl	800029c <__adddf3>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	f7f7 fe49 	bl	8000b68 <__aeabi_d2iz>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4607      	mov	r7, r0
 8008eda:	2300      	movs	r3, #0
 8008edc:	4620      	mov	r0, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f7f7 fe04 	bl	8000aec <__aeabi_dcmplt>
 8008ee4:	b140      	cbz	r0, 8008ef8 <_dtoa_r+0x168>
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f7f7 fb24 	bl	8000534 <__aeabi_i2d>
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ef4:	b900      	cbnz	r0, 8008ef8 <_dtoa_r+0x168>
 8008ef6:	3f01      	subs	r7, #1
 8008ef8:	2f16      	cmp	r7, #22
 8008efa:	d852      	bhi.n	8008fa2 <_dtoa_r+0x212>
 8008efc:	4b5d      	ldr	r3, [pc, #372]	@ (8009074 <_dtoa_r+0x2e4>)
 8008efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f0a:	f7f7 fdef 	bl	8000aec <__aeabi_dcmplt>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d049      	beq.n	8008fa6 <_dtoa_r+0x216>
 8008f12:	3f01      	subs	r7, #1
 8008f14:	2300      	movs	r3, #0
 8008f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f1a:	1b9b      	subs	r3, r3, r6
 8008f1c:	1e5a      	subs	r2, r3, #1
 8008f1e:	bf45      	ittet	mi
 8008f20:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f24:	9300      	strmi	r3, [sp, #0]
 8008f26:	2300      	movpl	r3, #0
 8008f28:	2300      	movmi	r3, #0
 8008f2a:	9206      	str	r2, [sp, #24]
 8008f2c:	bf54      	ite	pl
 8008f2e:	9300      	strpl	r3, [sp, #0]
 8008f30:	9306      	strmi	r3, [sp, #24]
 8008f32:	2f00      	cmp	r7, #0
 8008f34:	db39      	blt.n	8008faa <_dtoa_r+0x21a>
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	970d      	str	r7, [sp, #52]	@ 0x34
 8008f3a:	443b      	add	r3, r7
 8008f3c:	9306      	str	r3, [sp, #24]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	9b07      	ldr	r3, [sp, #28]
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d863      	bhi.n	8009010 <_dtoa_r+0x280>
 8008f48:	2b05      	cmp	r3, #5
 8008f4a:	bfc4      	itt	gt
 8008f4c:	3b04      	subgt	r3, #4
 8008f4e:	9307      	strgt	r3, [sp, #28]
 8008f50:	9b07      	ldr	r3, [sp, #28]
 8008f52:	f1a3 0302 	sub.w	r3, r3, #2
 8008f56:	bfcc      	ite	gt
 8008f58:	2400      	movgt	r4, #0
 8008f5a:	2401      	movle	r4, #1
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d863      	bhi.n	8009028 <_dtoa_r+0x298>
 8008f60:	e8df f003 	tbb	[pc, r3]
 8008f64:	2b375452 	.word	0x2b375452
 8008f68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f6c:	441e      	add	r6, r3
 8008f6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	bfc1      	itttt	gt
 8008f76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f7a:	409f      	lslgt	r7, r3
 8008f7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f84:	bfd6      	itet	le
 8008f86:	f1c3 0320 	rsble	r3, r3, #32
 8008f8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f8e:	fa04 f003 	lslle.w	r0, r4, r3
 8008f92:	f7f7 fabf 	bl	8000514 <__aeabi_ui2d>
 8008f96:	2201      	movs	r2, #1
 8008f98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f9c:	3e01      	subs	r6, #1
 8008f9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008fa0:	e776      	b.n	8008e90 <_dtoa_r+0x100>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e7b7      	b.n	8008f16 <_dtoa_r+0x186>
 8008fa6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008fa8:	e7b6      	b.n	8008f18 <_dtoa_r+0x188>
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	1bdb      	subs	r3, r3, r7
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	427b      	negs	r3, r7
 8008fb2:	9308      	str	r3, [sp, #32]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008fb8:	e7c3      	b.n	8008f42 <_dtoa_r+0x1b2>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fc0:	eb07 0b03 	add.w	fp, r7, r3
 8008fc4:	f10b 0301 	add.w	r3, fp, #1
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	bfb8      	it	lt
 8008fce:	2301      	movlt	r3, #1
 8008fd0:	e006      	b.n	8008fe0 <_dtoa_r+0x250>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dd28      	ble.n	800902e <_dtoa_r+0x29e>
 8008fdc:	469b      	mov	fp, r3
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	f102 0514 	add.w	r5, r2, #20
 8008fec:	429d      	cmp	r5, r3
 8008fee:	d926      	bls.n	800903e <_dtoa_r+0x2ae>
 8008ff0:	6041      	str	r1, [r0, #4]
 8008ff2:	4648      	mov	r0, r9
 8008ff4:	f000 fd9c 	bl	8009b30 <_Balloc>
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d142      	bne.n	8009084 <_dtoa_r+0x2f4>
 8008ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8009078 <_dtoa_r+0x2e8>)
 8009000:	4602      	mov	r2, r0
 8009002:	f240 11af 	movw	r1, #431	@ 0x1af
 8009006:	e6da      	b.n	8008dbe <_dtoa_r+0x2e>
 8009008:	2300      	movs	r3, #0
 800900a:	e7e3      	b.n	8008fd4 <_dtoa_r+0x244>
 800900c:	2300      	movs	r3, #0
 800900e:	e7d5      	b.n	8008fbc <_dtoa_r+0x22c>
 8009010:	2401      	movs	r4, #1
 8009012:	2300      	movs	r3, #0
 8009014:	9307      	str	r3, [sp, #28]
 8009016:	9409      	str	r4, [sp, #36]	@ 0x24
 8009018:	f04f 3bff 	mov.w	fp, #4294967295
 800901c:	2200      	movs	r2, #0
 800901e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009022:	2312      	movs	r3, #18
 8009024:	920c      	str	r2, [sp, #48]	@ 0x30
 8009026:	e7db      	b.n	8008fe0 <_dtoa_r+0x250>
 8009028:	2301      	movs	r3, #1
 800902a:	9309      	str	r3, [sp, #36]	@ 0x24
 800902c:	e7f4      	b.n	8009018 <_dtoa_r+0x288>
 800902e:	f04f 0b01 	mov.w	fp, #1
 8009032:	f8cd b00c 	str.w	fp, [sp, #12]
 8009036:	465b      	mov	r3, fp
 8009038:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800903c:	e7d0      	b.n	8008fe0 <_dtoa_r+0x250>
 800903e:	3101      	adds	r1, #1
 8009040:	0052      	lsls	r2, r2, #1
 8009042:	e7d1      	b.n	8008fe8 <_dtoa_r+0x258>
 8009044:	f3af 8000 	nop.w
 8009048:	636f4361 	.word	0x636f4361
 800904c:	3fd287a7 	.word	0x3fd287a7
 8009050:	8b60c8b3 	.word	0x8b60c8b3
 8009054:	3fc68a28 	.word	0x3fc68a28
 8009058:	509f79fb 	.word	0x509f79fb
 800905c:	3fd34413 	.word	0x3fd34413
 8009060:	0800b861 	.word	0x0800b861
 8009064:	0800b878 	.word	0x0800b878
 8009068:	7ff00000 	.word	0x7ff00000
 800906c:	0800b831 	.word	0x0800b831
 8009070:	3ff80000 	.word	0x3ff80000
 8009074:	0800b9c8 	.word	0x0800b9c8
 8009078:	0800b8d0 	.word	0x0800b8d0
 800907c:	0800b85d 	.word	0x0800b85d
 8009080:	0800b830 	.word	0x0800b830
 8009084:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009088:	6018      	str	r0, [r3, #0]
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	2b0e      	cmp	r3, #14
 800908e:	f200 80a1 	bhi.w	80091d4 <_dtoa_r+0x444>
 8009092:	2c00      	cmp	r4, #0
 8009094:	f000 809e 	beq.w	80091d4 <_dtoa_r+0x444>
 8009098:	2f00      	cmp	r7, #0
 800909a:	dd33      	ble.n	8009104 <_dtoa_r+0x374>
 800909c:	4b9c      	ldr	r3, [pc, #624]	@ (8009310 <_dtoa_r+0x580>)
 800909e:	f007 020f 	and.w	r2, r7, #15
 80090a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090a6:	ed93 7b00 	vldr	d7, [r3]
 80090aa:	05f8      	lsls	r0, r7, #23
 80090ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80090b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090b4:	d516      	bpl.n	80090e4 <_dtoa_r+0x354>
 80090b6:	4b97      	ldr	r3, [pc, #604]	@ (8009314 <_dtoa_r+0x584>)
 80090b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090c0:	f7f7 fbcc 	bl	800085c <__aeabi_ddiv>
 80090c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c8:	f004 040f 	and.w	r4, r4, #15
 80090cc:	2603      	movs	r6, #3
 80090ce:	4d91      	ldr	r5, [pc, #580]	@ (8009314 <_dtoa_r+0x584>)
 80090d0:	b954      	cbnz	r4, 80090e8 <_dtoa_r+0x358>
 80090d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090da:	f7f7 fbbf 	bl	800085c <__aeabi_ddiv>
 80090de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e2:	e028      	b.n	8009136 <_dtoa_r+0x3a6>
 80090e4:	2602      	movs	r6, #2
 80090e6:	e7f2      	b.n	80090ce <_dtoa_r+0x33e>
 80090e8:	07e1      	lsls	r1, r4, #31
 80090ea:	d508      	bpl.n	80090fe <_dtoa_r+0x36e>
 80090ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090fc:	3601      	adds	r6, #1
 80090fe:	1064      	asrs	r4, r4, #1
 8009100:	3508      	adds	r5, #8
 8009102:	e7e5      	b.n	80090d0 <_dtoa_r+0x340>
 8009104:	f000 80af 	beq.w	8009266 <_dtoa_r+0x4d6>
 8009108:	427c      	negs	r4, r7
 800910a:	4b81      	ldr	r3, [pc, #516]	@ (8009310 <_dtoa_r+0x580>)
 800910c:	4d81      	ldr	r5, [pc, #516]	@ (8009314 <_dtoa_r+0x584>)
 800910e:	f004 020f 	and.w	r2, r4, #15
 8009112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800911e:	f7f7 fa73 	bl	8000608 <__aeabi_dmul>
 8009122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009126:	1124      	asrs	r4, r4, #4
 8009128:	2300      	movs	r3, #0
 800912a:	2602      	movs	r6, #2
 800912c:	2c00      	cmp	r4, #0
 800912e:	f040 808f 	bne.w	8009250 <_dtoa_r+0x4c0>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1d3      	bne.n	80090de <_dtoa_r+0x34e>
 8009136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009138:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8094 	beq.w	800926a <_dtoa_r+0x4da>
 8009142:	4b75      	ldr	r3, [pc, #468]	@ (8009318 <_dtoa_r+0x588>)
 8009144:	2200      	movs	r2, #0
 8009146:	4620      	mov	r0, r4
 8009148:	4629      	mov	r1, r5
 800914a:	f7f7 fccf 	bl	8000aec <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	f000 808b 	beq.w	800926a <_dtoa_r+0x4da>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8087 	beq.w	800926a <_dtoa_r+0x4da>
 800915c:	f1bb 0f00 	cmp.w	fp, #0
 8009160:	dd34      	ble.n	80091cc <_dtoa_r+0x43c>
 8009162:	4620      	mov	r0, r4
 8009164:	4b6d      	ldr	r3, [pc, #436]	@ (800931c <_dtoa_r+0x58c>)
 8009166:	2200      	movs	r2, #0
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fa4d 	bl	8000608 <__aeabi_dmul>
 800916e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009172:	f107 38ff 	add.w	r8, r7, #4294967295
 8009176:	3601      	adds	r6, #1
 8009178:	465c      	mov	r4, fp
 800917a:	4630      	mov	r0, r6
 800917c:	f7f7 f9da 	bl	8000534 <__aeabi_i2d>
 8009180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009184:	f7f7 fa40 	bl	8000608 <__aeabi_dmul>
 8009188:	4b65      	ldr	r3, [pc, #404]	@ (8009320 <_dtoa_r+0x590>)
 800918a:	2200      	movs	r2, #0
 800918c:	f7f7 f886 	bl	800029c <__adddf3>
 8009190:	4605      	mov	r5, r0
 8009192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009196:	2c00      	cmp	r4, #0
 8009198:	d16a      	bne.n	8009270 <_dtoa_r+0x4e0>
 800919a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800919e:	4b61      	ldr	r3, [pc, #388]	@ (8009324 <_dtoa_r+0x594>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	f7f7 f879 	bl	8000298 <__aeabi_dsub>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4633      	mov	r3, r6
 80091b2:	f7f7 fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f040 8298 	bne.w	80096ec <_dtoa_r+0x95c>
 80091bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091c0:	462a      	mov	r2, r5
 80091c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091c6:	f7f7 fc91 	bl	8000aec <__aeabi_dcmplt>
 80091ca:	bb38      	cbnz	r0, 800921c <_dtoa_r+0x48c>
 80091cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80091d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f2c0 8157 	blt.w	800948a <_dtoa_r+0x6fa>
 80091dc:	2f0e      	cmp	r7, #14
 80091de:	f300 8154 	bgt.w	800948a <_dtoa_r+0x6fa>
 80091e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009310 <_dtoa_r+0x580>)
 80091e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091e8:	ed93 7b00 	vldr	d7, [r3]
 80091ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	ed8d 7b00 	vstr	d7, [sp]
 80091f4:	f280 80e5 	bge.w	80093c2 <_dtoa_r+0x632>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f300 80e1 	bgt.w	80093c2 <_dtoa_r+0x632>
 8009200:	d10c      	bne.n	800921c <_dtoa_r+0x48c>
 8009202:	4b48      	ldr	r3, [pc, #288]	@ (8009324 <_dtoa_r+0x594>)
 8009204:	2200      	movs	r2, #0
 8009206:	ec51 0b17 	vmov	r0, r1, d7
 800920a:	f7f7 f9fd 	bl	8000608 <__aeabi_dmul>
 800920e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009212:	f7f7 fc7f 	bl	8000b14 <__aeabi_dcmpge>
 8009216:	2800      	cmp	r0, #0
 8009218:	f000 8266 	beq.w	80096e8 <_dtoa_r+0x958>
 800921c:	2400      	movs	r4, #0
 800921e:	4625      	mov	r5, r4
 8009220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009222:	4656      	mov	r6, sl
 8009224:	ea6f 0803 	mvn.w	r8, r3
 8009228:	2700      	movs	r7, #0
 800922a:	4621      	mov	r1, r4
 800922c:	4648      	mov	r0, r9
 800922e:	f000 fcbf 	bl	8009bb0 <_Bfree>
 8009232:	2d00      	cmp	r5, #0
 8009234:	f000 80bd 	beq.w	80093b2 <_dtoa_r+0x622>
 8009238:	b12f      	cbz	r7, 8009246 <_dtoa_r+0x4b6>
 800923a:	42af      	cmp	r7, r5
 800923c:	d003      	beq.n	8009246 <_dtoa_r+0x4b6>
 800923e:	4639      	mov	r1, r7
 8009240:	4648      	mov	r0, r9
 8009242:	f000 fcb5 	bl	8009bb0 <_Bfree>
 8009246:	4629      	mov	r1, r5
 8009248:	4648      	mov	r0, r9
 800924a:	f000 fcb1 	bl	8009bb0 <_Bfree>
 800924e:	e0b0      	b.n	80093b2 <_dtoa_r+0x622>
 8009250:	07e2      	lsls	r2, r4, #31
 8009252:	d505      	bpl.n	8009260 <_dtoa_r+0x4d0>
 8009254:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009258:	f7f7 f9d6 	bl	8000608 <__aeabi_dmul>
 800925c:	3601      	adds	r6, #1
 800925e:	2301      	movs	r3, #1
 8009260:	1064      	asrs	r4, r4, #1
 8009262:	3508      	adds	r5, #8
 8009264:	e762      	b.n	800912c <_dtoa_r+0x39c>
 8009266:	2602      	movs	r6, #2
 8009268:	e765      	b.n	8009136 <_dtoa_r+0x3a6>
 800926a:	9c03      	ldr	r4, [sp, #12]
 800926c:	46b8      	mov	r8, r7
 800926e:	e784      	b.n	800917a <_dtoa_r+0x3ea>
 8009270:	4b27      	ldr	r3, [pc, #156]	@ (8009310 <_dtoa_r+0x580>)
 8009272:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800927c:	4454      	add	r4, sl
 800927e:	2900      	cmp	r1, #0
 8009280:	d054      	beq.n	800932c <_dtoa_r+0x59c>
 8009282:	4929      	ldr	r1, [pc, #164]	@ (8009328 <_dtoa_r+0x598>)
 8009284:	2000      	movs	r0, #0
 8009286:	f7f7 fae9 	bl	800085c <__aeabi_ddiv>
 800928a:	4633      	mov	r3, r6
 800928c:	462a      	mov	r2, r5
 800928e:	f7f7 f803 	bl	8000298 <__aeabi_dsub>
 8009292:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009296:	4656      	mov	r6, sl
 8009298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800929c:	f7f7 fc64 	bl	8000b68 <__aeabi_d2iz>
 80092a0:	4605      	mov	r5, r0
 80092a2:	f7f7 f947 	bl	8000534 <__aeabi_i2d>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ae:	f7f6 fff3 	bl	8000298 <__aeabi_dsub>
 80092b2:	3530      	adds	r5, #48	@ 0x30
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092bc:	f806 5b01 	strb.w	r5, [r6], #1
 80092c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092c4:	f7f7 fc12 	bl	8000aec <__aeabi_dcmplt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d172      	bne.n	80093b2 <_dtoa_r+0x622>
 80092cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d0:	4911      	ldr	r1, [pc, #68]	@ (8009318 <_dtoa_r+0x588>)
 80092d2:	2000      	movs	r0, #0
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092dc:	f7f7 fc06 	bl	8000aec <__aeabi_dcmplt>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	f040 80b4 	bne.w	800944e <_dtoa_r+0x6be>
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	f43f af70 	beq.w	80091cc <_dtoa_r+0x43c>
 80092ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <_dtoa_r+0x58c>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	f7f7 f988 	bl	8000608 <__aeabi_dmul>
 80092f8:	4b08      	ldr	r3, [pc, #32]	@ (800931c <_dtoa_r+0x58c>)
 80092fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092fe:	2200      	movs	r2, #0
 8009300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800930c:	e7c4      	b.n	8009298 <_dtoa_r+0x508>
 800930e:	bf00      	nop
 8009310:	0800b9c8 	.word	0x0800b9c8
 8009314:	0800b9a0 	.word	0x0800b9a0
 8009318:	3ff00000 	.word	0x3ff00000
 800931c:	40240000 	.word	0x40240000
 8009320:	401c0000 	.word	0x401c0000
 8009324:	40140000 	.word	0x40140000
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	f7f7 f96a 	bl	8000608 <__aeabi_dmul>
 8009334:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009338:	9413      	str	r4, [sp, #76]	@ 0x4c
 800933a:	4656      	mov	r6, sl
 800933c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009340:	f7f7 fc12 	bl	8000b68 <__aeabi_d2iz>
 8009344:	4605      	mov	r5, r0
 8009346:	f7f7 f8f5 	bl	8000534 <__aeabi_i2d>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009352:	f7f6 ffa1 	bl	8000298 <__aeabi_dsub>
 8009356:	3530      	adds	r5, #48	@ 0x30
 8009358:	f806 5b01 	strb.w	r5, [r6], #1
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	42a6      	cmp	r6, r4
 8009362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	d124      	bne.n	80093b6 <_dtoa_r+0x626>
 800936c:	4baf      	ldr	r3, [pc, #700]	@ (800962c <_dtoa_r+0x89c>)
 800936e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009372:	f7f6 ff93 	bl	800029c <__adddf3>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800937e:	f7f7 fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8009382:	2800      	cmp	r0, #0
 8009384:	d163      	bne.n	800944e <_dtoa_r+0x6be>
 8009386:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800938a:	49a8      	ldr	r1, [pc, #672]	@ (800962c <_dtoa_r+0x89c>)
 800938c:	2000      	movs	r0, #0
 800938e:	f7f6 ff83 	bl	8000298 <__aeabi_dsub>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800939a:	f7f7 fba7 	bl	8000aec <__aeabi_dcmplt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f af14 	beq.w	80091cc <_dtoa_r+0x43c>
 80093a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80093a6:	1e73      	subs	r3, r6, #1
 80093a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093ae:	2b30      	cmp	r3, #48	@ 0x30
 80093b0:	d0f8      	beq.n	80093a4 <_dtoa_r+0x614>
 80093b2:	4647      	mov	r7, r8
 80093b4:	e03b      	b.n	800942e <_dtoa_r+0x69e>
 80093b6:	4b9e      	ldr	r3, [pc, #632]	@ (8009630 <_dtoa_r+0x8a0>)
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093c0:	e7bc      	b.n	800933c <_dtoa_r+0x5ac>
 80093c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80093c6:	4656      	mov	r6, sl
 80093c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 fa44 	bl	800085c <__aeabi_ddiv>
 80093d4:	f7f7 fbc8 	bl	8000b68 <__aeabi_d2iz>
 80093d8:	4680      	mov	r8, r0
 80093da:	f7f7 f8ab 	bl	8000534 <__aeabi_i2d>
 80093de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e2:	f7f7 f911 	bl	8000608 <__aeabi_dmul>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4620      	mov	r0, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093f2:	f7f6 ff51 	bl	8000298 <__aeabi_dsub>
 80093f6:	f806 4b01 	strb.w	r4, [r6], #1
 80093fa:	9d03      	ldr	r5, [sp, #12]
 80093fc:	eba6 040a 	sub.w	r4, r6, sl
 8009400:	42a5      	cmp	r5, r4
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	d133      	bne.n	8009470 <_dtoa_r+0x6e0>
 8009408:	f7f6 ff48 	bl	800029c <__adddf3>
 800940c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	f7f7 fb88 	bl	8000b28 <__aeabi_dcmpgt>
 8009418:	b9c0      	cbnz	r0, 800944c <_dtoa_r+0x6bc>
 800941a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	f7f7 fb59 	bl	8000ad8 <__aeabi_dcmpeq>
 8009426:	b110      	cbz	r0, 800942e <_dtoa_r+0x69e>
 8009428:	f018 0f01 	tst.w	r8, #1
 800942c:	d10e      	bne.n	800944c <_dtoa_r+0x6bc>
 800942e:	9902      	ldr	r1, [sp, #8]
 8009430:	4648      	mov	r0, r9
 8009432:	f000 fbbd 	bl	8009bb0 <_Bfree>
 8009436:	2300      	movs	r3, #0
 8009438:	7033      	strb	r3, [r6, #0]
 800943a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800943c:	3701      	adds	r7, #1
 800943e:	601f      	str	r7, [r3, #0]
 8009440:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009442:	2b00      	cmp	r3, #0
 8009444:	f000 824b 	beq.w	80098de <_dtoa_r+0xb4e>
 8009448:	601e      	str	r6, [r3, #0]
 800944a:	e248      	b.n	80098de <_dtoa_r+0xb4e>
 800944c:	46b8      	mov	r8, r7
 800944e:	4633      	mov	r3, r6
 8009450:	461e      	mov	r6, r3
 8009452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009456:	2a39      	cmp	r2, #57	@ 0x39
 8009458:	d106      	bne.n	8009468 <_dtoa_r+0x6d8>
 800945a:	459a      	cmp	sl, r3
 800945c:	d1f8      	bne.n	8009450 <_dtoa_r+0x6c0>
 800945e:	2230      	movs	r2, #48	@ 0x30
 8009460:	f108 0801 	add.w	r8, r8, #1
 8009464:	f88a 2000 	strb.w	r2, [sl]
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	3201      	adds	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	e7a0      	b.n	80093b2 <_dtoa_r+0x622>
 8009470:	4b6f      	ldr	r3, [pc, #444]	@ (8009630 <_dtoa_r+0x8a0>)
 8009472:	2200      	movs	r2, #0
 8009474:	f7f7 f8c8 	bl	8000608 <__aeabi_dmul>
 8009478:	2200      	movs	r2, #0
 800947a:	2300      	movs	r3, #0
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	f7f7 fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009484:	2800      	cmp	r0, #0
 8009486:	d09f      	beq.n	80093c8 <_dtoa_r+0x638>
 8009488:	e7d1      	b.n	800942e <_dtoa_r+0x69e>
 800948a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800948c:	2a00      	cmp	r2, #0
 800948e:	f000 80ea 	beq.w	8009666 <_dtoa_r+0x8d6>
 8009492:	9a07      	ldr	r2, [sp, #28]
 8009494:	2a01      	cmp	r2, #1
 8009496:	f300 80cd 	bgt.w	8009634 <_dtoa_r+0x8a4>
 800949a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800949c:	2a00      	cmp	r2, #0
 800949e:	f000 80c1 	beq.w	8009624 <_dtoa_r+0x894>
 80094a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094a6:	9c08      	ldr	r4, [sp, #32]
 80094a8:	9e00      	ldr	r6, [sp, #0]
 80094aa:	9a00      	ldr	r2, [sp, #0]
 80094ac:	441a      	add	r2, r3
 80094ae:	9200      	str	r2, [sp, #0]
 80094b0:	9a06      	ldr	r2, [sp, #24]
 80094b2:	2101      	movs	r1, #1
 80094b4:	441a      	add	r2, r3
 80094b6:	4648      	mov	r0, r9
 80094b8:	9206      	str	r2, [sp, #24]
 80094ba:	f000 fc2d 	bl	8009d18 <__i2b>
 80094be:	4605      	mov	r5, r0
 80094c0:	b166      	cbz	r6, 80094dc <_dtoa_r+0x74c>
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd09      	ble.n	80094dc <_dtoa_r+0x74c>
 80094c8:	42b3      	cmp	r3, r6
 80094ca:	9a00      	ldr	r2, [sp, #0]
 80094cc:	bfa8      	it	ge
 80094ce:	4633      	movge	r3, r6
 80094d0:	1ad2      	subs	r2, r2, r3
 80094d2:	9200      	str	r2, [sp, #0]
 80094d4:	9a06      	ldr	r2, [sp, #24]
 80094d6:	1af6      	subs	r6, r6, r3
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	9306      	str	r3, [sp, #24]
 80094dc:	9b08      	ldr	r3, [sp, #32]
 80094de:	b30b      	cbz	r3, 8009524 <_dtoa_r+0x794>
 80094e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 80c6 	beq.w	8009674 <_dtoa_r+0x8e4>
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	f000 80c0 	beq.w	800966e <_dtoa_r+0x8de>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4622      	mov	r2, r4
 80094f2:	4648      	mov	r0, r9
 80094f4:	f000 fcc8 	bl	8009e88 <__pow5mult>
 80094f8:	9a02      	ldr	r2, [sp, #8]
 80094fa:	4601      	mov	r1, r0
 80094fc:	4605      	mov	r5, r0
 80094fe:	4648      	mov	r0, r9
 8009500:	f000 fc20 	bl	8009d44 <__multiply>
 8009504:	9902      	ldr	r1, [sp, #8]
 8009506:	4680      	mov	r8, r0
 8009508:	4648      	mov	r0, r9
 800950a:	f000 fb51 	bl	8009bb0 <_Bfree>
 800950e:	9b08      	ldr	r3, [sp, #32]
 8009510:	1b1b      	subs	r3, r3, r4
 8009512:	9308      	str	r3, [sp, #32]
 8009514:	f000 80b1 	beq.w	800967a <_dtoa_r+0x8ea>
 8009518:	9a08      	ldr	r2, [sp, #32]
 800951a:	4641      	mov	r1, r8
 800951c:	4648      	mov	r0, r9
 800951e:	f000 fcb3 	bl	8009e88 <__pow5mult>
 8009522:	9002      	str	r0, [sp, #8]
 8009524:	2101      	movs	r1, #1
 8009526:	4648      	mov	r0, r9
 8009528:	f000 fbf6 	bl	8009d18 <__i2b>
 800952c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800952e:	4604      	mov	r4, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 81d8 	beq.w	80098e6 <_dtoa_r+0xb56>
 8009536:	461a      	mov	r2, r3
 8009538:	4601      	mov	r1, r0
 800953a:	4648      	mov	r0, r9
 800953c:	f000 fca4 	bl	8009e88 <__pow5mult>
 8009540:	9b07      	ldr	r3, [sp, #28]
 8009542:	2b01      	cmp	r3, #1
 8009544:	4604      	mov	r4, r0
 8009546:	f300 809f 	bgt.w	8009688 <_dtoa_r+0x8f8>
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 8097 	bne.w	8009680 <_dtoa_r+0x8f0>
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009558:	2b00      	cmp	r3, #0
 800955a:	f040 8093 	bne.w	8009684 <_dtoa_r+0x8f4>
 800955e:	9b05      	ldr	r3, [sp, #20]
 8009560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009564:	0d1b      	lsrs	r3, r3, #20
 8009566:	051b      	lsls	r3, r3, #20
 8009568:	b133      	cbz	r3, 8009578 <_dtoa_r+0x7e8>
 800956a:	9b00      	ldr	r3, [sp, #0]
 800956c:	3301      	adds	r3, #1
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	3301      	adds	r3, #1
 8009574:	9306      	str	r3, [sp, #24]
 8009576:	2301      	movs	r3, #1
 8009578:	9308      	str	r3, [sp, #32]
 800957a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 81b8 	beq.w	80098f2 <_dtoa_r+0xb62>
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009588:	6918      	ldr	r0, [r3, #16]
 800958a:	f000 fb79 	bl	8009c80 <__hi0bits>
 800958e:	f1c0 0020 	rsb	r0, r0, #32
 8009592:	9b06      	ldr	r3, [sp, #24]
 8009594:	4418      	add	r0, r3
 8009596:	f010 001f 	ands.w	r0, r0, #31
 800959a:	f000 8082 	beq.w	80096a2 <_dtoa_r+0x912>
 800959e:	f1c0 0320 	rsb	r3, r0, #32
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	dd73      	ble.n	800968e <_dtoa_r+0x8fe>
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	f1c0 001c 	rsb	r0, r0, #28
 80095ac:	4403      	add	r3, r0
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	9b06      	ldr	r3, [sp, #24]
 80095b2:	4403      	add	r3, r0
 80095b4:	4406      	add	r6, r0
 80095b6:	9306      	str	r3, [sp, #24]
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dd05      	ble.n	80095ca <_dtoa_r+0x83a>
 80095be:	9902      	ldr	r1, [sp, #8]
 80095c0:	461a      	mov	r2, r3
 80095c2:	4648      	mov	r0, r9
 80095c4:	f000 fcba 	bl	8009f3c <__lshift>
 80095c8:	9002      	str	r0, [sp, #8]
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dd05      	ble.n	80095dc <_dtoa_r+0x84c>
 80095d0:	4621      	mov	r1, r4
 80095d2:	461a      	mov	r2, r3
 80095d4:	4648      	mov	r0, r9
 80095d6:	f000 fcb1 	bl	8009f3c <__lshift>
 80095da:	4604      	mov	r4, r0
 80095dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d061      	beq.n	80096a6 <_dtoa_r+0x916>
 80095e2:	9802      	ldr	r0, [sp, #8]
 80095e4:	4621      	mov	r1, r4
 80095e6:	f000 fd15 	bl	800a014 <__mcmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	da5b      	bge.n	80096a6 <_dtoa_r+0x916>
 80095ee:	2300      	movs	r3, #0
 80095f0:	9902      	ldr	r1, [sp, #8]
 80095f2:	220a      	movs	r2, #10
 80095f4:	4648      	mov	r0, r9
 80095f6:	f000 fafd 	bl	8009bf4 <__multadd>
 80095fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095fc:	9002      	str	r0, [sp, #8]
 80095fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8177 	beq.w	80098f6 <_dtoa_r+0xb66>
 8009608:	4629      	mov	r1, r5
 800960a:	2300      	movs	r3, #0
 800960c:	220a      	movs	r2, #10
 800960e:	4648      	mov	r0, r9
 8009610:	f000 faf0 	bl	8009bf4 <__multadd>
 8009614:	f1bb 0f00 	cmp.w	fp, #0
 8009618:	4605      	mov	r5, r0
 800961a:	dc6f      	bgt.n	80096fc <_dtoa_r+0x96c>
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	2b02      	cmp	r3, #2
 8009620:	dc49      	bgt.n	80096b6 <_dtoa_r+0x926>
 8009622:	e06b      	b.n	80096fc <_dtoa_r+0x96c>
 8009624:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009626:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800962a:	e73c      	b.n	80094a6 <_dtoa_r+0x716>
 800962c:	3fe00000 	.word	0x3fe00000
 8009630:	40240000 	.word	0x40240000
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	1e5c      	subs	r4, r3, #1
 8009638:	9b08      	ldr	r3, [sp, #32]
 800963a:	42a3      	cmp	r3, r4
 800963c:	db09      	blt.n	8009652 <_dtoa_r+0x8c2>
 800963e:	1b1c      	subs	r4, r3, r4
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f6bf af30 	bge.w	80094a8 <_dtoa_r+0x718>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	9a03      	ldr	r2, [sp, #12]
 800964c:	1a9e      	subs	r6, r3, r2
 800964e:	2300      	movs	r3, #0
 8009650:	e72b      	b.n	80094aa <_dtoa_r+0x71a>
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009656:	9408      	str	r4, [sp, #32]
 8009658:	1ae3      	subs	r3, r4, r3
 800965a:	441a      	add	r2, r3
 800965c:	9e00      	ldr	r6, [sp, #0]
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	920d      	str	r2, [sp, #52]	@ 0x34
 8009662:	2400      	movs	r4, #0
 8009664:	e721      	b.n	80094aa <_dtoa_r+0x71a>
 8009666:	9c08      	ldr	r4, [sp, #32]
 8009668:	9e00      	ldr	r6, [sp, #0]
 800966a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800966c:	e728      	b.n	80094c0 <_dtoa_r+0x730>
 800966e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009672:	e751      	b.n	8009518 <_dtoa_r+0x788>
 8009674:	9a08      	ldr	r2, [sp, #32]
 8009676:	9902      	ldr	r1, [sp, #8]
 8009678:	e750      	b.n	800951c <_dtoa_r+0x78c>
 800967a:	f8cd 8008 	str.w	r8, [sp, #8]
 800967e:	e751      	b.n	8009524 <_dtoa_r+0x794>
 8009680:	2300      	movs	r3, #0
 8009682:	e779      	b.n	8009578 <_dtoa_r+0x7e8>
 8009684:	9b04      	ldr	r3, [sp, #16]
 8009686:	e777      	b.n	8009578 <_dtoa_r+0x7e8>
 8009688:	2300      	movs	r3, #0
 800968a:	9308      	str	r3, [sp, #32]
 800968c:	e779      	b.n	8009582 <_dtoa_r+0x7f2>
 800968e:	d093      	beq.n	80095b8 <_dtoa_r+0x828>
 8009690:	9a00      	ldr	r2, [sp, #0]
 8009692:	331c      	adds	r3, #28
 8009694:	441a      	add	r2, r3
 8009696:	9200      	str	r2, [sp, #0]
 8009698:	9a06      	ldr	r2, [sp, #24]
 800969a:	441a      	add	r2, r3
 800969c:	441e      	add	r6, r3
 800969e:	9206      	str	r2, [sp, #24]
 80096a0:	e78a      	b.n	80095b8 <_dtoa_r+0x828>
 80096a2:	4603      	mov	r3, r0
 80096a4:	e7f4      	b.n	8009690 <_dtoa_r+0x900>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	46b8      	mov	r8, r7
 80096ac:	dc20      	bgt.n	80096f0 <_dtoa_r+0x960>
 80096ae:	469b      	mov	fp, r3
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	dd1e      	ble.n	80096f4 <_dtoa_r+0x964>
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	f47f adb1 	bne.w	8009220 <_dtoa_r+0x490>
 80096be:	4621      	mov	r1, r4
 80096c0:	465b      	mov	r3, fp
 80096c2:	2205      	movs	r2, #5
 80096c4:	4648      	mov	r0, r9
 80096c6:	f000 fa95 	bl	8009bf4 <__multadd>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4604      	mov	r4, r0
 80096ce:	9802      	ldr	r0, [sp, #8]
 80096d0:	f000 fca0 	bl	800a014 <__mcmp>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f77f ada3 	ble.w	8009220 <_dtoa_r+0x490>
 80096da:	4656      	mov	r6, sl
 80096dc:	2331      	movs	r3, #49	@ 0x31
 80096de:	f806 3b01 	strb.w	r3, [r6], #1
 80096e2:	f108 0801 	add.w	r8, r8, #1
 80096e6:	e59f      	b.n	8009228 <_dtoa_r+0x498>
 80096e8:	9c03      	ldr	r4, [sp, #12]
 80096ea:	46b8      	mov	r8, r7
 80096ec:	4625      	mov	r5, r4
 80096ee:	e7f4      	b.n	80096da <_dtoa_r+0x94a>
 80096f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80096f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8101 	beq.w	80098fe <_dtoa_r+0xb6e>
 80096fc:	2e00      	cmp	r6, #0
 80096fe:	dd05      	ble.n	800970c <_dtoa_r+0x97c>
 8009700:	4629      	mov	r1, r5
 8009702:	4632      	mov	r2, r6
 8009704:	4648      	mov	r0, r9
 8009706:	f000 fc19 	bl	8009f3c <__lshift>
 800970a:	4605      	mov	r5, r0
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d05c      	beq.n	80097cc <_dtoa_r+0xa3c>
 8009712:	6869      	ldr	r1, [r5, #4]
 8009714:	4648      	mov	r0, r9
 8009716:	f000 fa0b 	bl	8009b30 <_Balloc>
 800971a:	4606      	mov	r6, r0
 800971c:	b928      	cbnz	r0, 800972a <_dtoa_r+0x99a>
 800971e:	4b82      	ldr	r3, [pc, #520]	@ (8009928 <_dtoa_r+0xb98>)
 8009720:	4602      	mov	r2, r0
 8009722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009726:	f7ff bb4a 	b.w	8008dbe <_dtoa_r+0x2e>
 800972a:	692a      	ldr	r2, [r5, #16]
 800972c:	3202      	adds	r2, #2
 800972e:	0092      	lsls	r2, r2, #2
 8009730:	f105 010c 	add.w	r1, r5, #12
 8009734:	300c      	adds	r0, #12
 8009736:	f7ff fa92 	bl	8008c5e <memcpy>
 800973a:	2201      	movs	r2, #1
 800973c:	4631      	mov	r1, r6
 800973e:	4648      	mov	r0, r9
 8009740:	f000 fbfc 	bl	8009f3c <__lshift>
 8009744:	f10a 0301 	add.w	r3, sl, #1
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	eb0a 030b 	add.w	r3, sl, fp
 800974e:	9308      	str	r3, [sp, #32]
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	462f      	mov	r7, r5
 8009758:	9306      	str	r3, [sp, #24]
 800975a:	4605      	mov	r5, r0
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	9802      	ldr	r0, [sp, #8]
 8009760:	4621      	mov	r1, r4
 8009762:	f103 3bff 	add.w	fp, r3, #4294967295
 8009766:	f7ff fa88 	bl	8008c7a <quorem>
 800976a:	4603      	mov	r3, r0
 800976c:	3330      	adds	r3, #48	@ 0x30
 800976e:	9003      	str	r0, [sp, #12]
 8009770:	4639      	mov	r1, r7
 8009772:	9802      	ldr	r0, [sp, #8]
 8009774:	9309      	str	r3, [sp, #36]	@ 0x24
 8009776:	f000 fc4d 	bl	800a014 <__mcmp>
 800977a:	462a      	mov	r2, r5
 800977c:	9004      	str	r0, [sp, #16]
 800977e:	4621      	mov	r1, r4
 8009780:	4648      	mov	r0, r9
 8009782:	f000 fc63 	bl	800a04c <__mdiff>
 8009786:	68c2      	ldr	r2, [r0, #12]
 8009788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978a:	4606      	mov	r6, r0
 800978c:	bb02      	cbnz	r2, 80097d0 <_dtoa_r+0xa40>
 800978e:	4601      	mov	r1, r0
 8009790:	9802      	ldr	r0, [sp, #8]
 8009792:	f000 fc3f 	bl	800a014 <__mcmp>
 8009796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009798:	4602      	mov	r2, r0
 800979a:	4631      	mov	r1, r6
 800979c:	4648      	mov	r0, r9
 800979e:	920c      	str	r2, [sp, #48]	@ 0x30
 80097a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a2:	f000 fa05 	bl	8009bb0 <_Bfree>
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097aa:	9e00      	ldr	r6, [sp, #0]
 80097ac:	ea42 0103 	orr.w	r1, r2, r3
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	4319      	orrs	r1, r3
 80097b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b6:	d10d      	bne.n	80097d4 <_dtoa_r+0xa44>
 80097b8:	2b39      	cmp	r3, #57	@ 0x39
 80097ba:	d027      	beq.n	800980c <_dtoa_r+0xa7c>
 80097bc:	9a04      	ldr	r2, [sp, #16]
 80097be:	2a00      	cmp	r2, #0
 80097c0:	dd01      	ble.n	80097c6 <_dtoa_r+0xa36>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	3331      	adds	r3, #49	@ 0x31
 80097c6:	f88b 3000 	strb.w	r3, [fp]
 80097ca:	e52e      	b.n	800922a <_dtoa_r+0x49a>
 80097cc:	4628      	mov	r0, r5
 80097ce:	e7b9      	b.n	8009744 <_dtoa_r+0x9b4>
 80097d0:	2201      	movs	r2, #1
 80097d2:	e7e2      	b.n	800979a <_dtoa_r+0xa0a>
 80097d4:	9904      	ldr	r1, [sp, #16]
 80097d6:	2900      	cmp	r1, #0
 80097d8:	db04      	blt.n	80097e4 <_dtoa_r+0xa54>
 80097da:	9807      	ldr	r0, [sp, #28]
 80097dc:	4301      	orrs	r1, r0
 80097de:	9806      	ldr	r0, [sp, #24]
 80097e0:	4301      	orrs	r1, r0
 80097e2:	d120      	bne.n	8009826 <_dtoa_r+0xa96>
 80097e4:	2a00      	cmp	r2, #0
 80097e6:	ddee      	ble.n	80097c6 <_dtoa_r+0xa36>
 80097e8:	9902      	ldr	r1, [sp, #8]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	2201      	movs	r2, #1
 80097ee:	4648      	mov	r0, r9
 80097f0:	f000 fba4 	bl	8009f3c <__lshift>
 80097f4:	4621      	mov	r1, r4
 80097f6:	9002      	str	r0, [sp, #8]
 80097f8:	f000 fc0c 	bl	800a014 <__mcmp>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	9b00      	ldr	r3, [sp, #0]
 8009800:	dc02      	bgt.n	8009808 <_dtoa_r+0xa78>
 8009802:	d1e0      	bne.n	80097c6 <_dtoa_r+0xa36>
 8009804:	07da      	lsls	r2, r3, #31
 8009806:	d5de      	bpl.n	80097c6 <_dtoa_r+0xa36>
 8009808:	2b39      	cmp	r3, #57	@ 0x39
 800980a:	d1da      	bne.n	80097c2 <_dtoa_r+0xa32>
 800980c:	2339      	movs	r3, #57	@ 0x39
 800980e:	f88b 3000 	strb.w	r3, [fp]
 8009812:	4633      	mov	r3, r6
 8009814:	461e      	mov	r6, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800981c:	2a39      	cmp	r2, #57	@ 0x39
 800981e:	d04e      	beq.n	80098be <_dtoa_r+0xb2e>
 8009820:	3201      	adds	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
 8009824:	e501      	b.n	800922a <_dtoa_r+0x49a>
 8009826:	2a00      	cmp	r2, #0
 8009828:	dd03      	ble.n	8009832 <_dtoa_r+0xaa2>
 800982a:	2b39      	cmp	r3, #57	@ 0x39
 800982c:	d0ee      	beq.n	800980c <_dtoa_r+0xa7c>
 800982e:	3301      	adds	r3, #1
 8009830:	e7c9      	b.n	80097c6 <_dtoa_r+0xa36>
 8009832:	9a00      	ldr	r2, [sp, #0]
 8009834:	9908      	ldr	r1, [sp, #32]
 8009836:	f802 3c01 	strb.w	r3, [r2, #-1]
 800983a:	428a      	cmp	r2, r1
 800983c:	d028      	beq.n	8009890 <_dtoa_r+0xb00>
 800983e:	9902      	ldr	r1, [sp, #8]
 8009840:	2300      	movs	r3, #0
 8009842:	220a      	movs	r2, #10
 8009844:	4648      	mov	r0, r9
 8009846:	f000 f9d5 	bl	8009bf4 <__multadd>
 800984a:	42af      	cmp	r7, r5
 800984c:	9002      	str	r0, [sp, #8]
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	f04f 020a 	mov.w	r2, #10
 8009856:	4639      	mov	r1, r7
 8009858:	4648      	mov	r0, r9
 800985a:	d107      	bne.n	800986c <_dtoa_r+0xadc>
 800985c:	f000 f9ca 	bl	8009bf4 <__multadd>
 8009860:	4607      	mov	r7, r0
 8009862:	4605      	mov	r5, r0
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	e777      	b.n	800975c <_dtoa_r+0x9cc>
 800986c:	f000 f9c2 	bl	8009bf4 <__multadd>
 8009870:	4629      	mov	r1, r5
 8009872:	4607      	mov	r7, r0
 8009874:	2300      	movs	r3, #0
 8009876:	220a      	movs	r2, #10
 8009878:	4648      	mov	r0, r9
 800987a:	f000 f9bb 	bl	8009bf4 <__multadd>
 800987e:	4605      	mov	r5, r0
 8009880:	e7f0      	b.n	8009864 <_dtoa_r+0xad4>
 8009882:	f1bb 0f00 	cmp.w	fp, #0
 8009886:	bfcc      	ite	gt
 8009888:	465e      	movgt	r6, fp
 800988a:	2601      	movle	r6, #1
 800988c:	4456      	add	r6, sl
 800988e:	2700      	movs	r7, #0
 8009890:	9902      	ldr	r1, [sp, #8]
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	2201      	movs	r2, #1
 8009896:	4648      	mov	r0, r9
 8009898:	f000 fb50 	bl	8009f3c <__lshift>
 800989c:	4621      	mov	r1, r4
 800989e:	9002      	str	r0, [sp, #8]
 80098a0:	f000 fbb8 	bl	800a014 <__mcmp>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	dcb4      	bgt.n	8009812 <_dtoa_r+0xa82>
 80098a8:	d102      	bne.n	80098b0 <_dtoa_r+0xb20>
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	07db      	lsls	r3, r3, #31
 80098ae:	d4b0      	bmi.n	8009812 <_dtoa_r+0xa82>
 80098b0:	4633      	mov	r3, r6
 80098b2:	461e      	mov	r6, r3
 80098b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098b8:	2a30      	cmp	r2, #48	@ 0x30
 80098ba:	d0fa      	beq.n	80098b2 <_dtoa_r+0xb22>
 80098bc:	e4b5      	b.n	800922a <_dtoa_r+0x49a>
 80098be:	459a      	cmp	sl, r3
 80098c0:	d1a8      	bne.n	8009814 <_dtoa_r+0xa84>
 80098c2:	2331      	movs	r3, #49	@ 0x31
 80098c4:	f108 0801 	add.w	r8, r8, #1
 80098c8:	f88a 3000 	strb.w	r3, [sl]
 80098cc:	e4ad      	b.n	800922a <_dtoa_r+0x49a>
 80098ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800992c <_dtoa_r+0xb9c>
 80098d4:	b11b      	cbz	r3, 80098de <_dtoa_r+0xb4e>
 80098d6:	f10a 0308 	add.w	r3, sl, #8
 80098da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	4650      	mov	r0, sl
 80098e0:	b017      	add	sp, #92	@ 0x5c
 80098e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e6:	9b07      	ldr	r3, [sp, #28]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	f77f ae2e 	ble.w	800954a <_dtoa_r+0x7ba>
 80098ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098f0:	9308      	str	r3, [sp, #32]
 80098f2:	2001      	movs	r0, #1
 80098f4:	e64d      	b.n	8009592 <_dtoa_r+0x802>
 80098f6:	f1bb 0f00 	cmp.w	fp, #0
 80098fa:	f77f aed9 	ble.w	80096b0 <_dtoa_r+0x920>
 80098fe:	4656      	mov	r6, sl
 8009900:	9802      	ldr	r0, [sp, #8]
 8009902:	4621      	mov	r1, r4
 8009904:	f7ff f9b9 	bl	8008c7a <quorem>
 8009908:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800990c:	f806 3b01 	strb.w	r3, [r6], #1
 8009910:	eba6 020a 	sub.w	r2, r6, sl
 8009914:	4593      	cmp	fp, r2
 8009916:	ddb4      	ble.n	8009882 <_dtoa_r+0xaf2>
 8009918:	9902      	ldr	r1, [sp, #8]
 800991a:	2300      	movs	r3, #0
 800991c:	220a      	movs	r2, #10
 800991e:	4648      	mov	r0, r9
 8009920:	f000 f968 	bl	8009bf4 <__multadd>
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	e7eb      	b.n	8009900 <_dtoa_r+0xb70>
 8009928:	0800b8d0 	.word	0x0800b8d0
 800992c:	0800b854 	.word	0x0800b854

08009930 <_free_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4605      	mov	r5, r0
 8009934:	2900      	cmp	r1, #0
 8009936:	d041      	beq.n	80099bc <_free_r+0x8c>
 8009938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993c:	1f0c      	subs	r4, r1, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfb8      	it	lt
 8009942:	18e4      	addlt	r4, r4, r3
 8009944:	f000 f8e8 	bl	8009b18 <__malloc_lock>
 8009948:	4a1d      	ldr	r2, [pc, #116]	@ (80099c0 <_free_r+0x90>)
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	b933      	cbnz	r3, 800995c <_free_r+0x2c>
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	6014      	str	r4, [r2, #0]
 8009952:	4628      	mov	r0, r5
 8009954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009958:	f000 b8e4 	b.w	8009b24 <__malloc_unlock>
 800995c:	42a3      	cmp	r3, r4
 800995e:	d908      	bls.n	8009972 <_free_r+0x42>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	1821      	adds	r1, r4, r0
 8009964:	428b      	cmp	r3, r1
 8009966:	bf01      	itttt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	1809      	addeq	r1, r1, r0
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	e7ed      	b.n	800994e <_free_r+0x1e>
 8009972:	461a      	mov	r2, r3
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b10b      	cbz	r3, 800997c <_free_r+0x4c>
 8009978:	42a3      	cmp	r3, r4
 800997a:	d9fa      	bls.n	8009972 <_free_r+0x42>
 800997c:	6811      	ldr	r1, [r2, #0]
 800997e:	1850      	adds	r0, r2, r1
 8009980:	42a0      	cmp	r0, r4
 8009982:	d10b      	bne.n	800999c <_free_r+0x6c>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	4401      	add	r1, r0
 8009988:	1850      	adds	r0, r2, r1
 800998a:	4283      	cmp	r3, r0
 800998c:	6011      	str	r1, [r2, #0]
 800998e:	d1e0      	bne.n	8009952 <_free_r+0x22>
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6053      	str	r3, [r2, #4]
 8009996:	4408      	add	r0, r1
 8009998:	6010      	str	r0, [r2, #0]
 800999a:	e7da      	b.n	8009952 <_free_r+0x22>
 800999c:	d902      	bls.n	80099a4 <_free_r+0x74>
 800999e:	230c      	movs	r3, #12
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	e7d6      	b.n	8009952 <_free_r+0x22>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	1821      	adds	r1, r4, r0
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf04      	itt	eq
 80099ac:	6819      	ldreq	r1, [r3, #0]
 80099ae:	685b      	ldreq	r3, [r3, #4]
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	bf04      	itt	eq
 80099b4:	1809      	addeq	r1, r1, r0
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	6054      	str	r4, [r2, #4]
 80099ba:	e7ca      	b.n	8009952 <_free_r+0x22>
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20000aa0 	.word	0x20000aa0

080099c4 <malloc>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	@ (80099d0 <malloc+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f000 b825 	b.w	8009a18 <_malloc_r>
 80099ce:	bf00      	nop
 80099d0:	20000038 	.word	0x20000038

080099d4 <sbrk_aligned>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009a14 <sbrk_aligned+0x40>)
 80099d8:	460c      	mov	r4, r1
 80099da:	6831      	ldr	r1, [r6, #0]
 80099dc:	4605      	mov	r5, r0
 80099de:	b911      	cbnz	r1, 80099e6 <sbrk_aligned+0x12>
 80099e0:	f001 f838 	bl	800aa54 <_sbrk_r>
 80099e4:	6030      	str	r0, [r6, #0]
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f001 f833 	bl	800aa54 <_sbrk_r>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d103      	bne.n	80099fa <sbrk_aligned+0x26>
 80099f2:	f04f 34ff 	mov.w	r4, #4294967295
 80099f6:	4620      	mov	r0, r4
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
 80099fa:	1cc4      	adds	r4, r0, #3
 80099fc:	f024 0403 	bic.w	r4, r4, #3
 8009a00:	42a0      	cmp	r0, r4
 8009a02:	d0f8      	beq.n	80099f6 <sbrk_aligned+0x22>
 8009a04:	1a21      	subs	r1, r4, r0
 8009a06:	4628      	mov	r0, r5
 8009a08:	f001 f824 	bl	800aa54 <_sbrk_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d1f2      	bne.n	80099f6 <sbrk_aligned+0x22>
 8009a10:	e7ef      	b.n	80099f2 <sbrk_aligned+0x1e>
 8009a12:	bf00      	nop
 8009a14:	20000a9c 	.word	0x20000a9c

08009a18 <_malloc_r>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	1ccd      	adds	r5, r1, #3
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	db01      	blt.n	8009a34 <_malloc_r+0x1c>
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d904      	bls.n	8009a3e <_malloc_r+0x26>
 8009a34:	230c      	movs	r3, #12
 8009a36:	6033      	str	r3, [r6, #0]
 8009a38:	2000      	movs	r0, #0
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b14 <_malloc_r+0xfc>
 8009a42:	f000 f869 	bl	8009b18 <__malloc_lock>
 8009a46:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4a:	461c      	mov	r4, r3
 8009a4c:	bb44      	cbnz	r4, 8009aa0 <_malloc_r+0x88>
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ffbf 	bl	80099d4 <sbrk_aligned>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	4604      	mov	r4, r0
 8009a5a:	d158      	bne.n	8009b0e <_malloc_r+0xf6>
 8009a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a60:	4627      	mov	r7, r4
 8009a62:	2f00      	cmp	r7, #0
 8009a64:	d143      	bne.n	8009aee <_malloc_r+0xd6>
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	d04b      	beq.n	8009b02 <_malloc_r+0xea>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	eb04 0903 	add.w	r9, r4, r3
 8009a74:	f000 ffee 	bl	800aa54 <_sbrk_r>
 8009a78:	4581      	cmp	r9, r0
 8009a7a:	d142      	bne.n	8009b02 <_malloc_r+0xea>
 8009a7c:	6821      	ldr	r1, [r4, #0]
 8009a7e:	1a6d      	subs	r5, r5, r1
 8009a80:	4629      	mov	r1, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ffa6 	bl	80099d4 <sbrk_aligned>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d03a      	beq.n	8009b02 <_malloc_r+0xea>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	442b      	add	r3, r5
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	f8d8 3000 	ldr.w	r3, [r8]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	bb62      	cbnz	r2, 8009af4 <_malloc_r+0xdc>
 8009a9a:	f8c8 7000 	str.w	r7, [r8]
 8009a9e:	e00f      	b.n	8009ac0 <_malloc_r+0xa8>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	1b52      	subs	r2, r2, r5
 8009aa4:	d420      	bmi.n	8009ae8 <_malloc_r+0xd0>
 8009aa6:	2a0b      	cmp	r2, #11
 8009aa8:	d917      	bls.n	8009ada <_malloc_r+0xc2>
 8009aaa:	1961      	adds	r1, r4, r5
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	6025      	str	r5, [r4, #0]
 8009ab0:	bf18      	it	ne
 8009ab2:	6059      	strne	r1, [r3, #4]
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	bf08      	it	eq
 8009ab8:	f8c8 1000 	streq.w	r1, [r8]
 8009abc:	5162      	str	r2, [r4, r5]
 8009abe:	604b      	str	r3, [r1, #4]
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f82f 	bl	8009b24 <__malloc_unlock>
 8009ac6:	f104 000b 	add.w	r0, r4, #11
 8009aca:	1d23      	adds	r3, r4, #4
 8009acc:	f020 0007 	bic.w	r0, r0, #7
 8009ad0:	1ac2      	subs	r2, r0, r3
 8009ad2:	bf1c      	itt	ne
 8009ad4:	1a1b      	subne	r3, r3, r0
 8009ad6:	50a3      	strne	r3, [r4, r2]
 8009ad8:	e7af      	b.n	8009a3a <_malloc_r+0x22>
 8009ada:	6862      	ldr	r2, [r4, #4]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	bf0c      	ite	eq
 8009ae0:	f8c8 2000 	streq.w	r2, [r8]
 8009ae4:	605a      	strne	r2, [r3, #4]
 8009ae6:	e7eb      	b.n	8009ac0 <_malloc_r+0xa8>
 8009ae8:	4623      	mov	r3, r4
 8009aea:	6864      	ldr	r4, [r4, #4]
 8009aec:	e7ae      	b.n	8009a4c <_malloc_r+0x34>
 8009aee:	463c      	mov	r4, r7
 8009af0:	687f      	ldr	r7, [r7, #4]
 8009af2:	e7b6      	b.n	8009a62 <_malloc_r+0x4a>
 8009af4:	461a      	mov	r2, r3
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d1fb      	bne.n	8009af4 <_malloc_r+0xdc>
 8009afc:	2300      	movs	r3, #0
 8009afe:	6053      	str	r3, [r2, #4]
 8009b00:	e7de      	b.n	8009ac0 <_malloc_r+0xa8>
 8009b02:	230c      	movs	r3, #12
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	4630      	mov	r0, r6
 8009b08:	f000 f80c 	bl	8009b24 <__malloc_unlock>
 8009b0c:	e794      	b.n	8009a38 <_malloc_r+0x20>
 8009b0e:	6005      	str	r5, [r0, #0]
 8009b10:	e7d6      	b.n	8009ac0 <_malloc_r+0xa8>
 8009b12:	bf00      	nop
 8009b14:	20000aa0 	.word	0x20000aa0

08009b18 <__malloc_lock>:
 8009b18:	4801      	ldr	r0, [pc, #4]	@ (8009b20 <__malloc_lock+0x8>)
 8009b1a:	f7ff b89e 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20000a98 	.word	0x20000a98

08009b24 <__malloc_unlock>:
 8009b24:	4801      	ldr	r0, [pc, #4]	@ (8009b2c <__malloc_unlock+0x8>)
 8009b26:	f7ff b899 	b.w	8008c5c <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20000a98 	.word	0x20000a98

08009b30 <_Balloc>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	69c6      	ldr	r6, [r0, #28]
 8009b34:	4604      	mov	r4, r0
 8009b36:	460d      	mov	r5, r1
 8009b38:	b976      	cbnz	r6, 8009b58 <_Balloc+0x28>
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	f7ff ff42 	bl	80099c4 <malloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	61e0      	str	r0, [r4, #28]
 8009b44:	b920      	cbnz	r0, 8009b50 <_Balloc+0x20>
 8009b46:	4b18      	ldr	r3, [pc, #96]	@ (8009ba8 <_Balloc+0x78>)
 8009b48:	4818      	ldr	r0, [pc, #96]	@ (8009bac <_Balloc+0x7c>)
 8009b4a:	216b      	movs	r1, #107	@ 0x6b
 8009b4c:	f000 ff92 	bl	800aa74 <__assert_func>
 8009b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b54:	6006      	str	r6, [r0, #0]
 8009b56:	60c6      	str	r6, [r0, #12]
 8009b58:	69e6      	ldr	r6, [r4, #28]
 8009b5a:	68f3      	ldr	r3, [r6, #12]
 8009b5c:	b183      	cbz	r3, 8009b80 <_Balloc+0x50>
 8009b5e:	69e3      	ldr	r3, [r4, #28]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b66:	b9b8      	cbnz	r0, 8009b98 <_Balloc+0x68>
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b6e:	1d72      	adds	r2, r6, #5
 8009b70:	0092      	lsls	r2, r2, #2
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 ff9c 	bl	800aab0 <_calloc_r>
 8009b78:	b160      	cbz	r0, 8009b94 <_Balloc+0x64>
 8009b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b7e:	e00e      	b.n	8009b9e <_Balloc+0x6e>
 8009b80:	2221      	movs	r2, #33	@ 0x21
 8009b82:	2104      	movs	r1, #4
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 ff93 	bl	800aab0 <_calloc_r>
 8009b8a:	69e3      	ldr	r3, [r4, #28]
 8009b8c:	60f0      	str	r0, [r6, #12]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e4      	bne.n	8009b5e <_Balloc+0x2e>
 8009b94:	2000      	movs	r0, #0
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	6802      	ldr	r2, [r0, #0]
 8009b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ba4:	e7f7      	b.n	8009b96 <_Balloc+0x66>
 8009ba6:	bf00      	nop
 8009ba8:	0800b861 	.word	0x0800b861
 8009bac:	0800b8e1 	.word	0x0800b8e1

08009bb0 <_Bfree>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	69c6      	ldr	r6, [r0, #28]
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	b976      	cbnz	r6, 8009bd8 <_Bfree+0x28>
 8009bba:	2010      	movs	r0, #16
 8009bbc:	f7ff ff02 	bl	80099c4 <malloc>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	61e8      	str	r0, [r5, #28]
 8009bc4:	b920      	cbnz	r0, 8009bd0 <_Bfree+0x20>
 8009bc6:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <_Bfree+0x3c>)
 8009bc8:	4809      	ldr	r0, [pc, #36]	@ (8009bf0 <_Bfree+0x40>)
 8009bca:	218f      	movs	r1, #143	@ 0x8f
 8009bcc:	f000 ff52 	bl	800aa74 <__assert_func>
 8009bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd4:	6006      	str	r6, [r0, #0]
 8009bd6:	60c6      	str	r6, [r0, #12]
 8009bd8:	b13c      	cbz	r4, 8009bea <_Bfree+0x3a>
 8009bda:	69eb      	ldr	r3, [r5, #28]
 8009bdc:	6862      	ldr	r2, [r4, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009be4:	6021      	str	r1, [r4, #0]
 8009be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	0800b861 	.word	0x0800b861
 8009bf0:	0800b8e1 	.word	0x0800b8e1

08009bf4 <__multadd>:
 8009bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf8:	690d      	ldr	r5, [r1, #16]
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	461e      	mov	r6, r3
 8009c00:	f101 0c14 	add.w	ip, r1, #20
 8009c04:	2000      	movs	r0, #0
 8009c06:	f8dc 3000 	ldr.w	r3, [ip]
 8009c0a:	b299      	uxth	r1, r3
 8009c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c10:	0c1e      	lsrs	r6, r3, #16
 8009c12:	0c0b      	lsrs	r3, r1, #16
 8009c14:	fb02 3306 	mla	r3, r2, r6, r3
 8009c18:	b289      	uxth	r1, r1
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c20:	4285      	cmp	r5, r0
 8009c22:	f84c 1b04 	str.w	r1, [ip], #4
 8009c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c2a:	dcec      	bgt.n	8009c06 <__multadd+0x12>
 8009c2c:	b30e      	cbz	r6, 8009c72 <__multadd+0x7e>
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	dc19      	bgt.n	8009c68 <__multadd+0x74>
 8009c34:	6861      	ldr	r1, [r4, #4]
 8009c36:	4638      	mov	r0, r7
 8009c38:	3101      	adds	r1, #1
 8009c3a:	f7ff ff79 	bl	8009b30 <_Balloc>
 8009c3e:	4680      	mov	r8, r0
 8009c40:	b928      	cbnz	r0, 8009c4e <__multadd+0x5a>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <__multadd+0x84>)
 8009c46:	480d      	ldr	r0, [pc, #52]	@ (8009c7c <__multadd+0x88>)
 8009c48:	21ba      	movs	r1, #186	@ 0xba
 8009c4a:	f000 ff13 	bl	800aa74 <__assert_func>
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	3202      	adds	r2, #2
 8009c52:	f104 010c 	add.w	r1, r4, #12
 8009c56:	0092      	lsls	r2, r2, #2
 8009c58:	300c      	adds	r0, #12
 8009c5a:	f7ff f800 	bl	8008c5e <memcpy>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ffa5 	bl	8009bb0 <_Bfree>
 8009c66:	4644      	mov	r4, r8
 8009c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	615e      	str	r6, [r3, #20]
 8009c70:	6125      	str	r5, [r4, #16]
 8009c72:	4620      	mov	r0, r4
 8009c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c78:	0800b8d0 	.word	0x0800b8d0
 8009c7c:	0800b8e1 	.word	0x0800b8e1

08009c80 <__hi0bits>:
 8009c80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c84:	4603      	mov	r3, r0
 8009c86:	bf36      	itet	cc
 8009c88:	0403      	lslcc	r3, r0, #16
 8009c8a:	2000      	movcs	r0, #0
 8009c8c:	2010      	movcc	r0, #16
 8009c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c92:	bf3c      	itt	cc
 8009c94:	021b      	lslcc	r3, r3, #8
 8009c96:	3008      	addcc	r0, #8
 8009c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c9c:	bf3c      	itt	cc
 8009c9e:	011b      	lslcc	r3, r3, #4
 8009ca0:	3004      	addcc	r0, #4
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca6:	bf3c      	itt	cc
 8009ca8:	009b      	lslcc	r3, r3, #2
 8009caa:	3002      	addcc	r0, #2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	db05      	blt.n	8009cbc <__hi0bits+0x3c>
 8009cb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cb4:	f100 0001 	add.w	r0, r0, #1
 8009cb8:	bf08      	it	eq
 8009cba:	2020      	moveq	r0, #32
 8009cbc:	4770      	bx	lr

08009cbe <__lo0bits>:
 8009cbe:	6803      	ldr	r3, [r0, #0]
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	f013 0007 	ands.w	r0, r3, #7
 8009cc6:	d00b      	beq.n	8009ce0 <__lo0bits+0x22>
 8009cc8:	07d9      	lsls	r1, r3, #31
 8009cca:	d421      	bmi.n	8009d10 <__lo0bits+0x52>
 8009ccc:	0798      	lsls	r0, r3, #30
 8009cce:	bf49      	itett	mi
 8009cd0:	085b      	lsrmi	r3, r3, #1
 8009cd2:	089b      	lsrpl	r3, r3, #2
 8009cd4:	2001      	movmi	r0, #1
 8009cd6:	6013      	strmi	r3, [r2, #0]
 8009cd8:	bf5c      	itt	pl
 8009cda:	6013      	strpl	r3, [r2, #0]
 8009cdc:	2002      	movpl	r0, #2
 8009cde:	4770      	bx	lr
 8009ce0:	b299      	uxth	r1, r3
 8009ce2:	b909      	cbnz	r1, 8009ce8 <__lo0bits+0x2a>
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	2010      	movs	r0, #16
 8009ce8:	b2d9      	uxtb	r1, r3
 8009cea:	b909      	cbnz	r1, 8009cf0 <__lo0bits+0x32>
 8009cec:	3008      	adds	r0, #8
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	0719      	lsls	r1, r3, #28
 8009cf2:	bf04      	itt	eq
 8009cf4:	091b      	lsreq	r3, r3, #4
 8009cf6:	3004      	addeq	r0, #4
 8009cf8:	0799      	lsls	r1, r3, #30
 8009cfa:	bf04      	itt	eq
 8009cfc:	089b      	lsreq	r3, r3, #2
 8009cfe:	3002      	addeq	r0, #2
 8009d00:	07d9      	lsls	r1, r3, #31
 8009d02:	d403      	bmi.n	8009d0c <__lo0bits+0x4e>
 8009d04:	085b      	lsrs	r3, r3, #1
 8009d06:	f100 0001 	add.w	r0, r0, #1
 8009d0a:	d003      	beq.n	8009d14 <__lo0bits+0x56>
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	4770      	bx	lr
 8009d10:	2000      	movs	r0, #0
 8009d12:	4770      	bx	lr
 8009d14:	2020      	movs	r0, #32
 8009d16:	4770      	bx	lr

08009d18 <__i2b>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	f7ff ff07 	bl	8009b30 <_Balloc>
 8009d22:	4602      	mov	r2, r0
 8009d24:	b928      	cbnz	r0, 8009d32 <__i2b+0x1a>
 8009d26:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <__i2b+0x24>)
 8009d28:	4805      	ldr	r0, [pc, #20]	@ (8009d40 <__i2b+0x28>)
 8009d2a:	f240 1145 	movw	r1, #325	@ 0x145
 8009d2e:	f000 fea1 	bl	800aa74 <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	6144      	str	r4, [r0, #20]
 8009d36:	6103      	str	r3, [r0, #16]
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800b8d0 	.word	0x0800b8d0
 8009d40:	0800b8e1 	.word	0x0800b8e1

08009d44 <__multiply>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	4617      	mov	r7, r2
 8009d4a:	690a      	ldr	r2, [r1, #16]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	bfa8      	it	ge
 8009d52:	463b      	movge	r3, r7
 8009d54:	4689      	mov	r9, r1
 8009d56:	bfa4      	itt	ge
 8009d58:	460f      	movge	r7, r1
 8009d5a:	4699      	movge	r9, r3
 8009d5c:	693d      	ldr	r5, [r7, #16]
 8009d5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	eb05 060a 	add.w	r6, r5, sl
 8009d6a:	42b3      	cmp	r3, r6
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	bfb8      	it	lt
 8009d70:	3101      	addlt	r1, #1
 8009d72:	f7ff fedd 	bl	8009b30 <_Balloc>
 8009d76:	b930      	cbnz	r0, 8009d86 <__multiply+0x42>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	4b41      	ldr	r3, [pc, #260]	@ (8009e80 <__multiply+0x13c>)
 8009d7c:	4841      	ldr	r0, [pc, #260]	@ (8009e84 <__multiply+0x140>)
 8009d7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d82:	f000 fe77 	bl	800aa74 <__assert_func>
 8009d86:	f100 0414 	add.w	r4, r0, #20
 8009d8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009d8e:	4623      	mov	r3, r4
 8009d90:	2200      	movs	r2, #0
 8009d92:	4573      	cmp	r3, lr
 8009d94:	d320      	bcc.n	8009dd8 <__multiply+0x94>
 8009d96:	f107 0814 	add.w	r8, r7, #20
 8009d9a:	f109 0114 	add.w	r1, r9, #20
 8009d9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009da2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	1beb      	subs	r3, r5, r7
 8009daa:	3b15      	subs	r3, #21
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	3304      	adds	r3, #4
 8009db2:	3715      	adds	r7, #21
 8009db4:	42bd      	cmp	r5, r7
 8009db6:	bf38      	it	cc
 8009db8:	2304      	movcc	r3, #4
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	9103      	str	r1, [sp, #12]
 8009dc0:	428b      	cmp	r3, r1
 8009dc2:	d80c      	bhi.n	8009dde <__multiply+0x9a>
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	dd03      	ble.n	8009dd0 <__multiply+0x8c>
 8009dc8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d055      	beq.n	8009e7c <__multiply+0x138>
 8009dd0:	6106      	str	r6, [r0, #16]
 8009dd2:	b005      	add	sp, #20
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	f843 2b04 	str.w	r2, [r3], #4
 8009ddc:	e7d9      	b.n	8009d92 <__multiply+0x4e>
 8009dde:	f8b1 a000 	ldrh.w	sl, [r1]
 8009de2:	f1ba 0f00 	cmp.w	sl, #0
 8009de6:	d01f      	beq.n	8009e28 <__multiply+0xe4>
 8009de8:	46c4      	mov	ip, r8
 8009dea:	46a1      	mov	r9, r4
 8009dec:	2700      	movs	r7, #0
 8009dee:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009df2:	f8d9 3000 	ldr.w	r3, [r9]
 8009df6:	fa1f fb82 	uxth.w	fp, r2
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e00:	443b      	add	r3, r7
 8009e02:	f8d9 7000 	ldr.w	r7, [r9]
 8009e06:	0c12      	lsrs	r2, r2, #16
 8009e08:	0c3f      	lsrs	r7, r7, #16
 8009e0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e18:	4565      	cmp	r5, ip
 8009e1a:	f849 3b04 	str.w	r3, [r9], #4
 8009e1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e22:	d8e4      	bhi.n	8009dee <__multiply+0xaa>
 8009e24:	9b01      	ldr	r3, [sp, #4]
 8009e26:	50e7      	str	r7, [r4, r3]
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e2e:	3104      	adds	r1, #4
 8009e30:	f1b9 0f00 	cmp.w	r9, #0
 8009e34:	d020      	beq.n	8009e78 <__multiply+0x134>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	4647      	mov	r7, r8
 8009e3a:	46a4      	mov	ip, r4
 8009e3c:	f04f 0a00 	mov.w	sl, #0
 8009e40:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e48:	fb09 220b 	mla	r2, r9, fp, r2
 8009e4c:	4452      	add	r2, sl
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e54:	f84c 3b04 	str.w	r3, [ip], #4
 8009e58:	f857 3b04 	ldr.w	r3, [r7], #4
 8009e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e60:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e64:	fb09 330a 	mla	r3, r9, sl, r3
 8009e68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e6c:	42bd      	cmp	r5, r7
 8009e6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e72:	d8e5      	bhi.n	8009e40 <__multiply+0xfc>
 8009e74:	9a01      	ldr	r2, [sp, #4]
 8009e76:	50a3      	str	r3, [r4, r2]
 8009e78:	3404      	adds	r4, #4
 8009e7a:	e79f      	b.n	8009dbc <__multiply+0x78>
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	e7a1      	b.n	8009dc4 <__multiply+0x80>
 8009e80:	0800b8d0 	.word	0x0800b8d0
 8009e84:	0800b8e1 	.word	0x0800b8e1

08009e88 <__pow5mult>:
 8009e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	4615      	mov	r5, r2
 8009e8e:	f012 0203 	ands.w	r2, r2, #3
 8009e92:	4607      	mov	r7, r0
 8009e94:	460e      	mov	r6, r1
 8009e96:	d007      	beq.n	8009ea8 <__pow5mult+0x20>
 8009e98:	4c25      	ldr	r4, [pc, #148]	@ (8009f30 <__pow5mult+0xa8>)
 8009e9a:	3a01      	subs	r2, #1
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ea2:	f7ff fea7 	bl	8009bf4 <__multadd>
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	10ad      	asrs	r5, r5, #2
 8009eaa:	d03d      	beq.n	8009f28 <__pow5mult+0xa0>
 8009eac:	69fc      	ldr	r4, [r7, #28]
 8009eae:	b97c      	cbnz	r4, 8009ed0 <__pow5mult+0x48>
 8009eb0:	2010      	movs	r0, #16
 8009eb2:	f7ff fd87 	bl	80099c4 <malloc>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	61f8      	str	r0, [r7, #28]
 8009eba:	b928      	cbnz	r0, 8009ec8 <__pow5mult+0x40>
 8009ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f34 <__pow5mult+0xac>)
 8009ebe:	481e      	ldr	r0, [pc, #120]	@ (8009f38 <__pow5mult+0xb0>)
 8009ec0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ec4:	f000 fdd6 	bl	800aa74 <__assert_func>
 8009ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ecc:	6004      	str	r4, [r0, #0]
 8009ece:	60c4      	str	r4, [r0, #12]
 8009ed0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed8:	b94c      	cbnz	r4, 8009eee <__pow5mult+0x66>
 8009eda:	f240 2171 	movw	r1, #625	@ 0x271
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7ff ff1a 	bl	8009d18 <__i2b>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eea:	4604      	mov	r4, r0
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	f04f 0900 	mov.w	r9, #0
 8009ef2:	07eb      	lsls	r3, r5, #31
 8009ef4:	d50a      	bpl.n	8009f0c <__pow5mult+0x84>
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7ff ff22 	bl	8009d44 <__multiply>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4680      	mov	r8, r0
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff fe53 	bl	8009bb0 <_Bfree>
 8009f0a:	4646      	mov	r6, r8
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	d00b      	beq.n	8009f28 <__pow5mult+0xa0>
 8009f10:	6820      	ldr	r0, [r4, #0]
 8009f12:	b938      	cbnz	r0, 8009f24 <__pow5mult+0x9c>
 8009f14:	4622      	mov	r2, r4
 8009f16:	4621      	mov	r1, r4
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff13 	bl	8009d44 <__multiply>
 8009f1e:	6020      	str	r0, [r4, #0]
 8009f20:	f8c0 9000 	str.w	r9, [r0]
 8009f24:	4604      	mov	r4, r0
 8009f26:	e7e4      	b.n	8009ef2 <__pow5mult+0x6a>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800b994 	.word	0x0800b994
 8009f34:	0800b861 	.word	0x0800b861
 8009f38:	0800b8e1 	.word	0x0800b8e1

08009f3c <__lshift>:
 8009f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	6849      	ldr	r1, [r1, #4]
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	4691      	mov	r9, r2
 8009f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f54:	f108 0601 	add.w	r6, r8, #1
 8009f58:	42b3      	cmp	r3, r6
 8009f5a:	db0b      	blt.n	8009f74 <__lshift+0x38>
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff fde7 	bl	8009b30 <_Balloc>
 8009f62:	4605      	mov	r5, r0
 8009f64:	b948      	cbnz	r0, 8009f7a <__lshift+0x3e>
 8009f66:	4602      	mov	r2, r0
 8009f68:	4b28      	ldr	r3, [pc, #160]	@ (800a00c <__lshift+0xd0>)
 8009f6a:	4829      	ldr	r0, [pc, #164]	@ (800a010 <__lshift+0xd4>)
 8009f6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f70:	f000 fd80 	bl	800aa74 <__assert_func>
 8009f74:	3101      	adds	r1, #1
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	e7ee      	b.n	8009f58 <__lshift+0x1c>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f100 0114 	add.w	r1, r0, #20
 8009f80:	f100 0210 	add.w	r2, r0, #16
 8009f84:	4618      	mov	r0, r3
 8009f86:	4553      	cmp	r3, sl
 8009f88:	db33      	blt.n	8009ff2 <__lshift+0xb6>
 8009f8a:	6920      	ldr	r0, [r4, #16]
 8009f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f90:	f104 0314 	add.w	r3, r4, #20
 8009f94:	f019 091f 	ands.w	r9, r9, #31
 8009f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fa0:	d02b      	beq.n	8009ffa <__lshift+0xbe>
 8009fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fa6:	468a      	mov	sl, r1
 8009fa8:	2200      	movs	r2, #0
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	fa00 f009 	lsl.w	r0, r0, r9
 8009fb0:	4310      	orrs	r0, r2
 8009fb2:	f84a 0b04 	str.w	r0, [sl], #4
 8009fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fba:	459c      	cmp	ip, r3
 8009fbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fc0:	d8f3      	bhi.n	8009faa <__lshift+0x6e>
 8009fc2:	ebac 0304 	sub.w	r3, ip, r4
 8009fc6:	3b15      	subs	r3, #21
 8009fc8:	f023 0303 	bic.w	r3, r3, #3
 8009fcc:	3304      	adds	r3, #4
 8009fce:	f104 0015 	add.w	r0, r4, #21
 8009fd2:	4560      	cmp	r0, ip
 8009fd4:	bf88      	it	hi
 8009fd6:	2304      	movhi	r3, #4
 8009fd8:	50ca      	str	r2, [r1, r3]
 8009fda:	b10a      	cbz	r2, 8009fe0 <__lshift+0xa4>
 8009fdc:	f108 0602 	add.w	r6, r8, #2
 8009fe0:	3e01      	subs	r6, #1
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	612e      	str	r6, [r5, #16]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	f7ff fde2 	bl	8009bb0 <_Bfree>
 8009fec:	4628      	mov	r0, r5
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	e7c5      	b.n	8009f86 <__lshift+0x4a>
 8009ffa:	3904      	subs	r1, #4
 8009ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a000:	f841 2f04 	str.w	r2, [r1, #4]!
 800a004:	459c      	cmp	ip, r3
 800a006:	d8f9      	bhi.n	8009ffc <__lshift+0xc0>
 800a008:	e7ea      	b.n	8009fe0 <__lshift+0xa4>
 800a00a:	bf00      	nop
 800a00c:	0800b8d0 	.word	0x0800b8d0
 800a010:	0800b8e1 	.word	0x0800b8e1

0800a014 <__mcmp>:
 800a014:	690a      	ldr	r2, [r1, #16]
 800a016:	4603      	mov	r3, r0
 800a018:	6900      	ldr	r0, [r0, #16]
 800a01a:	1a80      	subs	r0, r0, r2
 800a01c:	b530      	push	{r4, r5, lr}
 800a01e:	d10e      	bne.n	800a03e <__mcmp+0x2a>
 800a020:	3314      	adds	r3, #20
 800a022:	3114      	adds	r1, #20
 800a024:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a028:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a02c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a030:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a034:	4295      	cmp	r5, r2
 800a036:	d003      	beq.n	800a040 <__mcmp+0x2c>
 800a038:	d205      	bcs.n	800a046 <__mcmp+0x32>
 800a03a:	f04f 30ff 	mov.w	r0, #4294967295
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	42a3      	cmp	r3, r4
 800a042:	d3f3      	bcc.n	800a02c <__mcmp+0x18>
 800a044:	e7fb      	b.n	800a03e <__mcmp+0x2a>
 800a046:	2001      	movs	r0, #1
 800a048:	e7f9      	b.n	800a03e <__mcmp+0x2a>
	...

0800a04c <__mdiff>:
 800a04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	4689      	mov	r9, r1
 800a052:	4606      	mov	r6, r0
 800a054:	4611      	mov	r1, r2
 800a056:	4648      	mov	r0, r9
 800a058:	4614      	mov	r4, r2
 800a05a:	f7ff ffdb 	bl	800a014 <__mcmp>
 800a05e:	1e05      	subs	r5, r0, #0
 800a060:	d112      	bne.n	800a088 <__mdiff+0x3c>
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff fd63 	bl	8009b30 <_Balloc>
 800a06a:	4602      	mov	r2, r0
 800a06c:	b928      	cbnz	r0, 800a07a <__mdiff+0x2e>
 800a06e:	4b3f      	ldr	r3, [pc, #252]	@ (800a16c <__mdiff+0x120>)
 800a070:	f240 2137 	movw	r1, #567	@ 0x237
 800a074:	483e      	ldr	r0, [pc, #248]	@ (800a170 <__mdiff+0x124>)
 800a076:	f000 fcfd 	bl	800aa74 <__assert_func>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a080:	4610      	mov	r0, r2
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	bfbc      	itt	lt
 800a08a:	464b      	movlt	r3, r9
 800a08c:	46a1      	movlt	r9, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a094:	bfba      	itte	lt
 800a096:	461c      	movlt	r4, r3
 800a098:	2501      	movlt	r5, #1
 800a09a:	2500      	movge	r5, #0
 800a09c:	f7ff fd48 	bl	8009b30 <_Balloc>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	b918      	cbnz	r0, 800a0ac <__mdiff+0x60>
 800a0a4:	4b31      	ldr	r3, [pc, #196]	@ (800a16c <__mdiff+0x120>)
 800a0a6:	f240 2145 	movw	r1, #581	@ 0x245
 800a0aa:	e7e3      	b.n	800a074 <__mdiff+0x28>
 800a0ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0b0:	6926      	ldr	r6, [r4, #16]
 800a0b2:	60c5      	str	r5, [r0, #12]
 800a0b4:	f109 0310 	add.w	r3, r9, #16
 800a0b8:	f109 0514 	add.w	r5, r9, #20
 800a0bc:	f104 0e14 	add.w	lr, r4, #20
 800a0c0:	f100 0b14 	add.w	fp, r0, #20
 800a0c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	46d9      	mov	r9, fp
 800a0d0:	f04f 0c00 	mov.w	ip, #0
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	fa1f f38a 	uxth.w	r3, sl
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	b283      	uxth	r3, r0
 800a0e8:	1acb      	subs	r3, r1, r3
 800a0ea:	0c00      	lsrs	r0, r0, #16
 800a0ec:	4463      	add	r3, ip
 800a0ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0fc:	4576      	cmp	r6, lr
 800a0fe:	f849 3b04 	str.w	r3, [r9], #4
 800a102:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a106:	d8e5      	bhi.n	800a0d4 <__mdiff+0x88>
 800a108:	1b33      	subs	r3, r6, r4
 800a10a:	3b15      	subs	r3, #21
 800a10c:	f023 0303 	bic.w	r3, r3, #3
 800a110:	3415      	adds	r4, #21
 800a112:	3304      	adds	r3, #4
 800a114:	42a6      	cmp	r6, r4
 800a116:	bf38      	it	cc
 800a118:	2304      	movcc	r3, #4
 800a11a:	441d      	add	r5, r3
 800a11c:	445b      	add	r3, fp
 800a11e:	461e      	mov	r6, r3
 800a120:	462c      	mov	r4, r5
 800a122:	4544      	cmp	r4, r8
 800a124:	d30e      	bcc.n	800a144 <__mdiff+0xf8>
 800a126:	f108 0103 	add.w	r1, r8, #3
 800a12a:	1b49      	subs	r1, r1, r5
 800a12c:	f021 0103 	bic.w	r1, r1, #3
 800a130:	3d03      	subs	r5, #3
 800a132:	45a8      	cmp	r8, r5
 800a134:	bf38      	it	cc
 800a136:	2100      	movcc	r1, #0
 800a138:	440b      	add	r3, r1
 800a13a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a13e:	b191      	cbz	r1, 800a166 <__mdiff+0x11a>
 800a140:	6117      	str	r7, [r2, #16]
 800a142:	e79d      	b.n	800a080 <__mdiff+0x34>
 800a144:	f854 1b04 	ldr.w	r1, [r4], #4
 800a148:	46e6      	mov	lr, ip
 800a14a:	0c08      	lsrs	r0, r1, #16
 800a14c:	fa1c fc81 	uxtah	ip, ip, r1
 800a150:	4471      	add	r1, lr
 800a152:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a156:	b289      	uxth	r1, r1
 800a158:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a15c:	f846 1b04 	str.w	r1, [r6], #4
 800a160:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a164:	e7dd      	b.n	800a122 <__mdiff+0xd6>
 800a166:	3f01      	subs	r7, #1
 800a168:	e7e7      	b.n	800a13a <__mdiff+0xee>
 800a16a:	bf00      	nop
 800a16c:	0800b8d0 	.word	0x0800b8d0
 800a170:	0800b8e1 	.word	0x0800b8e1

0800a174 <__d2b>:
 800a174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a178:	460f      	mov	r7, r1
 800a17a:	2101      	movs	r1, #1
 800a17c:	ec59 8b10 	vmov	r8, r9, d0
 800a180:	4616      	mov	r6, r2
 800a182:	f7ff fcd5 	bl	8009b30 <_Balloc>
 800a186:	4604      	mov	r4, r0
 800a188:	b930      	cbnz	r0, 800a198 <__d2b+0x24>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b23      	ldr	r3, [pc, #140]	@ (800a21c <__d2b+0xa8>)
 800a18e:	4824      	ldr	r0, [pc, #144]	@ (800a220 <__d2b+0xac>)
 800a190:	f240 310f 	movw	r1, #783	@ 0x30f
 800a194:	f000 fc6e 	bl	800aa74 <__assert_func>
 800a198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a19c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a0:	b10d      	cbz	r5, 800a1a6 <__d2b+0x32>
 800a1a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a1ac:	d023      	beq.n	800a1f6 <__d2b+0x82>
 800a1ae:	4668      	mov	r0, sp
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	f7ff fd84 	bl	8009cbe <__lo0bits>
 800a1b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1ba:	b1d0      	cbz	r0, 800a1f2 <__d2b+0x7e>
 800a1bc:	f1c0 0320 	rsb	r3, r0, #32
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	40c2      	lsrs	r2, r0
 800a1c8:	6163      	str	r3, [r4, #20]
 800a1ca:	9201      	str	r2, [sp, #4]
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	61a3      	str	r3, [r4, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf0c      	ite	eq
 800a1d4:	2201      	moveq	r2, #1
 800a1d6:	2202      	movne	r2, #2
 800a1d8:	6122      	str	r2, [r4, #16]
 800a1da:	b1a5      	cbz	r5, 800a206 <__d2b+0x92>
 800a1dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1e0:	4405      	add	r5, r0
 800a1e2:	603d      	str	r5, [r7, #0]
 800a1e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1e8:	6030      	str	r0, [r6, #0]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	6161      	str	r1, [r4, #20]
 800a1f4:	e7ea      	b.n	800a1cc <__d2b+0x58>
 800a1f6:	a801      	add	r0, sp, #4
 800a1f8:	f7ff fd61 	bl	8009cbe <__lo0bits>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	3020      	adds	r0, #32
 800a202:	2201      	movs	r2, #1
 800a204:	e7e8      	b.n	800a1d8 <__d2b+0x64>
 800a206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a20a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a20e:	6038      	str	r0, [r7, #0]
 800a210:	6918      	ldr	r0, [r3, #16]
 800a212:	f7ff fd35 	bl	8009c80 <__hi0bits>
 800a216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a21a:	e7e5      	b.n	800a1e8 <__d2b+0x74>
 800a21c:	0800b8d0 	.word	0x0800b8d0
 800a220:	0800b8e1 	.word	0x0800b8e1

0800a224 <__ssputs_r>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	688e      	ldr	r6, [r1, #8]
 800a22a:	461f      	mov	r7, r3
 800a22c:	42be      	cmp	r6, r7
 800a22e:	680b      	ldr	r3, [r1, #0]
 800a230:	4682      	mov	sl, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4690      	mov	r8, r2
 800a236:	d82d      	bhi.n	800a294 <__ssputs_r+0x70>
 800a238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a23c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a240:	d026      	beq.n	800a290 <__ssputs_r+0x6c>
 800a242:	6965      	ldr	r5, [r4, #20]
 800a244:	6909      	ldr	r1, [r1, #16]
 800a246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a24a:	eba3 0901 	sub.w	r9, r3, r1
 800a24e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a252:	1c7b      	adds	r3, r7, #1
 800a254:	444b      	add	r3, r9
 800a256:	106d      	asrs	r5, r5, #1
 800a258:	429d      	cmp	r5, r3
 800a25a:	bf38      	it	cc
 800a25c:	461d      	movcc	r5, r3
 800a25e:	0553      	lsls	r3, r2, #21
 800a260:	d527      	bpl.n	800a2b2 <__ssputs_r+0x8e>
 800a262:	4629      	mov	r1, r5
 800a264:	f7ff fbd8 	bl	8009a18 <_malloc_r>
 800a268:	4606      	mov	r6, r0
 800a26a:	b360      	cbz	r0, 800a2c6 <__ssputs_r+0xa2>
 800a26c:	6921      	ldr	r1, [r4, #16]
 800a26e:	464a      	mov	r2, r9
 800a270:	f7fe fcf5 	bl	8008c5e <memcpy>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	6126      	str	r6, [r4, #16]
 800a282:	6165      	str	r5, [r4, #20]
 800a284:	444e      	add	r6, r9
 800a286:	eba5 0509 	sub.w	r5, r5, r9
 800a28a:	6026      	str	r6, [r4, #0]
 800a28c:	60a5      	str	r5, [r4, #8]
 800a28e:	463e      	mov	r6, r7
 800a290:	42be      	cmp	r6, r7
 800a292:	d900      	bls.n	800a296 <__ssputs_r+0x72>
 800a294:	463e      	mov	r6, r7
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	4632      	mov	r2, r6
 800a29a:	4641      	mov	r1, r8
 800a29c:	f000 fb9e 	bl	800a9dc <memmove>
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	1b9b      	subs	r3, r3, r6
 800a2a4:	60a3      	str	r3, [r4, #8]
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	4433      	add	r3, r6
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	f000 fc22 	bl	800aafc <_realloc_r>
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d1e0      	bne.n	800a280 <__ssputs_r+0x5c>
 800a2be:	6921      	ldr	r1, [r4, #16]
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	f7ff fb35 	bl	8009930 <_free_r>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	f8ca 3000 	str.w	r3, [sl]
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	e7e9      	b.n	800a2ae <__ssputs_r+0x8a>
	...

0800a2dc <_svfiprintf_r>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4698      	mov	r8, r3
 800a2e2:	898b      	ldrh	r3, [r1, #12]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	b09d      	sub	sp, #116	@ 0x74
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	d510      	bpl.n	800a312 <_svfiprintf_r+0x36>
 800a2f0:	690b      	ldr	r3, [r1, #16]
 800a2f2:	b973      	cbnz	r3, 800a312 <_svfiprintf_r+0x36>
 800a2f4:	2140      	movs	r1, #64	@ 0x40
 800a2f6:	f7ff fb8f 	bl	8009a18 <_malloc_r>
 800a2fa:	6028      	str	r0, [r5, #0]
 800a2fc:	6128      	str	r0, [r5, #16]
 800a2fe:	b930      	cbnz	r0, 800a30e <_svfiprintf_r+0x32>
 800a300:	230c      	movs	r3, #12
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	b01d      	add	sp, #116	@ 0x74
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	2340      	movs	r3, #64	@ 0x40
 800a310:	616b      	str	r3, [r5, #20]
 800a312:	2300      	movs	r3, #0
 800a314:	9309      	str	r3, [sp, #36]	@ 0x24
 800a316:	2320      	movs	r3, #32
 800a318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a320:	2330      	movs	r3, #48	@ 0x30
 800a322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4c0 <_svfiprintf_r+0x1e4>
 800a326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a32a:	f04f 0901 	mov.w	r9, #1
 800a32e:	4623      	mov	r3, r4
 800a330:	469a      	mov	sl, r3
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	b10a      	cbz	r2, 800a33c <_svfiprintf_r+0x60>
 800a338:	2a25      	cmp	r2, #37	@ 0x25
 800a33a:	d1f9      	bne.n	800a330 <_svfiprintf_r+0x54>
 800a33c:	ebba 0b04 	subs.w	fp, sl, r4
 800a340:	d00b      	beq.n	800a35a <_svfiprintf_r+0x7e>
 800a342:	465b      	mov	r3, fp
 800a344:	4622      	mov	r2, r4
 800a346:	4629      	mov	r1, r5
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff ff6b 	bl	800a224 <__ssputs_r>
 800a34e:	3001      	adds	r0, #1
 800a350:	f000 80a7 	beq.w	800a4a2 <_svfiprintf_r+0x1c6>
 800a354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a356:	445a      	add	r2, fp
 800a358:	9209      	str	r2, [sp, #36]	@ 0x24
 800a35a:	f89a 3000 	ldrb.w	r3, [sl]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 809f 	beq.w	800a4a2 <_svfiprintf_r+0x1c6>
 800a364:	2300      	movs	r3, #0
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36e:	f10a 0a01 	add.w	sl, sl, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a37a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a37c:	4654      	mov	r4, sl
 800a37e:	2205      	movs	r2, #5
 800a380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a384:	484e      	ldr	r0, [pc, #312]	@ (800a4c0 <_svfiprintf_r+0x1e4>)
 800a386:	f7f5 ff2b 	bl	80001e0 <memchr>
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	b9d8      	cbnz	r0, 800a3c6 <_svfiprintf_r+0xea>
 800a38e:	06d0      	lsls	r0, r2, #27
 800a390:	bf44      	itt	mi
 800a392:	2320      	movmi	r3, #32
 800a394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a398:	0711      	lsls	r1, r2, #28
 800a39a:	bf44      	itt	mi
 800a39c:	232b      	movmi	r3, #43	@ 0x2b
 800a39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a8:	d015      	beq.n	800a3d6 <_svfiprintf_r+0xfa>
 800a3aa:	9a07      	ldr	r2, [sp, #28]
 800a3ac:	4654      	mov	r4, sl
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ba:	3b30      	subs	r3, #48	@ 0x30
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	d94b      	bls.n	800a458 <_svfiprintf_r+0x17c>
 800a3c0:	b1b0      	cbz	r0, 800a3f0 <_svfiprintf_r+0x114>
 800a3c2:	9207      	str	r2, [sp, #28]
 800a3c4:	e014      	b.n	800a3f0 <_svfiprintf_r+0x114>
 800a3c6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	46a2      	mov	sl, r4
 800a3d4:	e7d2      	b.n	800a37c <_svfiprintf_r+0xa0>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	1d19      	adds	r1, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9103      	str	r1, [sp, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bfbb      	ittet	lt
 800a3e2:	425b      	neglt	r3, r3
 800a3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e8:	9307      	strge	r3, [sp, #28]
 800a3ea:	9307      	strlt	r3, [sp, #28]
 800a3ec:	bfb8      	it	lt
 800a3ee:	9204      	strlt	r2, [sp, #16]
 800a3f0:	7823      	ldrb	r3, [r4, #0]
 800a3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3f4:	d10a      	bne.n	800a40c <_svfiprintf_r+0x130>
 800a3f6:	7863      	ldrb	r3, [r4, #1]
 800a3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3fa:	d132      	bne.n	800a462 <_svfiprintf_r+0x186>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a408:	3402      	adds	r4, #2
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4d0 <_svfiprintf_r+0x1f4>
 800a410:	7821      	ldrb	r1, [r4, #0]
 800a412:	2203      	movs	r2, #3
 800a414:	4650      	mov	r0, sl
 800a416:	f7f5 fee3 	bl	80001e0 <memchr>
 800a41a:	b138      	cbz	r0, 800a42c <_svfiprintf_r+0x150>
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	eba0 000a 	sub.w	r0, r0, sl
 800a422:	2240      	movs	r2, #64	@ 0x40
 800a424:	4082      	lsls	r2, r0
 800a426:	4313      	orrs	r3, r2
 800a428:	3401      	adds	r4, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a430:	4824      	ldr	r0, [pc, #144]	@ (800a4c4 <_svfiprintf_r+0x1e8>)
 800a432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a436:	2206      	movs	r2, #6
 800a438:	f7f5 fed2 	bl	80001e0 <memchr>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d036      	beq.n	800a4ae <_svfiprintf_r+0x1d2>
 800a440:	4b21      	ldr	r3, [pc, #132]	@ (800a4c8 <_svfiprintf_r+0x1ec>)
 800a442:	bb1b      	cbnz	r3, 800a48c <_svfiprintf_r+0x1b0>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	3307      	adds	r3, #7
 800a448:	f023 0307 	bic.w	r3, r3, #7
 800a44c:	3308      	adds	r3, #8
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a452:	4433      	add	r3, r6
 800a454:	9309      	str	r3, [sp, #36]	@ 0x24
 800a456:	e76a      	b.n	800a32e <_svfiprintf_r+0x52>
 800a458:	fb0c 3202 	mla	r2, ip, r2, r3
 800a45c:	460c      	mov	r4, r1
 800a45e:	2001      	movs	r0, #1
 800a460:	e7a8      	b.n	800a3b4 <_svfiprintf_r+0xd8>
 800a462:	2300      	movs	r3, #0
 800a464:	3401      	adds	r4, #1
 800a466:	9305      	str	r3, [sp, #20]
 800a468:	4619      	mov	r1, r3
 800a46a:	f04f 0c0a 	mov.w	ip, #10
 800a46e:	4620      	mov	r0, r4
 800a470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a474:	3a30      	subs	r2, #48	@ 0x30
 800a476:	2a09      	cmp	r2, #9
 800a478:	d903      	bls.n	800a482 <_svfiprintf_r+0x1a6>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0c6      	beq.n	800a40c <_svfiprintf_r+0x130>
 800a47e:	9105      	str	r1, [sp, #20]
 800a480:	e7c4      	b.n	800a40c <_svfiprintf_r+0x130>
 800a482:	fb0c 2101 	mla	r1, ip, r1, r2
 800a486:	4604      	mov	r4, r0
 800a488:	2301      	movs	r3, #1
 800a48a:	e7f0      	b.n	800a46e <_svfiprintf_r+0x192>
 800a48c:	ab03      	add	r3, sp, #12
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	462a      	mov	r2, r5
 800a492:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <_svfiprintf_r+0x1f0>)
 800a494:	a904      	add	r1, sp, #16
 800a496:	4638      	mov	r0, r7
 800a498:	f7fd fd78 	bl	8007f8c <_printf_float>
 800a49c:	1c42      	adds	r2, r0, #1
 800a49e:	4606      	mov	r6, r0
 800a4a0:	d1d6      	bne.n	800a450 <_svfiprintf_r+0x174>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af2d 	bmi.w	800a304 <_svfiprintf_r+0x28>
 800a4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4ac:	e72c      	b.n	800a308 <_svfiprintf_r+0x2c>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <_svfiprintf_r+0x1f0>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f7fd ffff 	bl	80084bc <_printf_i>
 800a4be:	e7ed      	b.n	800a49c <_svfiprintf_r+0x1c0>
 800a4c0:	0800b93a 	.word	0x0800b93a
 800a4c4:	0800b944 	.word	0x0800b944
 800a4c8:	08007f8d 	.word	0x08007f8d
 800a4cc:	0800a225 	.word	0x0800a225
 800a4d0:	0800b940 	.word	0x0800b940

0800a4d4 <__sfputc_r>:
 800a4d4:	6893      	ldr	r3, [r2, #8]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	b410      	push	{r4}
 800a4dc:	6093      	str	r3, [r2, #8]
 800a4de:	da08      	bge.n	800a4f2 <__sfputc_r+0x1e>
 800a4e0:	6994      	ldr	r4, [r2, #24]
 800a4e2:	42a3      	cmp	r3, r4
 800a4e4:	db01      	blt.n	800a4ea <__sfputc_r+0x16>
 800a4e6:	290a      	cmp	r1, #10
 800a4e8:	d103      	bne.n	800a4f2 <__sfputc_r+0x1e>
 800a4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ee:	f7fe baa2 	b.w	8008a36 <__swbuf_r>
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	1c58      	adds	r0, r3, #1
 800a4f6:	6010      	str	r0, [r2, #0]
 800a4f8:	7019      	strb	r1, [r3, #0]
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <__sfputs_r>:
 800a502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a504:	4606      	mov	r6, r0
 800a506:	460f      	mov	r7, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	18d5      	adds	r5, r2, r3
 800a50c:	42ac      	cmp	r4, r5
 800a50e:	d101      	bne.n	800a514 <__sfputs_r+0x12>
 800a510:	2000      	movs	r0, #0
 800a512:	e007      	b.n	800a524 <__sfputs_r+0x22>
 800a514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a518:	463a      	mov	r2, r7
 800a51a:	4630      	mov	r0, r6
 800a51c:	f7ff ffda 	bl	800a4d4 <__sfputc_r>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d1f3      	bne.n	800a50c <__sfputs_r+0xa>
 800a524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a528 <_vfiprintf_r>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460d      	mov	r5, r1
 800a52e:	b09d      	sub	sp, #116	@ 0x74
 800a530:	4614      	mov	r4, r2
 800a532:	4698      	mov	r8, r3
 800a534:	4606      	mov	r6, r0
 800a536:	b118      	cbz	r0, 800a540 <_vfiprintf_r+0x18>
 800a538:	6a03      	ldr	r3, [r0, #32]
 800a53a:	b90b      	cbnz	r3, 800a540 <_vfiprintf_r+0x18>
 800a53c:	f7fe f968 	bl	8008810 <__sinit>
 800a540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a542:	07d9      	lsls	r1, r3, #31
 800a544:	d405      	bmi.n	800a552 <_vfiprintf_r+0x2a>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	059a      	lsls	r2, r3, #22
 800a54a:	d402      	bmi.n	800a552 <_vfiprintf_r+0x2a>
 800a54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a54e:	f7fe fb84 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	071b      	lsls	r3, r3, #28
 800a556:	d501      	bpl.n	800a55c <_vfiprintf_r+0x34>
 800a558:	692b      	ldr	r3, [r5, #16]
 800a55a:	b99b      	cbnz	r3, 800a584 <_vfiprintf_r+0x5c>
 800a55c:	4629      	mov	r1, r5
 800a55e:	4630      	mov	r0, r6
 800a560:	f7fe faa8 	bl	8008ab4 <__swsetup_r>
 800a564:	b170      	cbz	r0, 800a584 <_vfiprintf_r+0x5c>
 800a566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a568:	07dc      	lsls	r4, r3, #31
 800a56a:	d504      	bpl.n	800a576 <_vfiprintf_r+0x4e>
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	b01d      	add	sp, #116	@ 0x74
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	0598      	lsls	r0, r3, #22
 800a57a:	d4f7      	bmi.n	800a56c <_vfiprintf_r+0x44>
 800a57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a57e:	f7fe fb6d 	bl	8008c5c <__retarget_lock_release_recursive>
 800a582:	e7f3      	b.n	800a56c <_vfiprintf_r+0x44>
 800a584:	2300      	movs	r3, #0
 800a586:	9309      	str	r3, [sp, #36]	@ 0x24
 800a588:	2320      	movs	r3, #32
 800a58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a592:	2330      	movs	r3, #48	@ 0x30
 800a594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a744 <_vfiprintf_r+0x21c>
 800a598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a59c:	f04f 0901 	mov.w	r9, #1
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	469a      	mov	sl, r3
 800a5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a8:	b10a      	cbz	r2, 800a5ae <_vfiprintf_r+0x86>
 800a5aa:	2a25      	cmp	r2, #37	@ 0x25
 800a5ac:	d1f9      	bne.n	800a5a2 <_vfiprintf_r+0x7a>
 800a5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b2:	d00b      	beq.n	800a5cc <_vfiprintf_r+0xa4>
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ffa1 	bl	800a502 <__sfputs_r>
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f000 80a7 	beq.w	800a714 <_vfiprintf_r+0x1ec>
 800a5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5c8:	445a      	add	r2, fp
 800a5ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 809f 	beq.w	800a714 <_vfiprintf_r+0x1ec>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e0:	f10a 0a01 	add.w	sl, sl, #1
 800a5e4:	9304      	str	r3, [sp, #16]
 800a5e6:	9307      	str	r3, [sp, #28]
 800a5e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ee:	4654      	mov	r4, sl
 800a5f0:	2205      	movs	r2, #5
 800a5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f6:	4853      	ldr	r0, [pc, #332]	@ (800a744 <_vfiprintf_r+0x21c>)
 800a5f8:	f7f5 fdf2 	bl	80001e0 <memchr>
 800a5fc:	9a04      	ldr	r2, [sp, #16]
 800a5fe:	b9d8      	cbnz	r0, 800a638 <_vfiprintf_r+0x110>
 800a600:	06d1      	lsls	r1, r2, #27
 800a602:	bf44      	itt	mi
 800a604:	2320      	movmi	r3, #32
 800a606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a60a:	0713      	lsls	r3, r2, #28
 800a60c:	bf44      	itt	mi
 800a60e:	232b      	movmi	r3, #43	@ 0x2b
 800a610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a614:	f89a 3000 	ldrb.w	r3, [sl]
 800a618:	2b2a      	cmp	r3, #42	@ 0x2a
 800a61a:	d015      	beq.n	800a648 <_vfiprintf_r+0x120>
 800a61c:	9a07      	ldr	r2, [sp, #28]
 800a61e:	4654      	mov	r4, sl
 800a620:	2000      	movs	r0, #0
 800a622:	f04f 0c0a 	mov.w	ip, #10
 800a626:	4621      	mov	r1, r4
 800a628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62c:	3b30      	subs	r3, #48	@ 0x30
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d94b      	bls.n	800a6ca <_vfiprintf_r+0x1a2>
 800a632:	b1b0      	cbz	r0, 800a662 <_vfiprintf_r+0x13a>
 800a634:	9207      	str	r2, [sp, #28]
 800a636:	e014      	b.n	800a662 <_vfiprintf_r+0x13a>
 800a638:	eba0 0308 	sub.w	r3, r0, r8
 800a63c:	fa09 f303 	lsl.w	r3, r9, r3
 800a640:	4313      	orrs	r3, r2
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	46a2      	mov	sl, r4
 800a646:	e7d2      	b.n	800a5ee <_vfiprintf_r+0xc6>
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	1d19      	adds	r1, r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	9103      	str	r1, [sp, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfbb      	ittet	lt
 800a654:	425b      	neglt	r3, r3
 800a656:	f042 0202 	orrlt.w	r2, r2, #2
 800a65a:	9307      	strge	r3, [sp, #28]
 800a65c:	9307      	strlt	r3, [sp, #28]
 800a65e:	bfb8      	it	lt
 800a660:	9204      	strlt	r2, [sp, #16]
 800a662:	7823      	ldrb	r3, [r4, #0]
 800a664:	2b2e      	cmp	r3, #46	@ 0x2e
 800a666:	d10a      	bne.n	800a67e <_vfiprintf_r+0x156>
 800a668:	7863      	ldrb	r3, [r4, #1]
 800a66a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a66c:	d132      	bne.n	800a6d4 <_vfiprintf_r+0x1ac>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	1d1a      	adds	r2, r3, #4
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	9203      	str	r2, [sp, #12]
 800a676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a67a:	3402      	adds	r4, #2
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a754 <_vfiprintf_r+0x22c>
 800a682:	7821      	ldrb	r1, [r4, #0]
 800a684:	2203      	movs	r2, #3
 800a686:	4650      	mov	r0, sl
 800a688:	f7f5 fdaa 	bl	80001e0 <memchr>
 800a68c:	b138      	cbz	r0, 800a69e <_vfiprintf_r+0x176>
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	eba0 000a 	sub.w	r0, r0, sl
 800a694:	2240      	movs	r2, #64	@ 0x40
 800a696:	4082      	lsls	r2, r0
 800a698:	4313      	orrs	r3, r2
 800a69a:	3401      	adds	r4, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a2:	4829      	ldr	r0, [pc, #164]	@ (800a748 <_vfiprintf_r+0x220>)
 800a6a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6a8:	2206      	movs	r2, #6
 800a6aa:	f7f5 fd99 	bl	80001e0 <memchr>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d03f      	beq.n	800a732 <_vfiprintf_r+0x20a>
 800a6b2:	4b26      	ldr	r3, [pc, #152]	@ (800a74c <_vfiprintf_r+0x224>)
 800a6b4:	bb1b      	cbnz	r3, 800a6fe <_vfiprintf_r+0x1d6>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	3307      	adds	r3, #7
 800a6ba:	f023 0307 	bic.w	r3, r3, #7
 800a6be:	3308      	adds	r3, #8
 800a6c0:	9303      	str	r3, [sp, #12]
 800a6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c4:	443b      	add	r3, r7
 800a6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c8:	e76a      	b.n	800a5a0 <_vfiprintf_r+0x78>
 800a6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	e7a8      	b.n	800a626 <_vfiprintf_r+0xfe>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	9305      	str	r3, [sp, #20]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	f04f 0c0a 	mov.w	ip, #10
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e6:	3a30      	subs	r2, #48	@ 0x30
 800a6e8:	2a09      	cmp	r2, #9
 800a6ea:	d903      	bls.n	800a6f4 <_vfiprintf_r+0x1cc>
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0c6      	beq.n	800a67e <_vfiprintf_r+0x156>
 800a6f0:	9105      	str	r1, [sp, #20]
 800a6f2:	e7c4      	b.n	800a67e <_vfiprintf_r+0x156>
 800a6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e7f0      	b.n	800a6e0 <_vfiprintf_r+0x1b8>
 800a6fe:	ab03      	add	r3, sp, #12
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	462a      	mov	r2, r5
 800a704:	4b12      	ldr	r3, [pc, #72]	@ (800a750 <_vfiprintf_r+0x228>)
 800a706:	a904      	add	r1, sp, #16
 800a708:	4630      	mov	r0, r6
 800a70a:	f7fd fc3f 	bl	8007f8c <_printf_float>
 800a70e:	4607      	mov	r7, r0
 800a710:	1c78      	adds	r0, r7, #1
 800a712:	d1d6      	bne.n	800a6c2 <_vfiprintf_r+0x19a>
 800a714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a716:	07d9      	lsls	r1, r3, #31
 800a718:	d405      	bmi.n	800a726 <_vfiprintf_r+0x1fe>
 800a71a:	89ab      	ldrh	r3, [r5, #12]
 800a71c:	059a      	lsls	r2, r3, #22
 800a71e:	d402      	bmi.n	800a726 <_vfiprintf_r+0x1fe>
 800a720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a722:	f7fe fa9b 	bl	8008c5c <__retarget_lock_release_recursive>
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	065b      	lsls	r3, r3, #25
 800a72a:	f53f af1f 	bmi.w	800a56c <_vfiprintf_r+0x44>
 800a72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a730:	e71e      	b.n	800a570 <_vfiprintf_r+0x48>
 800a732:	ab03      	add	r3, sp, #12
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	462a      	mov	r2, r5
 800a738:	4b05      	ldr	r3, [pc, #20]	@ (800a750 <_vfiprintf_r+0x228>)
 800a73a:	a904      	add	r1, sp, #16
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7fd febd 	bl	80084bc <_printf_i>
 800a742:	e7e4      	b.n	800a70e <_vfiprintf_r+0x1e6>
 800a744:	0800b93a 	.word	0x0800b93a
 800a748:	0800b944 	.word	0x0800b944
 800a74c:	08007f8d 	.word	0x08007f8d
 800a750:	0800a503 	.word	0x0800a503
 800a754:	0800b940 	.word	0x0800b940

0800a758 <__sflush_r>:
 800a758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a760:	0716      	lsls	r6, r2, #28
 800a762:	4605      	mov	r5, r0
 800a764:	460c      	mov	r4, r1
 800a766:	d454      	bmi.n	800a812 <__sflush_r+0xba>
 800a768:	684b      	ldr	r3, [r1, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dc02      	bgt.n	800a774 <__sflush_r+0x1c>
 800a76e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	dd48      	ble.n	800a806 <__sflush_r+0xae>
 800a774:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a776:	2e00      	cmp	r6, #0
 800a778:	d045      	beq.n	800a806 <__sflush_r+0xae>
 800a77a:	2300      	movs	r3, #0
 800a77c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a780:	682f      	ldr	r7, [r5, #0]
 800a782:	6a21      	ldr	r1, [r4, #32]
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	d030      	beq.n	800a7ea <__sflush_r+0x92>
 800a788:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	0759      	lsls	r1, r3, #29
 800a78e:	d505      	bpl.n	800a79c <__sflush_r+0x44>
 800a790:	6863      	ldr	r3, [r4, #4]
 800a792:	1ad2      	subs	r2, r2, r3
 800a794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a796:	b10b      	cbz	r3, 800a79c <__sflush_r+0x44>
 800a798:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	2300      	movs	r3, #0
 800a79e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7a0:	6a21      	ldr	r1, [r4, #32]
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b0      	blx	r6
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	d106      	bne.n	800a7ba <__sflush_r+0x62>
 800a7ac:	6829      	ldr	r1, [r5, #0]
 800a7ae:	291d      	cmp	r1, #29
 800a7b0:	d82b      	bhi.n	800a80a <__sflush_r+0xb2>
 800a7b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a85c <__sflush_r+0x104>)
 800a7b4:	40ca      	lsrs	r2, r1
 800a7b6:	07d6      	lsls	r6, r2, #31
 800a7b8:	d527      	bpl.n	800a80a <__sflush_r+0xb2>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	6062      	str	r2, [r4, #4]
 800a7be:	04d9      	lsls	r1, r3, #19
 800a7c0:	6922      	ldr	r2, [r4, #16]
 800a7c2:	6022      	str	r2, [r4, #0]
 800a7c4:	d504      	bpl.n	800a7d0 <__sflush_r+0x78>
 800a7c6:	1c42      	adds	r2, r0, #1
 800a7c8:	d101      	bne.n	800a7ce <__sflush_r+0x76>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	b903      	cbnz	r3, 800a7d0 <__sflush_r+0x78>
 800a7ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7d2:	602f      	str	r7, [r5, #0]
 800a7d4:	b1b9      	cbz	r1, 800a806 <__sflush_r+0xae>
 800a7d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	d002      	beq.n	800a7e4 <__sflush_r+0x8c>
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f7ff f8a6 	bl	8009930 <_free_r>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7e8:	e00d      	b.n	800a806 <__sflush_r+0xae>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b0      	blx	r6
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	1c50      	adds	r0, r2, #1
 800a7f4:	d1c9      	bne.n	800a78a <__sflush_r+0x32>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0c6      	beq.n	800a78a <__sflush_r+0x32>
 800a7fc:	2b1d      	cmp	r3, #29
 800a7fe:	d001      	beq.n	800a804 <__sflush_r+0xac>
 800a800:	2b16      	cmp	r3, #22
 800a802:	d11e      	bne.n	800a842 <__sflush_r+0xea>
 800a804:	602f      	str	r7, [r5, #0]
 800a806:	2000      	movs	r0, #0
 800a808:	e022      	b.n	800a850 <__sflush_r+0xf8>
 800a80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a80e:	b21b      	sxth	r3, r3
 800a810:	e01b      	b.n	800a84a <__sflush_r+0xf2>
 800a812:	690f      	ldr	r7, [r1, #16]
 800a814:	2f00      	cmp	r7, #0
 800a816:	d0f6      	beq.n	800a806 <__sflush_r+0xae>
 800a818:	0793      	lsls	r3, r2, #30
 800a81a:	680e      	ldr	r6, [r1, #0]
 800a81c:	bf08      	it	eq
 800a81e:	694b      	ldreq	r3, [r1, #20]
 800a820:	600f      	str	r7, [r1, #0]
 800a822:	bf18      	it	ne
 800a824:	2300      	movne	r3, #0
 800a826:	eba6 0807 	sub.w	r8, r6, r7
 800a82a:	608b      	str	r3, [r1, #8]
 800a82c:	f1b8 0f00 	cmp.w	r8, #0
 800a830:	dde9      	ble.n	800a806 <__sflush_r+0xae>
 800a832:	6a21      	ldr	r1, [r4, #32]
 800a834:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a836:	4643      	mov	r3, r8
 800a838:	463a      	mov	r2, r7
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b0      	blx	r6
 800a83e:	2800      	cmp	r0, #0
 800a840:	dc08      	bgt.n	800a854 <__sflush_r+0xfc>
 800a842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a854:	4407      	add	r7, r0
 800a856:	eba8 0800 	sub.w	r8, r8, r0
 800a85a:	e7e7      	b.n	800a82c <__sflush_r+0xd4>
 800a85c:	20400001 	.word	0x20400001

0800a860 <_fflush_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	690b      	ldr	r3, [r1, #16]
 800a864:	4605      	mov	r5, r0
 800a866:	460c      	mov	r4, r1
 800a868:	b913      	cbnz	r3, 800a870 <_fflush_r+0x10>
 800a86a:	2500      	movs	r5, #0
 800a86c:	4628      	mov	r0, r5
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	b118      	cbz	r0, 800a87a <_fflush_r+0x1a>
 800a872:	6a03      	ldr	r3, [r0, #32]
 800a874:	b90b      	cbnz	r3, 800a87a <_fflush_r+0x1a>
 800a876:	f7fd ffcb 	bl	8008810 <__sinit>
 800a87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f3      	beq.n	800a86a <_fflush_r+0xa>
 800a882:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a884:	07d0      	lsls	r0, r2, #31
 800a886:	d404      	bmi.n	800a892 <_fflush_r+0x32>
 800a888:	0599      	lsls	r1, r3, #22
 800a88a:	d402      	bmi.n	800a892 <_fflush_r+0x32>
 800a88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a88e:	f7fe f9e4 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800a892:	4628      	mov	r0, r5
 800a894:	4621      	mov	r1, r4
 800a896:	f7ff ff5f 	bl	800a758 <__sflush_r>
 800a89a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a89c:	07da      	lsls	r2, r3, #31
 800a89e:	4605      	mov	r5, r0
 800a8a0:	d4e4      	bmi.n	800a86c <_fflush_r+0xc>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	059b      	lsls	r3, r3, #22
 800a8a6:	d4e1      	bmi.n	800a86c <_fflush_r+0xc>
 800a8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8aa:	f7fe f9d7 	bl	8008c5c <__retarget_lock_release_recursive>
 800a8ae:	e7dd      	b.n	800a86c <_fflush_r+0xc>

0800a8b0 <__swhatbuf_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b8:	2900      	cmp	r1, #0
 800a8ba:	b096      	sub	sp, #88	@ 0x58
 800a8bc:	4615      	mov	r5, r2
 800a8be:	461e      	mov	r6, r3
 800a8c0:	da0d      	bge.n	800a8de <__swhatbuf_r+0x2e>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8c8:	f04f 0100 	mov.w	r1, #0
 800a8cc:	bf14      	ite	ne
 800a8ce:	2340      	movne	r3, #64	@ 0x40
 800a8d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	6031      	str	r1, [r6, #0]
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	b016      	add	sp, #88	@ 0x58
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
 800a8de:	466a      	mov	r2, sp
 800a8e0:	f000 f896 	bl	800aa10 <_fstat_r>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	dbec      	blt.n	800a8c2 <__swhatbuf_r+0x12>
 800a8e8:	9901      	ldr	r1, [sp, #4]
 800a8ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8f2:	4259      	negs	r1, r3
 800a8f4:	4159      	adcs	r1, r3
 800a8f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8fa:	e7eb      	b.n	800a8d4 <__swhatbuf_r+0x24>

0800a8fc <__smakebuf_r>:
 800a8fc:	898b      	ldrh	r3, [r1, #12]
 800a8fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a900:	079d      	lsls	r5, r3, #30
 800a902:	4606      	mov	r6, r0
 800a904:	460c      	mov	r4, r1
 800a906:	d507      	bpl.n	800a918 <__smakebuf_r+0x1c>
 800a908:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	6123      	str	r3, [r4, #16]
 800a910:	2301      	movs	r3, #1
 800a912:	6163      	str	r3, [r4, #20]
 800a914:	b003      	add	sp, #12
 800a916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a918:	ab01      	add	r3, sp, #4
 800a91a:	466a      	mov	r2, sp
 800a91c:	f7ff ffc8 	bl	800a8b0 <__swhatbuf_r>
 800a920:	9f00      	ldr	r7, [sp, #0]
 800a922:	4605      	mov	r5, r0
 800a924:	4639      	mov	r1, r7
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff f876 	bl	8009a18 <_malloc_r>
 800a92c:	b948      	cbnz	r0, 800a942 <__smakebuf_r+0x46>
 800a92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a932:	059a      	lsls	r2, r3, #22
 800a934:	d4ee      	bmi.n	800a914 <__smakebuf_r+0x18>
 800a936:	f023 0303 	bic.w	r3, r3, #3
 800a93a:	f043 0302 	orr.w	r3, r3, #2
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	e7e2      	b.n	800a908 <__smakebuf_r+0xc>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	6020      	str	r0, [r4, #0]
 800a946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a952:	b15b      	cbz	r3, 800a96c <__smakebuf_r+0x70>
 800a954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a958:	4630      	mov	r0, r6
 800a95a:	f000 f86b 	bl	800aa34 <_isatty_r>
 800a95e:	b128      	cbz	r0, 800a96c <__smakebuf_r+0x70>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f023 0303 	bic.w	r3, r3, #3
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	81a3      	strh	r3, [r4, #12]
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	431d      	orrs	r5, r3
 800a970:	81a5      	strh	r5, [r4, #12]
 800a972:	e7cf      	b.n	800a914 <__smakebuf_r+0x18>

0800a974 <_putc_r>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	460d      	mov	r5, r1
 800a978:	4614      	mov	r4, r2
 800a97a:	4606      	mov	r6, r0
 800a97c:	b118      	cbz	r0, 800a986 <_putc_r+0x12>
 800a97e:	6a03      	ldr	r3, [r0, #32]
 800a980:	b90b      	cbnz	r3, 800a986 <_putc_r+0x12>
 800a982:	f7fd ff45 	bl	8008810 <__sinit>
 800a986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a988:	07d8      	lsls	r0, r3, #31
 800a98a:	d405      	bmi.n	800a998 <_putc_r+0x24>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	0599      	lsls	r1, r3, #22
 800a990:	d402      	bmi.n	800a998 <_putc_r+0x24>
 800a992:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a994:	f7fe f961 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800a998:	68a3      	ldr	r3, [r4, #8]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	60a3      	str	r3, [r4, #8]
 800a9a0:	da05      	bge.n	800a9ae <_putc_r+0x3a>
 800a9a2:	69a2      	ldr	r2, [r4, #24]
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	db12      	blt.n	800a9ce <_putc_r+0x5a>
 800a9a8:	b2eb      	uxtb	r3, r5
 800a9aa:	2b0a      	cmp	r3, #10
 800a9ac:	d00f      	beq.n	800a9ce <_putc_r+0x5a>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	1c5a      	adds	r2, r3, #1
 800a9b2:	6022      	str	r2, [r4, #0]
 800a9b4:	701d      	strb	r5, [r3, #0]
 800a9b6:	b2ed      	uxtb	r5, r5
 800a9b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ba:	07da      	lsls	r2, r3, #31
 800a9bc:	d405      	bmi.n	800a9ca <_putc_r+0x56>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	059b      	lsls	r3, r3, #22
 800a9c2:	d402      	bmi.n	800a9ca <_putc_r+0x56>
 800a9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9c6:	f7fe f949 	bl	8008c5c <__retarget_lock_release_recursive>
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7fe f82f 	bl	8008a36 <__swbuf_r>
 800a9d8:	4605      	mov	r5, r0
 800a9da:	e7ed      	b.n	800a9b8 <_putc_r+0x44>

0800a9dc <memmove>:
 800a9dc:	4288      	cmp	r0, r1
 800a9de:	b510      	push	{r4, lr}
 800a9e0:	eb01 0402 	add.w	r4, r1, r2
 800a9e4:	d902      	bls.n	800a9ec <memmove+0x10>
 800a9e6:	4284      	cmp	r4, r0
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	d807      	bhi.n	800a9fc <memmove+0x20>
 800a9ec:	1e43      	subs	r3, r0, #1
 800a9ee:	42a1      	cmp	r1, r4
 800a9f0:	d008      	beq.n	800aa04 <memmove+0x28>
 800a9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9fa:	e7f8      	b.n	800a9ee <memmove+0x12>
 800a9fc:	4402      	add	r2, r0
 800a9fe:	4601      	mov	r1, r0
 800aa00:	428a      	cmp	r2, r1
 800aa02:	d100      	bne.n	800aa06 <memmove+0x2a>
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa0e:	e7f7      	b.n	800aa00 <memmove+0x24>

0800aa10 <_fstat_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d07      	ldr	r5, [pc, #28]	@ (800aa30 <_fstat_r+0x20>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	602b      	str	r3, [r5, #0]
 800aa1e:	f7f8 fa43 	bl	8002ea8 <_fstat>
 800aa22:	1c43      	adds	r3, r0, #1
 800aa24:	d102      	bne.n	800aa2c <_fstat_r+0x1c>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b103      	cbz	r3, 800aa2c <_fstat_r+0x1c>
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	bd38      	pop	{r3, r4, r5, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000a94 	.word	0x20000a94

0800aa34 <_isatty_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d06      	ldr	r5, [pc, #24]	@ (800aa50 <_isatty_r+0x1c>)
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	602b      	str	r3, [r5, #0]
 800aa40:	f7f8 fa42 	bl	8002ec8 <_isatty>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_isatty_r+0x1a>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_isatty_r+0x1a>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	20000a94 	.word	0x20000a94

0800aa54 <_sbrk_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4d06      	ldr	r5, [pc, #24]	@ (800aa70 <_sbrk_r+0x1c>)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f8 fa4a 	bl	8002ef8 <_sbrk>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_sbrk_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_sbrk_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20000a94 	.word	0x20000a94

0800aa74 <__assert_func>:
 800aa74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa76:	4614      	mov	r4, r2
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <__assert_func+0x2c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4605      	mov	r5, r0
 800aa80:	68d8      	ldr	r0, [r3, #12]
 800aa82:	b14c      	cbz	r4, 800aa98 <__assert_func+0x24>
 800aa84:	4b07      	ldr	r3, [pc, #28]	@ (800aaa4 <__assert_func+0x30>)
 800aa86:	9100      	str	r1, [sp, #0]
 800aa88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa8c:	4906      	ldr	r1, [pc, #24]	@ (800aaa8 <__assert_func+0x34>)
 800aa8e:	462b      	mov	r3, r5
 800aa90:	f000 f870 	bl	800ab74 <fiprintf>
 800aa94:	f000 f880 	bl	800ab98 <abort>
 800aa98:	4b04      	ldr	r3, [pc, #16]	@ (800aaac <__assert_func+0x38>)
 800aa9a:	461c      	mov	r4, r3
 800aa9c:	e7f3      	b.n	800aa86 <__assert_func+0x12>
 800aa9e:	bf00      	nop
 800aaa0:	20000038 	.word	0x20000038
 800aaa4:	0800b955 	.word	0x0800b955
 800aaa8:	0800b962 	.word	0x0800b962
 800aaac:	0800b990 	.word	0x0800b990

0800aab0 <_calloc_r>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	fba1 5402 	umull	r5, r4, r1, r2
 800aab6:	b934      	cbnz	r4, 800aac6 <_calloc_r+0x16>
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7fe ffad 	bl	8009a18 <_malloc_r>
 800aabe:	4606      	mov	r6, r0
 800aac0:	b928      	cbnz	r0, 800aace <_calloc_r+0x1e>
 800aac2:	4630      	mov	r0, r6
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
 800aac6:	220c      	movs	r2, #12
 800aac8:	6002      	str	r2, [r0, #0]
 800aaca:	2600      	movs	r6, #0
 800aacc:	e7f9      	b.n	800aac2 <_calloc_r+0x12>
 800aace:	462a      	mov	r2, r5
 800aad0:	4621      	mov	r1, r4
 800aad2:	f7fe f845 	bl	8008b60 <memset>
 800aad6:	e7f4      	b.n	800aac2 <_calloc_r+0x12>

0800aad8 <__ascii_mbtowc>:
 800aad8:	b082      	sub	sp, #8
 800aada:	b901      	cbnz	r1, 800aade <__ascii_mbtowc+0x6>
 800aadc:	a901      	add	r1, sp, #4
 800aade:	b142      	cbz	r2, 800aaf2 <__ascii_mbtowc+0x1a>
 800aae0:	b14b      	cbz	r3, 800aaf6 <__ascii_mbtowc+0x1e>
 800aae2:	7813      	ldrb	r3, [r2, #0]
 800aae4:	600b      	str	r3, [r1, #0]
 800aae6:	7812      	ldrb	r2, [r2, #0]
 800aae8:	1e10      	subs	r0, r2, #0
 800aaea:	bf18      	it	ne
 800aaec:	2001      	movne	r0, #1
 800aaee:	b002      	add	sp, #8
 800aaf0:	4770      	bx	lr
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	e7fb      	b.n	800aaee <__ascii_mbtowc+0x16>
 800aaf6:	f06f 0001 	mvn.w	r0, #1
 800aafa:	e7f8      	b.n	800aaee <__ascii_mbtowc+0x16>

0800aafc <_realloc_r>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	4607      	mov	r7, r0
 800ab02:	4614      	mov	r4, r2
 800ab04:	460d      	mov	r5, r1
 800ab06:	b921      	cbnz	r1, 800ab12 <_realloc_r+0x16>
 800ab08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	f7fe bf83 	b.w	8009a18 <_malloc_r>
 800ab12:	b92a      	cbnz	r2, 800ab20 <_realloc_r+0x24>
 800ab14:	f7fe ff0c 	bl	8009930 <_free_r>
 800ab18:	4625      	mov	r5, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab20:	f000 f841 	bl	800aba6 <_malloc_usable_size_r>
 800ab24:	4284      	cmp	r4, r0
 800ab26:	4606      	mov	r6, r0
 800ab28:	d802      	bhi.n	800ab30 <_realloc_r+0x34>
 800ab2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab2e:	d8f4      	bhi.n	800ab1a <_realloc_r+0x1e>
 800ab30:	4621      	mov	r1, r4
 800ab32:	4638      	mov	r0, r7
 800ab34:	f7fe ff70 	bl	8009a18 <_malloc_r>
 800ab38:	4680      	mov	r8, r0
 800ab3a:	b908      	cbnz	r0, 800ab40 <_realloc_r+0x44>
 800ab3c:	4645      	mov	r5, r8
 800ab3e:	e7ec      	b.n	800ab1a <_realloc_r+0x1e>
 800ab40:	42b4      	cmp	r4, r6
 800ab42:	4622      	mov	r2, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	bf28      	it	cs
 800ab48:	4632      	movcs	r2, r6
 800ab4a:	f7fe f888 	bl	8008c5e <memcpy>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7fe feed 	bl	8009930 <_free_r>
 800ab56:	e7f1      	b.n	800ab3c <_realloc_r+0x40>

0800ab58 <__ascii_wctomb>:
 800ab58:	4603      	mov	r3, r0
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	b141      	cbz	r1, 800ab70 <__ascii_wctomb+0x18>
 800ab5e:	2aff      	cmp	r2, #255	@ 0xff
 800ab60:	d904      	bls.n	800ab6c <__ascii_wctomb+0x14>
 800ab62:	228a      	movs	r2, #138	@ 0x8a
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6a:	4770      	bx	lr
 800ab6c:	700a      	strb	r2, [r1, #0]
 800ab6e:	2001      	movs	r0, #1
 800ab70:	4770      	bx	lr
	...

0800ab74 <fiprintf>:
 800ab74:	b40e      	push	{r1, r2, r3}
 800ab76:	b503      	push	{r0, r1, lr}
 800ab78:	4601      	mov	r1, r0
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	4805      	ldr	r0, [pc, #20]	@ (800ab94 <fiprintf+0x20>)
 800ab7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	f7ff fccf 	bl	800a528 <_vfiprintf_r>
 800ab8a:	b002      	add	sp, #8
 800ab8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab90:	b003      	add	sp, #12
 800ab92:	4770      	bx	lr
 800ab94:	20000038 	.word	0x20000038

0800ab98 <abort>:
 800ab98:	b508      	push	{r3, lr}
 800ab9a:	2006      	movs	r0, #6
 800ab9c:	f000 f834 	bl	800ac08 <raise>
 800aba0:	2001      	movs	r0, #1
 800aba2:	f7f8 f931 	bl	8002e08 <_exit>

0800aba6 <_malloc_usable_size_r>:
 800aba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abaa:	1f18      	subs	r0, r3, #4
 800abac:	2b00      	cmp	r3, #0
 800abae:	bfbc      	itt	lt
 800abb0:	580b      	ldrlt	r3, [r1, r0]
 800abb2:	18c0      	addlt	r0, r0, r3
 800abb4:	4770      	bx	lr

0800abb6 <_raise_r>:
 800abb6:	291f      	cmp	r1, #31
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4605      	mov	r5, r0
 800abbc:	460c      	mov	r4, r1
 800abbe:	d904      	bls.n	800abca <_raise_r+0x14>
 800abc0:	2316      	movs	r3, #22
 800abc2:	6003      	str	r3, [r0, #0]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	bd38      	pop	{r3, r4, r5, pc}
 800abca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abcc:	b112      	cbz	r2, 800abd4 <_raise_r+0x1e>
 800abce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abd2:	b94b      	cbnz	r3, 800abe8 <_raise_r+0x32>
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f831 	bl	800ac3c <_getpid_r>
 800abda:	4622      	mov	r2, r4
 800abdc:	4601      	mov	r1, r0
 800abde:	4628      	mov	r0, r5
 800abe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe4:	f000 b818 	b.w	800ac18 <_kill_r>
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d00a      	beq.n	800ac02 <_raise_r+0x4c>
 800abec:	1c59      	adds	r1, r3, #1
 800abee:	d103      	bne.n	800abf8 <_raise_r+0x42>
 800abf0:	2316      	movs	r3, #22
 800abf2:	6003      	str	r3, [r0, #0]
 800abf4:	2001      	movs	r0, #1
 800abf6:	e7e7      	b.n	800abc8 <_raise_r+0x12>
 800abf8:	2100      	movs	r1, #0
 800abfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abfe:	4620      	mov	r0, r4
 800ac00:	4798      	blx	r3
 800ac02:	2000      	movs	r0, #0
 800ac04:	e7e0      	b.n	800abc8 <_raise_r+0x12>
	...

0800ac08 <raise>:
 800ac08:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <raise+0xc>)
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	6818      	ldr	r0, [r3, #0]
 800ac0e:	f7ff bfd2 	b.w	800abb6 <_raise_r>
 800ac12:	bf00      	nop
 800ac14:	20000038 	.word	0x20000038

0800ac18 <_kill_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	@ (800ac38 <_kill_r+0x20>)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	4611      	mov	r1, r2
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	f7f8 f8df 	bl	8002de8 <_kill>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	d102      	bne.n	800ac34 <_kill_r+0x1c>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	b103      	cbz	r3, 800ac34 <_kill_r+0x1c>
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	bd38      	pop	{r3, r4, r5, pc}
 800ac36:	bf00      	nop
 800ac38:	20000a94 	.word	0x20000a94

0800ac3c <_getpid_r>:
 800ac3c:	f7f8 b8cc 	b.w	8002dd8 <_getpid>

0800ac40 <atan2f>:
 800ac40:	f000 b800 	b.w	800ac44 <__ieee754_atan2f>

0800ac44 <__ieee754_atan2f>:
 800ac44:	ee10 2a90 	vmov	r2, s1
 800ac48:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ac4c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ac50:	b510      	push	{r4, lr}
 800ac52:	eef0 7a40 	vmov.f32	s15, s0
 800ac56:	d806      	bhi.n	800ac66 <__ieee754_atan2f+0x22>
 800ac58:	ee10 0a10 	vmov	r0, s0
 800ac5c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ac60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ac64:	d904      	bls.n	800ac70 <__ieee754_atan2f+0x2c>
 800ac66:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ac6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac6e:	bd10      	pop	{r4, pc}
 800ac70:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ac74:	d103      	bne.n	800ac7e <__ieee754_atan2f+0x3a>
 800ac76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7a:	f000 b883 	b.w	800ad84 <atanf>
 800ac7e:	1794      	asrs	r4, r2, #30
 800ac80:	f004 0402 	and.w	r4, r4, #2
 800ac84:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ac88:	b943      	cbnz	r3, 800ac9c <__ieee754_atan2f+0x58>
 800ac8a:	2c02      	cmp	r4, #2
 800ac8c:	d05e      	beq.n	800ad4c <__ieee754_atan2f+0x108>
 800ac8e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ad60 <__ieee754_atan2f+0x11c>
 800ac92:	2c03      	cmp	r4, #3
 800ac94:	bf08      	it	eq
 800ac96:	eef0 7a47 	vmoveq.f32	s15, s14
 800ac9a:	e7e6      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ac9c:	b941      	cbnz	r1, 800acb0 <__ieee754_atan2f+0x6c>
 800ac9e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ad64 <__ieee754_atan2f+0x120>
 800aca2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ad68 <__ieee754_atan2f+0x124>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	bfa8      	it	ge
 800acaa:	eef0 7a47 	vmovge.f32	s15, s14
 800acae:	e7dc      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800acb0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800acb4:	d110      	bne.n	800acd8 <__ieee754_atan2f+0x94>
 800acb6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800acba:	f104 34ff 	add.w	r4, r4, #4294967295
 800acbe:	d107      	bne.n	800acd0 <__ieee754_atan2f+0x8c>
 800acc0:	2c02      	cmp	r4, #2
 800acc2:	d846      	bhi.n	800ad52 <__ieee754_atan2f+0x10e>
 800acc4:	4b29      	ldr	r3, [pc, #164]	@ (800ad6c <__ieee754_atan2f+0x128>)
 800acc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800acca:	edd3 7a00 	vldr	s15, [r3]
 800acce:	e7cc      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800acd0:	2c02      	cmp	r4, #2
 800acd2:	d841      	bhi.n	800ad58 <__ieee754_atan2f+0x114>
 800acd4:	4b26      	ldr	r3, [pc, #152]	@ (800ad70 <__ieee754_atan2f+0x12c>)
 800acd6:	e7f6      	b.n	800acc6 <__ieee754_atan2f+0x82>
 800acd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800acdc:	d0df      	beq.n	800ac9e <__ieee754_atan2f+0x5a>
 800acde:	1a5b      	subs	r3, r3, r1
 800ace0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ace4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ace8:	da1a      	bge.n	800ad20 <__ieee754_atan2f+0xdc>
 800acea:	2a00      	cmp	r2, #0
 800acec:	da01      	bge.n	800acf2 <__ieee754_atan2f+0xae>
 800acee:	313c      	adds	r1, #60	@ 0x3c
 800acf0:	db19      	blt.n	800ad26 <__ieee754_atan2f+0xe2>
 800acf2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800acf6:	f000 f919 	bl	800af2c <fabsf>
 800acfa:	f000 f843 	bl	800ad84 <atanf>
 800acfe:	eef0 7a40 	vmov.f32	s15, s0
 800ad02:	2c01      	cmp	r4, #1
 800ad04:	d012      	beq.n	800ad2c <__ieee754_atan2f+0xe8>
 800ad06:	2c02      	cmp	r4, #2
 800ad08:	d017      	beq.n	800ad3a <__ieee754_atan2f+0xf6>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d0ad      	beq.n	800ac6a <__ieee754_atan2f+0x26>
 800ad0e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ad74 <__ieee754_atan2f+0x130>
 800ad12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad16:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ad78 <__ieee754_atan2f+0x134>
 800ad1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad1e:	e7a4      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad20:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ad68 <__ieee754_atan2f+0x124>
 800ad24:	e7ed      	b.n	800ad02 <__ieee754_atan2f+0xbe>
 800ad26:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ad7c <__ieee754_atan2f+0x138>
 800ad2a:	e7ea      	b.n	800ad02 <__ieee754_atan2f+0xbe>
 800ad2c:	ee17 3a90 	vmov	r3, s15
 800ad30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	e797      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ad74 <__ieee754_atan2f+0x130>
 800ad3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ad78 <__ieee754_atan2f+0x134>
 800ad46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad4a:	e78e      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad4c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ad78 <__ieee754_atan2f+0x134>
 800ad50:	e78b      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad52:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ad80 <__ieee754_atan2f+0x13c>
 800ad56:	e788      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ad7c <__ieee754_atan2f+0x138>
 800ad5c:	e785      	b.n	800ac6a <__ieee754_atan2f+0x26>
 800ad5e:	bf00      	nop
 800ad60:	c0490fdb 	.word	0xc0490fdb
 800ad64:	bfc90fdb 	.word	0xbfc90fdb
 800ad68:	3fc90fdb 	.word	0x3fc90fdb
 800ad6c:	0800bba0 	.word	0x0800bba0
 800ad70:	0800bb94 	.word	0x0800bb94
 800ad74:	33bbbd2e 	.word	0x33bbbd2e
 800ad78:	40490fdb 	.word	0x40490fdb
 800ad7c:	00000000 	.word	0x00000000
 800ad80:	3f490fdb 	.word	0x3f490fdb

0800ad84 <atanf>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	ee10 5a10 	vmov	r5, s0
 800ad8a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ad8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ad92:	eef0 7a40 	vmov.f32	s15, s0
 800ad96:	d310      	bcc.n	800adba <atanf+0x36>
 800ad98:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ad9c:	d904      	bls.n	800ada8 <atanf+0x24>
 800ad9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ada2:	eeb0 0a67 	vmov.f32	s0, s15
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800aee0 <atanf+0x15c>
 800adac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800aee4 <atanf+0x160>
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	bfc8      	it	gt
 800adb4:	eef0 7a47 	vmovgt.f32	s15, s14
 800adb8:	e7f3      	b.n	800ada2 <atanf+0x1e>
 800adba:	4b4b      	ldr	r3, [pc, #300]	@ (800aee8 <atanf+0x164>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d810      	bhi.n	800ade2 <atanf+0x5e>
 800adc0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800adc4:	d20a      	bcs.n	800addc <atanf+0x58>
 800adc6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800aeec <atanf+0x168>
 800adca:	ee30 7a07 	vadd.f32	s14, s0, s14
 800adce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	dce2      	bgt.n	800ada2 <atanf+0x1e>
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	e013      	b.n	800ae0a <atanf+0x86>
 800ade2:	f000 f8a3 	bl	800af2c <fabsf>
 800ade6:	4b42      	ldr	r3, [pc, #264]	@ (800aef0 <atanf+0x16c>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	d84f      	bhi.n	800ae8c <atanf+0x108>
 800adec:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800adf0:	429c      	cmp	r4, r3
 800adf2:	d841      	bhi.n	800ae78 <atanf+0xf4>
 800adf4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800adf8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800adfc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae00:	2300      	movs	r3, #0
 800ae02:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ae10:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800aef4 <atanf+0x170>
 800ae14:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800aef8 <atanf+0x174>
 800ae18:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800aefc <atanf+0x178>
 800ae1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ae20:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ae24:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800af00 <atanf+0x17c>
 800ae28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae2c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800af04 <atanf+0x180>
 800ae30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ae34:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800af08 <atanf+0x184>
 800ae38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800af0c <atanf+0x188>
 800ae40:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ae44:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800af10 <atanf+0x18c>
 800ae48:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ae4c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800af14 <atanf+0x190>
 800ae50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae54:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800af18 <atanf+0x194>
 800ae58:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ae5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800af1c <atanf+0x198>
 800ae60:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae64:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae68:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ae6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae70:	d121      	bne.n	800aeb6 <atanf+0x132>
 800ae72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae76:	e794      	b.n	800ada2 <atanf+0x1e>
 800ae78:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ae7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae80:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae84:	2301      	movs	r3, #1
 800ae86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae8a:	e7be      	b.n	800ae0a <atanf+0x86>
 800ae8c:	4b24      	ldr	r3, [pc, #144]	@ (800af20 <atanf+0x19c>)
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d80b      	bhi.n	800aeaa <atanf+0x126>
 800ae92:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ae96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae9e:	2302      	movs	r3, #2
 800aea0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea8:	e7af      	b.n	800ae0a <atanf+0x86>
 800aeaa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800aeae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e7a9      	b.n	800ae0a <atanf+0x86>
 800aeb6:	4a1b      	ldr	r2, [pc, #108]	@ (800af24 <atanf+0x1a0>)
 800aeb8:	491b      	ldr	r1, [pc, #108]	@ (800af28 <atanf+0x1a4>)
 800aeba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aebe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aec2:	edd3 6a00 	vldr	s13, [r3]
 800aec6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800aeca:	2d00      	cmp	r5, #0
 800aecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aed0:	edd2 7a00 	vldr	s15, [r2]
 800aed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aed8:	bfb8      	it	lt
 800aeda:	eef1 7a67 	vneglt.f32	s15, s15
 800aede:	e760      	b.n	800ada2 <atanf+0x1e>
 800aee0:	bfc90fdb 	.word	0xbfc90fdb
 800aee4:	3fc90fdb 	.word	0x3fc90fdb
 800aee8:	3edfffff 	.word	0x3edfffff
 800aeec:	7149f2ca 	.word	0x7149f2ca
 800aef0:	3f97ffff 	.word	0x3f97ffff
 800aef4:	3c8569d7 	.word	0x3c8569d7
 800aef8:	3d4bda59 	.word	0x3d4bda59
 800aefc:	bd6ef16b 	.word	0xbd6ef16b
 800af00:	3d886b35 	.word	0x3d886b35
 800af04:	3dba2e6e 	.word	0x3dba2e6e
 800af08:	3e124925 	.word	0x3e124925
 800af0c:	3eaaaaab 	.word	0x3eaaaaab
 800af10:	bd15a221 	.word	0xbd15a221
 800af14:	bd9d8795 	.word	0xbd9d8795
 800af18:	bde38e38 	.word	0xbde38e38
 800af1c:	be4ccccd 	.word	0xbe4ccccd
 800af20:	401bffff 	.word	0x401bffff
 800af24:	0800bbbc 	.word	0x0800bbbc
 800af28:	0800bbac 	.word	0x0800bbac

0800af2c <fabsf>:
 800af2c:	ee10 3a10 	vmov	r3, s0
 800af30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af34:	ee00 3a10 	vmov	s0, r3
 800af38:	4770      	bx	lr
	...

0800af3c <_init>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <_fini>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr
