
Eom_MPU6500_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a714  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  0800a8b8  0800a8b8  0000b8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b574  0800b574  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b574  0800b574  0000c574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b57c  0800b57c  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b57c  0800b57c  0000c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b580  0800b580  0000c580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b584  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200001ec  0800b770  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  0800b770  0000da9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145cd  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b4  00000000  00000000  000217e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  000249a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  00025b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002887f  00000000  00000000  00026915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b3a  00000000  00000000  0004f194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009381d  00000000  00000000  00066cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa4eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a7c  00000000  00000000  000fa530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000fffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a89c 	.word	0x0800a89c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800a89c 	.word	0x0800a89c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <mpu6500_read_accel_raw>:
  * @param  accel_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  accel_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  accel_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_accel_raw(int16_t* accel_x, int16_t* accel_y, int16_t* accel_z) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    // 加速度计数据寄存器地址是连续的: ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ..., ACCEL_ZOUT_L
    // 可以通过一次I2C读取6个字节
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2306      	movs	r3, #6
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	223b      	movs	r2, #59	@ 0x3b
 8000fa4:	21d0      	movs	r1, #208	@ 0xd0
 8000fa6:	4817      	ldr	r0, [pc, #92]	@ (8001004 <mpu6500_read_accel_raw+0x80>)
 8000fa8:	f003 f8ac 	bl	8004104 <HAL_I2C_Mem_Read>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11f      	bne.n	8000ff2 <mpu6500_read_accel_raw+0x6e>
        *accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000fb2:	7c3b      	ldrb	r3, [r7, #16]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7c7b      	ldrb	r3, [r7, #17]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	801a      	strh	r2, [r3, #0]
        *accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000fc6:	7cbb      	ldrb	r3, [r7, #18]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	801a      	strh	r2, [r3, #0]
        *accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000fda:	7d3b      	ldrb	r3, [r7, #20]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
        return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e004      	b.n	8000ffc <mpu6500_read_accel_raw+0x78>
    }
    printf("MPU6500 Read Accel Raw Error\r\n");
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <mpu6500_read_accel_raw+0x84>)
 8000ff4:	f007 fb60 	bl	80086b8 <puts>
    return -1;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e0 	.word	0x200002e0
 8001008:	0800a8dc 	.word	0x0800a8dc

0800100c <mpu6500_read_gyro_raw>:
  * @param  gyro_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  gyro_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  gyro_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_gyro_raw(int16_t* gyro_x, int16_t* gyro_y, int16_t* gyro_z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
     // 陀螺仪数据寄存器地址是连续的: GYRO_XOUT_H, ..., GYRO_ZOUT_L
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, GYRO_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2243      	movs	r2, #67	@ 0x43
 800102c:	21d0      	movs	r1, #208	@ 0xd0
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <mpu6500_read_gyro_raw+0x80>)
 8001030:	f003 f868 	bl	8004104 <HAL_I2C_Mem_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11f      	bne.n	800107a <mpu6500_read_gyro_raw+0x6e>
        *gyro_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7c7b      	ldrb	r3, [r7, #17]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	801a      	strh	r2, [r3, #0]
        *gyro_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 800104e:	7cbb      	ldrb	r3, [r7, #18]
 8001050:	b21b      	sxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	801a      	strh	r2, [r3, #0]
        *gyro_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001062:	7d3b      	ldrb	r3, [r7, #20]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	801a      	strh	r2, [r3, #0]
        return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <mpu6500_read_gyro_raw+0x78>
    }
    printf("MPU6500 Read Gyro Raw Error\r\n");
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <mpu6500_read_gyro_raw+0x84>)
 800107c:	f007 fb1c 	bl	80086b8 <puts>
    return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002e0 	.word	0x200002e0
 8001090:	0800a8fc 	.word	0x0800a8fc

08001094 <mpu6500_write_byte>:
  * @param  reg_addr: 目标寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void mpu6500_write_byte(uint8_t reg_addr, uint8_t data)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	21d0      	movs	r1, #208	@ 0xd0
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <mpu6500_write_byte+0x4c>)
 80010bc:	f002 ff28 	bl	8003f10 <HAL_I2C_Mem_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <mpu6500_write_byte+0x42>
    {
        // 错误处理，例如打印错误信息或进入 Error_Handler()
        printf("MPU6500 Write Error: reg 0x%X, status %d\r\n", reg_addr, status);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <mpu6500_write_byte+0x50>)
 80010d2:	f007 fa89 	bl	80085e8 <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002e0 	.word	0x200002e0
 80010e4:	0800a91c 	.word	0x0800a91c

080010e8 <mpu6500_read_byte>:
  * @brief  从 MPU6500 指定寄存器读取一个字节数据
  * @param  reg_addr: 目标寄存器地址
  * @retval 读取到的数据
  */
uint8_t mpu6500_read_byte(uint8_t reg_addr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &read_data, 1, HAL_MAX_DELAY);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	21d0      	movs	r1, #208	@ 0xd0
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <mpu6500_read_byte+0x4c>)
 8001110:	f002 fff8 	bl	8004104 <HAL_I2C_Mem_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <mpu6500_read_byte+0x42>
    {
        // 错误处理
        printf("MPU6500 Read Error: reg 0x%X, status %d\r\n", reg_addr, status);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <mpu6500_read_byte+0x50>)
 8001126:	f007 fa5f 	bl	80085e8 <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
    return read_data;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002e0 	.word	0x200002e0
 8001138:	0800a948 	.word	0x0800a948

0800113c <mpu6500_init>:
  * @brief  初始化 MPU6500
  * @param  None
  * @retval 0: 成功, -1: 失败
  */
int  mpu6500_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    uint8_t who_am_i_val = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    HAL_Delay(100); // 等待 MPU6500 上电稳定
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f002 f9ec 	bl	8003524 <HAL_Delay>

    // 1. 检查设备是否在线
    // 尝试3次，超时100ms，使用 HAL_I2C_IsDeviceReady 更好
    status = HAL_I2C_IsDeviceReady(&hi2c2, MPU6500_I2C_ADDR, 3, 100);
 800114c:	2364      	movs	r3, #100	@ 0x64
 800114e:	2203      	movs	r2, #3
 8001150:	21d0      	movs	r1, #208	@ 0xd0
 8001152:	482d      	ldr	r0, [pc, #180]	@ (8001208 <mpu6500_init+0xcc>)
 8001154:	f003 fa08 	bl	8004568 <HAL_I2C_IsDeviceReady>
 8001158:	4603      	mov	r3, r0
 800115a:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <mpu6500_init+0x36>
    {
        printf("MPU6500 not found on I2C2. Status: %d\r\n", status);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	4619      	mov	r1, r3
 8001166:	4829      	ldr	r0, [pc, #164]	@ (800120c <mpu6500_init+0xd0>)
 8001168:	f007 fa3e 	bl	80085e8 <iprintf>
        // Error_Handler(); // 初始化失败通常应该阻止程序继续
        return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e045      	b.n	80011fe <mpu6500_init+0xc2>
    }
    else
    {
        printf("MPU6500 found on I2C2.\r\n");
 8001172:	4827      	ldr	r0, [pc, #156]	@ (8001210 <mpu6500_init+0xd4>)
 8001174:	f007 faa0 	bl	80086b8 <puts>
    }

    // 2. 读取 WHO_AM_I 寄存器进行验证
    who_am_i_val = mpu6500_read_byte(WHO_AM_I_REG);
 8001178:	2075      	movs	r0, #117	@ 0x75
 800117a:	f7ff ffb5 	bl	80010e8 <mpu6500_read_byte>
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    printf("WHO_AM_I register value: 0x%X\r\n", who_am_i_val);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	@ (8001214 <mpu6500_init+0xd8>)
 8001188:	f007 fa2e 	bl	80085e8 <iprintf>

    // MPU6500 的 WHO_AM_I 默认值是 0x70。根据模块型号也可能是 0x71 (MPU9250/6500), 0x68 (MPU6050), 0x73, 0x7D, 0x98。
    // 请根据你的 MPU6500 模块数据手册确认。
    if (who_am_i_val != 0x70 && who_am_i_val != 0x71 && who_am_i_val != 0x68 && who_am_i_val != 0x73 && who_am_i_val != 0x7D && who_am_i_val != 0x98) {
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b70      	cmp	r3, #112	@ 0x70
 8001190:	d016      	beq.n	80011c0 <mpu6500_init+0x84>
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b71      	cmp	r3, #113	@ 0x71
 8001196:	d013      	beq.n	80011c0 <mpu6500_init+0x84>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b68      	cmp	r3, #104	@ 0x68
 800119c:	d010      	beq.n	80011c0 <mpu6500_init+0x84>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b73      	cmp	r3, #115	@ 0x73
 80011a2:	d00d      	beq.n	80011c0 <mpu6500_init+0x84>
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011a8:	d00a      	beq.n	80011c0 <mpu6500_init+0x84>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b98      	cmp	r3, #152	@ 0x98
 80011ae:	d007      	beq.n	80011c0 <mpu6500_init+0x84>
        printf("MPU6500 WHO_AM_I check failed. Expected 0x70 or similar, got 0x%X\r\n", who_am_i_val);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4818      	ldr	r0, [pc, #96]	@ (8001218 <mpu6500_init+0xdc>)
 80011b6:	f007 fa17 	bl	80085e8 <iprintf>
        // Error_Handler(); // WHO_AM_I 错误通常是接线或设备问题
        return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e01e      	b.n	80011fe <mpu6500_init+0xc2>
    } else {
        printf("MPU6500 WHO_AM_I check passed.\r\n");
 80011c0:	4816      	ldr	r0, [pc, #88]	@ (800121c <mpu6500_init+0xe0>)
 80011c2:	f007 fa79 	bl	80086b8 <puts>
    }

    HAL_Delay(50); // 等待稳定
 80011c6:	2032      	movs	r0, #50	@ 0x32
 80011c8:	f002 f9ac 	bl	8003524 <HAL_Delay>

    // 3. 唤醒 MPU6500 (清除 PWR_MGMT_1 寄存器的 SLEEP 位)
    mpu6500_write_byte(PWR_MGMT_1_REG, 0x00); // 设置 CLKSEL=0 (PLL)
 80011cc:	2100      	movs	r1, #0
 80011ce:	206b      	movs	r0, #107	@ 0x6b
 80011d0:	f7ff ff60 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011d4:	2032      	movs	r0, #50	@ 0x32
 80011d6:	f002 f9a5 	bl	8003524 <HAL_Delay>
//    HAL_Delay(50);


    // 5. 配置陀螺仪量程
    //    0x18: ±2000 dps (对应灵敏度 16.4 LSB/dps) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(GYRO_CONFIG_REG, 0x18);
 80011da:	2118      	movs	r1, #24
 80011dc:	201b      	movs	r0, #27
 80011de:	f7ff ff59 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f002 f99e 	bl	8003524 <HAL_Delay>

    // 6. 配置加速度计量程
    //    0x00: ±2g (对应灵敏度 16384 LSB/g) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(ACCEL_CONFIG_REG, 0x00);
 80011e8:	2100      	movs	r1, #0
 80011ea:	201c      	movs	r0, #28
 80011ec:	f7ff ff52 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f002 f997 	bl	8003524 <HAL_Delay>

    // 更多配置 (例如中断设置 INT_PIN_CFG, INT_ENABLE 等，如果需要中断)
    // mpu6500_write_byte(0x37, 0x02); // INT_PIN_CFG: INT_ANYRD_2CLEAR, LATCH_INT_EN=0
    // mpu6500_write_byte(0x38, 0x01); // INT_ENABLE: DATA_RDY_EN=1

    printf("MPU6500 configured successfully.\r\n");
 80011f6:	480a      	ldr	r0, [pc, #40]	@ (8001220 <mpu6500_init+0xe4>)
 80011f8:	f007 fa5e 	bl	80086b8 <puts>
    return 0; // 初始化成功
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002e0 	.word	0x200002e0
 800120c:	0800a974 	.word	0x0800a974
 8001210:	0800a99c 	.word	0x0800a99c
 8001214:	0800a9b4 	.word	0x0800a9b4
 8001218:	0800a9d4 	.word	0x0800a9d4
 800121c:	0800aa18 	.word	0x0800aa18
 8001220:	0800aa38 	.word	0x0800aa38

08001224 <hc05_init>:
static volatile uint16_t internal_rx_index = 0;

/**
 * @brief 初始化HC-05蓝牙模块接口
 */
HAL_StatusTypeDef hc05_init(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    memset(internal_rx_buffer, 0, BLUETOOTH_RX_BUFFER_SIZE);
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <hc05_init+0x2c>)
 800122e:	f007 fb23 	bl	8008878 <memset>
    internal_rx_index = 0;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <hc05_init+0x30>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
    data_received_flag = false;
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <hc05_init+0x34>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]

    // 启动UART中断接收，每次接收一个字节
    // 当一个字节接收完成后，会触发 HAL_UART_RxCpltCallback 回调函数
    return HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <hc05_init+0x38>)
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <hc05_init+0x3c>)
 8001244:	f005 fd27 	bl	8006c96 <HAL_UART_Receive_IT>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000208 	.word	0x20000208
 8001254:	2000028a 	.word	0x2000028a
 8001258:	20000289 	.word	0x20000289
 800125c:	20000288 	.word	0x20000288
 8001260:	20000904 	.word	0x20000904

08001264 <hc05_is_data_received>:

/**
 * @brief 检查是否有新的蓝牙数据接收完成
 */
bool hc05_is_data_received(void) {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    return data_received_flag;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <hc05_is_data_received+0x14>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000289 	.word	0x20000289

0800127c <hc05_get_received_data>:

/**
 * @brief 获取接收到的蓝牙数据
 */
uint16_t hc05_get_received_data(uint8_t *buffer, uint16_t buffer_len) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
    if (!data_received_flag || buffer == NULL || buffer_len == 0) {
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <hc05_get_received_data+0x84>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <hc05_get_received_data+0x28>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <hc05_get_received_data+0x28>
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <hc05_get_received_data+0x2c>
        return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e026      	b.n	80012f6 <hc05_get_received_data+0x7a>
    }

    // 进入临界区：禁用中断，防止在读取数据时被新的中断打断
    HAL_NVIC_DisableIRQ(BLUETOOTH_USART_IRQn); // 或者直接使用 USART6_IRQn
 80012a8:	2047      	movs	r0, #71	@ 0x47
 80012aa:	f002 fa88 	bl	80037be <HAL_NVIC_DisableIRQ>

    uint16_t len_to_copy = internal_rx_index;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <hc05_get_received_data+0x88>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	81fb      	strh	r3, [r7, #14]
    if (len_to_copy >= buffer_len) { // 防止缓冲区溢出
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <hc05_get_received_data+0x46>
        len_to_copy = buffer_len - 1; // 留一个字节给 '\0'
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	3b01      	subs	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
    }

    memcpy(buffer, internal_rx_buffer, len_to_copy);
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4910      	ldr	r1, [pc, #64]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f007 fb54 	bl	8008976 <memcpy>
    buffer[len_to_copy] = '\0'; // 添加字符串结束符
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

    // 重置标志和索引，清空缓冲区
    data_received_flag = false;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <hc05_get_received_data+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
    internal_rx_index = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <hc05_get_received_data+0x88>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
    memset(internal_rx_buffer, 0, BLUETOOTH_RX_BUFFER_SIZE);
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	2100      	movs	r1, #0
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012ea:	f007 fac5 	bl	8008878 <memset>

    // 退出临界区：重新使能中断
    HAL_NVIC_EnableIRQ(BLUETOOTH_USART_IRQn);
 80012ee:	2047      	movs	r0, #71	@ 0x47
 80012f0:	f002 fa57 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    // 为了安全和清晰，通常在取走数据后，明确我们期望中断继续工作：
    // 实际上，因为我们的回调函数 hc05_uart_rx_callback_handler 总是重新调用 HAL_UART_Receive_IT，
    // 所以这里不需要再次调用。如果回调函数在收到完整消息后停止调用 HAL_UART_Receive_IT，那这里就需要。
    // 当前逻辑下，我们假设回调函数会持续接收。

    return len_to_copy;
 80012f4:	89fb      	ldrh	r3, [r7, #14]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000289 	.word	0x20000289
 8001304:	2000028a 	.word	0x2000028a
 8001308:	20000208 	.word	0x20000208

0800130c <hc05_transmit_data>:

/**
 * @brief 通过蓝牙发送数据 (阻塞方式)
 */
HAL_StatusTypeDef hc05_transmit_data(const uint8_t *data, uint16_t len) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
    if (data == NULL || len == 0) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <hc05_transmit_data+0x18>
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <hc05_transmit_data+0x1c>
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e007      	b.n	8001338 <hc05_transmit_data+0x2c>
    }
    // 使用阻塞式发送，可以根据需要改为中断或DMA发送
    return HAL_UART_Transmit(BLUETOOTH_UART_HANDLE, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <hc05_transmit_data+0x34>)
 8001332:	f005 fc25 	bl	8006b80 <HAL_UART_Transmit>
 8001336:	4603      	mov	r3, r0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000904 	.word	0x20000904

08001344 <hc05_uart_rx_callback_handler>:
/**
 * @brief UART接收回调处理函数 (由外部的 HAL_UART_RxCpltCallback 调用)
 * @param huart 发生中断的UART句柄指针
 * @note 这个函数是关键，用于处理中断接收到的字节
 */
void hc05_uart_rx_callback_handler(UART_HandleTypeDef *huart) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    // 检查是否是目标UART实例触发的中断
    if (huart->Instance == BLUETOOTH_UART_HANDLE->Instance) { // 例如 USART6
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d142      	bne.n	80013de <hc05_uart_rx_callback_handler+0x9a>
        if (data_received_flag) {
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12b      	bne.n	80013ba <hc05_uart_rx_callback_handler+0x76>
            // 意味着如果主程序不及时取走，single_byte_rx_data 会被新数据覆盖，但 internal_rx_buffer 中的内容不变。
            // 更健壮的做法是使用环形缓冲区。
            // 为了简单，我们假设主程序会及时取走数据。
        } else {
            // 将接收到的单个字节存入内部缓冲区
            if (internal_rx_index < BLUETOOTH_RX_BUFFER_SIZE - 1) { // 留一个字节给可能的'\0'
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	2b7e      	cmp	r3, #126	@ 0x7e
 800136a:	d81f      	bhi.n	80013ac <hc05_uart_rx_callback_handler+0x68>
                internal_rx_buffer[internal_rx_index++] = single_byte_rx_data;
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	b291      	uxth	r1, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001378:	8011      	strh	r1, [r2, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 8001382:	5499      	strb	r1, [r3, r2]
                // 1. 接收到特定的结束符 (如 '\n' 或 '\r')
                // 2. 接收到固定长度的数据
                // 3. 缓冲区满
                // HC05模块的AT指令通常以 "\r\n" 结束，数据透传时则根据应用定义。
                // 这里我们以换行符 '\n' 作为简单示例的结束标志，或者缓冲区满。
                if (single_byte_rx_data == '\n' || internal_rx_index >= (BLUETOOTH_RX_BUFFER_SIZE - 1)) {
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d004      	beq.n	8001396 <hc05_uart_rx_callback_handler+0x52>
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b7e      	cmp	r3, #126	@ 0x7e
 8001394:	d911      	bls.n	80013ba <hc05_uart_rx_callback_handler+0x76>
                    // 可选：如果想把换行符也包含，则不需要下面的 internal_rx_index-- 操作
                    // 如果不想包含换行符作为数据内容，可以 internal_rx_index--; internal_rx_buffer[internal_rx_index] = '\0';
                    internal_rx_buffer[internal_rx_index] = '\0'; // 确保字符串结束
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
                    data_received_flag = true; // 设置数据接收完成标志
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e006      	b.n	80013ba <hc05_uart_rx_callback_handler+0x76>
                    // 直到 hc05_get_received_data 被调用并清空标志和缓冲区。
                    // HAL_UART_Receive_IT 仍然需要被调用以接收后续数据（即使它们可能暂时不被存入buffer）。
                }
            } else {
                // 缓冲区已满，但没有收到结束符
                internal_rx_buffer[BLUETOOTH_RX_BUFFER_SIZE - 1] = '\0'; // 确保字符串结束
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                data_received_flag = true; // 设置数据接收完成标志，表示缓冲区满了
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
        // 修改：仅当数据未满或未标记为已接收时，才继续填充缓冲区并重新启动。
        // 当data_received_flag为true时，我们应该停止接收到缓冲区，直到数据被取走。
        // HAL_UART_Receive_IT应该在数据被取走(hc05_get_received_data)后，或者在初始化(hc05_init)时调用。

        // 改进的逻辑：如果数据已满并标记，则不立即重启IT，等待数据被取走。
        if (!data_received_flag) {
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <hc05_uart_rx_callback_handler+0x90>
            HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013d0:	f005 fc61 	bl	8006c96 <HAL_UART_Receive_IT>
        // 然后在 hc05_get_received_data() 的末尾添加:
        // if (!data_received_flag) { // 确保在取走数据后，如果之前因为flag=true而没启动，现在启动
        //    HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
        // }
        // 为了简单起见，保持原始的每次回调都重新启动：
        HAL_UART_Receive_IT(BLUETOOTH_UART_HANDLE, &single_byte_rx_data, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013da:	f005 fc5c 	bl	8006c96 <HAL_UART_Receive_IT>
    }
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000904 	.word	0x20000904
 80013ec:	20000289 	.word	0x20000289
 80013f0:	2000028a 	.word	0x2000028a
 80013f4:	20000288 	.word	0x20000288
 80013f8:	20000208 	.word	0x20000208

080013fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b4e      	ldr	r3, [pc, #312]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a4d      	ldr	r2, [pc, #308]	@ (8001550 <MX_GPIO_Init+0x154>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a3f      	ldr	r2, [pc, #252]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <MX_GPIO_Init+0x154>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_GPIO_Init+0x154>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	4833      	ldr	r0, [pc, #204]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001488:	f002 fbca 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	4831      	ldr	r0, [pc, #196]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001494:	f002 fbc4 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gyro_cs_GPIO_Port, gyro_cs_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149e:	482d      	ldr	r0, [pc, #180]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014a0:	f002 fbbe 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80014a4:	2313      	movs	r3, #19
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4827      	ldr	r0, [pc, #156]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014b8:	f002 fa2e 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80014bc:	2320      	movs	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014d4:	f002 fa20 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	481b      	ldr	r0, [pc, #108]	@ (800155c <MX_GPIO_Init+0x160>)
 80014ee:	f002 fa13 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4813      	ldr	r0, [pc, #76]	@ (8001558 <MX_GPIO_Init+0x15c>)
 800150c:	f002 fa04 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001526:	f002 f9f7 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : gyro_cs_Pin */
  GPIO_InitStruct.Pin = gyro_cs_Pin;
 800152a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(gyro_cs_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001544:	f002 f9e8 	bl	8003918 <HAL_GPIO_Init>

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400

08001560 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f002 fb73 	bl	8003c88 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 fbca 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000028c 	.word	0x2000028c
 80015b4:	40005400 	.word	0x40005400
 80015b8:	00061a80 	.word	0x00061a80

080015bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f002 fb45 	bl	8003c88 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fb9c 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002e0 	.word	0x200002e0
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a3b      	ldr	r2, [pc, #236]	@ (8001724 <HAL_I2C_MspInit+0x10c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12d      	bne.n	8001696 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a39      	ldr	r2, [pc, #228]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <HAL_I2C_MspInit+0x114>)
 8001674:	f002 f950 	bl	8003918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001694:	e041      	b.n	800171a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_I2C_MspInit+0x118>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13c      	bne.n	800171a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4814      	ldr	r0, [pc, #80]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016da:	f002 f91d 	bl	8003918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016de:	2308      	movs	r3, #8
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80016ee:	2309      	movs	r3, #9
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016fa:	f002 f90d 	bl	8003918 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400
 8001730:	40005800 	.word	0x40005800

08001734 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <__io_putchar+0x20>)
 8001746:	f005 fa1b 	bl	8006b80 <HAL_UART_Transmit>
  return ch;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200008bc 	.word	0x200008bc

08001758 <calibrate_mpu6500_bias>:
  * @brief  Calibrates MPU6500 sensor bias.
  *         Requires the robot to be held stationary and balanced during execution.
  * @param  num_samples: Number of samples to collect for averaging.
  * @retval None
  */
void calibrate_mpu6500_bias(uint16_t num_samples) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
    printf("\r\n--- MPU6500 Calibration Start ---\r\n");
 8001762:	4869      	ldr	r0, [pc, #420]	@ (8001908 <calibrate_mpu6500_bias+0x1b0>)
 8001764:	f006 ffa8 	bl	80086b8 <puts>
    printf("Please hold the robot VERTICAL and STATIONARY for %d seconds...\r\n", num_samples / 1000); // Assuming 1ms delay per sample
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4a68      	ldr	r2, [pc, #416]	@ (800190c <calibrate_mpu6500_bias+0x1b4>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	b29b      	uxth	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	4866      	ldr	r0, [pc, #408]	@ (8001910 <calibrate_mpu6500_bias+0x1b8>)
 8001778:	f006 ff36 	bl	80085e8 <iprintf>

    // Give user time to position the robot
    HAL_Delay(3000); // 3 seconds initial delay
 800177c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001780:	f001 fed0 	bl	8003524 <HAL_Delay>

    // Accumulate sums
    int32_t gyro_x_sum = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyro_y_sum = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t gyro_z_sum = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    float accel_pitch_angle_sum = 0.0f;
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    int16_t accel_x_raw, accel_y_raw, accel_z_raw;
    int16_t gyro_x_raw, gyro_y_raw, gyro_z_raw;
    float current_accel_pitch_angle;

    // Collect samples
    for (uint16_t i = 0; i < num_samples; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	83fb      	strh	r3, [r7, #30]
 800179a:	e063      	b.n	8001864 <calibrate_mpu6500_bias+0x10c>
        // Read raw data
        if (mpu6500_read_accel_raw(&accel_x_raw, &accel_y_raw, &accel_z_raw) != 0) {
 800179c:	f107 0212 	add.w	r2, r7, #18
 80017a0:	f107 0114 	add.w	r1, r7, #20
 80017a4:	f107 0316 	add.w	r3, r7, #22
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fbeb 	bl	8000f84 <mpu6500_read_accel_raw>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <calibrate_mpu6500_bias+0x64>
            printf("Calibration Error: Failed to read accel raw.\r\n");
 80017b4:	4857      	ldr	r0, [pc, #348]	@ (8001914 <calibrate_mpu6500_bias+0x1bc>)
 80017b6:	f006 ff7f 	bl	80086b8 <puts>
            // Optionally skip this sample or break calibration
            continue; // Skip this sample
 80017ba:	e050      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }
        if (mpu6500_read_gyro_raw(&gyro_x_raw, &gyro_y_raw, &gyro_z_raw) != 0) {
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	f107 010e 	add.w	r1, r7, #14
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc1f 	bl	800100c <mpu6500_read_gyro_raw>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <calibrate_mpu6500_bias+0x84>
            printf("Calibration Error: Failed to read gyro raw.\r\n");
 80017d4:	4850      	ldr	r0, [pc, #320]	@ (8001918 <calibrate_mpu6500_bias+0x1c0>)
 80017d6:	f006 ff6f 	bl	80086b8 <puts>
            // Optionally skip this sample or break calibration
             continue; // Skip this sample
 80017da:	e040      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }

        // Accumulate gyro raw sums
        gyro_x_sum += gyro_x_raw;
 80017dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e0:	461a      	mov	r2, r3
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	4413      	add	r3, r2
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        gyro_y_sum += gyro_y_raw;
 80017e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ec:	461a      	mov	r2, r3
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	4413      	add	r3, r2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyro_z_sum += gyro_z_raw;
 80017f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f8:	461a      	mov	r2, r3
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	4413      	add	r3, r2
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

        // Calculate accelerometer pitch angle for this sample (based on Accel X and Z)
        // atan2f handles the case where the first parameter is 0.
        // If accel_z_raw is 0 (e.g., MPU horizontal), atan2f(accel_x_raw, 0) would give +/-90 or 0/180 depending on accel_x_raw sign.
        // In vertical calibration, accel_z_raw is expected to be large (~16384), so 0 is very unlikely.
        current_accel_pitch_angle = atan2f((float)accel_x_raw, (float)accel_z_raw) * (180.0f / M_PI);
 8001800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001810:	ee07 3a10 	vmov	s14, r3
 8001814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001818:	eef0 0a47 	vmov.f32	s1, s14
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f008 febe 	bl	800a5a0 <atan2f>
 8001824:	ee10 3a10 	vmov	r3, s0
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe95 	bl	8000558 <__aeabi_f2d>
 800182e:	a334      	add	r3, pc, #208	@ (adr r3, 8001900 <calibrate_mpu6500_bias+0x1a8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fee8 	bl	8000608 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9ba 	bl	8000bb8 <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
        accel_pitch_angle_sum += current_accel_pitch_angle;
 8001848:	ed97 7a08 	vldr	s14, [r7, #32]
 800184c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a08 	vstr	s15, [r7, #32]

        // Add a small delay to ensure distinct readings
        HAL_Delay(1); // 1ms delay per sample
 8001858:	2001      	movs	r0, #1
 800185a:	f001 fe63 	bl	8003524 <HAL_Delay>
    for (uint16_t i = 0; i < num_samples; i++) {
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	3301      	adds	r3, #1
 8001862:	83fb      	strh	r3, [r7, #30]
 8001864:	8bfa      	ldrh	r2, [r7, #30]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d397      	bcc.n	800179c <calibrate_mpu6500_bias+0x44>
    }

    // Calculate averages (biases)
    // Ensure num_samples is not zero to avoid division by zero
    if (num_samples > 0) {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d021      	beq.n	80018b6 <calibrate_mpu6500_bias+0x15e>
         g_gyro_x_bias_raw = (int16_t)(gyro_x_sum / num_samples);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001876:	fb92 f3f3 	sdiv	r3, r2, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 800187e:	801a      	strh	r2, [r3, #0]
         g_gyro_y_bias_raw = (int16_t)(gyro_y_sum / num_samples);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001884:	fb92 f3f3 	sdiv	r3, r2, r3
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 800188c:	801a      	strh	r2, [r3, #0]
         g_gyro_z_bias_raw = (int16_t)(gyro_z_sum / num_samples);
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	fb92 f3f3 	sdiv	r3, r2, r3
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 800189a:	801a      	strh	r2, [r3, #0]
         g_accel_pitch_bias_deg = accel_pitch_angle_sum / num_samples;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80018aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018b0:	edc3 7a00 	vstr	s15, [r3]
 80018b4:	e002      	b.n	80018bc <calibrate_mpu6500_bias+0x164>
    } else {
         printf("Calibration Warning: num_samples is 0.\r\n");
 80018b6:	481d      	ldr	r0, [pc, #116]	@ (800192c <calibrate_mpu6500_bias+0x1d4>)
 80018b8:	f006 fefe 	bl	80086b8 <puts>
         // Biases remain 0
    }


    printf("Calibration Complete.\r\n");
 80018bc:	481c      	ldr	r0, [pc, #112]	@ (8001930 <calibrate_mpu6500_bias+0x1d8>)
 80018be:	f006 fefb 	bl	80086b8 <puts>
    printf("Gyro Bias Raw: X=%d, Y=%d, Z=%d\r\n", g_gyro_x_bias_raw, g_gyro_y_bias_raw, g_gyro_z_bias_raw);
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <calibrate_mpu6500_bias+0x1dc>)
 80018da:	f006 fe85 	bl	80085e8 <iprintf>
    printf("Accel Pitch Bias (deg): %.2f\r\n", g_accel_pitch_bias_deg);
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4812      	ldr	r0, [pc, #72]	@ (8001938 <calibrate_mpu6500_bias+0x1e0>)
 80018ee:	f006 fe7b 	bl	80085e8 <iprintf>
    printf("--- MPU6500 Calibration End ---\r\n");
 80018f2:	4812      	ldr	r0, [pc, #72]	@ (800193c <calibrate_mpu6500_bias+0x1e4>)
 80018f4:	f006 fee0 	bl	80086b8 <puts>
}
 80018f8:	bf00      	nop
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	1a63c1f8 	.word	0x1a63c1f8
 8001904:	404ca5dc 	.word	0x404ca5dc
 8001908:	0800aa5c 	.word	0x0800aa5c
 800190c:	10624dd3 	.word	0x10624dd3
 8001910:	0800aa84 	.word	0x0800aa84
 8001914:	0800aac8 	.word	0x0800aac8
 8001918:	0800aaf8 	.word	0x0800aaf8
 800191c:	2000074a 	.word	0x2000074a
 8001920:	2000074c 	.word	0x2000074c
 8001924:	2000074e 	.word	0x2000074e
 8001928:	20000750 	.word	0x20000750
 800192c:	0800ab28 	.word	0x0800ab28
 8001930:	0800ab50 	.word	0x0800ab50
 8001934:	0800ab68 	.word	0x0800ab68
 8001938:	0800ab8c 	.word	0x0800ab8c
 800193c:	0800abac 	.word	0x0800abac

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b0ba      	sub	sp, #232	@ 0xe8
 8001946:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */
  char oled_buffer[30]; // 用于在OLED上显示字符串，大小根据需要调整
  float gyro_z_value = 0.0f;
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f001 fd76 	bl	8003440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f97c 	bl	8001c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f7ff fd50 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195c:	f001 fc6c 	bl	8003238 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001960:	f7ff fdfe 	bl	8001560 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001964:	f001 f9b6 	bl	8002cd4 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001968:	f7ff fe28 	bl	80015bc <MX_I2C2_Init>
  MX_TIM5_Init();
 800196c:	f001 fb20 	bl	8002fb0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001970:	f001 fc8c 	bl	800328c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001974:	f001 fa74 	bl	8002e60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001978:	f001 fac6 	bl	8002f08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // 启动编码器模式
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // 启动电机1编码器
 800197c:	213c      	movs	r1, #60	@ 0x3c
 800197e:	4895      	ldr	r0, [pc, #596]	@ (8001bd4 <main+0x294>)
 8001980:	f004 f9ce 	bl	8005d20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // 启动电机2编码器
 8001984:	213c      	movs	r1, #60	@ 0x3c
 8001986:	4894      	ldr	r0, [pc, #592]	@ (8001bd8 <main+0x298>)
 8001988:	f004 f9ca 	bl	8005d20 <HAL_TIM_Encoder_Start>

    if (hc05_init() != HAL_OK) {
 800198c:	f7ff fc4a 	bl	8001224 <hc05_init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <main+0x60>
        printf("BT failed");
 8001996:	4891      	ldr	r0, [pc, #580]	@ (8001bdc <main+0x29c>)
 8001998:	f006 fe26 	bl	80085e8 <iprintf>
        // 初始化失败处理
        Error_Handler();
 800199c:	f000 f9d0 	bl	8001d40 <Error_Handler>
    }
    // ... hc05_init() OK ...
    const char* test_msg = "Hello from STM32!\r\n";
 80019a0:	4b8f      	ldr	r3, [pc, #572]	@ (8001be0 <main+0x2a0>)
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (hc05_transmit_data((uint8_t*)test_msg, strlen(test_msg)) == HAL_OK) {
 80019a6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80019aa:	f7fe fc69 	bl	8000280 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80019b8:	f7ff fca8 	bl	800130c <hc05_transmit_data>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <main+0x8a>
        printf("Test message sent to Bluetooth.\r\n");
 80019c2:	4888      	ldr	r0, [pc, #544]	@ (8001be4 <main+0x2a4>)
 80019c4:	f006 fe78 	bl	80086b8 <puts>
 80019c8:	e002      	b.n	80019d0 <main+0x90>
    } else {
        printf("Failed to send test message to Bluetooth.\r\n");
 80019ca:	4887      	ldr	r0, [pc, #540]	@ (8001be8 <main+0x2a8>)
 80019cc:	f006 fe74 	bl	80086b8 <puts>
    }
    HAL_Delay(5000);
 80019d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019d4:	f001 fda6 	bl	8003524 <HAL_Delay>
//  // 初始化OLED (使用 hi2c1)
  if (ssd1306_Init(&hi2c1) != 0 ){
 80019d8:	4884      	ldr	r0, [pc, #528]	@ (8001bec <main+0x2ac>)
 80019da:	f000 fae9 	bl	8001fb0 <ssd1306_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <main+0xae>
      printf("OLED SSD1306 initialization failed!\r\n");
 80019e4:	4882      	ldr	r0, [pc, #520]	@ (8001bf0 <main+0x2b0>)
 80019e6:	f006 fe67 	bl	80086b8 <puts>
      Error_Handler(); // 初始化失败
 80019ea:	f000 f9a9 	bl	8001d40 <Error_Handler>
  }
  printf("OLED SSD1306 initialized successfully.\r\n");
 80019ee:	4881      	ldr	r0, [pc, #516]	@ (8001bf4 <main+0x2b4>)
 80019f0:	f006 fe62 	bl	80086b8 <puts>


  // 初始化MPU6500 (使用 hi2c2, mpu6500.c 中应使用 extern I2C_HandleTypeDef hi2c2;)
  if(mpu6500_init()==-1){
 80019f4:	f7ff fba2 	bl	800113c <mpu6500_init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fe:	d114      	bne.n	8001a2a <main+0xea>
      ssd1306_Fill(Black);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 fbe1 	bl	80021c8 <ssd1306_Fill>
      ssd1306_SetCursor(0,0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 fc9b 	bl	8002344 <ssd1306_SetCursor>
      ssd1306_WriteString("MPU Fail", Font_7x10, White);
 8001a0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001bf8 <main+0x2b8>)
 8001a10:	2301      	movs	r3, #1
 8001a12:	ca06      	ldmia	r2, {r1, r2}
 8001a14:	4879      	ldr	r0, [pc, #484]	@ (8001bfc <main+0x2bc>)
 8001a16:	f000 fd35 	bl	8002484 <ssd1306_WriteString>
      ssd1306_UpdateScreen(&hi2c1);
 8001a1a:	4874      	ldr	r0, [pc, #464]	@ (8001bec <main+0x2ac>)
 8001a1c:	f000 fbee 	bl	80021fc <ssd1306_UpdateScreen>
      HAL_Delay(1000);
 8001a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a24:	f001 fd7e 	bl	8003524 <HAL_Delay>
 8001a28:	e002      	b.n	8001a30 <main+0xf0>
  } else {
	    printf("MPU6500 initialized.\r\n");
 8001a2a:	4875      	ldr	r0, [pc, #468]	@ (8001c00 <main+0x2c0>)
 8001a2c:	f006 fe44 	bl	80086b8 <puts>
	}// 这个函数内部应该有打印信息指示是否成功
  // Calibrate MPU6500 bias
//   Need to hold the robot stationary and balanced during this process
  calibrate_mpu6500_bias(2000); // Collect 2000 samples (takes ~2 seconds + initial delay)
 8001a30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a34:	f7ff fe90 	bl	8001758 <calibrate_mpu6500_bias>

  // 清屏并显示初始文本
  ssd1306_Fill(Black);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 fbc5 	bl	80021c8 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 fc7f 	bl	8002344 <ssd1306_SetCursor>
  ssd1306_WriteString("OLED Init OK", Font_7x10, White);
 8001a46:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf8 <main+0x2b8>)
 8001a48:	2301      	movs	r3, #1
 8001a4a:	ca06      	ldmia	r2, {r1, r2}
 8001a4c:	486d      	ldr	r0, [pc, #436]	@ (8001c04 <main+0x2c4>)
 8001a4e:	f000 fd19 	bl	8002484 <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c1);
 8001a52:	4866      	ldr	r0, [pc, #408]	@ (8001bec <main+0x2ac>)
 8001a54:	f000 fbd2 	bl	80021fc <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8001a58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5c:	f001 fd62 	bl	8003524 <HAL_Delay>
//        HAL_Delay(1000);
//        Error_Handler();
//    }

    // 初始化电机模块 (会启动 TIM1 PWM 通道)
    Motor_Init();
 8001a60:	f000 f97a 	bl	8001d58 <Motor_Init>
    printf("Motor module initialized.\r\n");
 8001a64:	4868      	ldr	r0, [pc, #416]	@ (8001c08 <main+0x2c8>)
 8001a66:	f006 fe27 	bl	80086b8 <puts>
    HAL_Delay(500);
 8001a6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a6e:	f001 fd59 	bl	8003524 <HAL_Delay>

    // 启动控制循环定时器 TIM5 的中断
    if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8001a72:	4866      	ldr	r0, [pc, #408]	@ (8001c0c <main+0x2cc>)
 8001a74:	f003 ff42 	bl	80058fc <HAL_TIM_Base_Start_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <main+0x148>
    	printf("Failed to start control loop timer (TIM5)!\r\n");
 8001a7e:	4864      	ldr	r0, [pc, #400]	@ (8001c10 <main+0x2d0>)
 8001a80:	f006 fe1a 	bl	80086b8 <puts>
    	Error_Handler(); // 启动定时器失败是严重错误
 8001a84:	f000 f95c 	bl	8001d40 <Error_Handler>
    }
    printf("Control Loop Timer (TIM5) Started.\r\n");
 8001a88:	4862      	ldr	r0, [pc, #392]	@ (8001c14 <main+0x2d4>)
 8001a8a:	f006 fe15 	bl	80086b8 <puts>
      while (1)
      {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
          if (hc05_is_data_received()) {
 8001a8e:	f7ff fbe9 	bl	8001264 <hc05_is_data_received>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d035      	beq.n	8001b04 <main+0x1c4>
              printf("success");
 8001a98:	485f      	ldr	r0, [pc, #380]	@ (8001c18 <main+0x2d8>)
 8001a9a:	f006 fda5 	bl	80085e8 <iprintf>
              uint8_t received_buffer[BLUETOOTH_RX_BUFFER_SIZE];
              uint16_t len = hc05_get_received_data(received_buffer, BLUETOOTH_RX_BUFFER_SIZE);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fbe9 	bl	800127c <hc05_get_received_data>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
              if (len > 0) {
 8001ab0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d025      	beq.n	8001b04 <main+0x1c4>
                  printf("BT:");
 8001ab8:	4858      	ldr	r0, [pc, #352]	@ (8001c1c <main+0x2dc>)
 8001aba:	f006 fd95 	bl	80085e8 <iprintf>
                  // 处理接收到的数据 received_buffer，长度为 len
                  // 例如，通过另一个 UART 打印出来，或者回传给蓝牙
                  ssd1306_Fill(Black);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 fb82 	bl	80021c8 <ssd1306_Fill>
                  ssd1306_SetCursor(0, 0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 fc3c 	bl	8002344 <ssd1306_SetCursor>
                  char* string=received_buffer;
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                  ssd1306_WriteString(string, Font_7x10, White);
 8001ad4:	4a48      	ldr	r2, [pc, #288]	@ (8001bf8 <main+0x2b8>)
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	ca06      	ldmia	r2, {r1, r2}
 8001ada:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001ade:	f000 fcd1 	bl	8002484 <ssd1306_WriteString>
                  ssd1306_UpdateScreen(&hi2c1);
 8001ae2:	4842      	ldr	r0, [pc, #264]	@ (8001bec <main+0x2ac>)
 8001ae4:	f000 fb8a 	bl	80021fc <ssd1306_UpdateScreen>
                  printf("BT Rcvd: %s\n", (char*)received_buffer);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4619      	mov	r1, r3
 8001aee:	484c      	ldr	r0, [pc, #304]	@ (8001c20 <main+0x2e0>)
 8001af0:	f006 fd7a 	bl	80085e8 <iprintf>
                  hc05_transmit_data(received_buffer, len); // 示例：回显数据
 8001af4:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fc04 	bl	800130c <hc05_transmit_data>
    	  // =======================================
    	  // mpu
    	  // Example: Print raw sensor data periodically for verification

    	      	  static uint32_t print_counter = 0;
    	  if (++print_counter % 100 == 0) { // Print approximately every 1 second (adjust frequency as needed)
 8001b04:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <main+0x2e4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a46      	ldr	r2, [pc, #280]	@ (8001c24 <main+0x2e4>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <main+0x2e4>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <main+0x2e8>)
 8001b14:	fba3 1302 	umull	r1, r3, r3, r2
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	2164      	movs	r1, #100	@ 0x64
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1b3      	bne.n	8001a8e <main+0x14e>
    	       print_counter = 0;
 8001b26:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <main+0x2e4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

//    	        Calculate current pitch error for printing (error is calculated in the IRQ, but recalculate here for printing convenience)
    	       float current_pitch_error = g_target_pitch_angle - g_pitch_angle;
 8001b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c2c <main+0x2ec>)
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <main+0x2f0>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    	       printf("FusedPitch: %.2f | AccelAng: %.2f | Gyro(corr): X=%.2f | Err: %.2f | CtrlOut: %.2f | Motor(LR): %d,%d\r\n",
 8001b40:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <main+0x2f0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd07 	bl	8000558 <__aeabi_f2d>
 8001b4a:	e9c7 0100 	strd	r0, r1, [r7]
 8001b4e:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <main+0x2f4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd00 	bl	8000558 <__aeabi_f2d>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	460d      	mov	r5, r1
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <main+0x2f8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf9 	bl	8000558 <__aeabi_f2d>
 8001b66:	4680      	mov	r8, r0
 8001b68:	4689      	mov	r9, r1
 8001b6a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b6e:	f7fe fcf3 	bl	8000558 <__aeabi_f2d>
 8001b72:	4682      	mov	sl, r0
 8001b74:	468b      	mov	fp, r1
    	              g_pitch_angle,        // Fused pitch angle
    	              g_accel_angle,        // Accel calculated pitch angle after bias correction
    	              g_gyro_x_dps,         // Corrected Gyro Pitch rate (deg/s)
    	              current_pitch_error,  // Pitch error
    	              g_balance_kp * current_pitch_error + g_balance_kd * g_gyro_x_dps, // Recalculate Control Output for printing (simplified PD)
 8001b76:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <main+0x2fc>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <main+0x300>)
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <main+0x2f8>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
    	       printf("FusedPitch: %.2f | AccelAng: %.2f | Gyro(corr): X=%.2f | Err: %.2f | CtrlOut: %.2f | Motor(LR): %d,%d\r\n",
 8001b98:	ee17 0a90 	vmov	r0, s15
 8001b9c:	f7fe fcdc 	bl	8000558 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4927      	ldr	r1, [pc, #156]	@ (8001c44 <main+0x304>)
 8001ba6:	8809      	ldrh	r1, [r1, #0]
 8001ba8:	b209      	sxth	r1, r1
 8001baa:	4608      	mov	r0, r1
 8001bac:	4926      	ldr	r1, [pc, #152]	@ (8001c48 <main+0x308>)
 8001bae:	8809      	ldrh	r1, [r1, #0]
 8001bb0:	b209      	sxth	r1, r1
 8001bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8001bb4:	9008      	str	r0, [sp, #32]
 8001bb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001bba:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001bbe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bc2:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bca:	4820      	ldr	r0, [pc, #128]	@ (8001c4c <main+0x30c>)
 8001bcc:	f006 fd0c 	bl	80085e8 <iprintf>
      {
 8001bd0:	e75d      	b.n	8001a8e <main+0x14e>
 8001bd2:	bf00      	nop
 8001bd4:	200007e4 	.word	0x200007e4
 8001bd8:	2000082c 	.word	0x2000082c
 8001bdc:	0800ad0c 	.word	0x0800ad0c
 8001be0:	0800ad18 	.word	0x0800ad18
 8001be4:	0800ad2c 	.word	0x0800ad2c
 8001be8:	0800ad50 	.word	0x0800ad50
 8001bec:	2000028c 	.word	0x2000028c
 8001bf0:	0800ad7c 	.word	0x0800ad7c
 8001bf4:	0800ada4 	.word	0x0800ada4
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	0800adcc 	.word	0x0800adcc
 8001c00:	0800add8 	.word	0x0800add8
 8001c04:	0800adf0 	.word	0x0800adf0
 8001c08:	0800ae00 	.word	0x0800ae00
 8001c0c:	20000874 	.word	0x20000874
 8001c10:	0800ae1c 	.word	0x0800ae1c
 8001c14:	0800ae48 	.word	0x0800ae48
 8001c18:	0800ae6c 	.word	0x0800ae6c
 8001c1c:	0800ae74 	.word	0x0800ae74
 8001c20:	0800ae78 	.word	0x0800ae78
 8001c24:	20000334 	.word	0x20000334
 8001c28:	51eb851f 	.word	0x51eb851f
 8001c2c:	20000768 	.word	0x20000768
 8001c30:	20000754 	.word	0x20000754
 8001c34:	20000758 	.word	0x20000758
 8001c38:	2000075c 	.word	0x2000075c
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	2000076c 	.word	0x2000076c
 8001c48:	2000076e 	.word	0x2000076e
 8001c4c:	0800ae88 	.word	0x0800ae88

08001c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b094      	sub	sp, #80	@ 0x50
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	2230      	movs	r2, #48	@ 0x30
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fe0a 	bl	8008878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <SystemClock_Config+0xd0>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	4a28      	ldr	r2, [pc, #160]	@ (8001d20 <SystemClock_Config+0xd0>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <SystemClock_Config+0xd0>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <SystemClock_Config+0xd4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c9c:	4a21      	ldr	r2, [pc, #132]	@ (8001d24 <SystemClock_Config+0xd4>)
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <SystemClock_Config+0xd4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cc8:	23a8      	movs	r3, #168	@ 0xa8
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f927 	bl	8004f2c <HAL_RCC_OscConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ce4:	f000 f82c 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce8:	230f      	movs	r3, #15
 8001cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fb88 	bl	800541c <HAL_RCC_ClockConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d12:	f000 f815 	bl	8001d40 <Error_Handler>
  }
}
 8001d16:	bf00      	nop
 8001d18:	3750      	adds	r7, #80	@ 0x50
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_UART_RxCpltCallback>:
  * @brief  UART接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    // 调用蓝牙模块的内部回调处理函数
    hc05_uart_rx_callback_handler(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fb07 	bl	8001344 <hc05_uart_rx_callback_handler>


}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  // 假设是 PA5 (Nucleo 板载 LED)
  // 请确保 led_GPIO_Port 和 led_Pin 宏定义正确
  // 或者直接使用 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  while (1)
  {
    HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); // 使用 main.h 中定义的宏
 8001d48:	2120      	movs	r1, #32
 8001d4a:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <Error_Handler+0x14>)
 8001d4c:	f001 ff81 	bl	8003c52 <HAL_GPIO_TogglePin>
 8001d50:	e7fa      	b.n	8001d48 <Error_Handler+0x8>
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000

08001d58 <Motor_Init>:
/**
  * @brief 初始化电机控制模块
  * @note  此函数应在定时器和GPIO初始化之后调用。
  *        它会启动PWM通道。
  */
void Motor_Init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    // 启动所有四个 PWM 通道
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); } // Motor A AIN1 (Speed/PWM)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4813      	ldr	r0, [pc, #76]	@ (8001dac <Motor_Init+0x54>)
 8001d60:	f003 fe88 	bl	8005a74 <HAL_TIM_PWM_Start>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <Motor_Init+0x16>
 8001d6a:	f7ff ffe9 	bl	8001d40 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) { Error_Handler(); } // Motor A AIN2 (High/PWM)
 8001d6e:	2108      	movs	r1, #8
 8001d70:	480e      	ldr	r0, [pc, #56]	@ (8001dac <Motor_Init+0x54>)
 8001d72:	f003 fe7f 	bl	8005a74 <HAL_TIM_PWM_Start>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <Motor_Init+0x28>
 8001d7c:	f7ff ffe0 	bl	8001d40 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); } // Motor B BIN1 (Speed/PWM)
 8001d80:	210c      	movs	r1, #12
 8001d82:	480a      	ldr	r0, [pc, #40]	@ (8001dac <Motor_Init+0x54>)
 8001d84:	f003 fe76 	bl	8005a74 <HAL_TIM_PWM_Start>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <Motor_Init+0x3a>
 8001d8e:	f7ff ffd7 	bl	8001d40 <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); } // Motor B BIN2 (High/PWM)
 8001d92:	2104      	movs	r1, #4
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <Motor_Init+0x54>)
 8001d96:	f003 fe6d 	bl	8005a74 <HAL_TIM_PWM_Start>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <Motor_Init+0x4c>
 8001da0:	f7ff ffce 	bl	8001d40 <Error_Handler>

    // 初始状态停止电机
    Car_Stop();
 8001da4:	f000 f8c2 	bl	8001f2c <Car_Stop>
    // printf("Motor PWM channels started.\r\n");
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000079c 	.word	0x2000079c

08001db0 <Motor_SetSpeed>:
  * @brief 设置指定电机的速度和方向 (Slow Decay PWM - Two PWM Inputs)
  * @param motor_idx: 电机索引 (MOTOR_A 或 MOTOR_B)
  * @param speed_percent: 速度百分比 (-100 到 100)。
  *                       正值表示前进，负值表示后退，0表示停止。
  */
void Motor_SetSpeed(uint8_t motor_idx, int16_t speed_percent) {
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	460a      	mov	r2, r1
 8001dba:	71fb      	strb	r3, [r7, #7]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	80bb      	strh	r3, [r7, #4]
    uint32_t pwm_val_for_variable_pin; // 用于可变PWM信号的占空比 (0 = 最快，PWM_PERIOD = 最慢/制动)
    uint32_t pwm_val_for_fixed_pin;    // 用于固定高电平的占空比 (通常是 PWM_PERIOD，表示100%占空比)
    int16_t abs_speed_percent;

    // 限制速度百分比在 -100 到 100 之间
    if (speed_percent > 100) speed_percent = 100;
 8001dc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dc4:	2b64      	cmp	r3, #100	@ 0x64
 8001dc6:	dd01      	ble.n	8001dcc <Motor_SetSpeed+0x1c>
 8001dc8:	2364      	movs	r3, #100	@ 0x64
 8001dca:	80bb      	strh	r3, [r7, #4]
    if (speed_percent < -100) speed_percent = -100;
 8001dcc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001dd4:	da02      	bge.n	8001ddc <Motor_SetSpeed+0x2c>
 8001dd6:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8001dda:	80bb      	strh	r3, [r7, #4]

    // 获取速度百分比的绝对值用于计算 PWM 幅度
    if (speed_percent >= 0) {
 8001ddc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db02      	blt.n	8001dea <Motor_SetSpeed+0x3a>
        abs_speed_percent = speed_percent;
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	81fb      	strh	r3, [r7, #14]
 8001de8:	e003      	b.n	8001df2 <Motor_SetSpeed+0x42>
    } else {
        abs_speed_percent = -speed_percent; // abs(speed_percent)
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	425b      	negs	r3, r3
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	81fb      	strh	r3, [r7, #14]
    }

    // 根据速度百分比设置 PWM 值和固定高电平值
    if (speed_percent == 0) {
 8001df2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <Motor_SetSpeed+0x54>
        // 停止 (滑行模式): 两个控制引脚都设为低电平 (0%占空比)
        pwm_val_for_variable_pin = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
        pwm_val_for_fixed_pin = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e023      	b.n	8001e4c <Motor_SetSpeed+0x9c>
    } else {
        // 对于慢衰减模式，我们需要的PWM占空比与期望速度成反比。
        // 例如：100% 速度对应 0% PWM 占空比 (0值)
        //       10% 速度对应 90% PWM 占空比 (0.9 * PWM_PERIOD 值)
        pwm_val_for_variable_pin = (uint32_t)((float)(100 - abs_speed_percent) * PWM_PERIOD / 100.0f);
 8001e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e08:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001ef0 <Motor_SetSpeed+0x140>
 8001e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e1c:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001ef4 <Motor_SetSpeed+0x144>
 8001e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	617b      	str	r3, [r7, #20]
        // 确保即使是非常小的非零速度百分比，也能产生实际的驱动。
        // 如果计算出的 pwm_val_for_variable_pin 等于 PWM_PERIOD
        // 而 abs_speed_percent 却大于 0，说明由于浮点精度或PWM_PERIOD值小，
        // 导致计算结果实际是100%占空比，这会导致电机停止（制动效果）。
        // 此时我们将其设置为 PWM_PERIOD - 1，以确保有微小的非零驱动。
        if (abs_speed_percent > 0 && pwm_val_for_variable_pin >= PWM_PERIOD) {
 8001e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd07      	ble.n	8001e46 <Motor_SetSpeed+0x96>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f240 3246 	movw	r2, #838	@ 0x346
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d902      	bls.n	8001e46 <Motor_SetSpeed+0x96>
             pwm_val_for_variable_pin = PWM_PERIOD - 1; // 确保不完全制动
 8001e40:	f240 3346 	movw	r3, #838	@ 0x346
 8001e44:	617b      	str	r3, [r7, #20]
        }

        // 固定高电平的引脚，始终保持100%占空比
        pwm_val_for_fixed_pin = PWM_PERIOD;
 8001e46:	f240 3347 	movw	r3, #839	@ 0x347
 8001e4a:	613b      	str	r3, [r7, #16]
    }

    // 根据电机索引和方向设置对应的 PWM 通道
    if (motor_idx == MOTOR_A) {
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d122      	bne.n	8001e98 <Motor_SetSpeed+0xe8>
        // Motor A: AIN1 (PA8, TIM1_CH1), AIN2 (PA10, TIM1_CH3)
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: AIN1=High, AIN2=PWM)
 8001e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dd08      	ble.n	8001e6c <Motor_SetSpeed+0xbc>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin);     // AIN1 = 固定高电平
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin);  // AIN2 = 可变PWM
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	63da      	str	r2, [r3, #60]	@ 0x3c
        } else { // 停止 (speed_percent == 0) - 已在上面统一处理
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
        }
    }
}
 8001e6a:	e03a      	b.n	8001ee2 <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: AIN1=PWM, AIN2=High)
 8001e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da08      	bge.n	8001e86 <Motor_SetSpeed+0xd6>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_variable_pin);  // AIN1 = 可变PWM
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_fixed_pin);     // AIN2 = 固定高电平
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e84:	e02d      	b.n	8001ee2 <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin); // AIN1 = 0 (实际上是0，因为fixed_pwm_value和variable_pwm_value都为0)
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin); // AIN2 = 0
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e96:	e024      	b.n	8001ee2 <Motor_SetSpeed+0x132>
    } else if (motor_idx == MOTOR_B) {
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d121      	bne.n	8001ee2 <Motor_SetSpeed+0x132>
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: BIN1=High, BIN2=PWM)
 8001e9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dd08      	ble.n	8001eb8 <Motor_SetSpeed+0x108>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin);     // BIN1 = 固定高电平
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin);  // BIN2 = 可变PWM
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001eb6:	e014      	b.n	8001ee2 <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: BIN1=PWM, BIN2=High)
 8001eb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da08      	bge.n	8001ed2 <Motor_SetSpeed+0x122>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_variable_pin);  // BIN1 = 可变PWM
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_fixed_pin);     // BIN2 = 固定高电平
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ed0:	e007      	b.n	8001ee2 <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <Motor_SetSpeed+0x148>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	4451c000 	.word	0x4451c000
 8001ef4:	42c80000 	.word	0x42c80000
 8001ef8:	2000079c 	.word	0x2000079c

08001efc <Car_Move>:
/**
  * @brief 控制小车整体移动
  * @param speed_A_percent: 电机A的速度百分比 (-100 到 100)
  * @param speed_B_percent: 电机B的速度百分比 (-100 到 100)
  */
void Car_Move(int16_t speed_A_percent, int16_t speed_B_percent) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_A, speed_A_percent);
 8001f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff ff4c 	bl	8001db0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_B, speed_B_percent);
 8001f18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff ff46 	bl	8001db0 <Motor_SetSpeed>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <Car_Stop>:
}

/**
  * @brief 小车停止
  */
void Car_Stop(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    Car_Move(0, 0);
 8001f30:	2100      	movs	r1, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff ffe2 	bl	8001efc <Car_Move>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <ssd1306_WriteCommand>:
 * @brief Sends a command byte to SSD1306.
 * @param hi2c Pointer to I2C handle.
 * @param command Command byte to send.
 * @retval 0 on success, 1 on error.
 */
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af04      	add	r7, sp, #16
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
    if (HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, SSD1306_CMD, 1, &command, 1, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 8001f48:	2364      	movs	r3, #100	@ 0x64
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	1cfb      	adds	r3, r7, #3
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2301      	movs	r3, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	2178      	movs	r1, #120	@ 0x78
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f001 ffd8 	bl	8003f10 <HAL_I2C_Mem_Write>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <ssd1306_WriteCommand+0x2e>
        SSD1306_LOG("I2C Error: Write Command 0x%02X failed\n", command);
        return 1; // Error
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <ssd1306_WriteCommand+0x30>
    }
    return 0; // Success
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ssd1306_WriteData>:
 * @param hi2c Pointer to I2C handle.
 * @param data Pointer to data buffer.
 * @param size Number of bytes to send.
 * @retval 0 on success, 1 on error.
 */
static uint8_t ssd1306_WriteData(I2C_HandleTypeDef *hi2c, uint8_t* data, size_t size) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af04      	add	r7, sp, #16
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
    if (HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, SSD1306_DATA, 1, data, size, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2264      	movs	r2, #100	@ 0x64
 8001f86:	9202      	str	r2, [sp, #8]
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	2240      	movs	r2, #64	@ 0x40
 8001f92:	2178      	movs	r1, #120	@ 0x78
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f001 ffbb 	bl	8003f10 <HAL_I2C_Mem_Write>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <ssd1306_WriteData+0x30>
         SSD1306_LOG("I2C Error: Write Data (%d bytes) failed\n", size);
        return 1; // Error
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <ssd1306_WriteData+0x32>
    }
    return 0; // Success
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <ssd1306_Init>:

/**
 * @brief Initializes the SSD1306 OLED display.
 */
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    // Wait for I2C device ready (important!)
    if (HAL_I2C_IsDeviceReady(hi2c, SSD1306_I2C_ADDR, 3, SSD1306_I2C_TIMEOUT) != HAL_OK) {
 8001fb8:	2364      	movs	r3, #100	@ 0x64
 8001fba:	2203      	movs	r2, #3
 8001fbc:	2178      	movs	r1, #120	@ 0x78
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f002 fad2 	bl	8004568 <HAL_I2C_IsDeviceReady>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <ssd1306_Init+0x1e>
         SSD1306_LOG("I2C Error: Device not ready at address 0x%02X\n", SSD1306_I2C_ADDR);
        return 1; // Device not found or communication error
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0f6      	b.n	80021bc <ssd1306_Init+0x20c>
    }

    // Short delay after power-on can sometimes help
    HAL_Delay(100);
 8001fce:	2064      	movs	r0, #100	@ 0x64
 8001fd0:	f001 faa8 	bl	8003524 <HAL_Delay>

    // Initialization Sequence
    if (ssd1306_WriteCommand(hi2c, 0xAE)) return 1; // Display OFF
 8001fd4:	21ae      	movs	r1, #174	@ 0xae
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffb0 	bl	8001f3c <ssd1306_WriteCommand>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <ssd1306_Init+0x36>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0ea      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD5)) return 1; // Set Display Clock Divide Ratio/Oscillator Frequency
 8001fe6:	21d5      	movs	r1, #213	@ 0xd5
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffa7 	bl	8001f3c <ssd1306_WriteCommand>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <ssd1306_Init+0x48>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0e1      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x80)) return 1; // Default Ratio 0x80
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff9e 	bl	8001f3c <ssd1306_WriteCommand>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <ssd1306_Init+0x5a>
 8002006:	2301      	movs	r3, #1
 8002008:	e0d8      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xA8)) return 1; // Set MUX Ratio
 800200a:	21a8      	movs	r1, #168	@ 0xa8
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff95 	bl	8001f3c <ssd1306_WriteCommand>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <ssd1306_Init+0x6c>
 8002018:	2301      	movs	r3, #1
 800201a:	e0cf      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1)) return 1; // Height - 1 (e.g., 63 for 128x64)
 800201c:	213f      	movs	r1, #63	@ 0x3f
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff8c 	bl	8001f3c <ssd1306_WriteCommand>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <ssd1306_Init+0x7e>
 800202a:	2301      	movs	r3, #1
 800202c:	e0c6      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD3)) return 1; // Set Display Offset
 800202e:	21d3      	movs	r1, #211	@ 0xd3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff83 	bl	8001f3c <ssd1306_WriteCommand>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <ssd1306_Init+0x90>
 800203c:	2301      	movs	r3, #1
 800203e:	e0bd      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x00)) return 1; // No offset
 8002040:	2100      	movs	r1, #0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ff7a 	bl	8001f3c <ssd1306_WriteCommand>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <ssd1306_Init+0xa2>
 800204e:	2301      	movs	r3, #1
 8002050:	e0b4      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x40 | 0x0)) return 1; // Set Display Start Line (0)
 8002052:	2140      	movs	r1, #64	@ 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff71 	bl	8001f3c <ssd1306_WriteCommand>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <ssd1306_Init+0xb4>
 8002060:	2301      	movs	r3, #1
 8002062:	e0ab      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x8D)) return 1; // Charge Pump Setting
 8002064:	218d      	movs	r1, #141	@ 0x8d
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff68 	bl	8001f3c <ssd1306_WriteCommand>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <ssd1306_Init+0xc6>
 8002072:	2301      	movs	r3, #1
 8002074:	e0a2      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x14)) return 1; // Enable Charge Pump (0x10 to disable if VCC is external)
 8002076:	2114      	movs	r1, #20
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff5f 	bl	8001f3c <ssd1306_WriteCommand>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <ssd1306_Init+0xd8>
 8002084:	2301      	movs	r3, #1
 8002086:	e099      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0x20)) return 1; // Set Memory Addressing Mode
 8002088:	2120      	movs	r1, #32
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff56 	bl	8001f3c <ssd1306_WriteCommand>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <ssd1306_Init+0xea>
 8002096:	2301      	movs	r3, #1
 8002098:	e090      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x00)) return 1; // 0x00 = Horizontal Addressing Mode
 800209a:	2100      	movs	r1, #0
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff4d 	bl	8001f3c <ssd1306_WriteCommand>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <ssd1306_Init+0xfc>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e087      	b.n	80021bc <ssd1306_Init+0x20c>

    // Set Segment Re-map (controls left-right orientation)
    // 0xA1 mirrors horizontally (column 127 is mapped to SEG0)
    // 0xA0 is normal (column 0 is mapped to SEG0)
    if (ssd1306_WriteCommand(hi2c, 0xA1)) return 1; // Choose 0xA0 or 0xA1 based on your wiring/module
 80020ac:	21a1      	movs	r1, #161	@ 0xa1
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff44 	bl	8001f3c <ssd1306_WriteCommand>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <ssd1306_Init+0x10e>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07e      	b.n	80021bc <ssd1306_Init+0x20c>

    // Set COM Output Scan Direction (controls up-down orientation)
    // 0xC8 mirrors vertically (scan from COM[N-1] down to COM0)
    // 0xC0 is normal (scan from COM0 up to COM[N-1])
    if (ssd1306_WriteCommand(hi2c, 0xC8)) return 1; // Choose 0xC0 or 0xC8 based on your wiring/module
 80020be:	21c8      	movs	r1, #200	@ 0xc8
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff3b 	bl	8001f3c <ssd1306_WriteCommand>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <ssd1306_Init+0x120>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e075      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xDA)) return 1; // Set COM Pins Hardware Configuration
 80020d0:	21da      	movs	r1, #218	@ 0xda
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff32 	bl	8001f3c <ssd1306_WriteCommand>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <ssd1306_Init+0x132>
 80020de:	2301      	movs	r3, #1
 80020e0:	e06c      	b.n	80021bc <ssd1306_Init+0x20c>
    if (SSD1306_HEIGHT == 32) {
        if (ssd1306_WriteCommand(hi2c, 0x02)) return 1; // Config for 128x32
    } else { // Default to 64
         if (ssd1306_WriteCommand(hi2c, 0x12)) return 1; // Config for 128x64
 80020e2:	2112      	movs	r1, #18
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <ssd1306_WriteCommand>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <ssd1306_Init+0x144>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e063      	b.n	80021bc <ssd1306_Init+0x20c>
    }

    if (ssd1306_WriteCommand(hi2c, 0x81)) return 1; // Contrast Control
 80020f4:	2181      	movs	r1, #129	@ 0x81
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ff20 	bl	8001f3c <ssd1306_WriteCommand>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <ssd1306_Init+0x156>
 8002102:	2301      	movs	r3, #1
 8002104:	e05a      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xCF)) return 1; // Set Contrast Value (adjust as needed 0x00-0xFF)
 8002106:	21cf      	movs	r1, #207	@ 0xcf
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff17 	bl	8001f3c <ssd1306_WriteCommand>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <ssd1306_Init+0x168>
 8002114:	2301      	movs	r3, #1
 8002116:	e051      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xD9)) return 1; // Set Pre-charge Period
 8002118:	21d9      	movs	r1, #217	@ 0xd9
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff0e 	bl	8001f3c <ssd1306_WriteCommand>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <ssd1306_Init+0x17a>
 8002126:	2301      	movs	r3, #1
 8002128:	e048      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xF1)) return 1; // Recommended value
 800212a:	21f1      	movs	r1, #241	@ 0xf1
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff05 	bl	8001f3c <ssd1306_WriteCommand>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <ssd1306_Init+0x18c>
 8002138:	2301      	movs	r3, #1
 800213a:	e03f      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xDB)) return 1; // Set VCOMH Deselect Level
 800213c:	21db      	movs	r1, #219	@ 0xdb
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fefc 	bl	8001f3c <ssd1306_WriteCommand>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <ssd1306_Init+0x19e>
 800214a:	2301      	movs	r3, #1
 800214c:	e036      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0x40)) return 1; // Recommended value 0x40 (~0.77 VCC)
 800214e:	2140      	movs	r1, #64	@ 0x40
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fef3 	bl	8001f3c <ssd1306_WriteCommand>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <ssd1306_Init+0x1b0>
 800215c:	2301      	movs	r3, #1
 800215e:	e02d      	b.n	80021bc <ssd1306_Init+0x20c>

    if (ssd1306_WriteCommand(hi2c, 0xA4)) return 1; // Set Entire Display ON/OFF (A4=Output follows RAM, A5=Output ignores RAM)
 8002160:	21a4      	movs	r1, #164	@ 0xa4
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff feea 	bl	8001f3c <ssd1306_WriteCommand>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <ssd1306_Init+0x1c2>
 800216e:	2301      	movs	r3, #1
 8002170:	e024      	b.n	80021bc <ssd1306_Init+0x20c>
    if (ssd1306_WriteCommand(hi2c, 0xA6)) return 1; // Set Normal/Inverse Display (A6=Normal, A7=Inverse)
 8002172:	21a6      	movs	r1, #166	@ 0xa6
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fee1 	bl	8001f3c <ssd1306_WriteCommand>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <ssd1306_Init+0x1d4>
 8002180:	2301      	movs	r3, #1
 8002182:	e01b      	b.n	80021bc <ssd1306_Init+0x20c>

    // Clear screen buffer
    ssd1306_Fill(Black);
 8002184:	2000      	movs	r0, #0
 8002186:	f000 f81f 	bl	80021c8 <ssd1306_Fill>
    // Send buffer to screen RAM (initial clear)
    // No need to check return here, as failure likely means init already failed
    ssd1306_UpdateScreen(hi2c); // Ignore return value here, focus on init commands
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f836 	bl	80021fc <ssd1306_UpdateScreen>

    // Turn display ON
    if (ssd1306_WriteCommand(hi2c, 0xAF)) return 1;
 8002190:	21af      	movs	r1, #175	@ 0xaf
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fed2 	bl	8001f3c <ssd1306_WriteCommand>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <ssd1306_Init+0x1f2>
 800219e:	2301      	movs	r3, #1
 80021a0:	e00c      	b.n	80021bc <ssd1306_Init+0x20c>

    // Initialize state
    SSD1306.CurrentX = 0;
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <ssd1306_Init+0x214>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <ssd1306_Init+0x214>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <ssd1306_Init+0x214>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	715a      	strb	r2, [r3, #5]
    SSD1306.Inverted = 0; // Default to non-inverted
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <ssd1306_Init+0x214>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	711a      	strb	r2, [r3, #4]

    SSD1306_LOG("SSD1306 Initialized Successfully.\n");
    return 0; // Initialization successful
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000738 	.word	0x20000738

080021c8 <ssd1306_Fill>:

/**
 * @brief Fills the entire screen buffer with a specified color.
 */
void ssd1306_Fill(SSD1306_COLOR color) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
    uint8_t fill_byte = (color == Black) ? 0x00 : 0xFF;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <ssd1306_Fill+0x14>
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <ssd1306_Fill+0x16>
 80021dc:	23ff      	movs	r3, #255	@ 0xff
 80021de:	73fb      	strb	r3, [r7, #15]
    memset(SSD1306_Buffer, fill_byte, sizeof(SSD1306_Buffer));
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e6:	4619      	mov	r1, r3
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <ssd1306_Fill+0x30>)
 80021ea:	f006 fb45 	bl	8008878 <memset>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000338 	.word	0x20000338

080021fc <ssd1306_UpdateScreen>:

/**
 * @brief Sends the screen buffer content to the OLED display RAM.
 */
uint8_t ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    if (!SSD1306.Initialized) return 1; // Don't update if not initialized
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <ssd1306_UpdateScreen+0xa0>)
 8002206:	795b      	ldrb	r3, [r3, #5]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <ssd1306_UpdateScreen+0x14>
 800220c:	2301      	movs	r3, #1
 800220e:	e041      	b.n	8002294 <ssd1306_UpdateScreen+0x98>

    // Set Column Address Range (0 - 127)
    if (ssd1306_WriteCommand(hi2c, 0x21)) return 1; // Set column address
 8002210:	2121      	movs	r1, #33	@ 0x21
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fe92 	bl	8001f3c <ssd1306_WriteCommand>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <ssd1306_UpdateScreen+0x26>
 800221e:	2301      	movs	r3, #1
 8002220:	e038      	b.n	8002294 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, 0)) return 1;    // Column start address (0)
 8002222:	2100      	movs	r1, #0
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fe89 	bl	8001f3c <ssd1306_WriteCommand>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <ssd1306_UpdateScreen+0x38>
 8002230:	2301      	movs	r3, #1
 8002232:	e02f      	b.n	8002294 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, SSD1306_WIDTH - 1)) return 1; // Column end address (127)
 8002234:	217f      	movs	r1, #127	@ 0x7f
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fe80 	bl	8001f3c <ssd1306_WriteCommand>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <ssd1306_UpdateScreen+0x4a>
 8002242:	2301      	movs	r3, #1
 8002244:	e026      	b.n	8002294 <ssd1306_UpdateScreen+0x98>

    // Set Page Address Range (0 - 7 for 64 high, 0-3 for 32 high)
    if (ssd1306_WriteCommand(hi2c, 0x22)) return 1; // Set page address
 8002246:	2122      	movs	r1, #34	@ 0x22
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fe77 	bl	8001f3c <ssd1306_WriteCommand>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <ssd1306_UpdateScreen+0x5c>
 8002254:	2301      	movs	r3, #1
 8002256:	e01d      	b.n	8002294 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, 0)) return 1;    // Page start address (0)
 8002258:	2100      	movs	r1, #0
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fe6e 	bl	8001f3c <ssd1306_WriteCommand>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <ssd1306_UpdateScreen+0x6e>
 8002266:	2301      	movs	r3, #1
 8002268:	e014      	b.n	8002294 <ssd1306_UpdateScreen+0x98>
    if (ssd1306_WriteCommand(hi2c, (SSD1306_HEIGHT / 8) - 1)) return 1; // Page end address
 800226a:	2107      	movs	r1, #7
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fe65 	bl	8001f3c <ssd1306_WriteCommand>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <ssd1306_UpdateScreen+0x80>
 8002278:	2301      	movs	r3, #1
 800227a:	e00b      	b.n	8002294 <ssd1306_UpdateScreen+0x98>

    // Send the entire buffer data
    if (ssd1306_WriteData(hi2c, SSD1306_Buffer, sizeof(SSD1306_Buffer))) {
 800227c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002280:	4907      	ldr	r1, [pc, #28]	@ (80022a0 <ssd1306_UpdateScreen+0xa4>)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fe76 	bl	8001f74 <ssd1306_WriteData>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <ssd1306_UpdateScreen+0x96>
        return 1; // I2C data transfer failed
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <ssd1306_UpdateScreen+0x98>
    }

    return 0; // Success
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000738 	.word	0x20000738
 80022a0:	20000338 	.word	0x20000338

080022a4 <ssd1306_DrawPixel>:

/**
 * @brief Draws a single pixel at the specified coordinates in the buffer.
 */
void ssd1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR color) {
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
 80022ae:	460b      	mov	r3, r1
 80022b0:	80bb      	strh	r3, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	70fb      	strb	r3, [r7, #3]
    // Check boundaries
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80022ba:	d838      	bhi.n	800232e <ssd1306_DrawPixel+0x8a>
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	2b3f      	cmp	r3, #63	@ 0x3f
 80022c0:	d835      	bhi.n	800232e <ssd1306_DrawPixel+0x8a>
        return; // Out of bounds
    }

    // Handle inversion if needed
    if (SSD1306.Inverted) {
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <ssd1306_DrawPixel+0x98>)
 80022c4:	791b      	ldrb	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <ssd1306_DrawPixel+0x34>
        color = (SSD1306_COLOR)!color;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	70fb      	strb	r3, [r7, #3]
    }

    // Calculate buffer index and bit mask
    // Buffer is organized as horizontal pages of 8 rows
    uint16_t byte_index = x + (y / 8) * SSD1306_WIDTH;
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	b29b      	uxth	r3, r3
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4413      	add	r3, r2
 80022e6:	81fb      	strh	r3, [r7, #14]
    uint8_t bit_mask = 1 << (y % 8);
 80022e8:	88bb      	ldrh	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	2201      	movs	r2, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	737b      	strb	r3, [r7, #13]

    // Modify buffer
    if (color == White) {
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d109      	bne.n	8002310 <ssd1306_DrawPixel+0x6c>
        SSD1306_Buffer[byte_index] |= bit_mask;  // Set bit
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <ssd1306_DrawPixel+0x9c>)
 8002300:	5cd1      	ldrb	r1, [r2, r3]
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	7b7a      	ldrb	r2, [r7, #13]
 8002306:	430a      	orrs	r2, r1
 8002308:	b2d1      	uxtb	r1, r2
 800230a:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <ssd1306_DrawPixel+0x9c>)
 800230c:	54d1      	strb	r1, [r2, r3]
 800230e:	e00f      	b.n	8002330 <ssd1306_DrawPixel+0x8c>
    } else {
        SSD1306_Buffer[byte_index] &= ~bit_mask; // Clear bit
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	4a0b      	ldr	r2, [pc, #44]	@ (8002340 <ssd1306_DrawPixel+0x9c>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	b25a      	sxtb	r2, r3
 8002318:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800231c:	43db      	mvns	r3, r3
 800231e:	b25b      	sxtb	r3, r3
 8002320:	4013      	ands	r3, r2
 8002322:	b25a      	sxtb	r2, r3
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	b2d1      	uxtb	r1, r2
 8002328:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <ssd1306_DrawPixel+0x9c>)
 800232a:	54d1      	strb	r1, [r2, r3]
 800232c:	e000      	b.n	8002330 <ssd1306_DrawPixel+0x8c>
        return; // Out of bounds
 800232e:	bf00      	nop
    }
}
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000738 	.word	0x20000738
 8002340:	20000338 	.word	0x20000338

08002344 <ssd1306_SetCursor>:

/**
 * @brief Sets the current cursor position for text writing.
 */
void ssd1306_SetCursor(uint16_t x, uint16_t y) {
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	460a      	mov	r2, r1
 800234e:	80fb      	strh	r3, [r7, #6]
 8002350:	4613      	mov	r3, r2
 8002352:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = (x < SSD1306_WIDTH) ? x : SSD1306_WIDTH -1;
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b7f      	cmp	r3, #127	@ 0x7f
 8002358:	bf28      	it	cs
 800235a:	237f      	movcs	r3, #127	@ 0x7f
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <ssd1306_SetCursor+0x38>)
 8002360:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = (y < SSD1306_HEIGHT) ? y : SSD1306_HEIGHT -1;
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	2b3f      	cmp	r3, #63	@ 0x3f
 8002366:	bf28      	it	cs
 8002368:	233f      	movcs	r3, #63	@ 0x3f
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <ssd1306_SetCursor+0x38>)
 800236e:	805a      	strh	r2, [r3, #2]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000738 	.word	0x20000738

08002380 <ssd1306_WriteChar>:


/**
 * @brief Writes a single character to the screen buffer (Modified Logic).
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b08b      	sub	sp, #44	@ 0x2c
 8002384:	af00      	add	r7, sp, #0
 8002386:	4604      	mov	r4, r0
 8002388:	1d38      	adds	r0, r7, #4
 800238a:	e880 0006 	stmia.w	r0, {r1, r2}
 800238e:	461a      	mov	r2, r3
 8002390:	4623      	mov	r3, r4
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	4613      	mov	r3, r2
 8002396:	73bb      	strb	r3, [r7, #14]
    // Handle non-printable ASCII characters or replace with space
    if (ch < ' ' || ch > '~') {
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b1f      	cmp	r3, #31
 800239c:	d902      	bls.n	80023a4 <ssd1306_WriteChar+0x24>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80023a2:	d901      	bls.n	80023a8 <ssd1306_WriteChar+0x28>
        ch = ' '; // Replace unsupported characters with a space
 80023a4:	2320      	movs	r3, #32
 80023a6:	73fb      	strb	r3, [r7, #15]
    }

    // Check remaining space on screen
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023a8:	4b35      	ldr	r3, [pc, #212]	@ (8002480 <ssd1306_WriteChar+0x100>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023b4:	dc06      	bgt.n	80023c4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80023b6:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <ssd1306_WriteChar+0x100>)
 80023b8:	885b      	ldrh	r3, [r3, #2]
 80023ba:	461a      	mov	r2, r3
 80023bc:	797b      	ldrb	r3, [r7, #5]
 80023be:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023c2:	dd01      	ble.n	80023c8 <ssd1306_WriteChar+0x48>
        // Not enough space to draw the character fully
        SSD1306_LOG("WriteChar Error: Not enough space for char '%c' at (%d, %d)\n", ch, SSD1306.CurrentX, SSD1306.CurrentY);
        return 0; // Indicate failure (no space)
 80023c4:	2300      	movs	r3, #0
 80023c6:	e056      	b.n	8002476 <ssd1306_WriteChar+0xf6>
    }

    // Calculate offset in the font data array
    // Assumes font data is Width bytes per char, contiguous for ASCII ' ' through '~'
    // Assumes Font.data is uint8_t* as corrected in header
    const uint8_t* font_char_ptr = &Font.data[(ch - ' ') * Font.FontWidth];
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	3a20      	subs	r2, #32
 80023ce:	7939      	ldrb	r1, [r7, #4]
 80023d0:	fb01 f202 	mul.w	r2, r1, r2
 80023d4:	4413      	add	r3, r2
 80023d6:	61fb      	str	r3, [r7, #28]

    // Draw character column by column
    for (uint32_t i = 0; i < Font.FontWidth; i++) { // Iterate through columns
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
 80023dc:	e03e      	b.n	800245c <ssd1306_WriteChar+0xdc>
        uint8_t column_data = font_char_ptr[i];     // Get the byte representing the column (8 pixels)
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	76fb      	strb	r3, [r7, #27]

        for (uint32_t j = 0; j < 8; j++) {          // Iterate through the 8 pixels in the column byte
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	e030      	b.n	8002450 <ssd1306_WriteChar+0xd0>
            // Check if the pixel is within the defined FontHeight
            if (j >= Font.FontHeight) {
 80023ee:	797b      	ldrb	r3, [r7, #5]
 80023f0:	461a      	mov	r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d227      	bcs.n	8002448 <ssd1306_WriteChar+0xc8>
                continue; // Don't draw pixels beyond the font's defined height
            }

            // Calculate target pixel coordinates
            uint16_t target_x = SSD1306.CurrentX + i;
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <ssd1306_WriteChar+0x100>)
 80023fa:	881a      	ldrh	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4413      	add	r3, r2
 8002402:	833b      	strh	r3, [r7, #24]
            uint16_t target_y = SSD1306.CurrentY + j;
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <ssd1306_WriteChar+0x100>)
 8002406:	885a      	ldrh	r2, [r3, #2]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4413      	add	r3, r2
 800240e:	82fb      	strh	r3, [r7, #22]

            // Check if the current pixel bit is set in the font data
            if ((column_data >> j) & 0x01) {
 8002410:	7efa      	ldrb	r2, [r7, #27]
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	fa42 f303 	asr.w	r3, r2, r3
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <ssd1306_WriteChar+0xae>
                ssd1306_DrawPixel(target_x, target_y, color); // Draw foreground pixel
 8002420:	7bba      	ldrb	r2, [r7, #14]
 8002422:	8af9      	ldrh	r1, [r7, #22]
 8002424:	8b3b      	ldrh	r3, [r7, #24]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff3c 	bl	80022a4 <ssd1306_DrawPixel>
 800242c:	e00d      	b.n	800244a <ssd1306_WriteChar+0xca>
            } else {
                // Draw background pixel (important to overwrite previous content)
                ssd1306_DrawPixel(target_x, target_y, (SSD1306_COLOR)!color);
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	8af9      	ldrh	r1, [r7, #22]
 800243e:	8b3b      	ldrh	r3, [r7, #24]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff2f 	bl	80022a4 <ssd1306_DrawPixel>
 8002446:	e000      	b.n	800244a <ssd1306_WriteChar+0xca>
                continue; // Don't draw pixels beyond the font's defined height
 8002448:	bf00      	nop
        for (uint32_t j = 0; j < 8; j++) {          // Iterate through the 8 pixels in the column byte
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	3301      	adds	r3, #1
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2b07      	cmp	r3, #7
 8002454:	d9cb      	bls.n	80023ee <ssd1306_WriteChar+0x6e>
    for (uint32_t i = 0; i < Font.FontWidth; i++) { // Iterate through columns
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	793b      	ldrb	r3, [r7, #4]
 800245e:	461a      	mov	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	4293      	cmp	r3, r2
 8002464:	d3bb      	bcc.n	80023de <ssd1306_WriteChar+0x5e>
         //       unless the font data format and this loop are adapted.
         //       For the provided Font7x10_Table, this is likely the intended behavior.
    }

    // Update cursor position for the next character
    SSD1306.CurrentX += Font.FontWidth;
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <ssd1306_WriteChar+0x100>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	793a      	ldrb	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <ssd1306_WriteChar+0x100>)
 8002472:	801a      	strh	r2, [r3, #0]

    return ch; // Return the character that was written
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	372c      	adds	r7, #44	@ 0x2c
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	20000738 	.word	0x20000738

08002484 <ssd1306_WriteString>:

/**
 * @brief Writes a string to the screen buffer.
 */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	1d38      	adds	r0, r7, #4
 800248e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002492:	70fb      	strb	r3, [r7, #3]
    char last_char_written = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
    while (*str) {
 8002498:	e030      	b.n	80024fc <ssd1306_WriteString+0x78>
        // Handle newline character '\n'
        if (*str == '\n') {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d111      	bne.n	80024c6 <ssd1306_WriteString+0x42>
            SSD1306.CurrentX = 0; // Move cursor to beginning of the line
 80024a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	801a      	strh	r2, [r3, #0]
            SSD1306.CurrentY += Font.FontHeight; // Move cursor down one font height
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	797a      	ldrb	r2, [r7, #5]
 80024ae:	4413      	add	r3, r2
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024b4:	805a      	strh	r2, [r3, #2]
            // Optional: Implement screen wrap-around or scrolling if Y exceeds height
            if (SSD1306.CurrentY >= SSD1306_HEIGHT) {
 80024b6:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024b8:	885b      	ldrh	r3, [r3, #2]
 80024ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80024bc:	d91b      	bls.n	80024f6 <ssd1306_WriteString+0x72>
                 SSD1306.CurrentY = 0; // Simple wrap-around to top
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	805a      	strh	r2, [r3, #2]
 80024c4:	e017      	b.n	80024f6 <ssd1306_WriteString+0x72>
            }
        }
        // Handle carriage return '\r' (often ignored or treated like \n)
        else if (*str == '\r') {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b0d      	cmp	r3, #13
 80024cc:	d103      	bne.n	80024d6 <ssd1306_WriteString+0x52>
             SSD1306.CurrentX = 0; // Move cursor to beginning of the line
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <ssd1306_WriteString+0x8c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	e00f      	b.n	80024f6 <ssd1306_WriteString+0x72>
        }
        // Write normal character
        else {
            char written_char = ssd1306_WriteChar(*str, Font, color);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7818      	ldrb	r0, [r3, #0]
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	1d3a      	adds	r2, r7, #4
 80024de:	ca06      	ldmia	r2, {r1, r2}
 80024e0:	f7ff ff4e 	bl	8002380 <ssd1306_WriteChar>
 80024e4:	4603      	mov	r3, r0
 80024e6:	75bb      	strb	r3, [r7, #22]
            if (written_char == 0) {
 80024e8:	7dbb      	ldrb	r3, [r7, #22]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <ssd1306_WriteString+0x6e>
                // Writing failed (likely out of space), stop processing the string
                 SSD1306_LOG("WriteString Error: Failed to write char '%c', stopping.\n", *str);
                return last_char_written; // Return the last char that *was* successfully written
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	e009      	b.n	8002506 <ssd1306_WriteString+0x82>
            }
            last_char_written = written_char;
 80024f2:	7dbb      	ldrb	r3, [r7, #22]
 80024f4:	75fb      	strb	r3, [r7, #23]
        }
        str++; // Move to the next character in the string
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ca      	bne.n	800249a <ssd1306_WriteString+0x16>
    }
    return last_char_written; // Return the last character written from the string
 8002504:	7dfb      	ldrb	r3, [r7, #23]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000738 	.word	0x20000738

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <HAL_MspInit+0x4c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_MspInit+0x4c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_MspInit+0x4c>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_MspInit+0x4c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <NMI_Handler+0x4>

0800256c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <MemManage_Handler+0x4>

0800257c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <BusFault_Handler+0x4>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <UsageFault_Handler+0x4>

0800258c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ba:	f000 ff93 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	@ 0x40
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025ca:	48c2      	ldr	r0, [pc, #776]	@ (80028d4 <TIM5_IRQHandler+0x310>)
 80025cc:	f003 fc36 	bl	8005e3c <HAL_TIM_IRQHandler>
	// -------------------------------------------------------------------------

	// 1. 读取当前编码器计数值
	// 注意：TIM3用于左轮，TIM4用于右轮。编码器模式下，计数器会自动增减，反映方向。
	// 读取后，立即清零计数器，以便下一个控制周期重新计数。
	uint16_t current_count_left = __HAL_TIM_GET_COUNTER(&htim3);
 80025d0:	4bc1      	ldr	r3, [pc, #772]	@ (80028d8 <TIM5_IRQHandler+0x314>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	__HAL_TIM_SET_COUNTER(&htim3, 0); // 将左轮编码器计数器清零
 80025d8:	4bbf      	ldr	r3, [pc, #764]	@ (80028d8 <TIM5_IRQHandler+0x314>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24

	uint16_t current_count_right = __HAL_TIM_GET_COUNTER(&htim4);
 80025e0:	4bbe      	ldr	r3, [pc, #760]	@ (80028dc <TIM5_IRQHandler+0x318>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	867b      	strh	r3, [r7, #50]	@ 0x32
	__HAL_TIM_SET_COUNTER(&htim4, 0); // 将右轮编码器计数器清零
 80025e8:	4bbc      	ldr	r3, [pc, #752]	@ (80028dc <TIM5_IRQHandler+0x318>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24

	// 2. 计算每个控制周期内的编码器计数差值 (delta)
	// 由于计数器已清零，delta就是本次读取到的值。将其转换为int32_t以便处理负值。
	g_encoder_delta_left = (int32_t)current_count_left;
 80025f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80025f2:	4abb      	ldr	r2, [pc, #748]	@ (80028e0 <TIM5_IRQHandler+0x31c>)
 80025f4:	6013      	str	r3, [r2, #0]
	g_encoder_delta_right = (int32_t)current_count_right;
 80025f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025f8:	4aba      	ldr	r2, [pc, #744]	@ (80028e4 <TIM5_IRQHandler+0x320>)
 80025fa:	6013      	str	r3, [r2, #0]

	// 3. 将编码器计数差值转换为轮子转速 (转/秒, RPS)
	// 转速 = (计数差值 / 每转总计数) / 控制周期时间
	g_left_wheel_speed_rps = (float)g_encoder_delta_left / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 80025fc:	4bb8      	ldr	r3, [pc, #736]	@ (80028e0 <TIM5_IRQHandler+0x31c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 80028e8 <TIM5_IRQHandler+0x324>
 800260c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002610:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 80028ec <TIM5_IRQHandler+0x328>
 8002614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002618:	4bb5      	ldr	r3, [pc, #724]	@ (80028f0 <TIM5_IRQHandler+0x32c>)
 800261a:	edc3 7a00 	vstr	s15, [r3]
	g_right_wheel_speed_rps = (float)g_encoder_delta_right / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 800261e:	4bb1      	ldr	r3, [pc, #708]	@ (80028e4 <TIM5_IRQHandler+0x320>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 80028e8 <TIM5_IRQHandler+0x324>
 800262e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002632:	eddf 6aae 	vldr	s13, [pc, #696]	@ 80028ec <TIM5_IRQHandler+0x328>
 8002636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800263a:	4bae      	ldr	r3, [pc, #696]	@ (80028f4 <TIM5_IRQHandler+0x330>)
 800263c:	edc3 7a00 	vstr	s15, [r3]

	// 4. 将轮子转速转换为小车线速度 (米/秒, MPS)
	// 线速度 = 转速 * 车轮周长
	// 车轮周长 = PI * 直径
	float left_wheel_linear_speed_mps = g_left_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 8002640:	4bab      	ldr	r3, [pc, #684]	@ (80028f0 <TIM5_IRQHandler+0x32c>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80028f8 <TIM5_IRQHandler+0x334>
 800264a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float right_wheel_linear_speed_mps = g_right_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 8002652:	4ba8      	ldr	r3, [pc, #672]	@ (80028f4 <TIM5_IRQHandler+0x330>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80028f8 <TIM5_IRQHandler+0x334>
 800265c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002660:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// 5. 计算小车整体的线速度和角速度
	// 小车线速度 (向前/向后) 是左右轮线速度的平均值
	g_robot_linear_speed_mps = (left_wheel_linear_speed_mps + right_wheel_linear_speed_mps) / 2.0f;
 8002664:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002668:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002678:	4ba0      	ldr	r3, [pc, #640]	@ (80028fc <TIM5_IRQHandler+0x338>)
 800267a:	edc3 7a00 	vstr	s15, [r3]
//	g_robot_linear_speed_mps = -g_robot_linear_speed_mps;
	// **重要检查：验证g_robot_linear_speed_mps的符号**
	// 如果小车向前移动时，g_robot_linear_speed_mps 是负值，则需要将其反转
	// 简单测试方法：手动向前推动小车，打印g_robot_linear_speed_mps，看是正还是负。
	// 如果是负，则取消下面一行的注释：
	 g_robot_linear_speed_mps = -g_robot_linear_speed_mps;
 800267e:	4b9f      	ldr	r3, [pc, #636]	@ (80028fc <TIM5_IRQHandler+0x338>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	eef1 7a67 	vneg.f32	s15, s15
 8002688:	4b9c      	ldr	r3, [pc, #624]	@ (80028fc <TIM5_IRQHandler+0x338>)
 800268a:	edc3 7a00 	vstr	s15, [r3]
	 printf("g_robot_linear_speed_mps: %d", g_robot_linear_speed_mps);
 800268e:	4b9b      	ldr	r3, [pc, #620]	@ (80028fc <TIM5_IRQHandler+0x338>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff60 	bl	8000558 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4898      	ldr	r0, [pc, #608]	@ (8002900 <TIM5_IRQHandler+0x33c>)
 800269e:	f005 ffa3 	bl	80085e8 <iprintf>


	// 小车角速度 (原地转弯) 是左右轮线速度的差值除以轮距
	float angular_speed_radps = (right_wheel_linear_speed_mps - left_wheel_linear_speed_mps) / WHEEL_TRACK_M;
 80026a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ae:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002904 <TIM5_IRQHandler+0x340>
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	// 将弧度/秒转换为度/秒
	g_robot_angular_speed_dps = angular_speed_radps * (180.0f / M_PI);
 80026ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026be:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002908 <TIM5_IRQHandler+0x344>
 80026c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c6:	4b91      	ldr	r3, [pc, #580]	@ (800290c <TIM5_IRQHandler+0x348>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 姿态数据处理 (MPU6500) BEGIN
	// -------------------------------------------------------------------------

	// Read raw sensor data from MPU6500
	mpu6500_read_accel_raw(&g_accel_x_raw, &g_accel_y_raw, &g_accel_z_raw);
 80026cc:	4a90      	ldr	r2, [pc, #576]	@ (8002910 <TIM5_IRQHandler+0x34c>)
 80026ce:	4991      	ldr	r1, [pc, #580]	@ (8002914 <TIM5_IRQHandler+0x350>)
 80026d0:	4891      	ldr	r0, [pc, #580]	@ (8002918 <TIM5_IRQHandler+0x354>)
 80026d2:	f7fe fc57 	bl	8000f84 <mpu6500_read_accel_raw>
	mpu6500_read_gyro_raw(&g_gyro_x_raw, &g_gyro_y_raw, &g_gyro_z_raw);
 80026d6:	4a91      	ldr	r2, [pc, #580]	@ (800291c <TIM5_IRQHandler+0x358>)
 80026d8:	4991      	ldr	r1, [pc, #580]	@ (8002920 <TIM5_IRQHandler+0x35c>)
 80026da:	4892      	ldr	r0, [pc, #584]	@ (8002924 <TIM5_IRQHandler+0x360>)
 80026dc:	f7fe fc96 	bl	800100c <mpu6500_read_gyro_raw>

	// Apply bias correction to Gyro raw data
	int16_t gyro_x_corrected_raw = g_gyro_x_raw - g_gyro_x_bias_raw;
 80026e0:	4b90      	ldr	r3, [pc, #576]	@ (8002924 <TIM5_IRQHandler+0x360>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002928 <TIM5_IRQHandler+0x364>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	847b      	strh	r3, [r7, #34]	@ 0x22
	int16_t gyro_y_corrected_raw = g_gyro_y_raw - g_gyro_y_bias_raw;
 80026f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002920 <TIM5_IRQHandler+0x35c>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b8b      	ldr	r3, [pc, #556]	@ (800292c <TIM5_IRQHandler+0x368>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b21b      	sxth	r3, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	b29b      	uxth	r3, r3
 800270a:	843b      	strh	r3, [r7, #32]
	int16_t gyro_z_corrected_raw = g_gyro_z_raw - g_gyro_z_bias_raw;
 800270c:	4b83      	ldr	r3, [pc, #524]	@ (800291c <TIM5_IRQHandler+0x358>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b21b      	sxth	r3, r3
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b86      	ldr	r3, [pc, #536]	@ (8002930 <TIM5_IRQHandler+0x36c>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b21b      	sxth	r3, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	83fb      	strh	r3, [r7, #30]

	// Convert bias-corrected Gyro data and raw Accel data to physical units
	float accel_x_g = (float)g_accel_x_raw / ACCEL_SENSITIVITY_2G;
 8002722:	4b7d      	ldr	r3, [pc, #500]	@ (8002918 <TIM5_IRQHandler+0x354>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b21b      	sxth	r3, r3
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002730:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8002934 <TIM5_IRQHandler+0x370>
 8002734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002738:	edc7 7a06 	vstr	s15, [r7, #24]
	float accel_y_g = (float)g_accel_y_raw / ACCEL_SENSITIVITY_2G;
 800273c:	4b75      	ldr	r3, [pc, #468]	@ (8002914 <TIM5_IRQHandler+0x350>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b21b      	sxth	r3, r3
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002934 <TIM5_IRQHandler+0x370>
 800274e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002752:	edc7 7a05 	vstr	s15, [r7, #20]
	float accel_z_g = (float)g_accel_z_raw / ACCEL_SENSITIVITY_2G;
 8002756:	4b6e      	ldr	r3, [pc, #440]	@ (8002910 <TIM5_IRQHandler+0x34c>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b21b      	sxth	r3, r3
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002764:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002934 <TIM5_IRQHandler+0x370>
 8002768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800276c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	g_gyro_x_dps = (float)gyro_x_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Pitch rate
 8002770:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002938 <TIM5_IRQHandler+0x374>
 8002780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002784:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <TIM5_IRQHandler+0x378>)
 8002786:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_y_dps = (float)gyro_y_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Roll rate
 800278a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002796:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002938 <TIM5_IRQHandler+0x374>
 800279a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800279e:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <TIM5_IRQHandler+0x37c>)
 80027a0:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_z_dps = (float)gyro_z_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Yaw rate
 80027a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b0:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8002938 <TIM5_IRQHandler+0x374>
 80027b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b8:	4b62      	ldr	r3, [pc, #392]	@ (8002944 <TIM5_IRQHandler+0x380>)
 80027ba:	edc3 7a00 	vstr	s15, [r3]

	// Calculate accelerometer angle (Pitch)
	if (accel_z_g == 0.0f) accel_z_g = 0.001f;
 80027be:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	d101      	bne.n	80027d0 <TIM5_IRQHandler+0x20c>
 80027cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002948 <TIM5_IRQHandler+0x384>)
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	g_accel_angle = atan2f(accel_x_g, accel_z_g) * (180.0f / M_PI);
 80027d0:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 80027d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80027d8:	f007 fee2 	bl	800a5a0 <atan2f>
 80027dc:	eef0 7a40 	vmov.f32	s15, s0
 80027e0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002908 <TIM5_IRQHandler+0x344>
 80027e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e8:	4b58      	ldr	r3, [pc, #352]	@ (800294c <TIM5_IRQHandler+0x388>)
 80027ea:	edc3 7a00 	vstr	s15, [r3]
	g_accel_angle -= g_accel_pitch_bias_deg;
 80027ee:	4b58      	ldr	r3, [pc, #352]	@ (8002950 <TIM5_IRQHandler+0x38c>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	4b55      	ldr	r3, [pc, #340]	@ (800294c <TIM5_IRQHandler+0x388>)
 80027f6:	ed93 7a00 	vldr	s14, [r3]
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	4b53      	ldr	r3, [pc, #332]	@ (800294c <TIM5_IRQHandler+0x388>)
 8002800:	edc3 7a00 	vstr	s15, [r3]

	// Sensor fusion (Complementary Filter)
	g_pitch_angle = COMPLEMENTARY_FILTER_KP * (g_pitch_angle + g_gyro_x_dps * CONTROL_LOOP_PERIOD_S) + (1.0f - COMPLEMENTARY_FILTER_KP) * g_accel_angle;
 8002804:	4b4d      	ldr	r3, [pc, #308]	@ (800293c <TIM5_IRQHandler+0x378>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80028ec <TIM5_IRQHandler+0x328>
 800280e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002812:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <TIM5_IRQHandler+0x390>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002958 <TIM5_IRQHandler+0x394>
 8002820:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002824:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 8002958 <TIM5_IRQHandler+0x394>
 8002828:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800282c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002830:	4b46      	ldr	r3, [pc, #280]	@ (800294c <TIM5_IRQHandler+0x388>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	4b45      	ldr	r3, [pc, #276]	@ (8002954 <TIM5_IRQHandler+0x390>)
 8002840:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 速度环 PID 控制 BEGIN
	// -------------------------------------------------------------------------

	// 1. 计算速度误差
	float speed_error = g_target_linear_speed_mps - g_robot_linear_speed_mps;
 8002844:	4b45      	ldr	r3, [pc, #276]	@ (800295c <TIM5_IRQHandler+0x398>)
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <TIM5_IRQHandler+0x338>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002854:	edc7 7a04 	vstr	s15, [r7, #16]

	// 2. 累积积分误差并进行抗积分饱和 (Anti-Windup)
	g_speed_integral_error += speed_error * CONTROL_LOOP_PERIOD_S;
 8002858:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80028ec <TIM5_IRQHandler+0x328>
 800285c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002864:	4b3e      	ldr	r3, [pc, #248]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 8002870:	edc3 7a00 	vstr	s15, [r3]
	// 限制积分项的累积，防止电机长时间饱和导致过冲
	if (g_speed_integral_error > INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = INTEGRAL_ERROR_MAX_ABS;
 8002874:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	dd02      	ble.n	800288e <TIM5_IRQHandler+0x2ca>
 8002888:	4b35      	ldr	r3, [pc, #212]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <TIM5_IRQHandler+0x3a0>)
 800288c:	601a      	str	r2, [r3, #0]
	if (g_speed_integral_error < -INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = -INTEGRAL_ERROR_MAX_ABS;
 800288e:	4b34      	ldr	r3, [pc, #208]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d502      	bpl.n	80028a8 <TIM5_IRQHandler+0x2e4>
 80028a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <TIM5_IRQHandler+0x39c>)
 80028a4:	4a30      	ldr	r2, [pc, #192]	@ (8002968 <TIM5_IRQHandler+0x3a4>)
 80028a6:	601a      	str	r2, [r3, #0]

	// 3. 计算微分项 (使用当前速度的导数，而不是误差的导数，更稳定)
	// 速度的导数就是加速度
	float speed_derivative_term = (g_robot_linear_speed_mps - g_speed_prev_linear_speed_mps) / CONTROL_LOOP_PERIOD_S;
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <TIM5_IRQHandler+0x338>)
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <TIM5_IRQHandler+0x3a8>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80028ec <TIM5_IRQHandler+0x328>
 80028bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c0:	edc7 7a03 	vstr	s15, [r7, #12]
	g_speed_prev_linear_speed_mps = g_robot_linear_speed_mps; // 更新上一次速度
 80028c4:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <TIM5_IRQHandler+0x338>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a28      	ldr	r2, [pc, #160]	@ (800296c <TIM5_IRQHandler+0x3a8>)
 80028ca:	6013      	str	r3, [r2, #0]

	// 4. 计算速度环 PID 输出
	// 这里的输出是期望的倾斜角度（度）
	float speed_pid_output = g_speed_kp * speed_error +
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <TIM5_IRQHandler+0x3ac>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	e04f      	b.n	8002974 <TIM5_IRQHandler+0x3b0>
 80028d4:	20000874 	.word	0x20000874
 80028d8:	200007e4 	.word	0x200007e4
 80028dc:	2000082c 	.word	0x2000082c
 80028e0:	20000770 	.word	0x20000770
 80028e4:	20000774 	.word	0x20000774
 80028e8:	47f00000 	.word	0x47f00000
 80028ec:	3c23d70a 	.word	0x3c23d70a
 80028f0:	20000778 	.word	0x20000778
 80028f4:	2000077c 	.word	0x2000077c
 80028f8:	3e5692c3 	.word	0x3e5692c3
 80028fc:	20000780 	.word	0x20000780
 8002900:	0800aef0 	.word	0x0800aef0
 8002904:	3e3126e9 	.word	0x3e3126e9
 8002908:	42652ee0 	.word	0x42652ee0
 800290c:	20000784 	.word	0x20000784
 8002910:	20000742 	.word	0x20000742
 8002914:	20000740 	.word	0x20000740
 8002918:	2000073e 	.word	0x2000073e
 800291c:	20000748 	.word	0x20000748
 8002920:	20000746 	.word	0x20000746
 8002924:	20000744 	.word	0x20000744
 8002928:	2000074a 	.word	0x2000074a
 800292c:	2000074c 	.word	0x2000074c
 8002930:	2000074e 	.word	0x2000074e
 8002934:	46800000 	.word	0x46800000
 8002938:	41833333 	.word	0x41833333
 800293c:	2000075c 	.word	0x2000075c
 8002940:	20000760 	.word	0x20000760
 8002944:	20000764 	.word	0x20000764
 8002948:	3a83126f 	.word	0x3a83126f
 800294c:	20000758 	.word	0x20000758
 8002950:	20000750 	.word	0x20000750
 8002954:	20000754 	.word	0x20000754
 8002958:	3f7ae148 	.word	0x3f7ae148
 800295c:	20000788 	.word	0x20000788
 8002960:	20000790 	.word	0x20000790
 8002964:	40a00000 	.word	0x40a00000
 8002968:	c0a00000 	.word	0xc0a00000
 800296c:	20000794 	.word	0x20000794
 8002970:	20000010 	.word	0x20000010
 8002974:	edd7 7a04 	vldr	s15, [r7, #16]
 8002978:	ee27 7a27 	vmul.f32	s14, s14, s15
	                         g_speed_ki * g_speed_integral_error - // 积分项
 800297c:	4b56      	ldr	r3, [pc, #344]	@ (8002ad8 <TIM5_IRQHandler+0x514>)
 800297e:	edd3 6a00 	vldr	s13, [r3]
 8002982:	4b56      	ldr	r3, [pc, #344]	@ (8002adc <TIM5_IRQHandler+0x518>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 800298c:	ee37 7a27 	vadd.f32	s14, s14, s15
	                         g_speed_kd * speed_derivative_term;   // 微分项，注意这里是负号，因为我们希望通过反向的加速度来减小速度偏差
 8002990:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <TIM5_IRQHandler+0x51c>)
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	edd7 7a03 	vldr	s15, [r7, #12]
 800299a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	// 5. 限制速度环PID输出，作为平衡环的目标倾斜角度
	// 确保目标角度不会过大，防止小车摔倒
	if (speed_pid_output > SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = SPEED_PID_OUTPUT_MAX_DEG;
 80029a6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80029aa:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	dd01      	ble.n	80029bc <TIM5_IRQHandler+0x3f8>
 80029b8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <TIM5_IRQHandler+0x520>)
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (speed_pid_output < -SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = -SPEED_PID_OUTPUT_MAX_DEG;
 80029bc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80029c0:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80029c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	d501      	bpl.n	80029d2 <TIM5_IRQHandler+0x40e>
 80029ce:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <TIM5_IRQHandler+0x524>)
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38

	// 将速度环的输出作为平衡环的目标角度
	// 如果小车向前加速，speed_error为负，speed_pid_output为负，则g_target_pitch_angle为负，
	// 意味着期望小车向后倾斜以减速。
	g_target_pitch_angle = speed_pid_output;
 80029d2:	4a46      	ldr	r2, [pc, #280]	@ (8002aec <TIM5_IRQHandler+0x528>)
 80029d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d6:	6013      	str	r3, [r2, #0]

	// PID Control Calculation
	// PID inputs: Pitch error (current angle - target angle) and Pitch rate (g_gyro_x_dps)

	// Note: g_target_pitch_angle is now dynamically set by the speed loop
	float pitch_error = g_target_pitch_angle - g_pitch_angle; // Angle error for P and I terms
 80029d8:	4b44      	ldr	r3, [pc, #272]	@ (8002aec <TIM5_IRQHandler+0x528>)
 80029da:	ed93 7a00 	vldr	s14, [r3]
 80029de:	4b44      	ldr	r3, [pc, #272]	@ (8002af0 <TIM5_IRQHandler+0x52c>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e8:	edc7 7a02 	vstr	s15, [r7, #8]

	// **关键修正：平衡环D项符号**
	// 如果小车向前倾斜 (g_gyro_x_dps > 0)，需要向后推以减小角速度，所以D项贡献应为负。
	float control_output = g_balance_kp * pitch_error - g_balance_kd * g_gyro_x_dps; // ***重要：g_balance_kd前加负号***
 80029ec:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <TIM5_IRQHandler+0x530>)
 80029ee:	ed93 7a00 	vldr	s14, [r3]
 80029f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fa:	4b3f      	ldr	r3, [pc, #252]	@ (8002af8 <TIM5_IRQHandler+0x534>)
 80029fc:	edd3 6a00 	vldr	s13, [r3]
 8002a00:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <TIM5_IRQHandler+0x538>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0e:	edc7 7a01 	vstr	s15, [r7, #4]

	// Map Control Output to Motor Speed Percentage
	int16_t motor_speed = (int16_t)control_output;
 8002a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1a:	ee17 3a90 	vmov	r3, s15
 8002a1e:	86fb      	strh	r3, [r7, #54]	@ 0x36


	// **处理电机最小启动阈值（死区补偿）**
	// 如果计算出的速度在0和最小启动阈值之间（非零），将其提升到最小阈值
	if (motor_speed > 0 && motor_speed < MIN_MOTOR_SPEED_PERCENTAGE) {
 8002a20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	dd06      	ble.n	8002a36 <TIM5_IRQHandler+0x472>
 8002a28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	dc02      	bgt.n	8002a36 <TIM5_IRQHandler+0x472>
	    motor_speed = MIN_MOTOR_SPEED_PERCENTAGE;
 8002a30:	2305      	movs	r3, #5
 8002a32:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002a34:	e00b      	b.n	8002a4e <TIM5_IRQHandler+0x48a>
	} else if (motor_speed < 0 && motor_speed > -MIN_MOTOR_SPEED_PERCENTAGE) {
 8002a36:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da07      	bge.n	8002a4e <TIM5_IRQHandler+0x48a>
 8002a3e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a42:	f113 0f04 	cmn.w	r3, #4
 8002a46:	db02      	blt.n	8002a4e <TIM5_IRQHandler+0x48a>
	    motor_speed = -MIN_MOTOR_SPEED_PERCENTAGE;
 8002a48:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002a4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	// 如果control_output接近0，则强制motor_speed为0，防止死区补偿导致在静止时抖动
	// 注意：这里使用 fabs(control_output) < FLOAT_ZERO_THRESHOLD 进行浮点数比较
	if (fabs(control_output) < FLOAT_ZERO_THRESHOLD) {
 8002a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a52:	eef0 7ae7 	vabs.f32	s15, s15
 8002a56:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b00 <TIM5_IRQHandler+0x53c>
 8002a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	d501      	bpl.n	8002a68 <TIM5_IRQHandler+0x4a4>
	    motor_speed = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}


	// Apply motor speed limits (-100 to 100 percent)
	if (motor_speed > 100) motor_speed = 100;
 8002a68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	dd01      	ble.n	8002a74 <TIM5_IRQHandler+0x4b0>
 8002a70:	2364      	movs	r3, #100	@ 0x64
 8002a72:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (motor_speed < -100) motor_speed = -100;
 8002a74:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002a78:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002a7c:	da02      	bge.n	8002a84 <TIM5_IRQHandler+0x4c0>
 8002a7e:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8002a82:	86fb      	strh	r3, [r7, #54]	@ 0x36

	// Basic Safety Check: Stop motor if tilt angle exceeds a safe threshold
	float safety_angle_threshold = 30.0f; // Degrees (adjust as needed, e.g., 30 degrees)
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <TIM5_IRQHandler+0x540>)
 8002a86:	603b      	str	r3, [r7, #0]

	if (fabs(g_pitch_angle) > safety_angle_threshold) {
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <TIM5_IRQHandler+0x52c>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a92:	ed97 7a00 	vldr	s14, [r7]
 8002a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	d506      	bpl.n	8002aae <TIM5_IRQHandler+0x4ea>
	    // Stop motors if the robot is falling
	    g_motor_output_left = 0;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <TIM5_IRQHandler+0x544>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
	    g_motor_output_right = 0;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <TIM5_IRQHandler+0x548>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <TIM5_IRQHandler+0x4f6>
	    // TODO: Add other safety actions like an alarm or state change
	} else {
	    // If within safe angle, apply the calculated motor speed
	    g_motor_output_left = motor_speed;
 8002aae:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <TIM5_IRQHandler+0x544>)
 8002ab0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ab2:	8013      	strh	r3, [r2, #0]
	    g_motor_output_right = motor_speed;
 8002ab4:	4a15      	ldr	r2, [pc, #84]	@ (8002b0c <TIM5_IRQHandler+0x548>)
 8002ab6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ab8:	8013      	strh	r3, [r2, #0]
	}

	// Apply Motor Speed using the Motor module functions
	Car_Move(g_motor_output_left, g_motor_output_right);
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <TIM5_IRQHandler+0x544>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <TIM5_IRQHandler+0x548>)
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	b212      	sxth	r2, r2
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa17 	bl	8001efc <Car_Move>

	// --- PID control calculation and Motor application END ---

  /* USER CODE END TIM5_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	3740      	adds	r7, #64	@ 0x40
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000014 	.word	0x20000014
 8002adc:	20000790 	.word	0x20000790
 8002ae0:	2000078c 	.word	0x2000078c
 8002ae4:	41700000 	.word	0x41700000
 8002ae8:	c1700000 	.word	0xc1700000
 8002aec:	20000768 	.word	0x20000768
 8002af0:	20000754 	.word	0x20000754
 8002af4:	20000008 	.word	0x20000008
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	2000075c 	.word	0x2000075c
 8002b00:	3a83126f 	.word	0x3a83126f
 8002b04:	41f00000 	.word	0x41f00000
 8002b08:	2000076c 	.word	0x2000076c
 8002b0c:	2000076e 	.word	0x2000076e

08002b10 <USART6_IRQHandler>:
/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <USART6_IRQHandler+0x10>)
 8002b16:	f004 f8e3 	bl	8006ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000904 	.word	0x20000904

08002b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return 1;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_kill>:

int _kill(int pid, int sig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b3e:	f005 feed 	bl	800891c <__errno>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2216      	movs	r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
  return -1;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <_exit>:

void _exit (int status)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffe7 	bl	8002b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <_exit+0x12>

08002b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e00a      	b.n	8002b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b7c:	f3af 8000 	nop.w
 8002b80:	4601      	mov	r1, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	60ba      	str	r2, [r7, #8]
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf0      	blt.n	8002b7c <_read+0x12>
  }

  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e009      	b.n	8002bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fdb8 	bl	8001734 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbf1      	blt.n	8002bb6 <_write+0x12>
  }
  return len;
 8002bd2:	687b      	ldr	r3, [r7, #4]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_close>:

int _close(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c04:	605a      	str	r2, [r3, #4]
  return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_isatty>:

int _isatty(int file)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c1c:	2301      	movs	r3, #1
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f005 fe52 	bl	800891c <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20018000 	.word	0x20018000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	20000798 	.word	0x20000798
 8002cac:	20000aa0 	.word	0x20000aa0

08002cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <SystemInit+0x20>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <SystemInit+0x20>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b096      	sub	sp, #88	@ 0x58
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	615a      	str	r2, [r3, #20]
 8002d04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2220      	movs	r2, #32
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f005 fdb3 	bl	8008878 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d12:	4b51      	ldr	r3, [pc, #324]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d14:	4a51      	ldr	r2, [pc, #324]	@ (8002e5c <MX_TIM1_Init+0x188>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002d18:	4b4f      	ldr	r3, [pc, #316]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d1a:	2253      	movs	r2, #83	@ 0x53
 8002d1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 8002d24:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d26:	f240 3247 	movw	r2, #839	@ 0x347
 8002d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d38:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d3e:	4846      	ldr	r0, [pc, #280]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d40:	f002 fd8c 	bl	800585c <HAL_TIM_Base_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002d4a:	f7fe fff9 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d58:	4619      	mov	r1, r3
 8002d5a:	483f      	ldr	r0, [pc, #252]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d5c:	f003 fa20 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002d66:	f7fe ffeb 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d6a:	483b      	ldr	r0, [pc, #236]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d6c:	f002 fe28 	bl	80059c0 <HAL_TIM_PWM_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002d76:	f7fe ffe3 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d86:	4619      	mov	r1, r3
 8002d88:	4833      	ldr	r0, [pc, #204]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002d8a:	f003 fdd5 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002d94:	f7fe ffd4 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d98:	2360      	movs	r3, #96	@ 0x60
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002da4:	2300      	movs	r3, #0
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db8:	2200      	movs	r2, #0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4826      	ldr	r0, [pc, #152]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002dbe:	f003 f92d 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002dc8:	f7fe ffba 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4820      	ldr	r0, [pc, #128]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002dd6:	f003 f921 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002de0:	f7fe ffae 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de8:	2208      	movs	r2, #8
 8002dea:	4619      	mov	r1, r3
 8002dec:	481a      	ldr	r0, [pc, #104]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002dee:	f003 f915 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002df8:	f7fe ffa2 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e00:	220c      	movs	r2, #12
 8002e02:	4619      	mov	r1, r3
 8002e04:	4814      	ldr	r0, [pc, #80]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002e06:	f003 f909 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002e10:	f7fe ff96 	bl	8001d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002e2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002e3a:	f003 fdeb 	bl	8006a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002e44:	f7fe ff7c 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e48:	4803      	ldr	r0, [pc, #12]	@ (8002e58 <MX_TIM1_Init+0x184>)
 8002e4a:	f000 f9bb 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002e4e:	bf00      	nop
 8002e50:	3758      	adds	r7, #88	@ 0x58
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000079c 	.word	0x2000079c
 8002e5c:	40010000 	.word	0x40010000

08002e60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	@ 0x30
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	2224      	movs	r2, #36	@ 0x24
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 fd02 	bl	8008878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e7e:	4a21      	ldr	r2, [pc, #132]	@ (8002f04 <MX_TIM3_Init+0xa4>)
 8002e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e82:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002ece:	f002 fe81 	bl	8005bd4 <HAL_TIM_Encoder_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002ed8:	f7fe ff32 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <MX_TIM3_Init+0xa0>)
 8002eea:	f003 fd25 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ef4:	f7fe ff24 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3730      	adds	r7, #48	@ 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200007e4 	.word	0x200007e4
 8002f04:	40000400 	.word	0x40000400

08002f08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	@ 0x30
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 fcae 	bl	8008878 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f26:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <MX_TIM4_Init+0xa4>)
 8002f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f52:	2301      	movs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f76:	f002 fe2d 	bl	8005bd4 <HAL_TIM_Encoder_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f80:	f7fe fede 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_TIM4_Init+0xa0>)
 8002f92:	f003 fcd1 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f9c:	f7fe fed0 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3730      	adds	r7, #48	@ 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000082c 	.word	0x2000082c
 8002fac:	40000800 	.word	0x40000800

08002fb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fce:	4a1e      	ldr	r2, [pc, #120]	@ (8003048 <MX_TIM5_Init+0x98>)
 8002fd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fd4:	2253      	movs	r2, #83	@ 0x53
 8002fd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8002fde:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fe0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002fe4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fec:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ff2:	4814      	ldr	r0, [pc, #80]	@ (8003044 <MX_TIM5_Init+0x94>)
 8002ff4:	f002 fc32 	bl	800585c <HAL_TIM_Base_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002ffe:	f7fe fe9f 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003008:	f107 0308 	add.w	r3, r7, #8
 800300c:	4619      	mov	r1, r3
 800300e:	480d      	ldr	r0, [pc, #52]	@ (8003044 <MX_TIM5_Init+0x94>)
 8003010:	f003 f8c6 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800301a:	f7fe fe91 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003026:	463b      	mov	r3, r7
 8003028:	4619      	mov	r1, r3
 800302a:	4806      	ldr	r0, [pc, #24]	@ (8003044 <MX_TIM5_Init+0x94>)
 800302c:	f003 fc84 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003036:	f7fe fe83 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000874 	.word	0x20000874
 8003048:	40000c00 	.word	0x40000c00

0800304c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <HAL_TIM_Base_MspInit+0x70>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10e      	bne.n	800307c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	4a16      	ldr	r2, [pc, #88]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6453      	str	r3, [r2, #68]	@ 0x44
 800306e:	4b14      	ldr	r3, [pc, #80]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800307a:	e01a      	b.n	80030b2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a10      	ldr	r2, [pc, #64]	@ (80030c4 <HAL_TIM_Base_MspInit+0x78>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d115      	bne.n	80030b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_TIM_Base_MspInit+0x74>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2032      	movs	r0, #50	@ 0x32
 80030a8:	f000 fb5f 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030ac:	2032      	movs	r0, #50	@ 0x32
 80030ae:	f000 fb78 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40000c00 	.word	0x40000c00

080030c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	@ 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a32      	ldr	r2, [pc, #200]	@ (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d12c      	bne.n	8003144 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	4b31      	ldr	r3, [pc, #196]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fa:	4b2e      	ldr	r3, [pc, #184]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a29      	ldr	r2, [pc, #164]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003122:	23c0      	movs	r3, #192	@ 0xc0
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003132:	2302      	movs	r3, #2
 8003134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 031c 	add.w	r3, r7, #28
 800313a:	4619      	mov	r1, r3
 800313c:	481e      	ldr	r0, [pc, #120]	@ (80031b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800313e:	f000 fbeb 	bl	8003918 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003142:	e030      	b.n	80031a6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <HAL_TIM_Encoder_MspInit+0xf4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d12b      	bne.n	80031a6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a10      	ldr	r2, [pc, #64]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003186:	23c0      	movs	r3, #192	@ 0xc0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003196:	2302      	movs	r3, #2
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4807      	ldr	r0, [pc, #28]	@ (80031c0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80031a2:	f000 fbb9 	bl	8003918 <HAL_GPIO_Init>
}
 80031a6:	bf00      	nop
 80031a8:	3730      	adds	r7, #48	@ 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40020400 	.word	0x40020400

080031c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a12      	ldr	r2, [pc, #72]	@ (800322c <HAL_TIM_MspPostInit+0x68>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d11e      	bne.n	8003224 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_TIM_MspPostInit+0x6c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <HAL_TIM_MspPostInit+0x6c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_TIM_MspPostInit+0x6c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003202:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003214:	2301      	movs	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	4619      	mov	r1, r3
 800321e:	4805      	ldr	r0, [pc, #20]	@ (8003234 <HAL_TIM_MspPostInit+0x70>)
 8003220:	f000 fb7a 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003224:	bf00      	nop
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40010000 	.word	0x40010000
 8003230:	40023800 	.word	0x40023800
 8003234:	40020000 	.word	0x40020000

08003238 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 800323e:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <MX_USART2_UART_Init+0x50>)
 8003240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 8003244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 800325e:	220c      	movs	r2, #12
 8003260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800326e:	4805      	ldr	r0, [pc, #20]	@ (8003284 <MX_USART2_UART_Init+0x4c>)
 8003270:	f003 fc36 	bl	8006ae0 <HAL_UART_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800327a:	f7fe fd61 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200008bc 	.word	0x200008bc
 8003288:	40004400 	.word	0x40004400

0800328c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003290:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 8003292:	4a12      	ldr	r2, [pc, #72]	@ (80032dc <MX_USART6_UART_Init+0x50>)
 8003294:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 8003298:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800329c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800329e:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032b0:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032b2:	220c      	movs	r2, #12
 80032b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032b6:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032bc:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032c2:	4805      	ldr	r0, [pc, #20]	@ (80032d8 <MX_USART6_UART_Init+0x4c>)
 80032c4:	f003 fc0c 	bl	8006ae0 <HAL_UART_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80032ce:	f7fe fd37 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000904 	.word	0x20000904
 80032dc:	40011400 	.word	0x40011400

080032e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a36      	ldr	r2, [pc, #216]	@ (80033d8 <HAL_UART_MspInit+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d12c      	bne.n	800335c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	4a34      	ldr	r2, [pc, #208]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	6413      	str	r3, [r2, #64]	@ 0x40
 8003312:	4b32      	ldr	r3, [pc, #200]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
 800332e:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800333a:	230c      	movs	r3, #12
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800334a:	2307      	movs	r3, #7
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	4822      	ldr	r0, [pc, #136]	@ (80033e0 <HAL_UART_MspInit+0x100>)
 8003356:	f000 fadf 	bl	8003918 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800335a:	e038      	b.n	80033ce <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a20      	ldr	r2, [pc, #128]	@ (80033e4 <HAL_UART_MspInit+0x104>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d133      	bne.n	80033ce <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003370:	f043 0320 	orr.w	r3, r3, #32
 8003374:	6453      	str	r3, [r2, #68]	@ 0x44
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_UART_MspInit+0xfc>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800339e:	23c0      	movs	r3, #192	@ 0xc0
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033ae:	2308      	movs	r3, #8
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4619      	mov	r1, r3
 80033b8:	480b      	ldr	r0, [pc, #44]	@ (80033e8 <HAL_UART_MspInit+0x108>)
 80033ba:	f000 faad 	bl	8003918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2101      	movs	r1, #1
 80033c2:	2047      	movs	r0, #71	@ 0x47
 80033c4:	f000 f9d1 	bl	800376a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80033c8:	2047      	movs	r0, #71	@ 0x47
 80033ca:	f000 f9ea 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3730      	adds	r7, #48	@ 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40004400 	.word	0x40004400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40011400 	.word	0x40011400
 80033e8:	40020800 	.word	0x40020800

080033ec <Reset_Handler>:
 80033ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003424 <LoopFillZerobss+0xe>
 80033f0:	f7ff fc5e 	bl	8002cb0 <SystemInit>
 80033f4:	480c      	ldr	r0, [pc, #48]	@ (8003428 <LoopFillZerobss+0x12>)
 80033f6:	490d      	ldr	r1, [pc, #52]	@ (800342c <LoopFillZerobss+0x16>)
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <LoopFillZerobss+0x1a>)
 80033fa:	2300      	movs	r3, #0
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:
 80033fe:	58d4      	ldr	r4, [r2, r3]
 8003400:	50c4      	str	r4, [r0, r3]
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:
 8003404:	18c4      	adds	r4, r0, r3
 8003406:	428c      	cmp	r4, r1
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <LoopFillZerobss+0x1e>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	@ (8003438 <LoopFillZerobss+0x22>)
 800340e:	2300      	movs	r3, #0
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:
 8003416:	42a2      	cmp	r2, r4
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>
 800341a:	f005 fa85 	bl	8008928 <__libc_init_array>
 800341e:	f7fe fa8f 	bl	8001940 <main>
 8003422:	4770      	bx	lr
 8003424:	20018000 	.word	0x20018000
 8003428:	20000000 	.word	0x20000000
 800342c:	200001ec 	.word	0x200001ec
 8003430:	0800b584 	.word	0x0800b584
 8003434:	200001ec 	.word	0x200001ec
 8003438:	20000a9c 	.word	0x20000a9c

0800343c <ADC_IRQHandler>:
 800343c:	e7fe      	b.n	800343c <ADC_IRQHandler>
	...

08003440 <HAL_Init>:
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
 8003444:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0d      	ldr	r2, [pc, #52]	@ (8003480 <HAL_Init+0x40>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_Init+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	@ (8003480 <HAL_Init+0x40>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_Init+0x40>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	2003      	movs	r0, #3
 800346a:	f000 f973 	bl	8003754 <HAL_NVIC_SetPriorityGrouping>
 800346e:	2000      	movs	r0, #0
 8003470:	f000 f808 	bl	8003484 <HAL_InitTick>
 8003474:	f7ff f84e 	bl	8002514 <HAL_MspInit>
 8003478:	2300      	movs	r3, #0
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_InitTick>:
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <HAL_InitTick+0x54>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_InitTick+0x58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800349a:	fbb3 f3f1 	udiv	r3, r3, r1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f999 	bl	80037da <HAL_SYSTICK_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_InitTick+0x2e>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00e      	b.n	80034d0 <HAL_InitTick+0x4c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d80a      	bhi.n	80034ce <HAL_InitTick+0x4a>
 80034b8:	2200      	movs	r2, #0
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f000 f953 	bl	800376a <HAL_NVIC_SetPriority>
 80034c4:	4a06      	ldr	r2, [pc, #24]	@ (80034e0 <HAL_InitTick+0x5c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_InitTick+0x4c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000018 	.word	0x20000018
 80034dc:	20000020 	.word	0x20000020
 80034e0:	2000001c 	.word	0x2000001c

080034e4 <HAL_IncTick>:
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_IncTick+0x20>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_IncTick+0x24>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <HAL_IncTick+0x24>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000020 	.word	0x20000020
 8003508:	2000094c 	.word	0x2000094c

0800350c <HAL_GetTick>:
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <HAL_GetTick+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000094c 	.word	0x2000094c

08003524 <HAL_Delay>:
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	f7ff ffee 	bl	800350c <HAL_GetTick>
 8003530:	60b8      	str	r0, [r7, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d005      	beq.n	800354a <HAL_Delay+0x26>
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_Delay+0x44>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	bf00      	nop
 800354c:	f7ff ffde 	bl	800350c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d8f7      	bhi.n	800354c <HAL_Delay+0x28>
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000020 	.word	0x20000020

0800356c <__NVIC_SetPriorityGrouping>:
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	021a      	lsls	r2, r3, #8
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4a04      	ldr	r2, [pc, #16]	@ (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60d3      	str	r3, [r2, #12]
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_GetPriorityGrouping>:
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <__NVIC_GetPriorityGrouping+0x18>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_EnableIRQ>:
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db0b      	blt.n	80035fa <__NVIC_EnableIRQ+0x2a>
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4907      	ldr	r1, [pc, #28]	@ (8003608 <__NVIC_EnableIRQ+0x38>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2001      	movs	r0, #1
 80035f2:	fa00 f202 	lsl.w	r2, r0, r2
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_DisableIRQ>:
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db12      	blt.n	8003644 <__NVIC_DisableIRQ+0x38>
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	490a      	ldr	r1, [pc, #40]	@ (8003650 <__NVIC_DisableIRQ+0x44>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	3320      	adds	r3, #32
 8003634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	bf00      	nop
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100

08003654 <__NVIC_SetPriority>:
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	2b00      	cmp	r3, #0
 8003666:	db0a      	blt.n	800367e <__NVIC_SetPriority+0x2a>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	490c      	ldr	r1, [pc, #48]	@ (80036a0 <__NVIC_SetPriority+0x4c>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	440b      	add	r3, r1
 8003678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800367c:	e00a      	b.n	8003694 <__NVIC_SetPriority+0x40>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4908      	ldr	r1, [pc, #32]	@ (80036a4 <__NVIC_SetPriority+0x50>)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	3b04      	subs	r3, #4
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	440b      	add	r3, r1
 8003692:	761a      	strb	r2, [r3, #24]
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000e100 	.word	0xe000e100
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <NVIC_EncodePriority>:
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	@ 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f1c3 0307 	rsb	r3, r3, #7
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf28      	it	cs
 80036c6:	2304      	movcs	r3, #4
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d902      	bls.n	80036d8 <NVIC_EncodePriority+0x30>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3b03      	subs	r3, #3
 80036d6:	e000      	b.n	80036da <NVIC_EncodePriority+0x32>
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	401a      	ands	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	409a      	lsls	r2, r3
 80036f0:	f04f 31ff 	mov.w	r1, #4294967295
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	43d9      	mvns	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	400b      	ands	r3, r1
 8003700:	4313      	orrs	r3, r2
 8003702:	4618      	mov	r0, r3
 8003704:	3724      	adds	r7, #36	@ 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <SysTick_Config>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003720:	d301      	bcc.n	8003726 <SysTick_Config+0x16>
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <SysTick_Config+0x36>
 8003726:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <SysTick_Config+0x40>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	210f      	movs	r1, #15
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f7ff ff8e 	bl	8003654 <__NVIC_SetPriority>
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <SysTick_Config+0x40>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <SysTick_Config+0x40>)
 8003740:	2207      	movs	r2, #7
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000e010 	.word	0xe000e010

08003754 <HAL_NVIC_SetPriorityGrouping>:
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff05 	bl	800356c <__NVIC_SetPriorityGrouping>
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_SetPriority>:
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f7ff ff1a 	bl	80035b4 <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff8e 	bl	80036a8 <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5d 	bl	8003654 <__NVIC_SetPriority>
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff0d 	bl	80035d0 <__NVIC_EnableIRQ>
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_DisableIRQ>:
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff1d 	bl	800360c <__NVIC_DisableIRQ>
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff94 	bl	8003710 <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_DMA_Abort>:
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	f7ff fe84 	bl	800350c <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d008      	beq.n	8003824 <HAL_DMA_Abort+0x32>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003820:	2301      	movs	r3, #1
 8003822:	e052      	b.n	80038ca <HAL_DMA_Abort+0xd8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0216 	bic.w	r2, r2, #22
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <HAL_DMA_Abort+0x62>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_DMA_Abort+0x72>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0208 	bic.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e013      	b.n	800389e <HAL_DMA_Abort+0xac>
 8003876:	f7ff fe49 	bl	800350c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b05      	cmp	r3, #5
 8003882:	d90c      	bls.n	800389e <HAL_DMA_Abort+0xac>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800389a:	2303      	movs	r3, #3
 800389c:	e015      	b.n	80038ca <HAL_DMA_Abort+0xd8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e4      	bne.n	8003876 <HAL_DMA_Abort+0x84>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	223f      	movs	r2, #63	@ 0x3f
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80038c8:	2300      	movs	r3, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_DMA_Abort_IT>:
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x1e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00c      	b.n	800390a <HAL_DMA_Abort_IT+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2205      	movs	r2, #5
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	2300      	movs	r3, #0
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <HAL_GPIO_Init>:
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e159      	b.n	8003be8 <HAL_GPIO_Init+0x2d0>
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	f040 8148 	bne.w	8003be2 <HAL_GPIO_Init+0x2ca>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d005      	beq.n	800396a <HAL_GPIO_Init+0x52>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d130      	bne.n	80039cc <HAL_GPIO_Init+0xb4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0201 	and.w	r2, r3, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d017      	beq.n	8003a08 <HAL_GPIO_Init+0xf0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d123      	bne.n	8003a5c <HAL_GPIO_Init+0x144>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	08da      	lsrs	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3208      	adds	r2, #8
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a2 	beq.w	8003be2 <HAL_GPIO_Init+0x2ca>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b57      	ldr	r3, [pc, #348]	@ (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	4a56      	ldr	r2, [pc, #344]	@ (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aae:	4b54      	ldr	r3, [pc, #336]	@ (8003c00 <HAL_GPIO_Init+0x2e8>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a52      	ldr	r2, [pc, #328]	@ (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	@ (8003c08 <HAL_GPIO_Init+0x2f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_Init+0x202>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a48      	ldr	r2, [pc, #288]	@ (8003c0c <HAL_GPIO_Init+0x2f4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x1fe>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a47      	ldr	r2, [pc, #284]	@ (8003c10 <HAL_GPIO_Init+0x2f8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_Init+0x1fa>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a46      	ldr	r2, [pc, #280]	@ (8003c14 <HAL_GPIO_Init+0x2fc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x1f6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a45      	ldr	r2, [pc, #276]	@ (8003c18 <HAL_GPIO_Init+0x300>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_Init+0x1f2>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e008      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	e006      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e004      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e002      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_GPIO_Init+0x204>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f002 0203 	and.w	r2, r2, #3
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	4093      	lsls	r3, r2
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	4935      	ldr	r1, [pc, #212]	@ (8003c04 <HAL_GPIO_Init+0x2ec>)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b3a:	4b38      	ldr	r3, [pc, #224]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x246>
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6093      	str	r3, [r2, #8]
 8003b64:	4b2d      	ldr	r3, [pc, #180]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x270>
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	4a24      	ldr	r2, [pc, #144]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	60d3      	str	r3, [r2, #12]
 8003b8e:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x29a>
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6053      	str	r3, [r2, #4]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2c4>
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c1c <HAL_GPIO_Init+0x304>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	f67f aea2 	bls.w	8003934 <HAL_GPIO_Init+0x1c>
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3724      	adds	r7, #36	@ 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020800 	.word	0x40020800
 8003c14:	40020c00 	.word	0x40020c00
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_WritePin>:
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_GPIO_TogglePin>:
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	807b      	strh	r3, [r7, #2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	041a      	lsls	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	400b      	ands	r3, r1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_I2C_Init>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Init+0x12>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e12b      	b.n	8003ef2 <HAL_I2C_Init+0x26a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_I2C_Init+0x2c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd fcb2 	bl	8001618 <HAL_I2C_MspInit>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2224      	movs	r2, #36	@ 0x24
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f001 fd8e 	bl	800580c <HAL_RCC_GetPCLK1Freq>
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a81      	ldr	r2, [pc, #516]	@ (8003efc <HAL_I2C_Init+0x274>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d807      	bhi.n	8003d0c <HAL_I2C_Init+0x84>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a80      	ldr	r2, [pc, #512]	@ (8003f00 <HAL_I2C_Init+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	bf94      	ite	ls
 8003d04:	2301      	movls	r3, #1
 8003d06:	2300      	movhi	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e006      	b.n	8003d1a <HAL_I2C_Init+0x92>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f04 <HAL_I2C_Init+0x27c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bf94      	ite	ls
 8003d14:	2301      	movls	r3, #1
 8003d16:	2300      	movhi	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Init+0x9a>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0e7      	b.n	8003ef2 <HAL_I2C_Init+0x26a>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a78      	ldr	r2, [pc, #480]	@ (8003f08 <HAL_I2C_Init+0x280>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <HAL_I2C_Init+0x274>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d802      	bhi.n	8003d5c <HAL_I2C_Init+0xd4>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	e009      	b.n	8003d70 <HAL_I2C_Init+0xe8>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	4a69      	ldr	r2, [pc, #420]	@ (8003f0c <HAL_I2C_Init+0x284>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	3301      	adds	r3, #1
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6213      	str	r3, [r2, #32]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	495c      	ldr	r1, [pc, #368]	@ (8003efc <HAL_I2C_Init+0x274>)
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	d819      	bhi.n	8003dc4 <HAL_I2C_Init+0x13c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e59      	subs	r1, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003da4:	400b      	ands	r3, r1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_I2C_Init+0x138>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e59      	subs	r1, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	e051      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e04f      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <HAL_I2C_Init+0x168>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e58      	subs	r0, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e012      	b.n	8003e16 <HAL_I2C_Init+0x18e>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Init+0x196>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e022      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <HAL_I2C_Init+0x1bc>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1e58      	subs	r0, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	440b      	add	r3, r1
 8003e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e42:	e00f      	b.n	8003e64 <HAL_I2C_Init+0x1dc>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1e58      	subs	r0, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	0099      	lsls	r1, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	6809      	ldr	r1, [r1, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61cb      	str	r3, [r1, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6911      	ldr	r1, [r2, #16]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6093      	str	r3, [r2, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	000186a0 	.word	0x000186a0
 8003f00:	001e847f 	.word	0x001e847f
 8003f04:	003d08ff 	.word	0x003d08ff
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	10624dd3 	.word	0x10624dd3

08003f10 <HAL_I2C_Mem_Write>:
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	4608      	mov	r0, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	817b      	strh	r3, [r7, #10]
 8003f22:	460b      	mov	r3, r1
 8003f24:	813b      	strh	r3, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
 8003f2a:	f7ff faef 	bl	800350c <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	f040 80d9 	bne.w	80040f0 <HAL_I2C_Mem_Write+0x1e0>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2319      	movs	r3, #25
 8003f44:	2201      	movs	r2, #1
 8003f46:	496d      	ldr	r1, [pc, #436]	@ (80040fc <HAL_I2C_Mem_Write+0x1ec>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fdb9 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x48>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0cc      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_I2C_Mem_Write+0x56>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0c5      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d007      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x7c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	@ 0x21
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2240      	movs	r2, #64	@ 0x40
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a4d      	ldr	r2, [pc, #308]	@ (8004100 <HAL_I2C_Mem_Write+0x1f0>)
 8003fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003fce:	88f8      	ldrh	r0, [r7, #6]
 8003fd0:	893a      	ldrh	r2, [r7, #8]
 8003fd2:	8979      	ldrh	r1, [r7, #10]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4603      	mov	r3, r0
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fbf0 	bl	80047c4 <I2C_RequestMemoryWrite>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d052      	beq.n	8004090 <HAL_I2C_Mem_Write+0x180>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e081      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fe7e 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <HAL_I2C_Mem_Write+0x10a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <HAL_I2C_Mem_Write+0x106>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	2301      	movs	r3, #1
 8004018:	e06b      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11b      	bne.n	8004090 <HAL_I2C_Mem_Write+0x180>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d017      	beq.n	8004090 <HAL_I2C_Mem_Write+0x180>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1aa      	bne.n	8003fee <HAL_I2C_Mem_Write+0xde>
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fe71 	bl	8004d84 <I2C_WaitOnBTFFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x1b4>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d107      	bne.n	80040c0 <HAL_I2C_Mem_Write+0x1b0>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	2301      	movs	r3, #1
 80040c2:	e016      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_I2C_Mem_Write+0x1e2>
 80040f0:	2302      	movs	r3, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	00100002 	.word	0x00100002
 8004100:	ffff0000 	.word	0xffff0000

08004104 <HAL_I2C_Mem_Read>:
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	@ 0x30
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
 800411e:	f7ff f9f5 	bl	800350c <HAL_GetTick>
 8004122:	6278      	str	r0, [r7, #36]	@ 0x24
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b20      	cmp	r3, #32
 800412e:	f040 8214 	bne.w	800455a <HAL_I2C_Mem_Read+0x456>
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2319      	movs	r3, #25
 8004138:	2201      	movs	r2, #1
 800413a:	497b      	ldr	r1, [pc, #492]	@ (8004328 <HAL_I2C_Mem_Read+0x224>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fcbf 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Mem_Read+0x48>
 8004148:	2302      	movs	r3, #2
 800414a:	e207      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_I2C_Mem_Read+0x56>
 8004156:	2302      	movs	r3, #2
 8004158:	e200      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d007      	beq.n	8004180 <HAL_I2C_Mem_Read+0x7c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2222      	movs	r2, #34	@ 0x22
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a5b      	ldr	r2, [pc, #364]	@ (800432c <HAL_I2C_Mem_Read+0x228>)
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80041c2:	88f8      	ldrh	r0, [r7, #6]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fb8c 	bl	80048f0 <I2C_RequestMemoryRead>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Mem_Read+0xde>
 80041de:	2301      	movs	r3, #1
 80041e0:	e1bc      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d113      	bne.n	8004212 <HAL_I2C_Mem_Read+0x10e>
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	623b      	str	r3, [r7, #32]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e190      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	2b01      	cmp	r3, #1
 8004218:	d11b      	bne.n	8004252 <HAL_I2C_Mem_Read+0x14e>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e170      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004256:	2b02      	cmp	r3, #2
 8004258:	d11b      	bne.n	8004292 <HAL_I2C_Mem_Read+0x18e>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	e150      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	e144      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	f200 80f1 	bhi.w	8004496 <HAL_I2C_Mem_Read+0x392>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d123      	bne.n	8004304 <HAL_I2C_Mem_Read+0x200>
 80042bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fda7 	bl	8004e14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Read+0x1cc>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e145      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004302:	e117      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	2b02      	cmp	r3, #2
 800430a:	d14e      	bne.n	80043aa <HAL_I2C_Mem_Read+0x2a6>
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	2200      	movs	r2, #0
 8004314:	4906      	ldr	r1, [pc, #24]	@ (8004330 <HAL_I2C_Mem_Read+0x22c>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fbd2 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_I2C_Mem_Read+0x230>
 8004322:	2301      	movs	r3, #1
 8004324:	e11a      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 8004326:	bf00      	nop
 8004328:	00100002 	.word	0x00100002
 800432c:	ffff0000 	.word	0xffff0000
 8004330:	00010004 	.word	0x00010004
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a8:	e0c4      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	2200      	movs	r2, #0
 80043b2:	496c      	ldr	r1, [pc, #432]	@ (8004564 <HAL_I2C_Mem_Read+0x460>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fb83 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Mem_Read+0x2c0>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0cb      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2200      	movs	r2, #0
 800440e:	4955      	ldr	r1, [pc, #340]	@ (8004564 <HAL_I2C_Mem_Read+0x460>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fb55 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Read+0x31c>
 800441c:	2301      	movs	r3, #1
 800441e:	e09d      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004494:	e04e      	b.n	8004534 <HAL_I2C_Mem_Read+0x430>
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fcba 	bl	8004e14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Mem_Read+0x3a6>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e058      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d124      	bne.n	8004534 <HAL_I2C_Mem_Read+0x430>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_I2C_Mem_Read+0x3fe>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	f47f aeb6 	bne.w	80042aa <HAL_I2C_Mem_Read+0x1a6>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_I2C_Mem_Read+0x458>
 800455a:	2302      	movs	r3, #2
 800455c:	4618      	mov	r0, r3
 800455e:	3728      	adds	r7, #40	@ 0x28
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	00010004 	.word	0x00010004

08004568 <HAL_I2C_IsDeviceReady>:
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	@ 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	460b      	mov	r3, r1
 8004576:	817b      	strh	r3, [r7, #10]
 8004578:	f7fe ffc8 	bl	800350c <HAL_GetTick>
 800457c:	61f8      	str	r0, [r7, #28]
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 8111 	bne.w	80047b2 <HAL_I2C_IsDeviceReady+0x24a>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2319      	movs	r3, #25
 8004596:	2201      	movs	r2, #1
 8004598:	4988      	ldr	r1, [pc, #544]	@ (80047bc <HAL_I2C_IsDeviceReady+0x254>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa90 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_IsDeviceReady+0x42>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e104      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_I2C_IsDeviceReady+0x50>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0fd      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d007      	beq.n	80045de <HAL_I2C_IsDeviceReady+0x76>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2224      	movs	r2, #36	@ 0x24
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a70      	ldr	r2, [pc, #448]	@ (80047c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa4e 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <HAL_I2C_IsDeviceReady+0xde>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004638:	d103      	bne.n	8004642 <HAL_I2C_IsDeviceReady+0xda>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004640:	641a      	str	r2, [r3, #64]	@ 0x40
 8004642:	2303      	movs	r3, #3
 8004644:	e0b6      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	f7fe ff59 	bl	800350c <HAL_GetTick>
 800465a:	61f8      	str	r0, [r7, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	75fb      	strb	r3, [r7, #23]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	75bb      	strb	r3, [r7, #22]
 800468a:	e025      	b.n	80046d8 <HAL_I2C_IsDeviceReady+0x170>
 800468c:	f7fe ff3e 	bl	800350c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <HAL_I2C_IsDeviceReady+0x13a>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_I2C_IsDeviceReady+0x142>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22a0      	movs	r2, #160	@ 0xa0
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	75fb      	strb	r3, [r7, #23]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	75bb      	strb	r3, [r7, #22]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80046e2:	d005      	beq.n	80046f0 <HAL_I2C_IsDeviceReady+0x188>
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <HAL_I2C_IsDeviceReady+0x188>
 80046ea:	7dbb      	ldrb	r3, [r7, #22]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0cd      	beq.n	800468c <HAL_I2C_IsDeviceReady+0x124>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d129      	bne.n	800475a <HAL_I2C_IsDeviceReady+0x1f2>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2319      	movs	r3, #25
 8004732:	2201      	movs	r2, #1
 8004734:	4921      	ldr	r1, [pc, #132]	@ (80047bc <HAL_I2C_IsDeviceReady+0x254>)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f9c2 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_IsDeviceReady+0x1de>
 8004742:	2301      	movs	r3, #1
 8004744:	e036      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004756:	2300      	movs	r3, #0
 8004758:	e02c      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004772:	615a      	str	r2, [r3, #20]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2319      	movs	r3, #25
 800477a:	2201      	movs	r2, #1
 800477c:	490f      	ldr	r1, [pc, #60]	@ (80047bc <HAL_I2C_IsDeviceReady+0x254>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f99e 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_IsDeviceReady+0x226>
 800478a:	2301      	movs	r3, #1
 800478c:	e012      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	3301      	adds	r3, #1
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	f4ff af32 	bcc.w	8004602 <HAL_I2C_IsDeviceReady+0x9a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_I2C_IsDeviceReady+0x24c>
 80047b2:	2302      	movs	r3, #2
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00100002 	.word	0x00100002
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <I2C_RequestMemoryWrite>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f960 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryWrite+0x5e>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004814:	d103      	bne.n	800481e <I2C_RequestMemoryWrite+0x5a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
 800481e:	2303      	movs	r3, #3
 8004820:	e05f      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	492d      	ldr	r1, [pc, #180]	@ (80048ec <I2C_RequestMemoryWrite+0x128>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f9bb 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryWrite+0x84>
 8004844:	2301      	movs	r3, #1
 8004846:	e04c      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004860:	6a39      	ldr	r1, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa46 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <I2C_RequestMemoryWrite+0xc6>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <I2C_RequestMemoryWrite+0xc2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	2301      	movs	r3, #1
 8004888:	e02b      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <I2C_RequestMemoryWrite+0xd8>
 8004890:	893b      	ldrh	r3, [r7, #8]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e021      	b.n	80048e0 <I2C_RequestMemoryWrite+0x11c>
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fa20 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00d      	beq.n	80048d6 <I2C_RequestMemoryWrite+0x112>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d107      	bne.n	80048d2 <I2C_RequestMemoryWrite+0x10e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	2301      	movs	r3, #1
 80048d4:	e005      	b.n	80048e2 <I2C_RequestMemoryWrite+0x11e>
 80048d6:	893b      	ldrh	r3, [r7, #8]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]
 80048e0:	2300      	movs	r3, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	00010002 	.word	0x00010002

080048f0 <I2C_RequestMemoryRead>:
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2200      	movs	r2, #0
 8004932:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f8c2 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <I2C_RequestMemoryRead+0x6e>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004950:	d103      	bne.n	800495a <I2C_RequestMemoryRead+0x6a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004958:	641a      	str	r2, [r3, #64]	@ 0x40
 800495a:	2303      	movs	r3, #3
 800495c:	e0aa      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800496c:	611a      	str	r2, [r3, #16]
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	4952      	ldr	r1, [pc, #328]	@ (8004abc <I2C_RequestMemoryRead+0x1cc>)
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f91d 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <I2C_RequestMemoryRead+0x94>
 8004980:	2301      	movs	r3, #1
 8004982:	e097      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	6a39      	ldr	r1, [r7, #32]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f9a8 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <I2C_RequestMemoryRead+0xd6>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d107      	bne.n	80049c2 <I2C_RequestMemoryRead+0xd2>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	2301      	movs	r3, #1
 80049c4:	e076      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <I2C_RequestMemoryRead+0xe8>
 80049cc:	893b      	ldrh	r3, [r7, #8]
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	e021      	b.n	8004a1c <I2C_RequestMemoryRead+0x12c>
 80049d8:	893b      	ldrh	r3, [r7, #8]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b29b      	uxth	r3, r3
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e8:	6a39      	ldr	r1, [r7, #32]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f982 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <I2C_RequestMemoryRead+0x122>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d107      	bne.n	8004a0e <I2C_RequestMemoryRead+0x11e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e050      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 8004a12:	893b      	ldrh	r3, [r7, #8]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	611a      	str	r2, [r3, #16]
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1e:	6a39      	ldr	r1, [r7, #32]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f967 	bl	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <I2C_RequestMemoryRead+0x158>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d107      	bne.n	8004a44 <I2C_RequestMemoryRead+0x154>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	2301      	movs	r3, #1
 8004a46:	e035      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f82b 	bl	8004ac0 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <I2C_RequestMemoryRead+0x19c>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d103      	bne.n	8004a88 <I2C_RequestMemoryRead+0x198>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e013      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 8004a8c:	897b      	ldrh	r3, [r7, #10]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	4906      	ldr	r1, [pc, #24]	@ (8004abc <I2C_RequestMemoryRead+0x1cc>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f886 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_RequestMemoryRead+0x1c2>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <I2C_RequestMemoryRead+0x1c4>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	00010002 	.word	0x00010002

08004ac0 <I2C_WaitOnFlagUntilTimeout>:
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71fb      	strb	r3, [r7, #7]
 8004ad0:	e048      	b.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d044      	beq.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004ada:	f7fe fd17 	bl	800350c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d139      	bne.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10d      	bne.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	e00c      	b.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	43da      	mvns	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d116      	bne.n	8004b64 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b60:	2301      	movs	r3, #1
 8004b62:	e023      	b.n	8004bac <I2C_WaitOnFlagUntilTimeout+0xec>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10d      	bne.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	43da      	mvns	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	e00c      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	43da      	mvns	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d093      	beq.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004baa:	2300      	movs	r3, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	e071      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd2:	d123      	bne.n	8004c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bec:	615a      	str	r2, [r3, #20]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	f043 0204 	orr.w	r2, r3, #4
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e067      	b.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d041      	beq.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004c24:	f7fe fc72 	bl	800350c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d136      	bne.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10c      	bne.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf14      	ite	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	2300      	moveq	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	e00b      	b.n	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	43da      	mvns	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e021      	b.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10c      	bne.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e00b      	b.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f47f af6d 	bne.w	8004bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004cea:	2300      	movs	r3, #0
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	e034      	b.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f8e3 	bl	8004ece <I2C_IsAcknowledgeFailed>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e034      	b.n	8004d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d028      	beq.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004d1a:	f7fe fbf7 	bl	800350c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11d      	bne.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b80      	cmp	r3, #128	@ 0x80
 8004d3c:	d016      	beq.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d1c3      	bne.n	8004d02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnBTFFlagUntilTimeout>:
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	e034      	b.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f89b 	bl	8004ece <I2C_IsAcknowledgeFailed>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e034      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d028      	beq.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004daa:	f7fe fbaf 	bl	800350c <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11d      	bne.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d016      	beq.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d1c3      	bne.n	8004d92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	e049      	b.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d119      	bne.n	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	615a      	str	r2, [r3, #20]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e60:	2301      	movs	r3, #1
 8004e62:	e030      	b.n	8004ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8004e64:	f7fe fb52 	bl	800350c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11d      	bne.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e84:	2b40      	cmp	r3, #64	@ 0x40
 8004e86:	d016      	beq.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e007      	b.n	8004ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d1ae      	bne.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_IsAcknowledgeFailed>:
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee4:	d11b      	bne.n	8004f1e <I2C_IsAcknowledgeFailed+0x50>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eee:	615a      	str	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	f043 0204 	orr.w	r2, r3, #4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <I2C_IsAcknowledgeFailed+0x52>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_RCC_OscConfig>:
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x12>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e267      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d075      	beq.n	8005036 <HAL_RCC_OscConfig+0x10a>
 8004f4a:	4b88      	ldr	r3, [pc, #544]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d00c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x44>
 8004f56:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d112      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
 8004f62:	4b82      	ldr	r3, [pc, #520]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c>
 8004f70:	4b7e      	ldr	r3, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d05b      	beq.n	8005034 <HAL_RCC_OscConfig+0x108>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d157      	bne.n	8005034 <HAL_RCC_OscConfig+0x108>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e242      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x74>
 8004f92:	4b76      	ldr	r3, [pc, #472]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a75      	ldr	r2, [pc, #468]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e01d      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x98>
 8004faa:	4b70      	ldr	r3, [pc, #448]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6f      	ldr	r2, [pc, #444]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6c      	ldr	r2, [pc, #432]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0xb0>
 8004fc4:	4b69      	ldr	r3, [pc, #420]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a68      	ldr	r2, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8004fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d013      	beq.n	800500c <HAL_RCC_OscConfig+0xe0>
 8004fe4:	f7fe fa92 	bl	800350c <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0xd2>
 8004fec:	f7fe fa8e 	bl	800350c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0xd2>
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e207      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8004ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0xc0>
 800500a:	e014      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
 800500c:	f7fe fa7e 	bl	800350c <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xfa>
 8005014:	f7fe fa7a 	bl	800350c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xfa>
 8005022:	2303      	movs	r3, #3
 8005024:	e1f3      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8005026:	4b51      	ldr	r3, [pc, #324]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0xe8>
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x10a>
 8005034:	bf00      	nop
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d063      	beq.n	800510a <HAL_RCC_OscConfig+0x1de>
 8005042:	4b4a      	ldr	r3, [pc, #296]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_RCC_OscConfig+0x13a>
 800504e:	4b47      	ldr	r3, [pc, #284]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b08      	cmp	r3, #8
 8005058:	d11c      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
 800505a:	4b44      	ldr	r3, [pc, #272]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <HAL_RCC_OscConfig+0x168>
 8005066:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x152>
 800507a:	2301      	movs	r3, #1
 800507c:	e1c7      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 800507e:	4b3b      	ldr	r3, [pc, #236]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4937      	ldr	r1, [pc, #220]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
 8005092:	e03a      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_OscConfig+0x1b2>
 800509c:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <HAL_RCC_OscConfig+0x244>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f7fe fa33 	bl	800350c <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x190>
 80050aa:	f7fe fa2f 	bl	800350c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x190>
 80050b8:	2303      	movs	r3, #3
 80050ba:	e1a8      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 80050bc:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x17e>
 80050c8:	4b28      	ldr	r3, [pc, #160]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4925      	ldr	r1, [pc, #148]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x1de>
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <HAL_RCC_OscConfig+0x244>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f7fe fa12 	bl	800350c <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1d2>
 80050ec:	f7fe fa0e 	bl	800350c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1d2>
 80050fa:	2303      	movs	r3, #3
 80050fc:	e187      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 80050fe:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1c0>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d036      	beq.n	8005184 <HAL_RCC_OscConfig+0x258>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_RCC_OscConfig+0x220>
 800511e:	4b15      	ldr	r3, [pc, #84]	@ (8005174 <HAL_RCC_OscConfig+0x248>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f7fe f9f2 	bl	800350c <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x212>
 800512c:	f7fe f9ee 	bl	800350c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x212>
 800513a:	2303      	movs	r3, #3
 800513c:	e167      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x240>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x200>
 800514a:	e01b      	b.n	8005184 <HAL_RCC_OscConfig+0x258>
 800514c:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <HAL_RCC_OscConfig+0x248>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f7fe f9db 	bl	800350c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]
 8005158:	e00e      	b.n	8005178 <HAL_RCC_OscConfig+0x24c>
 800515a:	f7fe f9d7 	bl	800350c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d907      	bls.n	8005178 <HAL_RCC_OscConfig+0x24c>
 8005168:	2303      	movs	r3, #3
 800516a:	e150      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 800516c:	40023800 	.word	0x40023800
 8005170:	42470000 	.word	0x42470000
 8005174:	42470e80 	.word	0x42470e80
 8005178:	4b88      	ldr	r3, [pc, #544]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ea      	bne.n	800515a <HAL_RCC_OscConfig+0x22e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8097 	beq.w	80052c0 <HAL_RCC_OscConfig+0x394>
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
 8005196:	4b81      	ldr	r3, [pc, #516]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x296>
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	4b7d      	ldr	r3, [pc, #500]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	4a7c      	ldr	r2, [pc, #496]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80051b2:	4b7a      	ldr	r3, [pc, #488]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
 80051c2:	4b77      	ldr	r3, [pc, #476]	@ (80053a0 <HAL_RCC_OscConfig+0x474>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d118      	bne.n	8005200 <HAL_RCC_OscConfig+0x2d4>
 80051ce:	4b74      	ldr	r3, [pc, #464]	@ (80053a0 <HAL_RCC_OscConfig+0x474>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a73      	ldr	r2, [pc, #460]	@ (80053a0 <HAL_RCC_OscConfig+0x474>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	f7fe f997 	bl	800350c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x2c8>
 80051e2:	f7fe f993 	bl	800350c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x2c8>
 80051f0:	2303      	movs	r3, #3
 80051f2:	e10c      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 80051f4:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <HAL_RCC_OscConfig+0x474>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2b6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d106      	bne.n	8005216 <HAL_RCC_OscConfig+0x2ea>
 8005208:	4b64      	ldr	r3, [pc, #400]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	4a63      	ldr	r2, [pc, #396]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6713      	str	r3, [r2, #112]	@ 0x70
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x324>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0x30c>
 800521e:	4b5f      	ldr	r3, [pc, #380]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	4a5e      	ldr	r2, [pc, #376]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
 800522a:	4b5c      	ldr	r3, [pc, #368]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	4a5b      	ldr	r2, [pc, #364]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6713      	str	r3, [r2, #112]	@ 0x70
 8005236:	e00b      	b.n	8005250 <HAL_RCC_OscConfig+0x324>
 8005238:	4b58      	ldr	r3, [pc, #352]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a57      	ldr	r2, [pc, #348]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
 8005244:	4b55      	ldr	r3, [pc, #340]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a54      	ldr	r2, [pc, #336]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCC_OscConfig+0x358>
 8005258:	f7fe f958 	bl	800350c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x34a>
 8005260:	f7fe f954 	bl	800350c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x34a>
 8005272:	2303      	movs	r3, #3
 8005274:	e0cb      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8005276:	4b49      	ldr	r3, [pc, #292]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <HAL_RCC_OscConfig+0x334>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x382>
 8005284:	f7fe f942 	bl	800350c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x376>
 800528c:	f7fe f93e 	bl	800350c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x376>
 800529e:	2303      	movs	r3, #3
 80052a0:	e0b5      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 80052a2:	4b3e      	ldr	r3, [pc, #248]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ee      	bne.n	800528c <HAL_RCC_OscConfig+0x360>
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <HAL_RCC_OscConfig+0x394>
 80052b4:	4b39      	ldr	r3, [pc, #228]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	4a38      	ldr	r2, [pc, #224]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	@ 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80a1 	beq.w	800540c <HAL_RCC_OscConfig+0x4e0>
 80052ca:	4b34      	ldr	r3, [pc, #208]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d05c      	beq.n	8005390 <HAL_RCC_OscConfig+0x464>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d141      	bne.n	8005362 <HAL_RCC_OscConfig+0x436>
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f7fe f912 	bl	800350c <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x3d2>
 80052ec:	f7fe f90e 	bl	800350c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x3d2>
 80052fa:	2303      	movs	r3, #3
 80052fc:	e087      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 80052fe:	4b27      	ldr	r3, [pc, #156]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x3c0>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	3b01      	subs	r3, #1
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	491b      	ldr	r1, [pc, #108]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f7fe f8e7 	bl	800350c <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x428>
 8005342:	f7fe f8e3 	bl	800350c <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x428>
 8005350:	2303      	movs	r3, #3
 8005352:	e05c      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8005354:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x416>
 8005360:	e054      	b.n	800540c <HAL_RCC_OscConfig+0x4e0>
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <HAL_RCC_OscConfig+0x478>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f7fe f8d0 	bl	800350c <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x456>
 8005370:	f7fe f8cc 	bl	800350c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x456>
 800537e:	2303      	movs	r3, #3
 8005380:	e045      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 8005382:	4b06      	ldr	r3, [pc, #24]	@ (800539c <HAL_RCC_OscConfig+0x470>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x444>
 800538e:	e03d      	b.n	800540c <HAL_RCC_OscConfig+0x4e0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d107      	bne.n	80053a8 <HAL_RCC_OscConfig+0x47c>
 8005398:	2301      	movs	r3, #1
 800539a:	e038      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 800539c:	40023800 	.word	0x40023800
 80053a0:	40007000 	.word	0x40007000
 80053a4:	42470060 	.word	0x42470060
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <HAL_RCC_OscConfig+0x4ec>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d028      	beq.n	8005408 <HAL_RCC_OscConfig+0x4dc>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d121      	bne.n	8005408 <HAL_RCC_OscConfig+0x4dc>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d11a      	bne.n	8005408 <HAL_RCC_OscConfig+0x4dc>
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053de:	0192      	lsls	r2, r2, #6
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d111      	bne.n	8005408 <HAL_RCC_OscConfig+0x4dc>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	3b01      	subs	r3, #1
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_OscConfig+0x4dc>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_OscConfig+0x4e0>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <HAL_RCC_OscConfig+0x4e2>
 800540c:	2300      	movs	r3, #0
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800

0800541c <HAL_RCC_ClockConfig>:
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x14>
 800542c:	2301      	movs	r3, #1
 800542e:	e0cc      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 8005430:	4b68      	ldr	r3, [pc, #416]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d90c      	bls.n	8005458 <HAL_RCC_ClockConfig+0x3c>
 800543e:	4b65      	ldr	r3, [pc, #404]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	4b63      	ldr	r3, [pc, #396]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x3c>
 8005454:	2301      	movs	r3, #1
 8005456:	e0b8      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x8a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_ClockConfig+0x60>
 8005470:	4b59      	ldr	r3, [pc, #356]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4a58      	ldr	r2, [pc, #352]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800547a:	6093      	str	r3, [r2, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x78>
 8005488:	4b53      	ldr	r3, [pc, #332]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a52      	ldr	r2, [pc, #328]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	4b50      	ldr	r3, [pc, #320]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	494d      	ldr	r1, [pc, #308]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d044      	beq.n	800553c <HAL_RCC_ClockConfig+0x120>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d107      	bne.n	80054ca <HAL_RCC_ClockConfig+0xae>
 80054ba:	4b47      	ldr	r3, [pc, #284]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d119      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e07f      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d003      	beq.n	80054da <HAL_RCC_ClockConfig+0xbe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0xce>
 80054da:	4b3f      	ldr	r3, [pc, #252]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e06f      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 80054ea:	4b3b      	ldr	r3, [pc, #236]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_ClockConfig+0xde>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e067      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 80054fa:	4b37      	ldr	r3, [pc, #220]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f023 0203 	bic.w	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4934      	ldr	r1, [pc, #208]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	608b      	str	r3, [r1, #8]
 800550c:	f7fd fffe 	bl	800350c <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	e00a      	b.n	800552a <HAL_RCC_ClockConfig+0x10e>
 8005514:	f7fd fffa 	bl	800350c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0x10e>
 8005526:	2303      	movs	r3, #3
 8005528:	e04f      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 800552a:	4b2b      	ldr	r3, [pc, #172]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 020c 	and.w	r2, r3, #12
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	429a      	cmp	r2, r3
 800553a:	d1eb      	bne.n	8005514 <HAL_RCC_ClockConfig+0xf8>
 800553c:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d20c      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x148>
 800554a:	4b22      	ldr	r3, [pc, #136]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x148>
 8005560:	2301      	movs	r3, #1
 8005562:	e032      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ae>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCC_ClockConfig+0x166>
 8005570:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4916      	ldr	r1, [pc, #88]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x186>
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	490e      	ldr	r1, [pc, #56]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
 80055a2:	f000 f821 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 80055a6:	4602      	mov	r2, r0
 80055a8:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	490a      	ldr	r1, [pc, #40]	@ (80055dc <HAL_RCC_ClockConfig+0x1c0>)
 80055b4:	5ccb      	ldrb	r3, [r1, r3]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	4a09      	ldr	r2, [pc, #36]	@ (80055e0 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <HAL_RCC_ClockConfig+0x1c8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd ff5e 	bl	8003484 <HAL_InitTick>
 80055c8:	2300      	movs	r3, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40023c00 	.word	0x40023c00
 80055d8:	40023800 	.word	0x40023800
 80055dc:	0800b1ac 	.word	0x0800b1ac
 80055e0:	20000018 	.word	0x20000018
 80055e4:	2000001c 	.word	0x2000001c

080055e8 <HAL_RCC_GetSysClockFreq>:
 80055e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ec:	b094      	sub	sp, #80	@ 0x50
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f4:	2300      	movs	r3, #0
 80055f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f8:	2300      	movs	r3, #0
 80055fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80055fc:	2300      	movs	r3, #0
 80055fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005600:	4b79      	ldr	r3, [pc, #484]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b08      	cmp	r3, #8
 800560a:	d00d      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x40>
 800560c:	2b08      	cmp	r3, #8
 800560e:	f200 80e1 	bhi.w	80057d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x34>
 8005616:	2b04      	cmp	r3, #4
 8005618:	d003      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x3a>
 800561a:	e0db      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800561c:	4b73      	ldr	r3, [pc, #460]	@ (80057ec <HAL_RCC_GetSysClockFreq+0x204>)
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005620:	e0db      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x1f2>
 8005622:	4b73      	ldr	r3, [pc, #460]	@ (80057f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005626:	e0d8      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x1f2>
 8005628:	4b6f      	ldr	r3, [pc, #444]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005630:	647b      	str	r3, [r7, #68]	@ 0x44
 8005632:	4b6d      	ldr	r3, [pc, #436]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d063      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x11e>
 800563e:	4b6a      	ldr	r3, [pc, #424]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	633b      	str	r3, [r7, #48]	@ 0x30
 8005652:	2300      	movs	r3, #0
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
 8005656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800565a:	4622      	mov	r2, r4
 800565c:	462b      	mov	r3, r5
 800565e:	f04f 0000 	mov.w	r0, #0
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	0159      	lsls	r1, r3, #5
 8005668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800566c:	0150      	lsls	r0, r2, #5
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4621      	mov	r1, r4
 8005674:	1a51      	subs	r1, r2, r1
 8005676:	6139      	str	r1, [r7, #16]
 8005678:	4629      	mov	r1, r5
 800567a:	eb63 0301 	sbc.w	r3, r3, r1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800568c:	4659      	mov	r1, fp
 800568e:	018b      	lsls	r3, r1, #6
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005696:	4651      	mov	r1, sl
 8005698:	018a      	lsls	r2, r1, #6
 800569a:	4651      	mov	r1, sl
 800569c:	ebb2 0801 	subs.w	r8, r2, r1
 80056a0:	4659      	mov	r1, fp
 80056a2:	eb63 0901 	sbc.w	r9, r3, r1
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ba:	4690      	mov	r8, r2
 80056bc:	4699      	mov	r9, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	eb18 0303 	adds.w	r3, r8, r3
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	462b      	mov	r3, r5
 80056c8:	eb49 0303 	adc.w	r3, r9, r3
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056da:	4629      	mov	r1, r5
 80056dc:	024b      	lsls	r3, r1, #9
 80056de:	4621      	mov	r1, r4
 80056e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056e4:	4621      	mov	r1, r4
 80056e6:	024a      	lsls	r2, r1, #9
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ee:	2200      	movs	r2, #0
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f8:	f7fb faae 	bl	8000c58 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4613      	mov	r3, r2
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005704:	e058      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x1d0>
 8005706:	4b38      	ldr	r3, [pc, #224]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	099b      	lsrs	r3, r3, #6
 800570c:	2200      	movs	r2, #0
 800570e:	4618      	mov	r0, r3
 8005710:	4611      	mov	r1, r2
 8005712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
 800571c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	0159      	lsls	r1, r3, #5
 800572e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005732:	0150      	lsls	r0, r2, #5
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4641      	mov	r1, r8
 800573a:	ebb2 0a01 	subs.w	sl, r2, r1
 800573e:	4649      	mov	r1, r9
 8005740:	eb63 0b01 	sbc.w	fp, r3, r1
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005758:	ebb2 040a 	subs.w	r4, r2, sl
 800575c:	eb63 050b 	sbc.w	r5, r3, fp
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	00eb      	lsls	r3, r5, #3
 800576a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800576e:	00e2      	lsls	r2, r4, #3
 8005770:	4614      	mov	r4, r2
 8005772:	461d      	mov	r5, r3
 8005774:	4643      	mov	r3, r8
 8005776:	18e3      	adds	r3, r4, r3
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	464b      	mov	r3, r9
 800577c:	eb45 0303 	adc.w	r3, r5, r3
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800578e:	4629      	mov	r1, r5
 8005790:	028b      	lsls	r3, r1, #10
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005798:	4621      	mov	r1, r4
 800579a:	028a      	lsls	r2, r1, #10
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	61fa      	str	r2, [r7, #28]
 80057a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ac:	f7fb fa54 	bl	8000c58 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4613      	mov	r3, r2
 80057b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b8:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	3301      	adds	r3, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d2:	e002      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x1f2>
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCC_GetSysClockFreq+0x204>)
 80057d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d8:	bf00      	nop
 80057da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057dc:	4618      	mov	r0, r3
 80057de:	3750      	adds	r7, #80	@ 0x50
 80057e0:	46bd      	mov	sp, r7
 80057e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	007a1200 	.word	0x007a1200

080057f4 <HAL_RCC_GetHCLKFreq>:
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4b03      	ldr	r3, [pc, #12]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x14>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000018 	.word	0x20000018

0800580c <HAL_RCC_GetPCLK1Freq>:
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
 8005810:	f7ff fff0 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	0a9b      	lsrs	r3, r3, #10
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	@ (8005830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40023800 	.word	0x40023800
 8005830:	0800b1bc 	.word	0x0800b1bc

08005834 <HAL_RCC_GetPCLK2Freq>:
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
 8005838:	f7ff ffdc 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	0b5b      	lsrs	r3, r3, #13
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4903      	ldr	r1, [pc, #12]	@ (8005858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40023800 	.word	0x40023800
 8005858:	0800b1bc 	.word	0x0800b1bc

0800585c <HAL_TIM_Base_Init>:
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_Base_Init+0x12>
 800586a:	2301      	movs	r3, #1
 800586c:	e041      	b.n	80058f2 <HAL_TIM_Base_Init+0x96>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_Base_Init+0x2c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fd fbe2 	bl	800304c <HAL_TIM_Base_MspInit>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fd7a 	bl	8006394 <TIM_Base_SetConfig>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058f0:	2300      	movs	r3, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_TIM_Base_Start_IT>:
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x18>
 8005910:	2301      	movs	r3, #1
 8005912:	e044      	b.n	800599e <HAL_TIM_Base_Start_IT+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1e      	ldr	r2, [pc, #120]	@ (80059ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593e:	d013      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a17      	ldr	r2, [pc, #92]	@ (80059b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_TIM_Base_Start_IT+0x90>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d010      	beq.n	800599c <HAL_TIM_Base_Start_IT+0xa0>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e007      	b.n	800599c <HAL_TIM_Base_Start_IT+0xa0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_TIM_PWM_Init>:
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PWM_Init+0x12>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e041      	b.n	8005a56 <HAL_TIM_PWM_Init+0x96>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_PWM_Init+0x2c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f839 	bl	8005a5e <HAL_TIM_PWM_MspInit>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 fcc8 	bl	8006394 <TIM_Base_SetConfig>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a54:	2300      	movs	r3, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_PWM_MspInit>:
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <HAL_TIM_PWM_Start>:
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_TIM_PWM_Start+0x24>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e022      	b.n	8005ade <HAL_TIM_PWM_Start+0x6a>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d109      	bne.n	8005ab2 <HAL_TIM_PWM_Start+0x3e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	bf14      	ite	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	2300      	moveq	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	e015      	b.n	8005ade <HAL_TIM_PWM_Start+0x6a>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d109      	bne.n	8005acc <HAL_TIM_PWM_Start+0x58>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e008      	b.n	8005ade <HAL_TIM_PWM_Start+0x6a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x72>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e068      	b.n	8005bb8 <HAL_TIM_PWM_Start+0x144>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x82>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_PWM_Start+0xaa>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0x92>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b04:	e00b      	b.n	8005b1e <HAL_TIM_PWM_Start+0xaa>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0xa2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b14:	e003      	b.n	8005b1e <HAL_TIM_PWM_Start+0xaa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2201      	movs	r2, #1
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fee0 	bl	80068ec <TIM_CCxChannelCmd>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	@ (8005bc0 <HAL_TIM_PWM_Start+0x14c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d107      	bne.n	8005b46 <HAL_TIM_PWM_Start+0xd2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <HAL_TIM_PWM_Start+0x14c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x10e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d013      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x10e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a19      	ldr	r2, [pc, #100]	@ (8005bc4 <HAL_TIM_PWM_Start+0x150>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x10e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <HAL_TIM_PWM_Start+0x154>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x10e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <HAL_TIM_PWM_Start+0x158>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIM_PWM_Start+0x10e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a14      	ldr	r2, [pc, #80]	@ (8005bd0 <HAL_TIM_PWM_Start+0x15c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d111      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x132>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d010      	beq.n	8005bb6 <HAL_TIM_PWM_Start+0x142>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e007      	b.n	8005bb6 <HAL_TIM_PWM_Start+0x142>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40014000 	.word	0x40014000

08005bd4 <HAL_TIM_Encoder_Init>:
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_Encoder_Init+0x14>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e097      	b.n	8005d18 <HAL_TIM_Encoder_Init+0x144>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <HAL_TIM_Encoder_Init+0x2e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fd fa63 	bl	80030c8 <HAL_TIM_Encoder_MspInit>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	6093      	str	r3, [r2, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 fbb3 	bl	8006394 <TIM_Base_SetConfig>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	4313      	orrs	r3, r2
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c74:	f023 030c 	bic.w	r3, r3, #12
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	4313      	orrs	r3, r2
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	609a      	str	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	619a      	str	r2, [r3, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d16:	2300      	movs	r3, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_Encoder_Start>:
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d38:	73bb      	strb	r3, [r7, #14]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d40:	737b      	strb	r3, [r7, #13]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d48:	733b      	strb	r3, [r7, #12]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d110      	bne.n	8005d72 <HAL_TIM_Encoder_Start+0x52>
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d102      	bne.n	8005d5c <HAL_TIM_Encoder_Start+0x3c>
 8005d56:	7b7b      	ldrb	r3, [r7, #13]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d001      	beq.n	8005d60 <HAL_TIM_Encoder_Start+0x40>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e069      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d70:	e031      	b.n	8005dd6 <HAL_TIM_Encoder_Start+0xb6>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d110      	bne.n	8005d9a <HAL_TIM_Encoder_Start+0x7a>
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d102      	bne.n	8005d84 <HAL_TIM_Encoder_Start+0x64>
 8005d7e:	7b3b      	ldrb	r3, [r7, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d001      	beq.n	8005d88 <HAL_TIM_Encoder_Start+0x68>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e055      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d98:	e01d      	b.n	8005dd6 <HAL_TIM_Encoder_Start+0xb6>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d108      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
 8005da6:	7b7b      	ldrb	r3, [r7, #13]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <HAL_TIM_Encoder_Start+0x92>
 8005dac:	7b3b      	ldrb	r3, [r7, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_TIM_Encoder_Start+0x96>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e03e      	b.n	8005e34 <HAL_TIM_Encoder_Start+0x114>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_Encoder_Start+0xc4>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d008      	beq.n	8005df4 <HAL_TIM_Encoder_Start+0xd4>
 8005de2:	e00f      	b.n	8005e04 <HAL_TIM_Encoder_Start+0xe4>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fd7d 	bl	80068ec <TIM_CCxChannelCmd>
 8005df2:	e016      	b.n	8005e22 <HAL_TIM_Encoder_Start+0x102>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fd75 	bl	80068ec <TIM_CCxChannelCmd>
 8005e02:	e00e      	b.n	8005e22 <HAL_TIM_Encoder_Start+0x102>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fd6d 	bl	80068ec <TIM_CCxChannelCmd>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fd66 	bl	80068ec <TIM_CCxChannelCmd>
 8005e20:	bf00      	nop
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_IRQHandler>:
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d020      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x64>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x64>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	771a      	strb	r2, [r3, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x52>
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa65 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x5e>
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa57 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa68 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d020      	beq.n	8005eec <HAL_TIM_IRQHandler+0xb0>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <HAL_TIM_IRQHandler+0xb0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0204 	mvn.w	r2, #4
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	771a      	strb	r2, [r3, #28]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x9e>
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa3f 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0xaa>
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa31 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa42 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d020      	beq.n	8005f38 <HAL_TIM_IRQHandler+0xfc>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_TIM_IRQHandler+0xfc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0208 	mvn.w	r2, #8
 8005f08:	611a      	str	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	771a      	strb	r2, [r3, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0xea>
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa19 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0xf6>
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa0b 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fa1c 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d020      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x148>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01b      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x148>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0210 	mvn.w	r2, #16
 8005f54:	611a      	str	r2, [r3, #16]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	771a      	strb	r2, [r3, #28]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x136>
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9f3 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0x142>
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f9e5 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9f6 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x16c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x16c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0201 	mvn.w	r2, #1
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9c3 	bl	800632e <HAL_TIM_PeriodElapsedCallback>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00c      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x190>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x190>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fc4:	611a      	str	r2, [r3, #16]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fd80 	bl	8006acc <HAL_TIMEx_BreakCallback>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x1b4>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x1b4>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fe8:	611a      	str	r2, [r3, #16]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f9c7 	bl	800637e <HAL_TIM_TriggerCallback>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x1d8>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x1d8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0220 	mvn.w	r2, #32
 800600c:	611a      	str	r2, [r3, #16]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fd52 	bl	8006ab8 <HAL_TIMEx_CommutCallback>
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_PWM_ConfigChannel>:
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006036:	2302      	movs	r3, #2
 8006038:	e0ae      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	f200 809f 	bhi.w	8006188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800604a:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006085 	.word	0x08006085
 8006054:	08006189 	.word	0x08006189
 8006058:	08006189 	.word	0x08006189
 800605c:	08006189 	.word	0x08006189
 8006060:	080060c5 	.word	0x080060c5
 8006064:	08006189 	.word	0x08006189
 8006068:	08006189 	.word	0x08006189
 800606c:	08006189 	.word	0x08006189
 8006070:	08006107 	.word	0x08006107
 8006074:	08006189 	.word	0x08006189
 8006078:	08006189 	.word	0x08006189
 800607c:	08006189 	.word	0x08006189
 8006080:	08006147 	.word	0x08006147
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fa08 	bl	80064a0 <TIM_OC1_SetConfig>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	619a      	str	r2, [r3, #24]
 80060c2:	e064      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x172>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa4e 	bl	800656c <TIM_OC2_SetConfig>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060de:	619a      	str	r2, [r3, #24]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ee:	619a      	str	r2, [r3, #24]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	619a      	str	r2, [r3, #24]
 8006104:	e043      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x172>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fa99 	bl	8006644 <TIM_OC3_SetConfig>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0208 	orr.w	r2, r2, #8
 8006120:	61da      	str	r2, [r3, #28]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0204 	bic.w	r2, r2, #4
 8006130:	61da      	str	r2, [r3, #28]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69d9      	ldr	r1, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]
 8006144:	e023      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x172>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fae3 	bl	8006718 <TIM_OC4_SetConfig>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006160:	61da      	str	r2, [r3, #28]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006170:	61da      	str	r2, [r3, #28]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	021a      	lsls	r2, r3, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	61da      	str	r2, [r3, #28]
 8006186:	e002      	b.n	800618e <HAL_TIM_PWM_ConfigChannel+0x172>
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
 800618c:	bf00      	nop
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_ConfigClockSource>:
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIM_ConfigClockSource+0x1c>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0b4      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x186>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f4:	d03e      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0xd4>
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061fa:	f200 8087 	bhi.w	800630c <HAL_TIM_ConfigClockSource+0x16c>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	f000 8086 	beq.w	8006312 <HAL_TIM_ConfigClockSource+0x172>
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620a:	d87f      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b70      	cmp	r3, #112	@ 0x70
 800620e:	d01a      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xa6>
 8006210:	2b70      	cmp	r3, #112	@ 0x70
 8006212:	d87b      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b60      	cmp	r3, #96	@ 0x60
 8006216:	d050      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x11a>
 8006218:	2b60      	cmp	r3, #96	@ 0x60
 800621a:	d877      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b50      	cmp	r3, #80	@ 0x50
 800621e:	d03c      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xfa>
 8006220:	2b50      	cmp	r3, #80	@ 0x50
 8006222:	d873      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b40      	cmp	r3, #64	@ 0x40
 8006226:	d058      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x13a>
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d86f      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b30      	cmp	r3, #48	@ 0x30
 800622e:	d064      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006230:	2b30      	cmp	r3, #48	@ 0x30
 8006232:	d86b      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006234:	2b20      	cmp	r3, #32
 8006236:	d060      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006238:	2b20      	cmp	r3, #32
 800623a:	d867      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05c      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006240:	2b10      	cmp	r3, #16
 8006242:	d05a      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	e062      	b.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6899      	ldr	r1, [r3, #8]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f000 fb29 	bl	80068ac <TIM_ETR_SetConfig>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	609a      	str	r2, [r3, #8]
 8006272:	e04f      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6899      	ldr	r1, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f000 fb12 	bl	80068ac <TIM_ETR_SetConfig>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	e03c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6859      	ldr	r1, [r3, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f000 fa86 	bl	80067b8 <TIM_TI1_ConfigInputStage>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2150      	movs	r1, #80	@ 0x50
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fadf 	bl	8006876 <TIM_ITRx_SetConfig>
 80062b8:	e02c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 faa5 	bl	8006816 <TIM_TI2_ConfigInputStage>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2160      	movs	r1, #96	@ 0x60
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 facf 	bl	8006876 <TIM_ITRx_SetConfig>
 80062d8:	e01c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 fa66 	bl	80067b8 <TIM_TI1_ConfigInputStage>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2140      	movs	r1, #64	@ 0x40
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fabf 	bl	8006876 <TIM_ITRx_SetConfig>
 80062f8:	e00c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 fab6 	bl	8006876 <TIM_ITRx_SetConfig>
 800630a:	e003      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
 8006310:	e000      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
 8006312:	bf00      	nop
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIM_PeriodElapsedCallback>:
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_TIM_OC_DelayElapsedCallback>:
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_IC_CaptureCallback>:
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_TIM_PWM_PulseFinishedCallback>:
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_TriggerCallback>:
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <TIM_Base_SetConfig>:
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <TIM_Base_SetConfig+0xf0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0x38>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <TIM_Base_SetConfig+0xf4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a33      	ldr	r2, [pc, #204]	@ (800648c <TIM_Base_SetConfig+0xf8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a32      	ldr	r2, [pc, #200]	@ (8006490 <TIM_Base_SetConfig+0xfc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x4a>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a28      	ldr	r2, [pc, #160]	@ (8006484 <TIM_Base_SetConfig+0xf0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01b      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ec:	d017      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a25      	ldr	r2, [pc, #148]	@ (8006488 <TIM_Base_SetConfig+0xf4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a24      	ldr	r2, [pc, #144]	@ (800648c <TIM_Base_SetConfig+0xf8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <TIM_Base_SetConfig+0xfc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a22      	ldr	r2, [pc, #136]	@ (8006494 <TIM_Base_SetConfig+0x100>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a21      	ldr	r2, [pc, #132]	@ (8006498 <TIM_Base_SetConfig+0x104>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a20      	ldr	r2, [pc, #128]	@ (800649c <TIM_Base_SetConfig+0x108>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <TIM_Base_SetConfig+0x9c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	629a      	str	r2, [r3, #40]	@ 0x28
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a0c      	ldr	r2, [pc, #48]	@ (8006484 <TIM_Base_SetConfig+0xf0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d103      	bne.n	800645e <TIM_Base_SetConfig+0xca>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	631a      	str	r2, [r3, #48]	@ 0x30
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	615a      	str	r2, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC1_SetConfig>:
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f023 0201 	bic.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	621a      	str	r2, [r3, #32]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 0302 	bic.w	r3, r3, #2
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <TIM_OC1_SetConfig+0xc8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d10c      	bne.n	8006516 <TIM_OC1_SetConfig+0x76>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f023 0308 	bic.w	r3, r3, #8
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 0304 	bic.w	r3, r3, #4
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a13      	ldr	r2, [pc, #76]	@ (8006568 <TIM_OC1_SetConfig+0xc8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d111      	bne.n	8006542 <TIM_OC1_SetConfig+0xa2>
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	635a      	str	r2, [r3, #52]	@ 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	621a      	str	r2, [r3, #32]
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40010000 	.word	0x40010000

0800656c <TIM_OC2_SetConfig>:
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 0210 	bic.w	r2, r3, #16
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0320 	bic.w	r3, r3, #32
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006640 <TIM_OC2_SetConfig+0xd4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <TIM_OC2_SetConfig+0x7c>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a15      	ldr	r2, [pc, #84]	@ (8006640 <TIM_OC2_SetConfig+0xd4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d113      	bne.n	8006618 <TIM_OC2_SetConfig+0xac>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	619a      	str	r2, [r3, #24]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	639a      	str	r2, [r3, #56]	@ 0x38
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000

08006644 <TIM_OC3_SetConfig>:
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1d      	ldr	r2, [pc, #116]	@ (8006714 <TIM_OC3_SetConfig+0xd0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10d      	bne.n	80066be <TIM_OC3_SetConfig+0x7a>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a14      	ldr	r2, [pc, #80]	@ (8006714 <TIM_OC3_SetConfig+0xd0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <TIM_OC3_SetConfig+0xaa>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40010000 	.word	0x40010000

08006718 <TIM_OC4_SetConfig>:
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	621a      	str	r2, [r3, #32]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a10      	ldr	r2, [pc, #64]	@ (80067b4 <TIM_OC4_SetConfig+0x9c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d109      	bne.n	800678c <TIM_OC4_SetConfig+0x74>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	019b      	lsls	r3, r3, #6
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	61da      	str	r2, [r3, #28]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	641a      	str	r2, [r3, #64]	@ 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000

080067b8 <TIM_TI1_ConfigInputStage>:
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0201 	bic.w	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 030a 	bic.w	r3, r3, #10
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	619a      	str	r2, [r3, #24]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <TIM_TI2_ConfigInputStage>:
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 0210 	bic.w	r2, r3, #16
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	621a      	str	r2, [r3, #32]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	619a      	str	r2, [r3, #24]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	621a      	str	r2, [r3, #32]
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <TIM_ITRx_SetConfig>:
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	f043 0307 	orr.w	r3, r3, #7
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <TIM_ETR_SetConfig>:
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <TIM_CCxChannelCmd>:
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_TIMEx_MasterConfigSynchronization>:
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e050      	b.n	80069f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d018      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699c:	d013      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a18      	ldr	r2, [pc, #96]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a16      	ldr	r2, [pc, #88]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a15      	ldr	r2, [pc, #84]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a13      	ldr	r2, [pc, #76]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10c      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80069f0:	2300      	movs	r3, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40014000 	.word	0x40014000

08006a14 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e03d      	b.n	8006aac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	645a      	str	r2, [r3, #68]	@ 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIMEx_CommutCallback>:
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_BreakCallback>:
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UART_Init>:
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Init+0x12>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e042      	b.n	8006b78 <HAL_UART_Init+0x98>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_UART_Init+0x2c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fc fbea 	bl	80032e0 <HAL_UART_MspInit>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	@ 0x24
 8006b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fdd3 	bl	80076d0 <UART_SetConfig>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b38:	611a      	str	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b48:	615a      	str	r2, [r3, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b76:	2300      	movs	r3, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_UART_Transmit>:
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	@ 0x28
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80fb      	strh	r3, [r7, #6]
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d175      	bne.n	8006c8c <HAL_UART_Transmit+0x10c>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_UART_Transmit+0x2c>
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Transmit+0x30>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e06e      	b.n	8006c8e <HAL_UART_Transmit+0x10e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2221      	movs	r2, #33	@ 0x21
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bbe:	f7fc fca5 	bl	800350c <HAL_GetTick>
 8006bc2:	6178      	str	r0, [r7, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	849a      	strh	r2, [r3, #36]	@ 0x24
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	84da      	strh	r2, [r3, #38]	@ 0x26
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd8:	d108      	bne.n	8006bec <HAL_UART_Transmit+0x6c>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_UART_Transmit+0x6c>
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e003      	b.n	8006bf4 <HAL_UART_Transmit+0x74>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e02e      	b.n	8006c54 <HAL_UART_Transmit+0xd4>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2180      	movs	r1, #128	@ 0x80
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fb37 	bl	8007274 <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_UART_Transmit+0x98>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c14:	2303      	movs	r3, #3
 8006c16:	e03a      	b.n	8006c8e <HAL_UART_Transmit+0x10e>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_UART_Transmit+0xb6>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	3302      	adds	r3, #2
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e007      	b.n	8006c46 <HAL_UART_Transmit+0xc6>
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	3301      	adds	r3, #1
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	84da      	strh	r2, [r3, #38]	@ 0x26
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1cb      	bne.n	8006bf6 <HAL_UART_Transmit+0x76>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2140      	movs	r1, #64	@ 0x40
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fb03 	bl	8007274 <UART_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_UART_Transmit+0x100>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <HAL_UART_Transmit+0x10e>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e000      	b.n	8006c8e <HAL_UART_Transmit+0x10e>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_UART_Receive_IT>:
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d112      	bne.n	8006cd6 <HAL_UART_Receive_IT+0x40>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_UART_Receive_IT+0x26>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Receive_IT+0x2a>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e00b      	b.n	8006cd8 <HAL_UART_Receive_IT+0x42>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fb2a 	bl	8007326 <UART_Start_Receive_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	e000      	b.n	8006cd8 <HAL_UART_Receive_IT+0x42>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UART_IRQHandler>:
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <HAL_UART_IRQHandler+0x66>
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <HAL_UART_IRQHandler+0x66>
 8006d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_UART_IRQHandler+0x66>
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc07 	bl	8007552 <UART_Receive_IT>
 8006d44:	e273      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
 8006d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80de 	beq.w	8006f0c <HAL_UART_IRQHandler+0x22c>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <HAL_UART_IRQHandler+0x8a>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80d1 	beq.w	8006f0c <HAL_UART_IRQHandler+0x22c>
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00b      	beq.n	8006d8e <HAL_UART_IRQHandler+0xae>
 8006d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_IRQHandler+0xae>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d86:	f043 0201 	orr.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <HAL_UART_IRQHandler+0xd2>
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_IRQHandler+0xd2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xf6>
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xf6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0204 	orr.w	r2, r3, #4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <HAL_UART_IRQHandler+0x126>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <HAL_UART_IRQHandler+0x11a>
 8006dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0x126>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 820a 	beq.w	8007224 <HAL_UART_IRQHandler+0x544>
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_UART_IRQHandler+0x14e>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_UART_IRQHandler+0x14e>
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb92 	bl	8007552 <UART_Receive_IT>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <HAL_UART_IRQHandler+0x17a>
 8006e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d04f      	beq.n	8006efa <HAL_UART_IRQHandler+0x21a>
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa9d 	bl	800739a <UART_EndRxTransfer>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b40      	cmp	r3, #64	@ 0x40
 8006e6c:	d141      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x212>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1d9      	bne.n	8006e6e <HAL_UART_IRQHandler+0x18e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d013      	beq.n	8006eea <HAL_UART_IRQHandler+0x20a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec6:	4a8a      	ldr	r2, [pc, #552]	@ (80070f0 <HAL_UART_IRQHandler+0x410>)
 8006ec8:	651a      	str	r2, [r3, #80]	@ 0x50
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc fcff 	bl	80038d2 <HAL_DMA_Abort_IT>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <HAL_UART_IRQHandler+0x228>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	e00e      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f9ac 	bl	8007248 <HAL_UART_ErrorCallback>
 8006ef0:	e00a      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9a8 	bl	8007248 <HAL_UART_ErrorCallback>
 8006ef8:	e006      	b.n	8006f08 <HAL_UART_IRQHandler+0x228>
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9a4 	bl	8007248 <HAL_UART_ErrorCallback>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	645a      	str	r2, [r3, #68]	@ 0x44
 8006f06:	e18d      	b.n	8007224 <HAL_UART_IRQHandler+0x544>
 8006f08:	bf00      	nop
 8006f0a:	e18b      	b.n	8007224 <HAL_UART_IRQHandler+0x544>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	f040 8167 	bne.w	80071e4 <HAL_UART_IRQHandler+0x504>
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8160 	beq.w	80071e4 <HAL_UART_IRQHandler+0x504>
 8006f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8159 	beq.w	80071e4 <HAL_UART_IRQHandler+0x504>
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f52:	2b40      	cmp	r3, #64	@ 0x40
 8006f54:	f040 80ce 	bne.w	80070f4 <HAL_UART_IRQHandler+0x414>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8006f64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80a9 	beq.w	80070c0 <HAL_UART_IRQHandler+0x3e0>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f76:	429a      	cmp	r2, r3
 8006f78:	f080 80a2 	bcs.w	80070c0 <HAL_UART_IRQHandler+0x3e0>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f82:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8e:	f000 8088 	beq.w	80070a2 <HAL_UART_IRQHandler+0x3c2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d9      	bne.n	8006f92 <HAL_UART_IRQHandler+0x2b2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3314      	adds	r3, #20
 8006fe4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3314      	adds	r3, #20
 8006ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007002:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007006:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007008:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800700a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e1      	bne.n	8006fde <HAL_UART_IRQHandler+0x2fe>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	663b      	str	r3, [r7, #96]	@ 0x60
 8007022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800702a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800702c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800703e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007040:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007042:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	667b      	str	r3, [r7, #100]	@ 0x64
 800704c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e3      	bne.n	800701a <HAL_UART_IRQHandler+0x33a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007084:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007086:	657b      	str	r3, [r7, #84]	@ 0x54
 8007088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800708a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	653b      	str	r3, [r7, #80]	@ 0x50
 8007092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e3      	bne.n	8007060 <HAL_UART_IRQHandler+0x380>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	4618      	mov	r0, r3
 800709e:	f7fc fba8 	bl	80037f2 <HAL_DMA_Abort>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8cf 	bl	800725c <HAL_UARTEx_RxEventCallback>
 80070be:	e0b3      	b.n	8007228 <HAL_UART_IRQHandler+0x548>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070c8:	429a      	cmp	r2, r3
 80070ca:	f040 80ad 	bne.w	8007228 <HAL_UART_IRQHandler+0x548>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d8:	f040 80a6 	bne.w	8007228 <HAL_UART_IRQHandler+0x548>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8b7 	bl	800725c <HAL_UARTEx_RxEventCallback>
 80070ee:	e09b      	b.n	8007228 <HAL_UART_IRQHandler+0x548>
 80070f0:	08007461 	.word	0x08007461
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 808e 	beq.w	800722c <HAL_UART_IRQHandler+0x54c>
 8007110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8089 	beq.w	800722c <HAL_UART_IRQHandler+0x54c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
 800712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800713e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007140:	643b      	str	r3, [r7, #64]	@ 0x40
 8007142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800714c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e3      	bne.n	800711a <HAL_UART_IRQHandler+0x43a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3314      	adds	r3, #20
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	623b      	str	r3, [r7, #32]
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007176:	633a      	str	r2, [r7, #48]	@ 0x30
 8007178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800717a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800717c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e3      	bne.n	8007152 <HAL_UART_IRQHandler+0x472>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	330c      	adds	r3, #12
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0310 	bic.w	r3, r3, #16
 80071ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071bc:	61fa      	str	r2, [r7, #28]
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	69b9      	ldr	r1, [r7, #24]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e3      	bne.n	8007198 <HAL_UART_IRQHandler+0x4b8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f83d 	bl	800725c <HAL_UARTEx_RxEventCallback>
 80071e2:	e023      	b.n	800722c <HAL_UART_IRQHandler+0x54c>
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <HAL_UART_IRQHandler+0x524>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_UART_IRQHandler+0x524>
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f940 	bl	8007482 <UART_Transmit_IT>
 8007202:	e014      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
 8007204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00e      	beq.n	800722e <HAL_UART_IRQHandler+0x54e>
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_UART_IRQHandler+0x54e>
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f980 	bl	8007522 <UART_EndTransmit_IT>
 8007222:	e004      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <HAL_UART_IRQHandler+0x54e>
 800722c:	bf00      	nop
 800722e:	37e8      	adds	r7, #232	@ 0xe8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_UART_TxCpltCallback>:
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UART_ErrorCallback>:
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_UARTEx_RxEventCallback>:
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	807b      	strh	r3, [r7, #2]
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <UART_WaitOnFlagUntilTimeout>:
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	71fb      	strb	r3, [r7, #7]
 8007284:	e03b      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d037      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 800728e:	f7fc f93d 	bl	800350c <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	6a3a      	ldr	r2, [r7, #32]
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x34>
 80072a4:	2303      	movs	r3, #3
 80072a6:	e03a      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0xaa>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d023      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b80      	cmp	r3, #128	@ 0x80
 80072ba:	d020      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	d01d      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d116      	bne.n	80072fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f857 	bl	800739a <UART_EndRxTransfer>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2208      	movs	r2, #8
 80072f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072fa:	2301      	movs	r3, #1
 80072fc:	e00f      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0xaa>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	429a      	cmp	r2, r3
 800731a:	d0b4      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x12>
 800731c:	2300      	movs	r3, #0
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <UART_Start_Receive_IT>:
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4613      	mov	r3, r2
 8007332:	80fb      	strh	r3, [r7, #6]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	629a      	str	r2, [r3, #40]	@ 0x28
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	88fa      	ldrh	r2, [r7, #6]
 800733e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2222      	movs	r2, #34	@ 0x22
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <UART_Start_Receive_IT+0x46>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	615a      	str	r2, [r3, #20]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0220 	orr.w	r2, r2, #32
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	2300      	movs	r3, #0
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <UART_EndRxTransfer>:
 800739a:	b480      	push	{r7}
 800739c:	b095      	sub	sp, #84	@ 0x54
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	330c      	adds	r3, #12
 80073c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_EndRxTransfer+0x8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	623b      	str	r3, [r7, #32]
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	61fb      	str	r3, [r7, #28]
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f023 0301 	bic.w	r3, r3, #1
 80073ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3314      	adds	r3, #20
 80073f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_EndRxTransfer+0x3c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740e:	2b01      	cmp	r3, #1
 8007410:	d119      	bne.n	8007446 <UART_EndRxTransfer+0xac>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f023 0310 	bic.w	r3, r3, #16
 8007428:	647b      	str	r3, [r7, #68]	@ 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007432:	61ba      	str	r2, [r7, #24]
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	6979      	ldr	r1, [r7, #20]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_EndRxTransfer+0x78>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	@ 0x30
 8007454:	bf00      	nop
 8007456:	3754      	adds	r7, #84	@ 0x54
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <UART_DMAAbortOnError>:
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fee7 	bl	8007248 <HAL_UART_ErrorCallback>
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <UART_Transmit_IT>:
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b21      	cmp	r3, #33	@ 0x21
 8007494:	d13e      	bne.n	8007514 <UART_Transmit_IT+0x92>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	d114      	bne.n	80074ca <UART_Transmit_IT+0x48>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <UART_Transmit_IT+0x48>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	1c9a      	adds	r2, r3, #2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	621a      	str	r2, [r3, #32]
 80074c8:	e008      	b.n	80074dc <UART_Transmit_IT+0x5a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	1c59      	adds	r1, r3, #1
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6211      	str	r1, [r2, #32]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	605a      	str	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <UART_Transmit_IT+0x8e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074fe:	60da      	str	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750e:	60da      	str	r2, [r3, #12]
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <UART_Transmit_IT+0x94>
 8007514:	2302      	movs	r3, #2
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <UART_EndTransmit_IT>:
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fe76 	bl	8007234 <HAL_UART_TxCpltCallback>
 8007548:	2300      	movs	r3, #0
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_Receive_IT>:
 8007552:	b580      	push	{r7, lr}
 8007554:	b08c      	sub	sp, #48	@ 0x30
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	2300      	movs	r3, #0
 800755c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800755e:	2300      	movs	r3, #0
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b22      	cmp	r3, #34	@ 0x22
 800756c:	f040 80aa 	bne.w	80076c4 <UART_Receive_IT+0x172>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007578:	d115      	bne.n	80075a6 <UART_Receive_IT+0x54>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d111      	bne.n	80075a6 <UART_Receive_IT+0x54>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007594:	b29a      	uxth	r2, r3
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80075a4:	e024      	b.n	80075f0 <UART_Receive_IT+0x9e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b4:	d007      	beq.n	80075c6 <UART_Receive_IT+0x74>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <UART_Receive_IT+0x82>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <UART_Receive_IT+0x82>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e008      	b.n	80075e6 <UART_Receive_IT+0x94>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4619      	mov	r1, r3
 80075fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007600:	2b00      	cmp	r3, #0
 8007602:	d15d      	bne.n	80076c0 <UART_Receive_IT+0x16e>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0220 	bic.w	r2, r2, #32
 8007612:	60da      	str	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	615a      	str	r2, [r3, #20]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	635a      	str	r2, [r3, #52]	@ 0x34
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	2b01      	cmp	r3, #1
 8007648:	d135      	bne.n	80076b6 <UART_Receive_IT+0x164>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 0310 	bic.w	r3, r3, #16
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007670:	623a      	str	r2, [r7, #32]
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_Receive_IT+0xfe>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b10      	cmp	r3, #16
 8007690:	d10a      	bne.n	80076a8 <UART_Receive_IT+0x156>
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fdd4 	bl	800725c <HAL_UARTEx_RxEventCallback>
 80076b4:	e002      	b.n	80076bc <UART_Receive_IT+0x16a>
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fa fb36 	bl	8001d28 <HAL_UART_RxCpltCallback>
 80076bc:	2300      	movs	r3, #0
 80076be:	e002      	b.n	80076c6 <UART_Receive_IT+0x174>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <UART_Receive_IT+0x174>
 80076c4:	2302      	movs	r3, #2
 80076c6:	4618      	mov	r0, r3
 80076c8:	3730      	adds	r7, #48	@ 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_SetConfig>:
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b0c0      	sub	sp, #256	@ 0x100
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	68d9      	ldr	r1, [r3, #12]
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	ea40 0301 	orr.w	r3, r0, r1
 80076f8:	6113      	str	r3, [r2, #16]
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	431a      	orrs	r2, r3
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007728:	f021 010c 	bic.w	r1, r1, #12
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007736:	430b      	orrs	r3, r1
 8007738:	60d3      	str	r3, [r2, #12]
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	6999      	ldr	r1, [r3, #24]
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	ea40 0301 	orr.w	r3, r0, r1
 8007756:	6153      	str	r3, [r2, #20]
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b8f      	ldr	r3, [pc, #572]	@ (800799c <UART_SetConfig+0x2cc>)
 8007760:	429a      	cmp	r2, r3
 8007762:	d005      	beq.n	8007770 <UART_SetConfig+0xa0>
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b8d      	ldr	r3, [pc, #564]	@ (80079a0 <UART_SetConfig+0x2d0>)
 800776c:	429a      	cmp	r2, r3
 800776e:	d104      	bne.n	800777a <UART_SetConfig+0xaa>
 8007770:	f7fe f860 	bl	8005834 <HAL_RCC_GetPCLK2Freq>
 8007774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007778:	e003      	b.n	8007782 <UART_SetConfig+0xb2>
 800777a:	f7fe f847 	bl	800580c <HAL_RCC_GetPCLK1Freq>
 800777e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778c:	f040 810c 	bne.w	80079a8 <UART_SetConfig+0x2d8>
 8007790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007794:	2200      	movs	r2, #0
 8007796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800779a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800779e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	1891      	adds	r1, r2, r2
 80077a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077aa:	415b      	adcs	r3, r3
 80077ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077b2:	4621      	mov	r1, r4
 80077b4:	eb12 0801 	adds.w	r8, r2, r1
 80077b8:	4629      	mov	r1, r5
 80077ba:	eb43 0901 	adc.w	r9, r3, r1
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077d2:	4690      	mov	r8, r2
 80077d4:	4699      	mov	r9, r3
 80077d6:	4623      	mov	r3, r4
 80077d8:	eb18 0303 	adds.w	r3, r8, r3
 80077dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077e0:	462b      	mov	r3, r5
 80077e2:	eb49 0303 	adc.w	r3, r9, r3
 80077e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077fe:	460b      	mov	r3, r1
 8007800:	18db      	adds	r3, r3, r3
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
 8007804:	4613      	mov	r3, r2
 8007806:	eb42 0303 	adc.w	r3, r2, r3
 800780a:	657b      	str	r3, [r7, #84]	@ 0x54
 800780c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007814:	f7f9 fa20 	bl	8000c58 <__aeabi_uldivmod>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <UART_SetConfig+0x2d4>)
 800781e:	fba3 2302 	umull	r2, r3, r3, r2
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	011c      	lsls	r4, r3, #4
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	1891      	adds	r1, r2, r2
 800783e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007840:	415b      	adcs	r3, r3
 8007842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007848:	4641      	mov	r1, r8
 800784a:	eb12 0a01 	adds.w	sl, r2, r1
 800784e:	4649      	mov	r1, r9
 8007850:	eb43 0b01 	adc.w	fp, r3, r1
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007868:	4692      	mov	sl, r2
 800786a:	469b      	mov	fp, r3
 800786c:	4643      	mov	r3, r8
 800786e:	eb1a 0303 	adds.w	r3, sl, r3
 8007872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007876:	464b      	mov	r3, r9
 8007878:	eb4b 0303 	adc.w	r3, fp, r3
 800787c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800788c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007894:	460b      	mov	r3, r1
 8007896:	18db      	adds	r3, r3, r3
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
 800789a:	4613      	mov	r3, r2
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078aa:	f7f9 f9d5 	bl	8000c58 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	4b3b      	ldr	r3, [pc, #236]	@ (80079a4 <UART_SetConfig+0x2d4>)
 80078b6:	fba3 2301 	umull	r2, r3, r3, r1
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	2264      	movs	r2, #100	@ 0x64
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	1acb      	subs	r3, r1, r3
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078ca:	4b36      	ldr	r3, [pc, #216]	@ (80079a4 <UART_SetConfig+0x2d4>)
 80078cc:	fba3 2302 	umull	r2, r3, r3, r2
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078d8:	441c      	add	r4, r3
 80078da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	1891      	adds	r1, r2, r2
 80078f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078f4:	415b      	adcs	r3, r3
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078fc:	4641      	mov	r1, r8
 80078fe:	1851      	adds	r1, r2, r1
 8007900:	6339      	str	r1, [r7, #48]	@ 0x30
 8007902:	4649      	mov	r1, r9
 8007904:	414b      	adcs	r3, r1
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007914:	4659      	mov	r1, fp
 8007916:	00cb      	lsls	r3, r1, #3
 8007918:	4651      	mov	r1, sl
 800791a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800791e:	4651      	mov	r1, sl
 8007920:	00ca      	lsls	r2, r1, #3
 8007922:	4610      	mov	r0, r2
 8007924:	4619      	mov	r1, r3
 8007926:	4603      	mov	r3, r0
 8007928:	4642      	mov	r2, r8
 800792a:	189b      	adds	r3, r3, r2
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007930:	464b      	mov	r3, r9
 8007932:	460a      	mov	r2, r1
 8007934:	eb42 0303 	adc.w	r3, r2, r3
 8007938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800794c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007950:	460b      	mov	r3, r1
 8007952:	18db      	adds	r3, r3, r3
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007956:	4613      	mov	r3, r2
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800795e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007966:	f7f9 f977 	bl	8000c58 <__aeabi_uldivmod>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <UART_SetConfig+0x2d4>)
 8007970:	fba3 1302 	umull	r1, r3, r3, r2
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	2164      	movs	r1, #100	@ 0x64
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	3332      	adds	r3, #50	@ 0x32
 8007982:	4a08      	ldr	r2, [pc, #32]	@ (80079a4 <UART_SetConfig+0x2d4>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f003 0207 	and.w	r2, r3, #7
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4422      	add	r2, r4
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	e106      	b.n	8007ba8 <UART_SetConfig+0x4d8>
 800799a:	bf00      	nop
 800799c:	40011000 	.word	0x40011000
 80079a0:	40011400 	.word	0x40011400
 80079a4:	51eb851f 	.word	0x51eb851f
 80079a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079ba:	4642      	mov	r2, r8
 80079bc:	464b      	mov	r3, r9
 80079be:	1891      	adds	r1, r2, r2
 80079c0:	6239      	str	r1, [r7, #32]
 80079c2:	415b      	adcs	r3, r3
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ca:	4641      	mov	r1, r8
 80079cc:	1854      	adds	r4, r2, r1
 80079ce:	4649      	mov	r1, r9
 80079d0:	eb43 0501 	adc.w	r5, r3, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	00eb      	lsls	r3, r5, #3
 80079de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079e2:	00e2      	lsls	r2, r4, #3
 80079e4:	4614      	mov	r4, r2
 80079e6:	461d      	mov	r5, r3
 80079e8:	4643      	mov	r3, r8
 80079ea:	18e3      	adds	r3, r4, r3
 80079ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079f0:	464b      	mov	r3, r9
 80079f2:	eb45 0303 	adc.w	r3, r5, r3
 80079f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a16:	4629      	mov	r1, r5
 8007a18:	008b      	lsls	r3, r1, #2
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a20:	4621      	mov	r1, r4
 8007a22:	008a      	lsls	r2, r1, #2
 8007a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a28:	f7f9 f916 	bl	8000c58 <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4b60      	ldr	r3, [pc, #384]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007a32:	fba3 2302 	umull	r2, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	011c      	lsls	r4, r3, #4
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	1891      	adds	r1, r2, r2
 8007a52:	61b9      	str	r1, [r7, #24]
 8007a54:	415b      	adcs	r3, r3
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	1851      	adds	r1, r2, r1
 8007a60:	6139      	str	r1, [r7, #16]
 8007a62:	4649      	mov	r1, r9
 8007a64:	414b      	adcs	r3, r1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a74:	4659      	mov	r1, fp
 8007a76:	00cb      	lsls	r3, r1, #3
 8007a78:	4651      	mov	r1, sl
 8007a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7e:	4651      	mov	r1, sl
 8007a80:	00ca      	lsls	r2, r1, #3
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	189b      	adds	r3, r3, r2
 8007a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a90:	464b      	mov	r3, r9
 8007a92:	460a      	mov	r2, r1
 8007a94:	eb42 0303 	adc.w	r3, r2, r3
 8007a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	008b      	lsls	r3, r1, #2
 8007ab8:	4641      	mov	r1, r8
 8007aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007abe:	4641      	mov	r1, r8
 8007ac0:	008a      	lsls	r2, r1, #2
 8007ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ac6:	f7f9 f8c7 	bl	8000c58 <__aeabi_uldivmod>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4b38      	ldr	r3, [pc, #224]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	2264      	movs	r2, #100	@ 0x64
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	1acb      	subs	r3, r1, r3
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	3332      	adds	r3, #50	@ 0x32
 8007ae4:	4a33      	ldr	r2, [pc, #204]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007af0:	441c      	add	r4, r3
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af6:	2200      	movs	r2, #0
 8007af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8007afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b10:	4641      	mov	r1, r8
 8007b12:	1851      	adds	r1, r2, r1
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	4649      	mov	r1, r9
 8007b18:	414b      	adcs	r3, r1
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b28:	4659      	mov	r1, fp
 8007b2a:	00cb      	lsls	r3, r1, #3
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b32:	4651      	mov	r1, sl
 8007b34:	00ca      	lsls	r2, r1, #3
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b42:	464b      	mov	r3, r9
 8007b44:	460a      	mov	r2, r1
 8007b46:	eb42 0303 	adc.w	r3, r2, r3
 8007b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b64:	4649      	mov	r1, r9
 8007b66:	008b      	lsls	r3, r1, #2
 8007b68:	4641      	mov	r1, r8
 8007b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b6e:	4641      	mov	r1, r8
 8007b70:	008a      	lsls	r2, r1, #2
 8007b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b76:	f7f9 f86f 	bl	8000c58 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007b80:	fba3 1302 	umull	r1, r3, r3, r2
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	2164      	movs	r1, #100	@ 0x64
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	3332      	adds	r3, #50	@ 0x32
 8007b92:	4a08      	ldr	r2, [pc, #32]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4422      	add	r2, r4
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	bf00      	nop
 8007baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bb4:	51eb851f 	.word	0x51eb851f

08007bb8 <__cvt>:
 8007bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	ec57 6b10 	vmov	r6, r7, d0
 8007bc0:	2f00      	cmp	r7, #0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	bfbb      	ittet	lt
 8007bca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bce:	461f      	movlt	r7, r3
 8007bd0:	2300      	movge	r3, #0
 8007bd2:	232d      	movlt	r3, #45	@ 0x2d
 8007bd4:	700b      	strb	r3, [r1, #0]
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007bdc:	4691      	mov	r9, r2
 8007bde:	f023 0820 	bic.w	r8, r3, #32
 8007be2:	bfbc      	itt	lt
 8007be4:	4632      	movlt	r2, r6
 8007be6:	4616      	movlt	r6, r2
 8007be8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bec:	d005      	beq.n	8007bfa <__cvt+0x42>
 8007bee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bf2:	d100      	bne.n	8007bf6 <__cvt+0x3e>
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	e000      	b.n	8007bfc <__cvt+0x44>
 8007bfa:	2103      	movs	r1, #3
 8007bfc:	ab03      	add	r3, sp, #12
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	ab02      	add	r3, sp, #8
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	ec47 6b10 	vmov	d0, r6, r7
 8007c08:	4653      	mov	r3, sl
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	f000 ff4c 	bl	8008aa8 <_dtoa_r>
 8007c10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c14:	4605      	mov	r5, r0
 8007c16:	d119      	bne.n	8007c4c <__cvt+0x94>
 8007c18:	f019 0f01 	tst.w	r9, #1
 8007c1c:	d00e      	beq.n	8007c3c <__cvt+0x84>
 8007c1e:	eb00 0904 	add.w	r9, r0, r4
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	4630      	mov	r0, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c2e:	b108      	cbz	r0, 8007c34 <__cvt+0x7c>
 8007c30:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c34:	2230      	movs	r2, #48	@ 0x30
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	454b      	cmp	r3, r9
 8007c3a:	d31e      	bcc.n	8007c7a <__cvt+0xc2>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c40:	1b5b      	subs	r3, r3, r5
 8007c42:	4628      	mov	r0, r5
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	b004      	add	sp, #16
 8007c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c50:	eb00 0904 	add.w	r9, r0, r4
 8007c54:	d1e5      	bne.n	8007c22 <__cvt+0x6a>
 8007c56:	7803      	ldrb	r3, [r0, #0]
 8007c58:	2b30      	cmp	r3, #48	@ 0x30
 8007c5a:	d10a      	bne.n	8007c72 <__cvt+0xba>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c68:	b918      	cbnz	r0, 8007c72 <__cvt+0xba>
 8007c6a:	f1c4 0401 	rsb	r4, r4, #1
 8007c6e:	f8ca 4000 	str.w	r4, [sl]
 8007c72:	f8da 3000 	ldr.w	r3, [sl]
 8007c76:	4499      	add	r9, r3
 8007c78:	e7d3      	b.n	8007c22 <__cvt+0x6a>
 8007c7a:	1c59      	adds	r1, r3, #1
 8007c7c:	9103      	str	r1, [sp, #12]
 8007c7e:	701a      	strb	r2, [r3, #0]
 8007c80:	e7d9      	b.n	8007c36 <__cvt+0x7e>

08007c82 <__exponent>:
 8007c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c84:	2900      	cmp	r1, #0
 8007c86:	bfba      	itte	lt
 8007c88:	4249      	neglt	r1, r1
 8007c8a:	232d      	movlt	r3, #45	@ 0x2d
 8007c8c:	232b      	movge	r3, #43	@ 0x2b
 8007c8e:	2909      	cmp	r1, #9
 8007c90:	7002      	strb	r2, [r0, #0]
 8007c92:	7043      	strb	r3, [r0, #1]
 8007c94:	dd29      	ble.n	8007cea <__exponent+0x68>
 8007c96:	f10d 0307 	add.w	r3, sp, #7
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	270a      	movs	r7, #10
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ca4:	fb07 1416 	mls	r4, r7, r6, r1
 8007ca8:	3430      	adds	r4, #48	@ 0x30
 8007caa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cae:	460c      	mov	r4, r1
 8007cb0:	2c63      	cmp	r4, #99	@ 0x63
 8007cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	dcf1      	bgt.n	8007c9e <__exponent+0x1c>
 8007cba:	3130      	adds	r1, #48	@ 0x30
 8007cbc:	1e94      	subs	r4, r2, #2
 8007cbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cc2:	1c41      	adds	r1, r0, #1
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	42ab      	cmp	r3, r5
 8007cc8:	d30a      	bcc.n	8007ce0 <__exponent+0x5e>
 8007cca:	f10d 0309 	add.w	r3, sp, #9
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	42ac      	cmp	r4, r5
 8007cd2:	bf88      	it	hi
 8007cd4:	2300      	movhi	r3, #0
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	4403      	add	r3, r0
 8007cda:	1a18      	subs	r0, r3, r0
 8007cdc:	b003      	add	sp, #12
 8007cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ce4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ce8:	e7ed      	b.n	8007cc6 <__exponent+0x44>
 8007cea:	2330      	movs	r3, #48	@ 0x30
 8007cec:	3130      	adds	r1, #48	@ 0x30
 8007cee:	7083      	strb	r3, [r0, #2]
 8007cf0:	70c1      	strb	r1, [r0, #3]
 8007cf2:	1d03      	adds	r3, r0, #4
 8007cf4:	e7f1      	b.n	8007cda <__exponent+0x58>
	...

08007cf8 <_printf_float>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	b08d      	sub	sp, #52	@ 0x34
 8007cfe:	460c      	mov	r4, r1
 8007d00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d04:	4616      	mov	r6, r2
 8007d06:	461f      	mov	r7, r3
 8007d08:	4605      	mov	r5, r0
 8007d0a:	f000 fdbd 	bl	8008888 <_localeconv_r>
 8007d0e:	6803      	ldr	r3, [r0, #0]
 8007d10:	9304      	str	r3, [sp, #16]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f8 fab4 	bl	8000280 <strlen>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d20:	9005      	str	r0, [sp, #20]
 8007d22:	3307      	adds	r3, #7
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	f103 0208 	add.w	r2, r3, #8
 8007d2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d30:	f8d4 b000 	ldr.w	fp, [r4]
 8007d34:	f8c8 2000 	str.w	r2, [r8]
 8007d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007fc0 <_printf_float+0x2c8>)
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	f7f8 fef2 	bl	8000b3c <__aeabi_dcmpun>
 8007d58:	bb70      	cbnz	r0, 8007db8 <_printf_float+0xc0>
 8007d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5e:	4b98      	ldr	r3, [pc, #608]	@ (8007fc0 <_printf_float+0x2c8>)
 8007d60:	f04f 32ff 	mov.w	r2, #4294967295
 8007d64:	f7f8 fecc 	bl	8000b00 <__aeabi_dcmple>
 8007d68:	bb30      	cbnz	r0, 8007db8 <_printf_float+0xc0>
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 febb 	bl	8000aec <__aeabi_dcmplt>
 8007d76:	b110      	cbz	r0, 8007d7e <_printf_float+0x86>
 8007d78:	232d      	movs	r3, #45	@ 0x2d
 8007d7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7e:	4a91      	ldr	r2, [pc, #580]	@ (8007fc4 <_printf_float+0x2cc>)
 8007d80:	4b91      	ldr	r3, [pc, #580]	@ (8007fc8 <_printf_float+0x2d0>)
 8007d82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d86:	bf8c      	ite	hi
 8007d88:	4690      	movhi	r8, r2
 8007d8a:	4698      	movls	r8, r3
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	f02b 0304 	bic.w	r3, fp, #4
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	9700      	str	r7, [sp, #0]
 8007d9c:	4633      	mov	r3, r6
 8007d9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f9d2 	bl	800814c <_printf_common>
 8007da8:	3001      	adds	r0, #1
 8007daa:	f040 808d 	bne.w	8007ec8 <_printf_float+0x1d0>
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295
 8007db2:	b00d      	add	sp, #52	@ 0x34
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	f7f8 febc 	bl	8000b3c <__aeabi_dcmpun>
 8007dc4:	b140      	cbz	r0, 8007dd8 <_printf_float+0xe0>
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfbc      	itt	lt
 8007dcc:	232d      	movlt	r3, #45	@ 0x2d
 8007dce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8007fcc <_printf_float+0x2d4>)
 8007dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8007fd0 <_printf_float+0x2d8>)
 8007dd6:	e7d4      	b.n	8007d82 <_printf_float+0x8a>
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007dde:	9206      	str	r2, [sp, #24]
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	d13b      	bne.n	8007e5c <_printf_float+0x164>
 8007de4:	2306      	movs	r3, #6
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007dec:	2300      	movs	r3, #0
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007df4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007df8:	ab09      	add	r3, sp, #36	@ 0x24
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	6861      	ldr	r1, [r4, #4]
 8007dfe:	ec49 8b10 	vmov	d0, r8, r9
 8007e02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7ff fed6 	bl	8007bb8 <__cvt>
 8007e0c:	9b06      	ldr	r3, [sp, #24]
 8007e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e10:	2b47      	cmp	r3, #71	@ 0x47
 8007e12:	4680      	mov	r8, r0
 8007e14:	d129      	bne.n	8007e6a <_printf_float+0x172>
 8007e16:	1cc8      	adds	r0, r1, #3
 8007e18:	db02      	blt.n	8007e20 <_printf_float+0x128>
 8007e1a:	6863      	ldr	r3, [r4, #4]
 8007e1c:	4299      	cmp	r1, r3
 8007e1e:	dd41      	ble.n	8007ea4 <_printf_float+0x1ac>
 8007e20:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e24:	fa5f fa8a 	uxtb.w	sl, sl
 8007e28:	3901      	subs	r1, #1
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e32:	f7ff ff26 	bl	8007c82 <__exponent>
 8007e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e38:	1813      	adds	r3, r2, r0
 8007e3a:	2a01      	cmp	r2, #1
 8007e3c:	4681      	mov	r9, r0
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	dc02      	bgt.n	8007e48 <_printf_float+0x150>
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	07d2      	lsls	r2, r2, #31
 8007e46:	d501      	bpl.n	8007e4c <_printf_float+0x154>
 8007e48:	3301      	adds	r3, #1
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0a2      	beq.n	8007d9a <_printf_float+0xa2>
 8007e54:	232d      	movs	r3, #45	@ 0x2d
 8007e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e5a:	e79e      	b.n	8007d9a <_printf_float+0xa2>
 8007e5c:	9a06      	ldr	r2, [sp, #24]
 8007e5e:	2a47      	cmp	r2, #71	@ 0x47
 8007e60:	d1c2      	bne.n	8007de8 <_printf_float+0xf0>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1c0      	bne.n	8007de8 <_printf_float+0xf0>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e7bd      	b.n	8007de6 <_printf_float+0xee>
 8007e6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e6e:	d9db      	bls.n	8007e28 <_printf_float+0x130>
 8007e70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e74:	d118      	bne.n	8007ea8 <_printf_float+0x1b0>
 8007e76:	2900      	cmp	r1, #0
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	dd0b      	ble.n	8007e94 <_printf_float+0x19c>
 8007e7c:	6121      	str	r1, [r4, #16]
 8007e7e:	b913      	cbnz	r3, 8007e86 <_printf_float+0x18e>
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	07d0      	lsls	r0, r2, #31
 8007e84:	d502      	bpl.n	8007e8c <_printf_float+0x194>
 8007e86:	3301      	adds	r3, #1
 8007e88:	440b      	add	r3, r1
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e8e:	f04f 0900 	mov.w	r9, #0
 8007e92:	e7db      	b.n	8007e4c <_printf_float+0x154>
 8007e94:	b913      	cbnz	r3, 8007e9c <_printf_float+0x1a4>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	07d2      	lsls	r2, r2, #31
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_float+0x1a8>
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	e7f4      	b.n	8007e8a <_printf_float+0x192>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7f2      	b.n	8007e8a <_printf_float+0x192>
 8007ea4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	db05      	blt.n	8007eba <_printf_float+0x1c2>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6121      	str	r1, [r4, #16]
 8007eb2:	07d8      	lsls	r0, r3, #31
 8007eb4:	d5ea      	bpl.n	8007e8c <_printf_float+0x194>
 8007eb6:	1c4b      	adds	r3, r1, #1
 8007eb8:	e7e7      	b.n	8007e8a <_printf_float+0x192>
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	bfd4      	ite	le
 8007ebe:	f1c1 0202 	rsble	r2, r1, #2
 8007ec2:	2201      	movgt	r2, #1
 8007ec4:	4413      	add	r3, r2
 8007ec6:	e7e0      	b.n	8007e8a <_printf_float+0x192>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	055a      	lsls	r2, r3, #21
 8007ecc:	d407      	bmi.n	8007ede <_printf_float+0x1e6>
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d12b      	bne.n	8007f34 <_printf_float+0x23c>
 8007edc:	e767      	b.n	8007dae <_printf_float+0xb6>
 8007ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ee2:	f240 80dd 	bls.w	80080a0 <_printf_float+0x3a8>
 8007ee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	f7f8 fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d033      	beq.n	8007f5e <_printf_float+0x266>
 8007ef6:	4a37      	ldr	r2, [pc, #220]	@ (8007fd4 <_printf_float+0x2dc>)
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f af54 	beq.w	8007dae <_printf_float+0xb6>
 8007f06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f0a:	4543      	cmp	r3, r8
 8007f0c:	db02      	blt.n	8007f14 <_printf_float+0x21c>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	07d8      	lsls	r0, r3, #31
 8007f12:	d50f      	bpl.n	8007f34 <_printf_float+0x23c>
 8007f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f43f af45 	beq.w	8007dae <_printf_float+0xb6>
 8007f24:	f04f 0900 	mov.w	r9, #0
 8007f28:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f2c:	f104 0a1a 	add.w	sl, r4, #26
 8007f30:	45c8      	cmp	r8, r9
 8007f32:	dc09      	bgt.n	8007f48 <_printf_float+0x250>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	079b      	lsls	r3, r3, #30
 8007f38:	f100 8103 	bmi.w	8008142 <_printf_float+0x44a>
 8007f3c:	68e0      	ldr	r0, [r4, #12]
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f40:	4298      	cmp	r0, r3
 8007f42:	bfb8      	it	lt
 8007f44:	4618      	movlt	r0, r3
 8007f46:	e734      	b.n	8007db2 <_printf_float+0xba>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	f43f af2b 	beq.w	8007dae <_printf_float+0xb6>
 8007f58:	f109 0901 	add.w	r9, r9, #1
 8007f5c:	e7e8      	b.n	8007f30 <_printf_float+0x238>
 8007f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	dc39      	bgt.n	8007fd8 <_printf_float+0x2e0>
 8007f64:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd4 <_printf_float+0x2dc>)
 8007f66:	2301      	movs	r3, #1
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af1d 	beq.w	8007dae <_printf_float+0xb6>
 8007f74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f78:	ea59 0303 	orrs.w	r3, r9, r3
 8007f7c:	d102      	bne.n	8007f84 <_printf_float+0x28c>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	07d9      	lsls	r1, r3, #31
 8007f82:	d5d7      	bpl.n	8007f34 <_printf_float+0x23c>
 8007f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af0d 	beq.w	8007dae <_printf_float+0xb6>
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	f104 0b1a 	add.w	fp, r4, #26
 8007f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9e:	425b      	negs	r3, r3
 8007fa0:	4553      	cmp	r3, sl
 8007fa2:	dc01      	bgt.n	8007fa8 <_printf_float+0x2b0>
 8007fa4:	464b      	mov	r3, r9
 8007fa6:	e793      	b.n	8007ed0 <_printf_float+0x1d8>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	465a      	mov	r2, fp
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f aefb 	beq.w	8007dae <_printf_float+0xb6>
 8007fb8:	f10a 0a01 	add.w	sl, sl, #1
 8007fbc:	e7ee      	b.n	8007f9c <_printf_float+0x2a4>
 8007fbe:	bf00      	nop
 8007fc0:	7fefffff 	.word	0x7fefffff
 8007fc4:	0800b1c8 	.word	0x0800b1c8
 8007fc8:	0800b1c4 	.word	0x0800b1c4
 8007fcc:	0800b1d0 	.word	0x0800b1d0
 8007fd0:	0800b1cc 	.word	0x0800b1cc
 8007fd4:	0800b1d4 	.word	0x0800b1d4
 8007fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fde:	4553      	cmp	r3, sl
 8007fe0:	bfa8      	it	ge
 8007fe2:	4653      	movge	r3, sl
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	4699      	mov	r9, r3
 8007fe8:	dc36      	bgt.n	8008058 <_printf_float+0x360>
 8007fea:	f04f 0b00 	mov.w	fp, #0
 8007fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ff2:	f104 021a 	add.w	r2, r4, #26
 8007ff6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ff8:	9306      	str	r3, [sp, #24]
 8007ffa:	eba3 0309 	sub.w	r3, r3, r9
 8007ffe:	455b      	cmp	r3, fp
 8008000:	dc31      	bgt.n	8008066 <_printf_float+0x36e>
 8008002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008004:	459a      	cmp	sl, r3
 8008006:	dc3a      	bgt.n	800807e <_printf_float+0x386>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07da      	lsls	r2, r3, #31
 800800c:	d437      	bmi.n	800807e <_printf_float+0x386>
 800800e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008010:	ebaa 0903 	sub.w	r9, sl, r3
 8008014:	9b06      	ldr	r3, [sp, #24]
 8008016:	ebaa 0303 	sub.w	r3, sl, r3
 800801a:	4599      	cmp	r9, r3
 800801c:	bfa8      	it	ge
 800801e:	4699      	movge	r9, r3
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	dc33      	bgt.n	800808e <_printf_float+0x396>
 8008026:	f04f 0800 	mov.w	r8, #0
 800802a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802e:	f104 0b1a 	add.w	fp, r4, #26
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	ebaa 0303 	sub.w	r3, sl, r3
 8008038:	eba3 0309 	sub.w	r3, r3, r9
 800803c:	4543      	cmp	r3, r8
 800803e:	f77f af79 	ble.w	8007f34 <_printf_float+0x23c>
 8008042:	2301      	movs	r3, #1
 8008044:	465a      	mov	r2, fp
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f aeae 	beq.w	8007dae <_printf_float+0xb6>
 8008052:	f108 0801 	add.w	r8, r8, #1
 8008056:	e7ec      	b.n	8008032 <_printf_float+0x33a>
 8008058:	4642      	mov	r2, r8
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	d1c2      	bne.n	8007fea <_printf_float+0x2f2>
 8008064:	e6a3      	b.n	8007dae <_printf_float+0xb6>
 8008066:	2301      	movs	r3, #1
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	9206      	str	r2, [sp, #24]
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f ae9c 	beq.w	8007dae <_printf_float+0xb6>
 8008076:	9a06      	ldr	r2, [sp, #24]
 8008078:	f10b 0b01 	add.w	fp, fp, #1
 800807c:	e7bb      	b.n	8007ff6 <_printf_float+0x2fe>
 800807e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	d1c0      	bne.n	800800e <_printf_float+0x316>
 800808c:	e68f      	b.n	8007dae <_printf_float+0xb6>
 800808e:	9a06      	ldr	r2, [sp, #24]
 8008090:	464b      	mov	r3, r9
 8008092:	4442      	add	r2, r8
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	d1c3      	bne.n	8008026 <_printf_float+0x32e>
 800809e:	e686      	b.n	8007dae <_printf_float+0xb6>
 80080a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080a4:	f1ba 0f01 	cmp.w	sl, #1
 80080a8:	dc01      	bgt.n	80080ae <_printf_float+0x3b6>
 80080aa:	07db      	lsls	r3, r3, #31
 80080ac:	d536      	bpl.n	800811c <_printf_float+0x424>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4642      	mov	r2, r8
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f ae78 	beq.w	8007dae <_printf_float+0xb6>
 80080be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f ae70 	beq.w	8007dae <_printf_float+0xb6>
 80080ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080d2:	2200      	movs	r2, #0
 80080d4:	2300      	movs	r3, #0
 80080d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080da:	f7f8 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80080de:	b9c0      	cbnz	r0, 8008112 <_printf_float+0x41a>
 80080e0:	4653      	mov	r3, sl
 80080e2:	f108 0201 	add.w	r2, r8, #1
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	d10c      	bne.n	800810a <_printf_float+0x412>
 80080f0:	e65d      	b.n	8007dae <_printf_float+0xb6>
 80080f2:	2301      	movs	r3, #1
 80080f4:	465a      	mov	r2, fp
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f ae56 	beq.w	8007dae <_printf_float+0xb6>
 8008102:	f108 0801 	add.w	r8, r8, #1
 8008106:	45d0      	cmp	r8, sl
 8008108:	dbf3      	blt.n	80080f2 <_printf_float+0x3fa>
 800810a:	464b      	mov	r3, r9
 800810c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008110:	e6df      	b.n	8007ed2 <_printf_float+0x1da>
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	f104 0b1a 	add.w	fp, r4, #26
 800811a:	e7f4      	b.n	8008106 <_printf_float+0x40e>
 800811c:	2301      	movs	r3, #1
 800811e:	4642      	mov	r2, r8
 8008120:	e7e1      	b.n	80080e6 <_printf_float+0x3ee>
 8008122:	2301      	movs	r3, #1
 8008124:	464a      	mov	r2, r9
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f ae3e 	beq.w	8007dae <_printf_float+0xb6>
 8008132:	f108 0801 	add.w	r8, r8, #1
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800813a:	1a5b      	subs	r3, r3, r1
 800813c:	4543      	cmp	r3, r8
 800813e:	dcf0      	bgt.n	8008122 <_printf_float+0x42a>
 8008140:	e6fc      	b.n	8007f3c <_printf_float+0x244>
 8008142:	f04f 0800 	mov.w	r8, #0
 8008146:	f104 0919 	add.w	r9, r4, #25
 800814a:	e7f4      	b.n	8008136 <_printf_float+0x43e>

0800814c <_printf_common>:
 800814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008150:	4616      	mov	r6, r2
 8008152:	4698      	mov	r8, r3
 8008154:	688a      	ldr	r2, [r1, #8]
 8008156:	690b      	ldr	r3, [r1, #16]
 8008158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800815c:	4293      	cmp	r3, r2
 800815e:	bfb8      	it	lt
 8008160:	4613      	movlt	r3, r2
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008168:	4607      	mov	r7, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b10a      	cbz	r2, 8008172 <_printf_common+0x26>
 800816e:	3301      	adds	r3, #1
 8008170:	6033      	str	r3, [r6, #0]
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	0699      	lsls	r1, r3, #26
 8008176:	bf42      	ittt	mi
 8008178:	6833      	ldrmi	r3, [r6, #0]
 800817a:	3302      	addmi	r3, #2
 800817c:	6033      	strmi	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	f015 0506 	ands.w	r5, r5, #6
 8008184:	d106      	bne.n	8008194 <_printf_common+0x48>
 8008186:	f104 0a19 	add.w	sl, r4, #25
 800818a:	68e3      	ldr	r3, [r4, #12]
 800818c:	6832      	ldr	r2, [r6, #0]
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc26      	bgt.n	80081e2 <_printf_common+0x96>
 8008194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	3b00      	subs	r3, #0
 800819c:	bf18      	it	ne
 800819e:	2301      	movne	r3, #1
 80081a0:	0692      	lsls	r2, r2, #26
 80081a2:	d42b      	bmi.n	80081fc <_printf_common+0xb0>
 80081a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081a8:	4641      	mov	r1, r8
 80081aa:	4638      	mov	r0, r7
 80081ac:	47c8      	blx	r9
 80081ae:	3001      	adds	r0, #1
 80081b0:	d01e      	beq.n	80081f0 <_printf_common+0xa4>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	6922      	ldr	r2, [r4, #16]
 80081b6:	f003 0306 	and.w	r3, r3, #6
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	bf02      	ittt	eq
 80081be:	68e5      	ldreq	r5, [r4, #12]
 80081c0:	6833      	ldreq	r3, [r6, #0]
 80081c2:	1aed      	subeq	r5, r5, r3
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	bf0c      	ite	eq
 80081c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081cc:	2500      	movne	r5, #0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfc4      	itt	gt
 80081d2:	1a9b      	subgt	r3, r3, r2
 80081d4:	18ed      	addgt	r5, r5, r3
 80081d6:	2600      	movs	r6, #0
 80081d8:	341a      	adds	r4, #26
 80081da:	42b5      	cmp	r5, r6
 80081dc:	d11a      	bne.n	8008214 <_printf_common+0xc8>
 80081de:	2000      	movs	r0, #0
 80081e0:	e008      	b.n	80081f4 <_printf_common+0xa8>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4652      	mov	r2, sl
 80081e6:	4641      	mov	r1, r8
 80081e8:	4638      	mov	r0, r7
 80081ea:	47c8      	blx	r9
 80081ec:	3001      	adds	r0, #1
 80081ee:	d103      	bne.n	80081f8 <_printf_common+0xac>
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f8:	3501      	adds	r5, #1
 80081fa:	e7c6      	b.n	800818a <_printf_common+0x3e>
 80081fc:	18e1      	adds	r1, r4, r3
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	2030      	movs	r0, #48	@ 0x30
 8008202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008206:	4422      	add	r2, r4
 8008208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800820c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008210:	3302      	adds	r3, #2
 8008212:	e7c7      	b.n	80081a4 <_printf_common+0x58>
 8008214:	2301      	movs	r3, #1
 8008216:	4622      	mov	r2, r4
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	47c8      	blx	r9
 800821e:	3001      	adds	r0, #1
 8008220:	d0e6      	beq.n	80081f0 <_printf_common+0xa4>
 8008222:	3601      	adds	r6, #1
 8008224:	e7d9      	b.n	80081da <_printf_common+0x8e>
	...

08008228 <_printf_i>:
 8008228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	7e0f      	ldrb	r7, [r1, #24]
 800822e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008230:	2f78      	cmp	r7, #120	@ 0x78
 8008232:	4691      	mov	r9, r2
 8008234:	4680      	mov	r8, r0
 8008236:	460c      	mov	r4, r1
 8008238:	469a      	mov	sl, r3
 800823a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800823e:	d807      	bhi.n	8008250 <_printf_i+0x28>
 8008240:	2f62      	cmp	r7, #98	@ 0x62
 8008242:	d80a      	bhi.n	800825a <_printf_i+0x32>
 8008244:	2f00      	cmp	r7, #0
 8008246:	f000 80d1 	beq.w	80083ec <_printf_i+0x1c4>
 800824a:	2f58      	cmp	r7, #88	@ 0x58
 800824c:	f000 80b8 	beq.w	80083c0 <_printf_i+0x198>
 8008250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008258:	e03a      	b.n	80082d0 <_printf_i+0xa8>
 800825a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800825e:	2b15      	cmp	r3, #21
 8008260:	d8f6      	bhi.n	8008250 <_printf_i+0x28>
 8008262:	a101      	add	r1, pc, #4	@ (adr r1, 8008268 <_printf_i+0x40>)
 8008264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082d5 	.word	0x080082d5
 8008270:	08008251 	.word	0x08008251
 8008274:	08008251 	.word	0x08008251
 8008278:	08008251 	.word	0x08008251
 800827c:	08008251 	.word	0x08008251
 8008280:	080082d5 	.word	0x080082d5
 8008284:	08008251 	.word	0x08008251
 8008288:	08008251 	.word	0x08008251
 800828c:	08008251 	.word	0x08008251
 8008290:	08008251 	.word	0x08008251
 8008294:	080083d3 	.word	0x080083d3
 8008298:	080082ff 	.word	0x080082ff
 800829c:	0800838d 	.word	0x0800838d
 80082a0:	08008251 	.word	0x08008251
 80082a4:	08008251 	.word	0x08008251
 80082a8:	080083f5 	.word	0x080083f5
 80082ac:	08008251 	.word	0x08008251
 80082b0:	080082ff 	.word	0x080082ff
 80082b4:	08008251 	.word	0x08008251
 80082b8:	08008251 	.word	0x08008251
 80082bc:	08008395 	.word	0x08008395
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6032      	str	r2, [r6, #0]
 80082c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082d0:	2301      	movs	r3, #1
 80082d2:	e09c      	b.n	800840e <_printf_i+0x1e6>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	6031      	str	r1, [r6, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	d501      	bpl.n	80082e4 <_printf_i+0xbc>
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	e003      	b.n	80082ec <_printf_i+0xc4>
 80082e4:	0645      	lsls	r5, r0, #25
 80082e6:	d5fb      	bpl.n	80082e0 <_printf_i+0xb8>
 80082e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	da03      	bge.n	80082f8 <_printf_i+0xd0>
 80082f0:	232d      	movs	r3, #45	@ 0x2d
 80082f2:	426d      	negs	r5, r5
 80082f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f8:	4858      	ldr	r0, [pc, #352]	@ (800845c <_printf_i+0x234>)
 80082fa:	230a      	movs	r3, #10
 80082fc:	e011      	b.n	8008322 <_printf_i+0xfa>
 80082fe:	6821      	ldr	r1, [r4, #0]
 8008300:	6833      	ldr	r3, [r6, #0]
 8008302:	0608      	lsls	r0, r1, #24
 8008304:	f853 5b04 	ldr.w	r5, [r3], #4
 8008308:	d402      	bmi.n	8008310 <_printf_i+0xe8>
 800830a:	0649      	lsls	r1, r1, #25
 800830c:	bf48      	it	mi
 800830e:	b2ad      	uxthmi	r5, r5
 8008310:	2f6f      	cmp	r7, #111	@ 0x6f
 8008312:	4852      	ldr	r0, [pc, #328]	@ (800845c <_printf_i+0x234>)
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	bf14      	ite	ne
 8008318:	230a      	movne	r3, #10
 800831a:	2308      	moveq	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008322:	6866      	ldr	r6, [r4, #4]
 8008324:	60a6      	str	r6, [r4, #8]
 8008326:	2e00      	cmp	r6, #0
 8008328:	db05      	blt.n	8008336 <_printf_i+0x10e>
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	432e      	orrs	r6, r5
 800832e:	f021 0104 	bic.w	r1, r1, #4
 8008332:	6021      	str	r1, [r4, #0]
 8008334:	d04b      	beq.n	80083ce <_printf_i+0x1a6>
 8008336:	4616      	mov	r6, r2
 8008338:	fbb5 f1f3 	udiv	r1, r5, r3
 800833c:	fb03 5711 	mls	r7, r3, r1, r5
 8008340:	5dc7      	ldrb	r7, [r0, r7]
 8008342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008346:	462f      	mov	r7, r5
 8008348:	42bb      	cmp	r3, r7
 800834a:	460d      	mov	r5, r1
 800834c:	d9f4      	bls.n	8008338 <_printf_i+0x110>
 800834e:	2b08      	cmp	r3, #8
 8008350:	d10b      	bne.n	800836a <_printf_i+0x142>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	07df      	lsls	r7, r3, #31
 8008356:	d508      	bpl.n	800836a <_printf_i+0x142>
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	6861      	ldr	r1, [r4, #4]
 800835c:	4299      	cmp	r1, r3
 800835e:	bfde      	ittt	le
 8008360:	2330      	movle	r3, #48	@ 0x30
 8008362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800836a:	1b92      	subs	r2, r2, r6
 800836c:	6122      	str	r2, [r4, #16]
 800836e:	f8cd a000 	str.w	sl, [sp]
 8008372:	464b      	mov	r3, r9
 8008374:	aa03      	add	r2, sp, #12
 8008376:	4621      	mov	r1, r4
 8008378:	4640      	mov	r0, r8
 800837a:	f7ff fee7 	bl	800814c <_printf_common>
 800837e:	3001      	adds	r0, #1
 8008380:	d14a      	bne.n	8008418 <_printf_i+0x1f0>
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	b004      	add	sp, #16
 8008388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f043 0320 	orr.w	r3, r3, #32
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	4832      	ldr	r0, [pc, #200]	@ (8008460 <_printf_i+0x238>)
 8008396:	2778      	movs	r7, #120	@ 0x78
 8008398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	6831      	ldr	r1, [r6, #0]
 80083a0:	061f      	lsls	r7, r3, #24
 80083a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80083a6:	d402      	bmi.n	80083ae <_printf_i+0x186>
 80083a8:	065f      	lsls	r7, r3, #25
 80083aa:	bf48      	it	mi
 80083ac:	b2ad      	uxthmi	r5, r5
 80083ae:	6031      	str	r1, [r6, #0]
 80083b0:	07d9      	lsls	r1, r3, #31
 80083b2:	bf44      	itt	mi
 80083b4:	f043 0320 	orrmi.w	r3, r3, #32
 80083b8:	6023      	strmi	r3, [r4, #0]
 80083ba:	b11d      	cbz	r5, 80083c4 <_printf_i+0x19c>
 80083bc:	2310      	movs	r3, #16
 80083be:	e7ad      	b.n	800831c <_printf_i+0xf4>
 80083c0:	4826      	ldr	r0, [pc, #152]	@ (800845c <_printf_i+0x234>)
 80083c2:	e7e9      	b.n	8008398 <_printf_i+0x170>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	f023 0320 	bic.w	r3, r3, #32
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	e7f6      	b.n	80083bc <_printf_i+0x194>
 80083ce:	4616      	mov	r6, r2
 80083d0:	e7bd      	b.n	800834e <_printf_i+0x126>
 80083d2:	6833      	ldr	r3, [r6, #0]
 80083d4:	6825      	ldr	r5, [r4, #0]
 80083d6:	6961      	ldr	r1, [r4, #20]
 80083d8:	1d18      	adds	r0, r3, #4
 80083da:	6030      	str	r0, [r6, #0]
 80083dc:	062e      	lsls	r6, r5, #24
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	d501      	bpl.n	80083e6 <_printf_i+0x1be>
 80083e2:	6019      	str	r1, [r3, #0]
 80083e4:	e002      	b.n	80083ec <_printf_i+0x1c4>
 80083e6:	0668      	lsls	r0, r5, #25
 80083e8:	d5fb      	bpl.n	80083e2 <_printf_i+0x1ba>
 80083ea:	8019      	strh	r1, [r3, #0]
 80083ec:	2300      	movs	r3, #0
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	4616      	mov	r6, r2
 80083f2:	e7bc      	b.n	800836e <_printf_i+0x146>
 80083f4:	6833      	ldr	r3, [r6, #0]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	6032      	str	r2, [r6, #0]
 80083fa:	681e      	ldr	r6, [r3, #0]
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	2100      	movs	r1, #0
 8008400:	4630      	mov	r0, r6
 8008402:	f7f7 feed 	bl	80001e0 <memchr>
 8008406:	b108      	cbz	r0, 800840c <_printf_i+0x1e4>
 8008408:	1b80      	subs	r0, r0, r6
 800840a:	6060      	str	r0, [r4, #4]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	2300      	movs	r3, #0
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008416:	e7aa      	b.n	800836e <_printf_i+0x146>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	4632      	mov	r2, r6
 800841c:	4649      	mov	r1, r9
 800841e:	4640      	mov	r0, r8
 8008420:	47d0      	blx	sl
 8008422:	3001      	adds	r0, #1
 8008424:	d0ad      	beq.n	8008382 <_printf_i+0x15a>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	079b      	lsls	r3, r3, #30
 800842a:	d413      	bmi.n	8008454 <_printf_i+0x22c>
 800842c:	68e0      	ldr	r0, [r4, #12]
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	4298      	cmp	r0, r3
 8008432:	bfb8      	it	lt
 8008434:	4618      	movlt	r0, r3
 8008436:	e7a6      	b.n	8008386 <_printf_i+0x15e>
 8008438:	2301      	movs	r3, #1
 800843a:	4632      	mov	r2, r6
 800843c:	4649      	mov	r1, r9
 800843e:	4640      	mov	r0, r8
 8008440:	47d0      	blx	sl
 8008442:	3001      	adds	r0, #1
 8008444:	d09d      	beq.n	8008382 <_printf_i+0x15a>
 8008446:	3501      	adds	r5, #1
 8008448:	68e3      	ldr	r3, [r4, #12]
 800844a:	9903      	ldr	r1, [sp, #12]
 800844c:	1a5b      	subs	r3, r3, r1
 800844e:	42ab      	cmp	r3, r5
 8008450:	dcf2      	bgt.n	8008438 <_printf_i+0x210>
 8008452:	e7eb      	b.n	800842c <_printf_i+0x204>
 8008454:	2500      	movs	r5, #0
 8008456:	f104 0619 	add.w	r6, r4, #25
 800845a:	e7f5      	b.n	8008448 <_printf_i+0x220>
 800845c:	0800b1d6 	.word	0x0800b1d6
 8008460:	0800b1e7 	.word	0x0800b1e7

08008464 <std>:
 8008464:	2300      	movs	r3, #0
 8008466:	b510      	push	{r4, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	e9c0 3300 	strd	r3, r3, [r0]
 800846e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008472:	6083      	str	r3, [r0, #8]
 8008474:	8181      	strh	r1, [r0, #12]
 8008476:	6643      	str	r3, [r0, #100]	@ 0x64
 8008478:	81c2      	strh	r2, [r0, #14]
 800847a:	6183      	str	r3, [r0, #24]
 800847c:	4619      	mov	r1, r3
 800847e:	2208      	movs	r2, #8
 8008480:	305c      	adds	r0, #92	@ 0x5c
 8008482:	f000 f9f9 	bl	8008878 <memset>
 8008486:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <std+0x58>)
 8008488:	6263      	str	r3, [r4, #36]	@ 0x24
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <std+0x5c>)
 800848c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <std+0x60>)
 8008490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <std+0x64>)
 8008494:	6323      	str	r3, [r4, #48]	@ 0x30
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <std+0x68>)
 8008498:	6224      	str	r4, [r4, #32]
 800849a:	429c      	cmp	r4, r3
 800849c:	d006      	beq.n	80084ac <std+0x48>
 800849e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084a2:	4294      	cmp	r4, r2
 80084a4:	d002      	beq.n	80084ac <std+0x48>
 80084a6:	33d0      	adds	r3, #208	@ 0xd0
 80084a8:	429c      	cmp	r4, r3
 80084aa:	d105      	bne.n	80084b8 <std+0x54>
 80084ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b4:	f000 ba5c 	b.w	8008970 <__retarget_lock_init_recursive>
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	080086c9 	.word	0x080086c9
 80084c0:	080086eb 	.word	0x080086eb
 80084c4:	08008723 	.word	0x08008723
 80084c8:	08008747 	.word	0x08008747
 80084cc:	20000950 	.word	0x20000950

080084d0 <stdio_exit_handler>:
 80084d0:	4a02      	ldr	r2, [pc, #8]	@ (80084dc <stdio_exit_handler+0xc>)
 80084d2:	4903      	ldr	r1, [pc, #12]	@ (80084e0 <stdio_exit_handler+0x10>)
 80084d4:	4803      	ldr	r0, [pc, #12]	@ (80084e4 <stdio_exit_handler+0x14>)
 80084d6:	f000 b869 	b.w	80085ac <_fwalk_sglue>
 80084da:	bf00      	nop
 80084dc:	20000024 	.word	0x20000024
 80084e0:	0800a2c9 	.word	0x0800a2c9
 80084e4:	20000034 	.word	0x20000034

080084e8 <cleanup_stdio>:
 80084e8:	6841      	ldr	r1, [r0, #4]
 80084ea:	4b0c      	ldr	r3, [pc, #48]	@ (800851c <cleanup_stdio+0x34>)
 80084ec:	4299      	cmp	r1, r3
 80084ee:	b510      	push	{r4, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	d001      	beq.n	80084f8 <cleanup_stdio+0x10>
 80084f4:	f001 fee8 	bl	800a2c8 <_fflush_r>
 80084f8:	68a1      	ldr	r1, [r4, #8]
 80084fa:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <cleanup_stdio+0x38>)
 80084fc:	4299      	cmp	r1, r3
 80084fe:	d002      	beq.n	8008506 <cleanup_stdio+0x1e>
 8008500:	4620      	mov	r0, r4
 8008502:	f001 fee1 	bl	800a2c8 <_fflush_r>
 8008506:	68e1      	ldr	r1, [r4, #12]
 8008508:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <cleanup_stdio+0x3c>)
 800850a:	4299      	cmp	r1, r3
 800850c:	d004      	beq.n	8008518 <cleanup_stdio+0x30>
 800850e:	4620      	mov	r0, r4
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f001 bed8 	b.w	800a2c8 <_fflush_r>
 8008518:	bd10      	pop	{r4, pc}
 800851a:	bf00      	nop
 800851c:	20000950 	.word	0x20000950
 8008520:	200009b8 	.word	0x200009b8
 8008524:	20000a20 	.word	0x20000a20

08008528 <global_stdio_init.part.0>:
 8008528:	b510      	push	{r4, lr}
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <global_stdio_init.part.0+0x30>)
 800852c:	4c0b      	ldr	r4, [pc, #44]	@ (800855c <global_stdio_init.part.0+0x34>)
 800852e:	4a0c      	ldr	r2, [pc, #48]	@ (8008560 <global_stdio_init.part.0+0x38>)
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	4620      	mov	r0, r4
 8008534:	2200      	movs	r2, #0
 8008536:	2104      	movs	r1, #4
 8008538:	f7ff ff94 	bl	8008464 <std>
 800853c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008540:	2201      	movs	r2, #1
 8008542:	2109      	movs	r1, #9
 8008544:	f7ff ff8e 	bl	8008464 <std>
 8008548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800854c:	2202      	movs	r2, #2
 800854e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008552:	2112      	movs	r1, #18
 8008554:	f7ff bf86 	b.w	8008464 <std>
 8008558:	20000a88 	.word	0x20000a88
 800855c:	20000950 	.word	0x20000950
 8008560:	080084d1 	.word	0x080084d1

08008564 <__sfp_lock_acquire>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__sfp_lock_acquire+0x8>)
 8008566:	f000 ba04 	b.w	8008972 <__retarget_lock_acquire_recursive>
 800856a:	bf00      	nop
 800856c:	20000a91 	.word	0x20000a91

08008570 <__sfp_lock_release>:
 8008570:	4801      	ldr	r0, [pc, #4]	@ (8008578 <__sfp_lock_release+0x8>)
 8008572:	f000 b9ff 	b.w	8008974 <__retarget_lock_release_recursive>
 8008576:	bf00      	nop
 8008578:	20000a91 	.word	0x20000a91

0800857c <__sinit>:
 800857c:	b510      	push	{r4, lr}
 800857e:	4604      	mov	r4, r0
 8008580:	f7ff fff0 	bl	8008564 <__sfp_lock_acquire>
 8008584:	6a23      	ldr	r3, [r4, #32]
 8008586:	b11b      	cbz	r3, 8008590 <__sinit+0x14>
 8008588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858c:	f7ff bff0 	b.w	8008570 <__sfp_lock_release>
 8008590:	4b04      	ldr	r3, [pc, #16]	@ (80085a4 <__sinit+0x28>)
 8008592:	6223      	str	r3, [r4, #32]
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <__sinit+0x2c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f5      	bne.n	8008588 <__sinit+0xc>
 800859c:	f7ff ffc4 	bl	8008528 <global_stdio_init.part.0>
 80085a0:	e7f2      	b.n	8008588 <__sinit+0xc>
 80085a2:	bf00      	nop
 80085a4:	080084e9 	.word	0x080084e9
 80085a8:	20000a88 	.word	0x20000a88

080085ac <_fwalk_sglue>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	4607      	mov	r7, r0
 80085b2:	4688      	mov	r8, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	2600      	movs	r6, #0
 80085b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085bc:	f1b9 0901 	subs.w	r9, r9, #1
 80085c0:	d505      	bpl.n	80085ce <_fwalk_sglue+0x22>
 80085c2:	6824      	ldr	r4, [r4, #0]
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	d1f7      	bne.n	80085b8 <_fwalk_sglue+0xc>
 80085c8:	4630      	mov	r0, r6
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d907      	bls.n	80085e4 <_fwalk_sglue+0x38>
 80085d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085d8:	3301      	adds	r3, #1
 80085da:	d003      	beq.n	80085e4 <_fwalk_sglue+0x38>
 80085dc:	4629      	mov	r1, r5
 80085de:	4638      	mov	r0, r7
 80085e0:	47c0      	blx	r8
 80085e2:	4306      	orrs	r6, r0
 80085e4:	3568      	adds	r5, #104	@ 0x68
 80085e6:	e7e9      	b.n	80085bc <_fwalk_sglue+0x10>

080085e8 <iprintf>:
 80085e8:	b40f      	push	{r0, r1, r2, r3}
 80085ea:	b507      	push	{r0, r1, r2, lr}
 80085ec:	4906      	ldr	r1, [pc, #24]	@ (8008608 <iprintf+0x20>)
 80085ee:	ab04      	add	r3, sp, #16
 80085f0:	6808      	ldr	r0, [r1, #0]
 80085f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f6:	6881      	ldr	r1, [r0, #8]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	f001 fcc9 	bl	8009f90 <_vfiprintf_r>
 80085fe:	b003      	add	sp, #12
 8008600:	f85d eb04 	ldr.w	lr, [sp], #4
 8008604:	b004      	add	sp, #16
 8008606:	4770      	bx	lr
 8008608:	20000030 	.word	0x20000030

0800860c <_puts_r>:
 800860c:	6a03      	ldr	r3, [r0, #32]
 800860e:	b570      	push	{r4, r5, r6, lr}
 8008610:	6884      	ldr	r4, [r0, #8]
 8008612:	4605      	mov	r5, r0
 8008614:	460e      	mov	r6, r1
 8008616:	b90b      	cbnz	r3, 800861c <_puts_r+0x10>
 8008618:	f7ff ffb0 	bl	800857c <__sinit>
 800861c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800861e:	07db      	lsls	r3, r3, #31
 8008620:	d405      	bmi.n	800862e <_puts_r+0x22>
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	0598      	lsls	r0, r3, #22
 8008626:	d402      	bmi.n	800862e <_puts_r+0x22>
 8008628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800862a:	f000 f9a2 	bl	8008972 <__retarget_lock_acquire_recursive>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	0719      	lsls	r1, r3, #28
 8008632:	d502      	bpl.n	800863a <_puts_r+0x2e>
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d135      	bne.n	80086a6 <_puts_r+0x9a>
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f000 f8c5 	bl	80087cc <__swsetup_r>
 8008642:	b380      	cbz	r0, 80086a6 <_puts_r+0x9a>
 8008644:	f04f 35ff 	mov.w	r5, #4294967295
 8008648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	d405      	bmi.n	800865a <_puts_r+0x4e>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	059b      	lsls	r3, r3, #22
 8008652:	d402      	bmi.n	800865a <_puts_r+0x4e>
 8008654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008656:	f000 f98d 	bl	8008974 <__retarget_lock_release_recursive>
 800865a:	4628      	mov	r0, r5
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	2b00      	cmp	r3, #0
 8008660:	da04      	bge.n	800866c <_puts_r+0x60>
 8008662:	69a2      	ldr	r2, [r4, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	dc17      	bgt.n	8008698 <_puts_r+0x8c>
 8008668:	290a      	cmp	r1, #10
 800866a:	d015      	beq.n	8008698 <_puts_r+0x8c>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	7019      	strb	r1, [r3, #0]
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800867a:	3b01      	subs	r3, #1
 800867c:	60a3      	str	r3, [r4, #8]
 800867e:	2900      	cmp	r1, #0
 8008680:	d1ed      	bne.n	800865e <_puts_r+0x52>
 8008682:	2b00      	cmp	r3, #0
 8008684:	da11      	bge.n	80086aa <_puts_r+0x9e>
 8008686:	4622      	mov	r2, r4
 8008688:	210a      	movs	r1, #10
 800868a:	4628      	mov	r0, r5
 800868c:	f000 f85f 	bl	800874e <__swbuf_r>
 8008690:	3001      	adds	r0, #1
 8008692:	d0d7      	beq.n	8008644 <_puts_r+0x38>
 8008694:	250a      	movs	r5, #10
 8008696:	e7d7      	b.n	8008648 <_puts_r+0x3c>
 8008698:	4622      	mov	r2, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f000 f857 	bl	800874e <__swbuf_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1e7      	bne.n	8008674 <_puts_r+0x68>
 80086a4:	e7ce      	b.n	8008644 <_puts_r+0x38>
 80086a6:	3e01      	subs	r6, #1
 80086a8:	e7e4      	b.n	8008674 <_puts_r+0x68>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	220a      	movs	r2, #10
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e7ee      	b.n	8008694 <_puts_r+0x88>
	...

080086b8 <puts>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	@ (80086c4 <puts+0xc>)
 80086ba:	4601      	mov	r1, r0
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f7ff bfa5 	b.w	800860c <_puts_r>
 80086c2:	bf00      	nop
 80086c4:	20000030 	.word	0x20000030

080086c8 <__sread>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	460c      	mov	r4, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	f000 f900 	bl	80088d4 <_read_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	bfab      	itete	ge
 80086d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086da:	89a3      	ldrhlt	r3, [r4, #12]
 80086dc:	181b      	addge	r3, r3, r0
 80086de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086e2:	bfac      	ite	ge
 80086e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086e6:	81a3      	strhlt	r3, [r4, #12]
 80086e8:	bd10      	pop	{r4, pc}

080086ea <__swrite>:
 80086ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ee:	461f      	mov	r7, r3
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	05db      	lsls	r3, r3, #23
 80086f4:	4605      	mov	r5, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	4616      	mov	r6, r2
 80086fa:	d505      	bpl.n	8008708 <__swrite+0x1e>
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	2302      	movs	r3, #2
 8008702:	2200      	movs	r2, #0
 8008704:	f000 f8d4 	bl	80088b0 <_lseek_r>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	4632      	mov	r2, r6
 8008716:	463b      	mov	r3, r7
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	f000 b8eb 	b.w	80088f8 <_write_r>

08008722 <__sseek>:
 8008722:	b510      	push	{r4, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872a:	f000 f8c1 	bl	80088b0 <_lseek_r>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	bf15      	itete	ne
 8008734:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800873a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800873e:	81a3      	strheq	r3, [r4, #12]
 8008740:	bf18      	it	ne
 8008742:	81a3      	strhne	r3, [r4, #12]
 8008744:	bd10      	pop	{r4, pc}

08008746 <__sclose>:
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 b8a1 	b.w	8008890 <_close_r>

0800874e <__swbuf_r>:
 800874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008750:	460e      	mov	r6, r1
 8008752:	4614      	mov	r4, r2
 8008754:	4605      	mov	r5, r0
 8008756:	b118      	cbz	r0, 8008760 <__swbuf_r+0x12>
 8008758:	6a03      	ldr	r3, [r0, #32]
 800875a:	b90b      	cbnz	r3, 8008760 <__swbuf_r+0x12>
 800875c:	f7ff ff0e 	bl	800857c <__sinit>
 8008760:	69a3      	ldr	r3, [r4, #24]
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	071a      	lsls	r2, r3, #28
 8008768:	d501      	bpl.n	800876e <__swbuf_r+0x20>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	b943      	cbnz	r3, 8008780 <__swbuf_r+0x32>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f82b 	bl	80087cc <__swsetup_r>
 8008776:	b118      	cbz	r0, 8008780 <__swbuf_r+0x32>
 8008778:	f04f 37ff 	mov.w	r7, #4294967295
 800877c:	4638      	mov	r0, r7
 800877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	6922      	ldr	r2, [r4, #16]
 8008784:	1a98      	subs	r0, r3, r2
 8008786:	6963      	ldr	r3, [r4, #20]
 8008788:	b2f6      	uxtb	r6, r6
 800878a:	4283      	cmp	r3, r0
 800878c:	4637      	mov	r7, r6
 800878e:	dc05      	bgt.n	800879c <__swbuf_r+0x4e>
 8008790:	4621      	mov	r1, r4
 8008792:	4628      	mov	r0, r5
 8008794:	f001 fd98 	bl	800a2c8 <_fflush_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	d1ed      	bne.n	8008778 <__swbuf_r+0x2a>
 800879c:	68a3      	ldr	r3, [r4, #8]
 800879e:	3b01      	subs	r3, #1
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	701e      	strb	r6, [r3, #0]
 80087aa:	6962      	ldr	r2, [r4, #20]
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d004      	beq.n	80087bc <__swbuf_r+0x6e>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	07db      	lsls	r3, r3, #31
 80087b6:	d5e1      	bpl.n	800877c <__swbuf_r+0x2e>
 80087b8:	2e0a      	cmp	r6, #10
 80087ba:	d1df      	bne.n	800877c <__swbuf_r+0x2e>
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f001 fd82 	bl	800a2c8 <_fflush_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d0d9      	beq.n	800877c <__swbuf_r+0x2e>
 80087c8:	e7d6      	b.n	8008778 <__swbuf_r+0x2a>
	...

080087cc <__swsetup_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4b29      	ldr	r3, [pc, #164]	@ (8008874 <__swsetup_r+0xa8>)
 80087d0:	4605      	mov	r5, r0
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	460c      	mov	r4, r1
 80087d6:	b118      	cbz	r0, 80087e0 <__swsetup_r+0x14>
 80087d8:	6a03      	ldr	r3, [r0, #32]
 80087da:	b90b      	cbnz	r3, 80087e0 <__swsetup_r+0x14>
 80087dc:	f7ff fece 	bl	800857c <__sinit>
 80087e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e4:	0719      	lsls	r1, r3, #28
 80087e6:	d422      	bmi.n	800882e <__swsetup_r+0x62>
 80087e8:	06da      	lsls	r2, r3, #27
 80087ea:	d407      	bmi.n	80087fc <__swsetup_r+0x30>
 80087ec:	2209      	movs	r2, #9
 80087ee:	602a      	str	r2, [r5, #0]
 80087f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	e033      	b.n	8008864 <__swsetup_r+0x98>
 80087fc:	0758      	lsls	r0, r3, #29
 80087fe:	d512      	bpl.n	8008826 <__swsetup_r+0x5a>
 8008800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008802:	b141      	cbz	r1, 8008816 <__swsetup_r+0x4a>
 8008804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008808:	4299      	cmp	r1, r3
 800880a:	d002      	beq.n	8008812 <__swsetup_r+0x46>
 800880c:	4628      	mov	r0, r5
 800880e:	f000 ff1b 	bl	8009648 <_free_r>
 8008812:	2300      	movs	r3, #0
 8008814:	6363      	str	r3, [r4, #52]	@ 0x34
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	2300      	movs	r3, #0
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f043 0308 	orr.w	r3, r3, #8
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	b94b      	cbnz	r3, 8008846 <__swsetup_r+0x7a>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883c:	d003      	beq.n	8008846 <__swsetup_r+0x7a>
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f001 fd8f 	bl	800a364 <__smakebuf_r>
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	f013 0201 	ands.w	r2, r3, #1
 800884e:	d00a      	beq.n	8008866 <__swsetup_r+0x9a>
 8008850:	2200      	movs	r2, #0
 8008852:	60a2      	str	r2, [r4, #8]
 8008854:	6962      	ldr	r2, [r4, #20]
 8008856:	4252      	negs	r2, r2
 8008858:	61a2      	str	r2, [r4, #24]
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	b942      	cbnz	r2, 8008870 <__swsetup_r+0xa4>
 800885e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008862:	d1c5      	bne.n	80087f0 <__swsetup_r+0x24>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	0799      	lsls	r1, r3, #30
 8008868:	bf58      	it	pl
 800886a:	6962      	ldrpl	r2, [r4, #20]
 800886c:	60a2      	str	r2, [r4, #8]
 800886e:	e7f4      	b.n	800885a <__swsetup_r+0x8e>
 8008870:	2000      	movs	r0, #0
 8008872:	e7f7      	b.n	8008864 <__swsetup_r+0x98>
 8008874:	20000030 	.word	0x20000030

08008878 <memset>:
 8008878:	4402      	add	r2, r0
 800887a:	4603      	mov	r3, r0
 800887c:	4293      	cmp	r3, r2
 800887e:	d100      	bne.n	8008882 <memset+0xa>
 8008880:	4770      	bx	lr
 8008882:	f803 1b01 	strb.w	r1, [r3], #1
 8008886:	e7f9      	b.n	800887c <memset+0x4>

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	@ (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	20000170 	.word	0x20000170

08008890 <_close_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	@ (80088ac <_close_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7fa f99e 	bl	8002bdc <_close>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_close_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_close_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000a8c 	.word	0x20000a8c

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	@ (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7fa f9b3 	bl	8002c2a <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000a8c 	.word	0x20000a8c

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	@ (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7fa f941 	bl	8002b6a <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20000a8c 	.word	0x20000a8c

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	@ (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7fa f94c 	bl	8002ba4 <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	20000a8c 	.word	0x20000a8c

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	@ (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000030 	.word	0x20000030

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	@ (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	@ (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	@ (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	@ (800896c <__libc_init_array+0x44>)
 800893c:	f001 ffae 	bl	800a89c <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	0800b57c 	.word	0x0800b57c
 8008964:	0800b57c 	.word	0x0800b57c
 8008968:	0800b57c 	.word	0x0800b57c
 800896c:	0800b580 	.word	0x0800b580

08008970 <__retarget_lock_init_recursive>:
 8008970:	4770      	bx	lr

08008972 <__retarget_lock_acquire_recursive>:
 8008972:	4770      	bx	lr

08008974 <__retarget_lock_release_recursive>:
 8008974:	4770      	bx	lr

08008976 <memcpy>:
 8008976:	440a      	add	r2, r1
 8008978:	4291      	cmp	r1, r2
 800897a:	f100 33ff 	add.w	r3, r0, #4294967295
 800897e:	d100      	bne.n	8008982 <memcpy+0xc>
 8008980:	4770      	bx	lr
 8008982:	b510      	push	{r4, lr}
 8008984:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898c:	4291      	cmp	r1, r2
 800898e:	d1f9      	bne.n	8008984 <memcpy+0xe>
 8008990:	bd10      	pop	{r4, pc}

08008992 <quorem>:
 8008992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	6903      	ldr	r3, [r0, #16]
 8008998:	690c      	ldr	r4, [r1, #16]
 800899a:	42a3      	cmp	r3, r4
 800899c:	4607      	mov	r7, r0
 800899e:	db7e      	blt.n	8008a9e <quorem+0x10c>
 80089a0:	3c01      	subs	r4, #1
 80089a2:	f101 0814 	add.w	r8, r1, #20
 80089a6:	00a3      	lsls	r3, r4, #2
 80089a8:	f100 0514 	add.w	r5, r0, #20
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089bc:	3301      	adds	r3, #1
 80089be:	429a      	cmp	r2, r3
 80089c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089c8:	d32e      	bcc.n	8008a28 <quorem+0x96>
 80089ca:	f04f 0a00 	mov.w	sl, #0
 80089ce:	46c4      	mov	ip, r8
 80089d0:	46ae      	mov	lr, r5
 80089d2:	46d3      	mov	fp, sl
 80089d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089d8:	b298      	uxth	r0, r3
 80089da:	fb06 a000 	mla	r0, r6, r0, sl
 80089de:	0c02      	lsrs	r2, r0, #16
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	fb06 2303 	mla	r3, r6, r3, r2
 80089e6:	f8de 2000 	ldr.w	r2, [lr]
 80089ea:	b280      	uxth	r0, r0
 80089ec:	b292      	uxth	r2, r2
 80089ee:	1a12      	subs	r2, r2, r0
 80089f0:	445a      	add	r2, fp
 80089f2:	f8de 0000 	ldr.w	r0, [lr]
 80089f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a04:	b292      	uxth	r2, r2
 8008a06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a0a:	45e1      	cmp	r9, ip
 8008a0c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a14:	d2de      	bcs.n	80089d4 <quorem+0x42>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	58eb      	ldr	r3, [r5, r3]
 8008a1a:	b92b      	cbnz	r3, 8008a28 <quorem+0x96>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	3b04      	subs	r3, #4
 8008a20:	429d      	cmp	r5, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	d32f      	bcc.n	8008a86 <quorem+0xf4>
 8008a26:	613c      	str	r4, [r7, #16]
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f001 f97f 	bl	8009d2c <__mcmp>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	db25      	blt.n	8008a7e <quorem+0xec>
 8008a32:	4629      	mov	r1, r5
 8008a34:	2000      	movs	r0, #0
 8008a36:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a3a:	f8d1 c000 	ldr.w	ip, [r1]
 8008a3e:	fa1f fe82 	uxth.w	lr, r2
 8008a42:	fa1f f38c 	uxth.w	r3, ip
 8008a46:	eba3 030e 	sub.w	r3, r3, lr
 8008a4a:	4403      	add	r3, r0
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a5c:	45c1      	cmp	r9, r8
 8008a5e:	f841 3b04 	str.w	r3, [r1], #4
 8008a62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a66:	d2e6      	bcs.n	8008a36 <quorem+0xa4>
 8008a68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a70:	b922      	cbnz	r2, 8008a7c <quorem+0xea>
 8008a72:	3b04      	subs	r3, #4
 8008a74:	429d      	cmp	r5, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	d30b      	bcc.n	8008a92 <quorem+0x100>
 8008a7a:	613c      	str	r4, [r7, #16]
 8008a7c:	3601      	adds	r6, #1
 8008a7e:	4630      	mov	r0, r6
 8008a80:	b003      	add	sp, #12
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d1cb      	bne.n	8008a26 <quorem+0x94>
 8008a8e:	3c01      	subs	r4, #1
 8008a90:	e7c6      	b.n	8008a20 <quorem+0x8e>
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	3b04      	subs	r3, #4
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	d1ef      	bne.n	8008a7a <quorem+0xe8>
 8008a9a:	3c01      	subs	r4, #1
 8008a9c:	e7ea      	b.n	8008a74 <quorem+0xe2>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e7ee      	b.n	8008a80 <quorem+0xee>
 8008aa2:	0000      	movs	r0, r0
 8008aa4:	0000      	movs	r0, r0
	...

08008aa8 <_dtoa_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	69c7      	ldr	r7, [r0, #28]
 8008aae:	b097      	sub	sp, #92	@ 0x5c
 8008ab0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008ab4:	ec55 4b10 	vmov	r4, r5, d0
 8008ab8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008aba:	9107      	str	r1, [sp, #28]
 8008abc:	4681      	mov	r9, r0
 8008abe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ac0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ac2:	b97f      	cbnz	r7, 8008ae4 <_dtoa_r+0x3c>
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f000 fe09 	bl	80096dc <malloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ad0:	b920      	cbnz	r0, 8008adc <_dtoa_r+0x34>
 8008ad2:	4ba9      	ldr	r3, [pc, #676]	@ (8008d78 <_dtoa_r+0x2d0>)
 8008ad4:	21ef      	movs	r1, #239	@ 0xef
 8008ad6:	48a9      	ldr	r0, [pc, #676]	@ (8008d7c <_dtoa_r+0x2d4>)
 8008ad8:	f001 fcb2 	bl	800a440 <__assert_func>
 8008adc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ae0:	6007      	str	r7, [r0, #0]
 8008ae2:	60c7      	str	r7, [r0, #12]
 8008ae4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ae8:	6819      	ldr	r1, [r3, #0]
 8008aea:	b159      	cbz	r1, 8008b04 <_dtoa_r+0x5c>
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	604a      	str	r2, [r1, #4]
 8008af0:	2301      	movs	r3, #1
 8008af2:	4093      	lsls	r3, r2
 8008af4:	608b      	str	r3, [r1, #8]
 8008af6:	4648      	mov	r0, r9
 8008af8:	f000 fee6 	bl	80098c8 <_Bfree>
 8008afc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	1e2b      	subs	r3, r5, #0
 8008b06:	bfb9      	ittee	lt
 8008b08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b0c:	9305      	strlt	r3, [sp, #20]
 8008b0e:	2300      	movge	r3, #0
 8008b10:	6033      	strge	r3, [r6, #0]
 8008b12:	9f05      	ldr	r7, [sp, #20]
 8008b14:	4b9a      	ldr	r3, [pc, #616]	@ (8008d80 <_dtoa_r+0x2d8>)
 8008b16:	bfbc      	itt	lt
 8008b18:	2201      	movlt	r2, #1
 8008b1a:	6032      	strlt	r2, [r6, #0]
 8008b1c:	43bb      	bics	r3, r7
 8008b1e:	d112      	bne.n	8008b46 <_dtoa_r+0x9e>
 8008b20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b2c:	4323      	orrs	r3, r4
 8008b2e:	f000 855a 	beq.w	80095e6 <_dtoa_r+0xb3e>
 8008b32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008d94 <_dtoa_r+0x2ec>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 855c 	beq.w	80095f6 <_dtoa_r+0xb4e>
 8008b3e:	f10a 0303 	add.w	r3, sl, #3
 8008b42:	f000 bd56 	b.w	80095f2 <_dtoa_r+0xb4a>
 8008b46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	ec51 0b17 	vmov	r0, r1, d7
 8008b50:	2300      	movs	r3, #0
 8008b52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b56:	f7f7 ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	b158      	cbz	r0, 8008b76 <_dtoa_r+0xce>
 8008b5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b60:	2301      	movs	r3, #1
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b66:	b113      	cbz	r3, 8008b6e <_dtoa_r+0xc6>
 8008b68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b6a:	4b86      	ldr	r3, [pc, #536]	@ (8008d84 <_dtoa_r+0x2dc>)
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008d98 <_dtoa_r+0x2f0>
 8008b72:	f000 bd40 	b.w	80095f6 <_dtoa_r+0xb4e>
 8008b76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008b7a:	aa14      	add	r2, sp, #80	@ 0x50
 8008b7c:	a915      	add	r1, sp, #84	@ 0x54
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f001 f984 	bl	8009e8c <__d2b>
 8008b84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b88:	9002      	str	r0, [sp, #8]
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d078      	beq.n	8008c80 <_dtoa_r+0x1d8>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ba0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ba4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ba8:	4619      	mov	r1, r3
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b76      	ldr	r3, [pc, #472]	@ (8008d88 <_dtoa_r+0x2e0>)
 8008bae:	f7f7 fb73 	bl	8000298 <__aeabi_dsub>
 8008bb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d60 <_dtoa_r+0x2b8>)
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f7f7 fd26 	bl	8000608 <__aeabi_dmul>
 8008bbc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d68 <_dtoa_r+0x2c0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb6b 	bl	800029c <__adddf3>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4630      	mov	r0, r6
 8008bca:	460d      	mov	r5, r1
 8008bcc:	f7f7 fcb2 	bl	8000534 <__aeabi_i2d>
 8008bd0:	a367      	add	r3, pc, #412	@ (adr r3, 8008d70 <_dtoa_r+0x2c8>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fd17 	bl	8000608 <__aeabi_dmul>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fb5b 	bl	800029c <__adddf3>
 8008be6:	4604      	mov	r4, r0
 8008be8:	460d      	mov	r5, r1
 8008bea:	f7f7 ffbd 	bl	8000b68 <__aeabi_d2iz>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	f7f7 ff78 	bl	8000aec <__aeabi_dcmplt>
 8008bfc:	b140      	cbz	r0, 8008c10 <_dtoa_r+0x168>
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7f7 fc98 	bl	8000534 <__aeabi_i2d>
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	f7f7 ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c0c:	b900      	cbnz	r0, 8008c10 <_dtoa_r+0x168>
 8008c0e:	3f01      	subs	r7, #1
 8008c10:	2f16      	cmp	r7, #22
 8008c12:	d852      	bhi.n	8008cba <_dtoa_r+0x212>
 8008c14:	4b5d      	ldr	r3, [pc, #372]	@ (8008d8c <_dtoa_r+0x2e4>)
 8008c16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c22:	f7f7 ff63 	bl	8000aec <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d049      	beq.n	8008cbe <_dtoa_r+0x216>
 8008c2a:	3f01      	subs	r7, #1
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c32:	1b9b      	subs	r3, r3, r6
 8008c34:	1e5a      	subs	r2, r3, #1
 8008c36:	bf45      	ittet	mi
 8008c38:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c3c:	9300      	strmi	r3, [sp, #0]
 8008c3e:	2300      	movpl	r3, #0
 8008c40:	2300      	movmi	r3, #0
 8008c42:	9206      	str	r2, [sp, #24]
 8008c44:	bf54      	ite	pl
 8008c46:	9300      	strpl	r3, [sp, #0]
 8008c48:	9306      	strmi	r3, [sp, #24]
 8008c4a:	2f00      	cmp	r7, #0
 8008c4c:	db39      	blt.n	8008cc2 <_dtoa_r+0x21a>
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c52:	443b      	add	r3, r7
 8008c54:	9306      	str	r3, [sp, #24]
 8008c56:	2300      	movs	r3, #0
 8008c58:	9308      	str	r3, [sp, #32]
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	2b09      	cmp	r3, #9
 8008c5e:	d863      	bhi.n	8008d28 <_dtoa_r+0x280>
 8008c60:	2b05      	cmp	r3, #5
 8008c62:	bfc4      	itt	gt
 8008c64:	3b04      	subgt	r3, #4
 8008c66:	9307      	strgt	r3, [sp, #28]
 8008c68:	9b07      	ldr	r3, [sp, #28]
 8008c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8008c6e:	bfcc      	ite	gt
 8008c70:	2400      	movgt	r4, #0
 8008c72:	2401      	movle	r4, #1
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d863      	bhi.n	8008d40 <_dtoa_r+0x298>
 8008c78:	e8df f003 	tbb	[pc, r3]
 8008c7c:	2b375452 	.word	0x2b375452
 8008c80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c84:	441e      	add	r6, r3
 8008c86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	bfc1      	itttt	gt
 8008c8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c92:	409f      	lslgt	r7, r3
 8008c94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c9c:	bfd6      	itet	le
 8008c9e:	f1c3 0320 	rsble	r3, r3, #32
 8008ca2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ca6:	fa04 f003 	lslle.w	r0, r4, r3
 8008caa:	f7f7 fc33 	bl	8000514 <__aeabi_ui2d>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cb4:	3e01      	subs	r6, #1
 8008cb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008cb8:	e776      	b.n	8008ba8 <_dtoa_r+0x100>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e7b7      	b.n	8008c2e <_dtoa_r+0x186>
 8008cbe:	9010      	str	r0, [sp, #64]	@ 0x40
 8008cc0:	e7b6      	b.n	8008c30 <_dtoa_r+0x188>
 8008cc2:	9b00      	ldr	r3, [sp, #0]
 8008cc4:	1bdb      	subs	r3, r3, r7
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	427b      	negs	r3, r7
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cd0:	e7c3      	b.n	8008c5a <_dtoa_r+0x1b2>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cd8:	eb07 0b03 	add.w	fp, r7, r3
 8008cdc:	f10b 0301 	add.w	r3, fp, #1
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	bfb8      	it	lt
 8008ce6:	2301      	movlt	r3, #1
 8008ce8:	e006      	b.n	8008cf8 <_dtoa_r+0x250>
 8008cea:	2301      	movs	r3, #1
 8008cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd28      	ble.n	8008d46 <_dtoa_r+0x29e>
 8008cf4:	469b      	mov	fp, r3
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	2204      	movs	r2, #4
 8008d00:	f102 0514 	add.w	r5, r2, #20
 8008d04:	429d      	cmp	r5, r3
 8008d06:	d926      	bls.n	8008d56 <_dtoa_r+0x2ae>
 8008d08:	6041      	str	r1, [r0, #4]
 8008d0a:	4648      	mov	r0, r9
 8008d0c:	f000 fd9c 	bl	8009848 <_Balloc>
 8008d10:	4682      	mov	sl, r0
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d142      	bne.n	8008d9c <_dtoa_r+0x2f4>
 8008d16:	4b1e      	ldr	r3, [pc, #120]	@ (8008d90 <_dtoa_r+0x2e8>)
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d1e:	e6da      	b.n	8008ad6 <_dtoa_r+0x2e>
 8008d20:	2300      	movs	r3, #0
 8008d22:	e7e3      	b.n	8008cec <_dtoa_r+0x244>
 8008d24:	2300      	movs	r3, #0
 8008d26:	e7d5      	b.n	8008cd4 <_dtoa_r+0x22c>
 8008d28:	2401      	movs	r4, #1
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d30:	f04f 3bff 	mov.w	fp, #4294967295
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d3a:	2312      	movs	r3, #18
 8008d3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d3e:	e7db      	b.n	8008cf8 <_dtoa_r+0x250>
 8008d40:	2301      	movs	r3, #1
 8008d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d44:	e7f4      	b.n	8008d30 <_dtoa_r+0x288>
 8008d46:	f04f 0b01 	mov.w	fp, #1
 8008d4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d4e:	465b      	mov	r3, fp
 8008d50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d54:	e7d0      	b.n	8008cf8 <_dtoa_r+0x250>
 8008d56:	3101      	adds	r1, #1
 8008d58:	0052      	lsls	r2, r2, #1
 8008d5a:	e7d1      	b.n	8008d00 <_dtoa_r+0x258>
 8008d5c:	f3af 8000 	nop.w
 8008d60:	636f4361 	.word	0x636f4361
 8008d64:	3fd287a7 	.word	0x3fd287a7
 8008d68:	8b60c8b3 	.word	0x8b60c8b3
 8008d6c:	3fc68a28 	.word	0x3fc68a28
 8008d70:	509f79fb 	.word	0x509f79fb
 8008d74:	3fd34413 	.word	0x3fd34413
 8008d78:	0800b205 	.word	0x0800b205
 8008d7c:	0800b21c 	.word	0x0800b21c
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	0800b1d5 	.word	0x0800b1d5
 8008d88:	3ff80000 	.word	0x3ff80000
 8008d8c:	0800b370 	.word	0x0800b370
 8008d90:	0800b274 	.word	0x0800b274
 8008d94:	0800b201 	.word	0x0800b201
 8008d98:	0800b1d4 	.word	0x0800b1d4
 8008d9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da0:	6018      	str	r0, [r3, #0]
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	2b0e      	cmp	r3, #14
 8008da6:	f200 80a1 	bhi.w	8008eec <_dtoa_r+0x444>
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	f000 809e 	beq.w	8008eec <_dtoa_r+0x444>
 8008db0:	2f00      	cmp	r7, #0
 8008db2:	dd33      	ble.n	8008e1c <_dtoa_r+0x374>
 8008db4:	4b9c      	ldr	r3, [pc, #624]	@ (8009028 <_dtoa_r+0x580>)
 8008db6:	f007 020f 	and.w	r2, r7, #15
 8008dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dbe:	ed93 7b00 	vldr	d7, [r3]
 8008dc2:	05f8      	lsls	r0, r7, #23
 8008dc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008dc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008dcc:	d516      	bpl.n	8008dfc <_dtoa_r+0x354>
 8008dce:	4b97      	ldr	r3, [pc, #604]	@ (800902c <_dtoa_r+0x584>)
 8008dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dd8:	f7f7 fd40 	bl	800085c <__aeabi_ddiv>
 8008ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008de0:	f004 040f 	and.w	r4, r4, #15
 8008de4:	2603      	movs	r6, #3
 8008de6:	4d91      	ldr	r5, [pc, #580]	@ (800902c <_dtoa_r+0x584>)
 8008de8:	b954      	cbnz	r4, 8008e00 <_dtoa_r+0x358>
 8008dea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df2:	f7f7 fd33 	bl	800085c <__aeabi_ddiv>
 8008df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dfa:	e028      	b.n	8008e4e <_dtoa_r+0x3a6>
 8008dfc:	2602      	movs	r6, #2
 8008dfe:	e7f2      	b.n	8008de6 <_dtoa_r+0x33e>
 8008e00:	07e1      	lsls	r1, r4, #31
 8008e02:	d508      	bpl.n	8008e16 <_dtoa_r+0x36e>
 8008e04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008e08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e0c:	f7f7 fbfc 	bl	8000608 <__aeabi_dmul>
 8008e10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e14:	3601      	adds	r6, #1
 8008e16:	1064      	asrs	r4, r4, #1
 8008e18:	3508      	adds	r5, #8
 8008e1a:	e7e5      	b.n	8008de8 <_dtoa_r+0x340>
 8008e1c:	f000 80af 	beq.w	8008f7e <_dtoa_r+0x4d6>
 8008e20:	427c      	negs	r4, r7
 8008e22:	4b81      	ldr	r3, [pc, #516]	@ (8009028 <_dtoa_r+0x580>)
 8008e24:	4d81      	ldr	r5, [pc, #516]	@ (800902c <_dtoa_r+0x584>)
 8008e26:	f004 020f 	and.w	r2, r4, #15
 8008e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e36:	f7f7 fbe7 	bl	8000608 <__aeabi_dmul>
 8008e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e3e:	1124      	asrs	r4, r4, #4
 8008e40:	2300      	movs	r3, #0
 8008e42:	2602      	movs	r6, #2
 8008e44:	2c00      	cmp	r4, #0
 8008e46:	f040 808f 	bne.w	8008f68 <_dtoa_r+0x4c0>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d3      	bne.n	8008df6 <_dtoa_r+0x34e>
 8008e4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8094 	beq.w	8008f82 <_dtoa_r+0x4da>
 8008e5a:	4b75      	ldr	r3, [pc, #468]	@ (8009030 <_dtoa_r+0x588>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 fe43 	bl	8000aec <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f000 808b 	beq.w	8008f82 <_dtoa_r+0x4da>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 8087 	beq.w	8008f82 <_dtoa_r+0x4da>
 8008e74:	f1bb 0f00 	cmp.w	fp, #0
 8008e78:	dd34      	ble.n	8008ee4 <_dtoa_r+0x43c>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4b6d      	ldr	r3, [pc, #436]	@ (8009034 <_dtoa_r+0x58c>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fbc1 	bl	8000608 <__aeabi_dmul>
 8008e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8a:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e8e:	3601      	adds	r6, #1
 8008e90:	465c      	mov	r4, fp
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7f7 fb4e 	bl	8000534 <__aeabi_i2d>
 8008e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	4b65      	ldr	r3, [pc, #404]	@ (8009038 <_dtoa_r+0x590>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 f9fa 	bl	800029c <__adddf3>
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008eae:	2c00      	cmp	r4, #0
 8008eb0:	d16a      	bne.n	8008f88 <_dtoa_r+0x4e0>
 8008eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eb6:	4b61      	ldr	r3, [pc, #388]	@ (800903c <_dtoa_r+0x594>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f7f7 f9ed 	bl	8000298 <__aeabi_dsub>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	4633      	mov	r3, r6
 8008eca:	f7f7 fe2d 	bl	8000b28 <__aeabi_dcmpgt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f040 8298 	bne.w	8009404 <_dtoa_r+0x95c>
 8008ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed8:	462a      	mov	r2, r5
 8008eda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ede:	f7f7 fe05 	bl	8000aec <__aeabi_dcmplt>
 8008ee2:	bb38      	cbnz	r0, 8008f34 <_dtoa_r+0x48c>
 8008ee4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008ee8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008eec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f2c0 8157 	blt.w	80091a2 <_dtoa_r+0x6fa>
 8008ef4:	2f0e      	cmp	r7, #14
 8008ef6:	f300 8154 	bgt.w	80091a2 <_dtoa_r+0x6fa>
 8008efa:	4b4b      	ldr	r3, [pc, #300]	@ (8009028 <_dtoa_r+0x580>)
 8008efc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f00:	ed93 7b00 	vldr	d7, [r3]
 8008f04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	ed8d 7b00 	vstr	d7, [sp]
 8008f0c:	f280 80e5 	bge.w	80090da <_dtoa_r+0x632>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f300 80e1 	bgt.w	80090da <_dtoa_r+0x632>
 8008f18:	d10c      	bne.n	8008f34 <_dtoa_r+0x48c>
 8008f1a:	4b48      	ldr	r3, [pc, #288]	@ (800903c <_dtoa_r+0x594>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	ec51 0b17 	vmov	r0, r1, d7
 8008f22:	f7f7 fb71 	bl	8000608 <__aeabi_dmul>
 8008f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f2a:	f7f7 fdf3 	bl	8000b14 <__aeabi_dcmpge>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f000 8266 	beq.w	8009400 <_dtoa_r+0x958>
 8008f34:	2400      	movs	r4, #0
 8008f36:	4625      	mov	r5, r4
 8008f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f3a:	4656      	mov	r6, sl
 8008f3c:	ea6f 0803 	mvn.w	r8, r3
 8008f40:	2700      	movs	r7, #0
 8008f42:	4621      	mov	r1, r4
 8008f44:	4648      	mov	r0, r9
 8008f46:	f000 fcbf 	bl	80098c8 <_Bfree>
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	f000 80bd 	beq.w	80090ca <_dtoa_r+0x622>
 8008f50:	b12f      	cbz	r7, 8008f5e <_dtoa_r+0x4b6>
 8008f52:	42af      	cmp	r7, r5
 8008f54:	d003      	beq.n	8008f5e <_dtoa_r+0x4b6>
 8008f56:	4639      	mov	r1, r7
 8008f58:	4648      	mov	r0, r9
 8008f5a:	f000 fcb5 	bl	80098c8 <_Bfree>
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4648      	mov	r0, r9
 8008f62:	f000 fcb1 	bl	80098c8 <_Bfree>
 8008f66:	e0b0      	b.n	80090ca <_dtoa_r+0x622>
 8008f68:	07e2      	lsls	r2, r4, #31
 8008f6a:	d505      	bpl.n	8008f78 <_dtoa_r+0x4d0>
 8008f6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	3601      	adds	r6, #1
 8008f76:	2301      	movs	r3, #1
 8008f78:	1064      	asrs	r4, r4, #1
 8008f7a:	3508      	adds	r5, #8
 8008f7c:	e762      	b.n	8008e44 <_dtoa_r+0x39c>
 8008f7e:	2602      	movs	r6, #2
 8008f80:	e765      	b.n	8008e4e <_dtoa_r+0x3a6>
 8008f82:	9c03      	ldr	r4, [sp, #12]
 8008f84:	46b8      	mov	r8, r7
 8008f86:	e784      	b.n	8008e92 <_dtoa_r+0x3ea>
 8008f88:	4b27      	ldr	r3, [pc, #156]	@ (8009028 <_dtoa_r+0x580>)
 8008f8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f94:	4454      	add	r4, sl
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d054      	beq.n	8009044 <_dtoa_r+0x59c>
 8008f9a:	4929      	ldr	r1, [pc, #164]	@ (8009040 <_dtoa_r+0x598>)
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f7f7 fc5d 	bl	800085c <__aeabi_ddiv>
 8008fa2:	4633      	mov	r3, r6
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	f7f7 f977 	bl	8000298 <__aeabi_dsub>
 8008faa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008fae:	4656      	mov	r6, sl
 8008fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb4:	f7f7 fdd8 	bl	8000b68 <__aeabi_d2iz>
 8008fb8:	4605      	mov	r5, r0
 8008fba:	f7f7 fabb 	bl	8000534 <__aeabi_i2d>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fc6:	f7f7 f967 	bl	8000298 <__aeabi_dsub>
 8008fca:	3530      	adds	r5, #48	@ 0x30
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fd4:	f806 5b01 	strb.w	r5, [r6], #1
 8008fd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fdc:	f7f7 fd86 	bl	8000aec <__aeabi_dcmplt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d172      	bne.n	80090ca <_dtoa_r+0x622>
 8008fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe8:	4911      	ldr	r1, [pc, #68]	@ (8009030 <_dtoa_r+0x588>)
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7f7 f954 	bl	8000298 <__aeabi_dsub>
 8008ff0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ff4:	f7f7 fd7a 	bl	8000aec <__aeabi_dcmplt>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f040 80b4 	bne.w	8009166 <_dtoa_r+0x6be>
 8008ffe:	42a6      	cmp	r6, r4
 8009000:	f43f af70 	beq.w	8008ee4 <_dtoa_r+0x43c>
 8009004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009008:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <_dtoa_r+0x58c>)
 800900a:	2200      	movs	r2, #0
 800900c:	f7f7 fafc 	bl	8000608 <__aeabi_dmul>
 8009010:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <_dtoa_r+0x58c>)
 8009012:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009016:	2200      	movs	r2, #0
 8009018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009024:	e7c4      	b.n	8008fb0 <_dtoa_r+0x508>
 8009026:	bf00      	nop
 8009028:	0800b370 	.word	0x0800b370
 800902c:	0800b348 	.word	0x0800b348
 8009030:	3ff00000 	.word	0x3ff00000
 8009034:	40240000 	.word	0x40240000
 8009038:	401c0000 	.word	0x401c0000
 800903c:	40140000 	.word	0x40140000
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	f7f7 fade 	bl	8000608 <__aeabi_dmul>
 800904c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009050:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009052:	4656      	mov	r6, sl
 8009054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009058:	f7f7 fd86 	bl	8000b68 <__aeabi_d2iz>
 800905c:	4605      	mov	r5, r0
 800905e:	f7f7 fa69 	bl	8000534 <__aeabi_i2d>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800906a:	f7f7 f915 	bl	8000298 <__aeabi_dsub>
 800906e:	3530      	adds	r5, #48	@ 0x30
 8009070:	f806 5b01 	strb.w	r5, [r6], #1
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	42a6      	cmp	r6, r4
 800907a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	d124      	bne.n	80090ce <_dtoa_r+0x626>
 8009084:	4baf      	ldr	r3, [pc, #700]	@ (8009344 <_dtoa_r+0x89c>)
 8009086:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800908a:	f7f7 f907 	bl	800029c <__adddf3>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009096:	f7f7 fd47 	bl	8000b28 <__aeabi_dcmpgt>
 800909a:	2800      	cmp	r0, #0
 800909c:	d163      	bne.n	8009166 <_dtoa_r+0x6be>
 800909e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090a2:	49a8      	ldr	r1, [pc, #672]	@ (8009344 <_dtoa_r+0x89c>)
 80090a4:	2000      	movs	r0, #0
 80090a6:	f7f7 f8f7 	bl	8000298 <__aeabi_dsub>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b2:	f7f7 fd1b 	bl	8000aec <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f af14 	beq.w	8008ee4 <_dtoa_r+0x43c>
 80090bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090be:	1e73      	subs	r3, r6, #1
 80090c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090c6:	2b30      	cmp	r3, #48	@ 0x30
 80090c8:	d0f8      	beq.n	80090bc <_dtoa_r+0x614>
 80090ca:	4647      	mov	r7, r8
 80090cc:	e03b      	b.n	8009146 <_dtoa_r+0x69e>
 80090ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009348 <_dtoa_r+0x8a0>)
 80090d0:	f7f7 fa9a 	bl	8000608 <__aeabi_dmul>
 80090d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090d8:	e7bc      	b.n	8009054 <_dtoa_r+0x5ac>
 80090da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090de:	4656      	mov	r6, sl
 80090e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090e4:	4620      	mov	r0, r4
 80090e6:	4629      	mov	r1, r5
 80090e8:	f7f7 fbb8 	bl	800085c <__aeabi_ddiv>
 80090ec:	f7f7 fd3c 	bl	8000b68 <__aeabi_d2iz>
 80090f0:	4680      	mov	r8, r0
 80090f2:	f7f7 fa1f 	bl	8000534 <__aeabi_i2d>
 80090f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090fa:	f7f7 fa85 	bl	8000608 <__aeabi_dmul>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800910a:	f7f7 f8c5 	bl	8000298 <__aeabi_dsub>
 800910e:	f806 4b01 	strb.w	r4, [r6], #1
 8009112:	9d03      	ldr	r5, [sp, #12]
 8009114:	eba6 040a 	sub.w	r4, r6, sl
 8009118:	42a5      	cmp	r5, r4
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	d133      	bne.n	8009188 <_dtoa_r+0x6e0>
 8009120:	f7f7 f8bc 	bl	800029c <__adddf3>
 8009124:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	f7f7 fcfc 	bl	8000b28 <__aeabi_dcmpgt>
 8009130:	b9c0      	cbnz	r0, 8009164 <_dtoa_r+0x6bc>
 8009132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800913e:	b110      	cbz	r0, 8009146 <_dtoa_r+0x69e>
 8009140:	f018 0f01 	tst.w	r8, #1
 8009144:	d10e      	bne.n	8009164 <_dtoa_r+0x6bc>
 8009146:	9902      	ldr	r1, [sp, #8]
 8009148:	4648      	mov	r0, r9
 800914a:	f000 fbbd 	bl	80098c8 <_Bfree>
 800914e:	2300      	movs	r3, #0
 8009150:	7033      	strb	r3, [r6, #0]
 8009152:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009154:	3701      	adds	r7, #1
 8009156:	601f      	str	r7, [r3, #0]
 8009158:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 824b 	beq.w	80095f6 <_dtoa_r+0xb4e>
 8009160:	601e      	str	r6, [r3, #0]
 8009162:	e248      	b.n	80095f6 <_dtoa_r+0xb4e>
 8009164:	46b8      	mov	r8, r7
 8009166:	4633      	mov	r3, r6
 8009168:	461e      	mov	r6, r3
 800916a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800916e:	2a39      	cmp	r2, #57	@ 0x39
 8009170:	d106      	bne.n	8009180 <_dtoa_r+0x6d8>
 8009172:	459a      	cmp	sl, r3
 8009174:	d1f8      	bne.n	8009168 <_dtoa_r+0x6c0>
 8009176:	2230      	movs	r2, #48	@ 0x30
 8009178:	f108 0801 	add.w	r8, r8, #1
 800917c:	f88a 2000 	strb.w	r2, [sl]
 8009180:	781a      	ldrb	r2, [r3, #0]
 8009182:	3201      	adds	r2, #1
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	e7a0      	b.n	80090ca <_dtoa_r+0x622>
 8009188:	4b6f      	ldr	r3, [pc, #444]	@ (8009348 <_dtoa_r+0x8a0>)
 800918a:	2200      	movs	r2, #0
 800918c:	f7f7 fa3c 	bl	8000608 <__aeabi_dmul>
 8009190:	2200      	movs	r2, #0
 8009192:	2300      	movs	r3, #0
 8009194:	4604      	mov	r4, r0
 8009196:	460d      	mov	r5, r1
 8009198:	f7f7 fc9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800919c:	2800      	cmp	r0, #0
 800919e:	d09f      	beq.n	80090e0 <_dtoa_r+0x638>
 80091a0:	e7d1      	b.n	8009146 <_dtoa_r+0x69e>
 80091a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	f000 80ea 	beq.w	800937e <_dtoa_r+0x8d6>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	2a01      	cmp	r2, #1
 80091ae:	f300 80cd 	bgt.w	800934c <_dtoa_r+0x8a4>
 80091b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	f000 80c1 	beq.w	800933c <_dtoa_r+0x894>
 80091ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091be:	9c08      	ldr	r4, [sp, #32]
 80091c0:	9e00      	ldr	r6, [sp, #0]
 80091c2:	9a00      	ldr	r2, [sp, #0]
 80091c4:	441a      	add	r2, r3
 80091c6:	9200      	str	r2, [sp, #0]
 80091c8:	9a06      	ldr	r2, [sp, #24]
 80091ca:	2101      	movs	r1, #1
 80091cc:	441a      	add	r2, r3
 80091ce:	4648      	mov	r0, r9
 80091d0:	9206      	str	r2, [sp, #24]
 80091d2:	f000 fc2d 	bl	8009a30 <__i2b>
 80091d6:	4605      	mov	r5, r0
 80091d8:	b166      	cbz	r6, 80091f4 <_dtoa_r+0x74c>
 80091da:	9b06      	ldr	r3, [sp, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd09      	ble.n	80091f4 <_dtoa_r+0x74c>
 80091e0:	42b3      	cmp	r3, r6
 80091e2:	9a00      	ldr	r2, [sp, #0]
 80091e4:	bfa8      	it	ge
 80091e6:	4633      	movge	r3, r6
 80091e8:	1ad2      	subs	r2, r2, r3
 80091ea:	9200      	str	r2, [sp, #0]
 80091ec:	9a06      	ldr	r2, [sp, #24]
 80091ee:	1af6      	subs	r6, r6, r3
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	9306      	str	r3, [sp, #24]
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	b30b      	cbz	r3, 800923c <_dtoa_r+0x794>
 80091f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 80c6 	beq.w	800938c <_dtoa_r+0x8e4>
 8009200:	2c00      	cmp	r4, #0
 8009202:	f000 80c0 	beq.w	8009386 <_dtoa_r+0x8de>
 8009206:	4629      	mov	r1, r5
 8009208:	4622      	mov	r2, r4
 800920a:	4648      	mov	r0, r9
 800920c:	f000 fcc8 	bl	8009ba0 <__pow5mult>
 8009210:	9a02      	ldr	r2, [sp, #8]
 8009212:	4601      	mov	r1, r0
 8009214:	4605      	mov	r5, r0
 8009216:	4648      	mov	r0, r9
 8009218:	f000 fc20 	bl	8009a5c <__multiply>
 800921c:	9902      	ldr	r1, [sp, #8]
 800921e:	4680      	mov	r8, r0
 8009220:	4648      	mov	r0, r9
 8009222:	f000 fb51 	bl	80098c8 <_Bfree>
 8009226:	9b08      	ldr	r3, [sp, #32]
 8009228:	1b1b      	subs	r3, r3, r4
 800922a:	9308      	str	r3, [sp, #32]
 800922c:	f000 80b1 	beq.w	8009392 <_dtoa_r+0x8ea>
 8009230:	9a08      	ldr	r2, [sp, #32]
 8009232:	4641      	mov	r1, r8
 8009234:	4648      	mov	r0, r9
 8009236:	f000 fcb3 	bl	8009ba0 <__pow5mult>
 800923a:	9002      	str	r0, [sp, #8]
 800923c:	2101      	movs	r1, #1
 800923e:	4648      	mov	r0, r9
 8009240:	f000 fbf6 	bl	8009a30 <__i2b>
 8009244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009246:	4604      	mov	r4, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 81d8 	beq.w	80095fe <_dtoa_r+0xb56>
 800924e:	461a      	mov	r2, r3
 8009250:	4601      	mov	r1, r0
 8009252:	4648      	mov	r0, r9
 8009254:	f000 fca4 	bl	8009ba0 <__pow5mult>
 8009258:	9b07      	ldr	r3, [sp, #28]
 800925a:	2b01      	cmp	r3, #1
 800925c:	4604      	mov	r4, r0
 800925e:	f300 809f 	bgt.w	80093a0 <_dtoa_r+0x8f8>
 8009262:	9b04      	ldr	r3, [sp, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 8097 	bne.w	8009398 <_dtoa_r+0x8f0>
 800926a:	9b05      	ldr	r3, [sp, #20]
 800926c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009270:	2b00      	cmp	r3, #0
 8009272:	f040 8093 	bne.w	800939c <_dtoa_r+0x8f4>
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	051b      	lsls	r3, r3, #20
 8009280:	b133      	cbz	r3, 8009290 <_dtoa_r+0x7e8>
 8009282:	9b00      	ldr	r3, [sp, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	3301      	adds	r3, #1
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	2301      	movs	r3, #1
 8009290:	9308      	str	r3, [sp, #32]
 8009292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 81b8 	beq.w	800960a <_dtoa_r+0xb62>
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092a0:	6918      	ldr	r0, [r3, #16]
 80092a2:	f000 fb79 	bl	8009998 <__hi0bits>
 80092a6:	f1c0 0020 	rsb	r0, r0, #32
 80092aa:	9b06      	ldr	r3, [sp, #24]
 80092ac:	4418      	add	r0, r3
 80092ae:	f010 001f 	ands.w	r0, r0, #31
 80092b2:	f000 8082 	beq.w	80093ba <_dtoa_r+0x912>
 80092b6:	f1c0 0320 	rsb	r3, r0, #32
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	dd73      	ble.n	80093a6 <_dtoa_r+0x8fe>
 80092be:	9b00      	ldr	r3, [sp, #0]
 80092c0:	f1c0 001c 	rsb	r0, r0, #28
 80092c4:	4403      	add	r3, r0
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	9b06      	ldr	r3, [sp, #24]
 80092ca:	4403      	add	r3, r0
 80092cc:	4406      	add	r6, r0
 80092ce:	9306      	str	r3, [sp, #24]
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dd05      	ble.n	80092e2 <_dtoa_r+0x83a>
 80092d6:	9902      	ldr	r1, [sp, #8]
 80092d8:	461a      	mov	r2, r3
 80092da:	4648      	mov	r0, r9
 80092dc:	f000 fcba 	bl	8009c54 <__lshift>
 80092e0:	9002      	str	r0, [sp, #8]
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd05      	ble.n	80092f4 <_dtoa_r+0x84c>
 80092e8:	4621      	mov	r1, r4
 80092ea:	461a      	mov	r2, r3
 80092ec:	4648      	mov	r0, r9
 80092ee:	f000 fcb1 	bl	8009c54 <__lshift>
 80092f2:	4604      	mov	r4, r0
 80092f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d061      	beq.n	80093be <_dtoa_r+0x916>
 80092fa:	9802      	ldr	r0, [sp, #8]
 80092fc:	4621      	mov	r1, r4
 80092fe:	f000 fd15 	bl	8009d2c <__mcmp>
 8009302:	2800      	cmp	r0, #0
 8009304:	da5b      	bge.n	80093be <_dtoa_r+0x916>
 8009306:	2300      	movs	r3, #0
 8009308:	9902      	ldr	r1, [sp, #8]
 800930a:	220a      	movs	r2, #10
 800930c:	4648      	mov	r0, r9
 800930e:	f000 fafd 	bl	800990c <__multadd>
 8009312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009314:	9002      	str	r0, [sp, #8]
 8009316:	f107 38ff 	add.w	r8, r7, #4294967295
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 8177 	beq.w	800960e <_dtoa_r+0xb66>
 8009320:	4629      	mov	r1, r5
 8009322:	2300      	movs	r3, #0
 8009324:	220a      	movs	r2, #10
 8009326:	4648      	mov	r0, r9
 8009328:	f000 faf0 	bl	800990c <__multadd>
 800932c:	f1bb 0f00 	cmp.w	fp, #0
 8009330:	4605      	mov	r5, r0
 8009332:	dc6f      	bgt.n	8009414 <_dtoa_r+0x96c>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	2b02      	cmp	r3, #2
 8009338:	dc49      	bgt.n	80093ce <_dtoa_r+0x926>
 800933a:	e06b      	b.n	8009414 <_dtoa_r+0x96c>
 800933c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800933e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009342:	e73c      	b.n	80091be <_dtoa_r+0x716>
 8009344:	3fe00000 	.word	0x3fe00000
 8009348:	40240000 	.word	0x40240000
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1e5c      	subs	r4, r3, #1
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	42a3      	cmp	r3, r4
 8009354:	db09      	blt.n	800936a <_dtoa_r+0x8c2>
 8009356:	1b1c      	subs	r4, r3, r4
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f6bf af30 	bge.w	80091c0 <_dtoa_r+0x718>
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	9a03      	ldr	r2, [sp, #12]
 8009364:	1a9e      	subs	r6, r3, r2
 8009366:	2300      	movs	r3, #0
 8009368:	e72b      	b.n	80091c2 <_dtoa_r+0x71a>
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800936e:	9408      	str	r4, [sp, #32]
 8009370:	1ae3      	subs	r3, r4, r3
 8009372:	441a      	add	r2, r3
 8009374:	9e00      	ldr	r6, [sp, #0]
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	920d      	str	r2, [sp, #52]	@ 0x34
 800937a:	2400      	movs	r4, #0
 800937c:	e721      	b.n	80091c2 <_dtoa_r+0x71a>
 800937e:	9c08      	ldr	r4, [sp, #32]
 8009380:	9e00      	ldr	r6, [sp, #0]
 8009382:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009384:	e728      	b.n	80091d8 <_dtoa_r+0x730>
 8009386:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800938a:	e751      	b.n	8009230 <_dtoa_r+0x788>
 800938c:	9a08      	ldr	r2, [sp, #32]
 800938e:	9902      	ldr	r1, [sp, #8]
 8009390:	e750      	b.n	8009234 <_dtoa_r+0x78c>
 8009392:	f8cd 8008 	str.w	r8, [sp, #8]
 8009396:	e751      	b.n	800923c <_dtoa_r+0x794>
 8009398:	2300      	movs	r3, #0
 800939a:	e779      	b.n	8009290 <_dtoa_r+0x7e8>
 800939c:	9b04      	ldr	r3, [sp, #16]
 800939e:	e777      	b.n	8009290 <_dtoa_r+0x7e8>
 80093a0:	2300      	movs	r3, #0
 80093a2:	9308      	str	r3, [sp, #32]
 80093a4:	e779      	b.n	800929a <_dtoa_r+0x7f2>
 80093a6:	d093      	beq.n	80092d0 <_dtoa_r+0x828>
 80093a8:	9a00      	ldr	r2, [sp, #0]
 80093aa:	331c      	adds	r3, #28
 80093ac:	441a      	add	r2, r3
 80093ae:	9200      	str	r2, [sp, #0]
 80093b0:	9a06      	ldr	r2, [sp, #24]
 80093b2:	441a      	add	r2, r3
 80093b4:	441e      	add	r6, r3
 80093b6:	9206      	str	r2, [sp, #24]
 80093b8:	e78a      	b.n	80092d0 <_dtoa_r+0x828>
 80093ba:	4603      	mov	r3, r0
 80093bc:	e7f4      	b.n	80093a8 <_dtoa_r+0x900>
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	46b8      	mov	r8, r7
 80093c4:	dc20      	bgt.n	8009408 <_dtoa_r+0x960>
 80093c6:	469b      	mov	fp, r3
 80093c8:	9b07      	ldr	r3, [sp, #28]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	dd1e      	ble.n	800940c <_dtoa_r+0x964>
 80093ce:	f1bb 0f00 	cmp.w	fp, #0
 80093d2:	f47f adb1 	bne.w	8008f38 <_dtoa_r+0x490>
 80093d6:	4621      	mov	r1, r4
 80093d8:	465b      	mov	r3, fp
 80093da:	2205      	movs	r2, #5
 80093dc:	4648      	mov	r0, r9
 80093de:	f000 fa95 	bl	800990c <__multadd>
 80093e2:	4601      	mov	r1, r0
 80093e4:	4604      	mov	r4, r0
 80093e6:	9802      	ldr	r0, [sp, #8]
 80093e8:	f000 fca0 	bl	8009d2c <__mcmp>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f77f ada3 	ble.w	8008f38 <_dtoa_r+0x490>
 80093f2:	4656      	mov	r6, sl
 80093f4:	2331      	movs	r3, #49	@ 0x31
 80093f6:	f806 3b01 	strb.w	r3, [r6], #1
 80093fa:	f108 0801 	add.w	r8, r8, #1
 80093fe:	e59f      	b.n	8008f40 <_dtoa_r+0x498>
 8009400:	9c03      	ldr	r4, [sp, #12]
 8009402:	46b8      	mov	r8, r7
 8009404:	4625      	mov	r5, r4
 8009406:	e7f4      	b.n	80093f2 <_dtoa_r+0x94a>
 8009408:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800940c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8101 	beq.w	8009616 <_dtoa_r+0xb6e>
 8009414:	2e00      	cmp	r6, #0
 8009416:	dd05      	ble.n	8009424 <_dtoa_r+0x97c>
 8009418:	4629      	mov	r1, r5
 800941a:	4632      	mov	r2, r6
 800941c:	4648      	mov	r0, r9
 800941e:	f000 fc19 	bl	8009c54 <__lshift>
 8009422:	4605      	mov	r5, r0
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d05c      	beq.n	80094e4 <_dtoa_r+0xa3c>
 800942a:	6869      	ldr	r1, [r5, #4]
 800942c:	4648      	mov	r0, r9
 800942e:	f000 fa0b 	bl	8009848 <_Balloc>
 8009432:	4606      	mov	r6, r0
 8009434:	b928      	cbnz	r0, 8009442 <_dtoa_r+0x99a>
 8009436:	4b82      	ldr	r3, [pc, #520]	@ (8009640 <_dtoa_r+0xb98>)
 8009438:	4602      	mov	r2, r0
 800943a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800943e:	f7ff bb4a 	b.w	8008ad6 <_dtoa_r+0x2e>
 8009442:	692a      	ldr	r2, [r5, #16]
 8009444:	3202      	adds	r2, #2
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	f105 010c 	add.w	r1, r5, #12
 800944c:	300c      	adds	r0, #12
 800944e:	f7ff fa92 	bl	8008976 <memcpy>
 8009452:	2201      	movs	r2, #1
 8009454:	4631      	mov	r1, r6
 8009456:	4648      	mov	r0, r9
 8009458:	f000 fbfc 	bl	8009c54 <__lshift>
 800945c:	f10a 0301 	add.w	r3, sl, #1
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	eb0a 030b 	add.w	r3, sl, fp
 8009466:	9308      	str	r3, [sp, #32]
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	462f      	mov	r7, r5
 8009470:	9306      	str	r3, [sp, #24]
 8009472:	4605      	mov	r5, r0
 8009474:	9b00      	ldr	r3, [sp, #0]
 8009476:	9802      	ldr	r0, [sp, #8]
 8009478:	4621      	mov	r1, r4
 800947a:	f103 3bff 	add.w	fp, r3, #4294967295
 800947e:	f7ff fa88 	bl	8008992 <quorem>
 8009482:	4603      	mov	r3, r0
 8009484:	3330      	adds	r3, #48	@ 0x30
 8009486:	9003      	str	r0, [sp, #12]
 8009488:	4639      	mov	r1, r7
 800948a:	9802      	ldr	r0, [sp, #8]
 800948c:	9309      	str	r3, [sp, #36]	@ 0x24
 800948e:	f000 fc4d 	bl	8009d2c <__mcmp>
 8009492:	462a      	mov	r2, r5
 8009494:	9004      	str	r0, [sp, #16]
 8009496:	4621      	mov	r1, r4
 8009498:	4648      	mov	r0, r9
 800949a:	f000 fc63 	bl	8009d64 <__mdiff>
 800949e:	68c2      	ldr	r2, [r0, #12]
 80094a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a2:	4606      	mov	r6, r0
 80094a4:	bb02      	cbnz	r2, 80094e8 <_dtoa_r+0xa40>
 80094a6:	4601      	mov	r1, r0
 80094a8:	9802      	ldr	r0, [sp, #8]
 80094aa:	f000 fc3f 	bl	8009d2c <__mcmp>
 80094ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b0:	4602      	mov	r2, r0
 80094b2:	4631      	mov	r1, r6
 80094b4:	4648      	mov	r0, r9
 80094b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80094b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ba:	f000 fa05 	bl	80098c8 <_Bfree>
 80094be:	9b07      	ldr	r3, [sp, #28]
 80094c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094c2:	9e00      	ldr	r6, [sp, #0]
 80094c4:	ea42 0103 	orr.w	r1, r2, r3
 80094c8:	9b06      	ldr	r3, [sp, #24]
 80094ca:	4319      	orrs	r1, r3
 80094cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ce:	d10d      	bne.n	80094ec <_dtoa_r+0xa44>
 80094d0:	2b39      	cmp	r3, #57	@ 0x39
 80094d2:	d027      	beq.n	8009524 <_dtoa_r+0xa7c>
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	dd01      	ble.n	80094de <_dtoa_r+0xa36>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	3331      	adds	r3, #49	@ 0x31
 80094de:	f88b 3000 	strb.w	r3, [fp]
 80094e2:	e52e      	b.n	8008f42 <_dtoa_r+0x49a>
 80094e4:	4628      	mov	r0, r5
 80094e6:	e7b9      	b.n	800945c <_dtoa_r+0x9b4>
 80094e8:	2201      	movs	r2, #1
 80094ea:	e7e2      	b.n	80094b2 <_dtoa_r+0xa0a>
 80094ec:	9904      	ldr	r1, [sp, #16]
 80094ee:	2900      	cmp	r1, #0
 80094f0:	db04      	blt.n	80094fc <_dtoa_r+0xa54>
 80094f2:	9807      	ldr	r0, [sp, #28]
 80094f4:	4301      	orrs	r1, r0
 80094f6:	9806      	ldr	r0, [sp, #24]
 80094f8:	4301      	orrs	r1, r0
 80094fa:	d120      	bne.n	800953e <_dtoa_r+0xa96>
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	ddee      	ble.n	80094de <_dtoa_r+0xa36>
 8009500:	9902      	ldr	r1, [sp, #8]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2201      	movs	r2, #1
 8009506:	4648      	mov	r0, r9
 8009508:	f000 fba4 	bl	8009c54 <__lshift>
 800950c:	4621      	mov	r1, r4
 800950e:	9002      	str	r0, [sp, #8]
 8009510:	f000 fc0c 	bl	8009d2c <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	dc02      	bgt.n	8009520 <_dtoa_r+0xa78>
 800951a:	d1e0      	bne.n	80094de <_dtoa_r+0xa36>
 800951c:	07da      	lsls	r2, r3, #31
 800951e:	d5de      	bpl.n	80094de <_dtoa_r+0xa36>
 8009520:	2b39      	cmp	r3, #57	@ 0x39
 8009522:	d1da      	bne.n	80094da <_dtoa_r+0xa32>
 8009524:	2339      	movs	r3, #57	@ 0x39
 8009526:	f88b 3000 	strb.w	r3, [fp]
 800952a:	4633      	mov	r3, r6
 800952c:	461e      	mov	r6, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009534:	2a39      	cmp	r2, #57	@ 0x39
 8009536:	d04e      	beq.n	80095d6 <_dtoa_r+0xb2e>
 8009538:	3201      	adds	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	e501      	b.n	8008f42 <_dtoa_r+0x49a>
 800953e:	2a00      	cmp	r2, #0
 8009540:	dd03      	ble.n	800954a <_dtoa_r+0xaa2>
 8009542:	2b39      	cmp	r3, #57	@ 0x39
 8009544:	d0ee      	beq.n	8009524 <_dtoa_r+0xa7c>
 8009546:	3301      	adds	r3, #1
 8009548:	e7c9      	b.n	80094de <_dtoa_r+0xa36>
 800954a:	9a00      	ldr	r2, [sp, #0]
 800954c:	9908      	ldr	r1, [sp, #32]
 800954e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009552:	428a      	cmp	r2, r1
 8009554:	d028      	beq.n	80095a8 <_dtoa_r+0xb00>
 8009556:	9902      	ldr	r1, [sp, #8]
 8009558:	2300      	movs	r3, #0
 800955a:	220a      	movs	r2, #10
 800955c:	4648      	mov	r0, r9
 800955e:	f000 f9d5 	bl	800990c <__multadd>
 8009562:	42af      	cmp	r7, r5
 8009564:	9002      	str	r0, [sp, #8]
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	f04f 020a 	mov.w	r2, #10
 800956e:	4639      	mov	r1, r7
 8009570:	4648      	mov	r0, r9
 8009572:	d107      	bne.n	8009584 <_dtoa_r+0xadc>
 8009574:	f000 f9ca 	bl	800990c <__multadd>
 8009578:	4607      	mov	r7, r0
 800957a:	4605      	mov	r5, r0
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	e777      	b.n	8009474 <_dtoa_r+0x9cc>
 8009584:	f000 f9c2 	bl	800990c <__multadd>
 8009588:	4629      	mov	r1, r5
 800958a:	4607      	mov	r7, r0
 800958c:	2300      	movs	r3, #0
 800958e:	220a      	movs	r2, #10
 8009590:	4648      	mov	r0, r9
 8009592:	f000 f9bb 	bl	800990c <__multadd>
 8009596:	4605      	mov	r5, r0
 8009598:	e7f0      	b.n	800957c <_dtoa_r+0xad4>
 800959a:	f1bb 0f00 	cmp.w	fp, #0
 800959e:	bfcc      	ite	gt
 80095a0:	465e      	movgt	r6, fp
 80095a2:	2601      	movle	r6, #1
 80095a4:	4456      	add	r6, sl
 80095a6:	2700      	movs	r7, #0
 80095a8:	9902      	ldr	r1, [sp, #8]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	2201      	movs	r2, #1
 80095ae:	4648      	mov	r0, r9
 80095b0:	f000 fb50 	bl	8009c54 <__lshift>
 80095b4:	4621      	mov	r1, r4
 80095b6:	9002      	str	r0, [sp, #8]
 80095b8:	f000 fbb8 	bl	8009d2c <__mcmp>
 80095bc:	2800      	cmp	r0, #0
 80095be:	dcb4      	bgt.n	800952a <_dtoa_r+0xa82>
 80095c0:	d102      	bne.n	80095c8 <_dtoa_r+0xb20>
 80095c2:	9b00      	ldr	r3, [sp, #0]
 80095c4:	07db      	lsls	r3, r3, #31
 80095c6:	d4b0      	bmi.n	800952a <_dtoa_r+0xa82>
 80095c8:	4633      	mov	r3, r6
 80095ca:	461e      	mov	r6, r3
 80095cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d0:	2a30      	cmp	r2, #48	@ 0x30
 80095d2:	d0fa      	beq.n	80095ca <_dtoa_r+0xb22>
 80095d4:	e4b5      	b.n	8008f42 <_dtoa_r+0x49a>
 80095d6:	459a      	cmp	sl, r3
 80095d8:	d1a8      	bne.n	800952c <_dtoa_r+0xa84>
 80095da:	2331      	movs	r3, #49	@ 0x31
 80095dc:	f108 0801 	add.w	r8, r8, #1
 80095e0:	f88a 3000 	strb.w	r3, [sl]
 80095e4:	e4ad      	b.n	8008f42 <_dtoa_r+0x49a>
 80095e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009644 <_dtoa_r+0xb9c>
 80095ec:	b11b      	cbz	r3, 80095f6 <_dtoa_r+0xb4e>
 80095ee:	f10a 0308 	add.w	r3, sl, #8
 80095f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	4650      	mov	r0, sl
 80095f8:	b017      	add	sp, #92	@ 0x5c
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	2b01      	cmp	r3, #1
 8009602:	f77f ae2e 	ble.w	8009262 <_dtoa_r+0x7ba>
 8009606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009608:	9308      	str	r3, [sp, #32]
 800960a:	2001      	movs	r0, #1
 800960c:	e64d      	b.n	80092aa <_dtoa_r+0x802>
 800960e:	f1bb 0f00 	cmp.w	fp, #0
 8009612:	f77f aed9 	ble.w	80093c8 <_dtoa_r+0x920>
 8009616:	4656      	mov	r6, sl
 8009618:	9802      	ldr	r0, [sp, #8]
 800961a:	4621      	mov	r1, r4
 800961c:	f7ff f9b9 	bl	8008992 <quorem>
 8009620:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009624:	f806 3b01 	strb.w	r3, [r6], #1
 8009628:	eba6 020a 	sub.w	r2, r6, sl
 800962c:	4593      	cmp	fp, r2
 800962e:	ddb4      	ble.n	800959a <_dtoa_r+0xaf2>
 8009630:	9902      	ldr	r1, [sp, #8]
 8009632:	2300      	movs	r3, #0
 8009634:	220a      	movs	r2, #10
 8009636:	4648      	mov	r0, r9
 8009638:	f000 f968 	bl	800990c <__multadd>
 800963c:	9002      	str	r0, [sp, #8]
 800963e:	e7eb      	b.n	8009618 <_dtoa_r+0xb70>
 8009640:	0800b274 	.word	0x0800b274
 8009644:	0800b1f8 	.word	0x0800b1f8

08009648 <_free_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4605      	mov	r5, r0
 800964c:	2900      	cmp	r1, #0
 800964e:	d041      	beq.n	80096d4 <_free_r+0x8c>
 8009650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009654:	1f0c      	subs	r4, r1, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfb8      	it	lt
 800965a:	18e4      	addlt	r4, r4, r3
 800965c:	f000 f8e8 	bl	8009830 <__malloc_lock>
 8009660:	4a1d      	ldr	r2, [pc, #116]	@ (80096d8 <_free_r+0x90>)
 8009662:	6813      	ldr	r3, [r2, #0]
 8009664:	b933      	cbnz	r3, 8009674 <_free_r+0x2c>
 8009666:	6063      	str	r3, [r4, #4]
 8009668:	6014      	str	r4, [r2, #0]
 800966a:	4628      	mov	r0, r5
 800966c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009670:	f000 b8e4 	b.w	800983c <__malloc_unlock>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d908      	bls.n	800968a <_free_r+0x42>
 8009678:	6820      	ldr	r0, [r4, #0]
 800967a:	1821      	adds	r1, r4, r0
 800967c:	428b      	cmp	r3, r1
 800967e:	bf01      	itttt	eq
 8009680:	6819      	ldreq	r1, [r3, #0]
 8009682:	685b      	ldreq	r3, [r3, #4]
 8009684:	1809      	addeq	r1, r1, r0
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	e7ed      	b.n	8009666 <_free_r+0x1e>
 800968a:	461a      	mov	r2, r3
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b10b      	cbz	r3, 8009694 <_free_r+0x4c>
 8009690:	42a3      	cmp	r3, r4
 8009692:	d9fa      	bls.n	800968a <_free_r+0x42>
 8009694:	6811      	ldr	r1, [r2, #0]
 8009696:	1850      	adds	r0, r2, r1
 8009698:	42a0      	cmp	r0, r4
 800969a:	d10b      	bne.n	80096b4 <_free_r+0x6c>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	4401      	add	r1, r0
 80096a0:	1850      	adds	r0, r2, r1
 80096a2:	4283      	cmp	r3, r0
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	d1e0      	bne.n	800966a <_free_r+0x22>
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6053      	str	r3, [r2, #4]
 80096ae:	4408      	add	r0, r1
 80096b0:	6010      	str	r0, [r2, #0]
 80096b2:	e7da      	b.n	800966a <_free_r+0x22>
 80096b4:	d902      	bls.n	80096bc <_free_r+0x74>
 80096b6:	230c      	movs	r3, #12
 80096b8:	602b      	str	r3, [r5, #0]
 80096ba:	e7d6      	b.n	800966a <_free_r+0x22>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	1821      	adds	r1, r4, r0
 80096c0:	428b      	cmp	r3, r1
 80096c2:	bf04      	itt	eq
 80096c4:	6819      	ldreq	r1, [r3, #0]
 80096c6:	685b      	ldreq	r3, [r3, #4]
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	bf04      	itt	eq
 80096cc:	1809      	addeq	r1, r1, r0
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	6054      	str	r4, [r2, #4]
 80096d2:	e7ca      	b.n	800966a <_free_r+0x22>
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	bf00      	nop
 80096d8:	20000a98 	.word	0x20000a98

080096dc <malloc>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	@ (80096e8 <malloc+0xc>)
 80096de:	4601      	mov	r1, r0
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f000 b825 	b.w	8009730 <_malloc_r>
 80096e6:	bf00      	nop
 80096e8:	20000030 	.word	0x20000030

080096ec <sbrk_aligned>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	4e0f      	ldr	r6, [pc, #60]	@ (800972c <sbrk_aligned+0x40>)
 80096f0:	460c      	mov	r4, r1
 80096f2:	6831      	ldr	r1, [r6, #0]
 80096f4:	4605      	mov	r5, r0
 80096f6:	b911      	cbnz	r1, 80096fe <sbrk_aligned+0x12>
 80096f8:	f000 fe92 	bl	800a420 <_sbrk_r>
 80096fc:	6030      	str	r0, [r6, #0]
 80096fe:	4621      	mov	r1, r4
 8009700:	4628      	mov	r0, r5
 8009702:	f000 fe8d 	bl	800a420 <_sbrk_r>
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d103      	bne.n	8009712 <sbrk_aligned+0x26>
 800970a:	f04f 34ff 	mov.w	r4, #4294967295
 800970e:	4620      	mov	r0, r4
 8009710:	bd70      	pop	{r4, r5, r6, pc}
 8009712:	1cc4      	adds	r4, r0, #3
 8009714:	f024 0403 	bic.w	r4, r4, #3
 8009718:	42a0      	cmp	r0, r4
 800971a:	d0f8      	beq.n	800970e <sbrk_aligned+0x22>
 800971c:	1a21      	subs	r1, r4, r0
 800971e:	4628      	mov	r0, r5
 8009720:	f000 fe7e 	bl	800a420 <_sbrk_r>
 8009724:	3001      	adds	r0, #1
 8009726:	d1f2      	bne.n	800970e <sbrk_aligned+0x22>
 8009728:	e7ef      	b.n	800970a <sbrk_aligned+0x1e>
 800972a:	bf00      	nop
 800972c:	20000a94 	.word	0x20000a94

08009730 <_malloc_r>:
 8009730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009734:	1ccd      	adds	r5, r1, #3
 8009736:	f025 0503 	bic.w	r5, r5, #3
 800973a:	3508      	adds	r5, #8
 800973c:	2d0c      	cmp	r5, #12
 800973e:	bf38      	it	cc
 8009740:	250c      	movcc	r5, #12
 8009742:	2d00      	cmp	r5, #0
 8009744:	4606      	mov	r6, r0
 8009746:	db01      	blt.n	800974c <_malloc_r+0x1c>
 8009748:	42a9      	cmp	r1, r5
 800974a:	d904      	bls.n	8009756 <_malloc_r+0x26>
 800974c:	230c      	movs	r3, #12
 800974e:	6033      	str	r3, [r6, #0]
 8009750:	2000      	movs	r0, #0
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800982c <_malloc_r+0xfc>
 800975a:	f000 f869 	bl	8009830 <__malloc_lock>
 800975e:	f8d8 3000 	ldr.w	r3, [r8]
 8009762:	461c      	mov	r4, r3
 8009764:	bb44      	cbnz	r4, 80097b8 <_malloc_r+0x88>
 8009766:	4629      	mov	r1, r5
 8009768:	4630      	mov	r0, r6
 800976a:	f7ff ffbf 	bl	80096ec <sbrk_aligned>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	4604      	mov	r4, r0
 8009772:	d158      	bne.n	8009826 <_malloc_r+0xf6>
 8009774:	f8d8 4000 	ldr.w	r4, [r8]
 8009778:	4627      	mov	r7, r4
 800977a:	2f00      	cmp	r7, #0
 800977c:	d143      	bne.n	8009806 <_malloc_r+0xd6>
 800977e:	2c00      	cmp	r4, #0
 8009780:	d04b      	beq.n	800981a <_malloc_r+0xea>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	4639      	mov	r1, r7
 8009786:	4630      	mov	r0, r6
 8009788:	eb04 0903 	add.w	r9, r4, r3
 800978c:	f000 fe48 	bl	800a420 <_sbrk_r>
 8009790:	4581      	cmp	r9, r0
 8009792:	d142      	bne.n	800981a <_malloc_r+0xea>
 8009794:	6821      	ldr	r1, [r4, #0]
 8009796:	1a6d      	subs	r5, r5, r1
 8009798:	4629      	mov	r1, r5
 800979a:	4630      	mov	r0, r6
 800979c:	f7ff ffa6 	bl	80096ec <sbrk_aligned>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d03a      	beq.n	800981a <_malloc_r+0xea>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	442b      	add	r3, r5
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	f8d8 3000 	ldr.w	r3, [r8]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	bb62      	cbnz	r2, 800980c <_malloc_r+0xdc>
 80097b2:	f8c8 7000 	str.w	r7, [r8]
 80097b6:	e00f      	b.n	80097d8 <_malloc_r+0xa8>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	1b52      	subs	r2, r2, r5
 80097bc:	d420      	bmi.n	8009800 <_malloc_r+0xd0>
 80097be:	2a0b      	cmp	r2, #11
 80097c0:	d917      	bls.n	80097f2 <_malloc_r+0xc2>
 80097c2:	1961      	adds	r1, r4, r5
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	6025      	str	r5, [r4, #0]
 80097c8:	bf18      	it	ne
 80097ca:	6059      	strne	r1, [r3, #4]
 80097cc:	6863      	ldr	r3, [r4, #4]
 80097ce:	bf08      	it	eq
 80097d0:	f8c8 1000 	streq.w	r1, [r8]
 80097d4:	5162      	str	r2, [r4, r5]
 80097d6:	604b      	str	r3, [r1, #4]
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 f82f 	bl	800983c <__malloc_unlock>
 80097de:	f104 000b 	add.w	r0, r4, #11
 80097e2:	1d23      	adds	r3, r4, #4
 80097e4:	f020 0007 	bic.w	r0, r0, #7
 80097e8:	1ac2      	subs	r2, r0, r3
 80097ea:	bf1c      	itt	ne
 80097ec:	1a1b      	subne	r3, r3, r0
 80097ee:	50a3      	strne	r3, [r4, r2]
 80097f0:	e7af      	b.n	8009752 <_malloc_r+0x22>
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	bf0c      	ite	eq
 80097f8:	f8c8 2000 	streq.w	r2, [r8]
 80097fc:	605a      	strne	r2, [r3, #4]
 80097fe:	e7eb      	b.n	80097d8 <_malloc_r+0xa8>
 8009800:	4623      	mov	r3, r4
 8009802:	6864      	ldr	r4, [r4, #4]
 8009804:	e7ae      	b.n	8009764 <_malloc_r+0x34>
 8009806:	463c      	mov	r4, r7
 8009808:	687f      	ldr	r7, [r7, #4]
 800980a:	e7b6      	b.n	800977a <_malloc_r+0x4a>
 800980c:	461a      	mov	r2, r3
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	42a3      	cmp	r3, r4
 8009812:	d1fb      	bne.n	800980c <_malloc_r+0xdc>
 8009814:	2300      	movs	r3, #0
 8009816:	6053      	str	r3, [r2, #4]
 8009818:	e7de      	b.n	80097d8 <_malloc_r+0xa8>
 800981a:	230c      	movs	r3, #12
 800981c:	6033      	str	r3, [r6, #0]
 800981e:	4630      	mov	r0, r6
 8009820:	f000 f80c 	bl	800983c <__malloc_unlock>
 8009824:	e794      	b.n	8009750 <_malloc_r+0x20>
 8009826:	6005      	str	r5, [r0, #0]
 8009828:	e7d6      	b.n	80097d8 <_malloc_r+0xa8>
 800982a:	bf00      	nop
 800982c:	20000a98 	.word	0x20000a98

08009830 <__malloc_lock>:
 8009830:	4801      	ldr	r0, [pc, #4]	@ (8009838 <__malloc_lock+0x8>)
 8009832:	f7ff b89e 	b.w	8008972 <__retarget_lock_acquire_recursive>
 8009836:	bf00      	nop
 8009838:	20000a90 	.word	0x20000a90

0800983c <__malloc_unlock>:
 800983c:	4801      	ldr	r0, [pc, #4]	@ (8009844 <__malloc_unlock+0x8>)
 800983e:	f7ff b899 	b.w	8008974 <__retarget_lock_release_recursive>
 8009842:	bf00      	nop
 8009844:	20000a90 	.word	0x20000a90

08009848 <_Balloc>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	69c6      	ldr	r6, [r0, #28]
 800984c:	4604      	mov	r4, r0
 800984e:	460d      	mov	r5, r1
 8009850:	b976      	cbnz	r6, 8009870 <_Balloc+0x28>
 8009852:	2010      	movs	r0, #16
 8009854:	f7ff ff42 	bl	80096dc <malloc>
 8009858:	4602      	mov	r2, r0
 800985a:	61e0      	str	r0, [r4, #28]
 800985c:	b920      	cbnz	r0, 8009868 <_Balloc+0x20>
 800985e:	4b18      	ldr	r3, [pc, #96]	@ (80098c0 <_Balloc+0x78>)
 8009860:	4818      	ldr	r0, [pc, #96]	@ (80098c4 <_Balloc+0x7c>)
 8009862:	216b      	movs	r1, #107	@ 0x6b
 8009864:	f000 fdec 	bl	800a440 <__assert_func>
 8009868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800986c:	6006      	str	r6, [r0, #0]
 800986e:	60c6      	str	r6, [r0, #12]
 8009870:	69e6      	ldr	r6, [r4, #28]
 8009872:	68f3      	ldr	r3, [r6, #12]
 8009874:	b183      	cbz	r3, 8009898 <_Balloc+0x50>
 8009876:	69e3      	ldr	r3, [r4, #28]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800987e:	b9b8      	cbnz	r0, 80098b0 <_Balloc+0x68>
 8009880:	2101      	movs	r1, #1
 8009882:	fa01 f605 	lsl.w	r6, r1, r5
 8009886:	1d72      	adds	r2, r6, #5
 8009888:	0092      	lsls	r2, r2, #2
 800988a:	4620      	mov	r0, r4
 800988c:	f000 fdf6 	bl	800a47c <_calloc_r>
 8009890:	b160      	cbz	r0, 80098ac <_Balloc+0x64>
 8009892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009896:	e00e      	b.n	80098b6 <_Balloc+0x6e>
 8009898:	2221      	movs	r2, #33	@ 0x21
 800989a:	2104      	movs	r1, #4
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fded 	bl	800a47c <_calloc_r>
 80098a2:	69e3      	ldr	r3, [r4, #28]
 80098a4:	60f0      	str	r0, [r6, #12]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e4      	bne.n	8009876 <_Balloc+0x2e>
 80098ac:	2000      	movs	r0, #0
 80098ae:	bd70      	pop	{r4, r5, r6, pc}
 80098b0:	6802      	ldr	r2, [r0, #0]
 80098b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098b6:	2300      	movs	r3, #0
 80098b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098bc:	e7f7      	b.n	80098ae <_Balloc+0x66>
 80098be:	bf00      	nop
 80098c0:	0800b205 	.word	0x0800b205
 80098c4:	0800b285 	.word	0x0800b285

080098c8 <_Bfree>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	69c6      	ldr	r6, [r0, #28]
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	b976      	cbnz	r6, 80098f0 <_Bfree+0x28>
 80098d2:	2010      	movs	r0, #16
 80098d4:	f7ff ff02 	bl	80096dc <malloc>
 80098d8:	4602      	mov	r2, r0
 80098da:	61e8      	str	r0, [r5, #28]
 80098dc:	b920      	cbnz	r0, 80098e8 <_Bfree+0x20>
 80098de:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <_Bfree+0x3c>)
 80098e0:	4809      	ldr	r0, [pc, #36]	@ (8009908 <_Bfree+0x40>)
 80098e2:	218f      	movs	r1, #143	@ 0x8f
 80098e4:	f000 fdac 	bl	800a440 <__assert_func>
 80098e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098ec:	6006      	str	r6, [r0, #0]
 80098ee:	60c6      	str	r6, [r0, #12]
 80098f0:	b13c      	cbz	r4, 8009902 <_Bfree+0x3a>
 80098f2:	69eb      	ldr	r3, [r5, #28]
 80098f4:	6862      	ldr	r2, [r4, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098fc:	6021      	str	r1, [r4, #0]
 80098fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	0800b205 	.word	0x0800b205
 8009908:	0800b285 	.word	0x0800b285

0800990c <__multadd>:
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	690d      	ldr	r5, [r1, #16]
 8009912:	4607      	mov	r7, r0
 8009914:	460c      	mov	r4, r1
 8009916:	461e      	mov	r6, r3
 8009918:	f101 0c14 	add.w	ip, r1, #20
 800991c:	2000      	movs	r0, #0
 800991e:	f8dc 3000 	ldr.w	r3, [ip]
 8009922:	b299      	uxth	r1, r3
 8009924:	fb02 6101 	mla	r1, r2, r1, r6
 8009928:	0c1e      	lsrs	r6, r3, #16
 800992a:	0c0b      	lsrs	r3, r1, #16
 800992c:	fb02 3306 	mla	r3, r2, r6, r3
 8009930:	b289      	uxth	r1, r1
 8009932:	3001      	adds	r0, #1
 8009934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009938:	4285      	cmp	r5, r0
 800993a:	f84c 1b04 	str.w	r1, [ip], #4
 800993e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009942:	dcec      	bgt.n	800991e <__multadd+0x12>
 8009944:	b30e      	cbz	r6, 800998a <__multadd+0x7e>
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	42ab      	cmp	r3, r5
 800994a:	dc19      	bgt.n	8009980 <__multadd+0x74>
 800994c:	6861      	ldr	r1, [r4, #4]
 800994e:	4638      	mov	r0, r7
 8009950:	3101      	adds	r1, #1
 8009952:	f7ff ff79 	bl	8009848 <_Balloc>
 8009956:	4680      	mov	r8, r0
 8009958:	b928      	cbnz	r0, 8009966 <__multadd+0x5a>
 800995a:	4602      	mov	r2, r0
 800995c:	4b0c      	ldr	r3, [pc, #48]	@ (8009990 <__multadd+0x84>)
 800995e:	480d      	ldr	r0, [pc, #52]	@ (8009994 <__multadd+0x88>)
 8009960:	21ba      	movs	r1, #186	@ 0xba
 8009962:	f000 fd6d 	bl	800a440 <__assert_func>
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	3202      	adds	r2, #2
 800996a:	f104 010c 	add.w	r1, r4, #12
 800996e:	0092      	lsls	r2, r2, #2
 8009970:	300c      	adds	r0, #12
 8009972:	f7ff f800 	bl	8008976 <memcpy>
 8009976:	4621      	mov	r1, r4
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ffa5 	bl	80098c8 <_Bfree>
 800997e:	4644      	mov	r4, r8
 8009980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009984:	3501      	adds	r5, #1
 8009986:	615e      	str	r6, [r3, #20]
 8009988:	6125      	str	r5, [r4, #16]
 800998a:	4620      	mov	r0, r4
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	0800b274 	.word	0x0800b274
 8009994:	0800b285 	.word	0x0800b285

08009998 <__hi0bits>:
 8009998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800999c:	4603      	mov	r3, r0
 800999e:	bf36      	itet	cc
 80099a0:	0403      	lslcc	r3, r0, #16
 80099a2:	2000      	movcs	r0, #0
 80099a4:	2010      	movcc	r0, #16
 80099a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099aa:	bf3c      	itt	cc
 80099ac:	021b      	lslcc	r3, r3, #8
 80099ae:	3008      	addcc	r0, #8
 80099b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099b4:	bf3c      	itt	cc
 80099b6:	011b      	lslcc	r3, r3, #4
 80099b8:	3004      	addcc	r0, #4
 80099ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099be:	bf3c      	itt	cc
 80099c0:	009b      	lslcc	r3, r3, #2
 80099c2:	3002      	addcc	r0, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	db05      	blt.n	80099d4 <__hi0bits+0x3c>
 80099c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099cc:	f100 0001 	add.w	r0, r0, #1
 80099d0:	bf08      	it	eq
 80099d2:	2020      	moveq	r0, #32
 80099d4:	4770      	bx	lr

080099d6 <__lo0bits>:
 80099d6:	6803      	ldr	r3, [r0, #0]
 80099d8:	4602      	mov	r2, r0
 80099da:	f013 0007 	ands.w	r0, r3, #7
 80099de:	d00b      	beq.n	80099f8 <__lo0bits+0x22>
 80099e0:	07d9      	lsls	r1, r3, #31
 80099e2:	d421      	bmi.n	8009a28 <__lo0bits+0x52>
 80099e4:	0798      	lsls	r0, r3, #30
 80099e6:	bf49      	itett	mi
 80099e8:	085b      	lsrmi	r3, r3, #1
 80099ea:	089b      	lsrpl	r3, r3, #2
 80099ec:	2001      	movmi	r0, #1
 80099ee:	6013      	strmi	r3, [r2, #0]
 80099f0:	bf5c      	itt	pl
 80099f2:	6013      	strpl	r3, [r2, #0]
 80099f4:	2002      	movpl	r0, #2
 80099f6:	4770      	bx	lr
 80099f8:	b299      	uxth	r1, r3
 80099fa:	b909      	cbnz	r1, 8009a00 <__lo0bits+0x2a>
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	2010      	movs	r0, #16
 8009a00:	b2d9      	uxtb	r1, r3
 8009a02:	b909      	cbnz	r1, 8009a08 <__lo0bits+0x32>
 8009a04:	3008      	adds	r0, #8
 8009a06:	0a1b      	lsrs	r3, r3, #8
 8009a08:	0719      	lsls	r1, r3, #28
 8009a0a:	bf04      	itt	eq
 8009a0c:	091b      	lsreq	r3, r3, #4
 8009a0e:	3004      	addeq	r0, #4
 8009a10:	0799      	lsls	r1, r3, #30
 8009a12:	bf04      	itt	eq
 8009a14:	089b      	lsreq	r3, r3, #2
 8009a16:	3002      	addeq	r0, #2
 8009a18:	07d9      	lsls	r1, r3, #31
 8009a1a:	d403      	bmi.n	8009a24 <__lo0bits+0x4e>
 8009a1c:	085b      	lsrs	r3, r3, #1
 8009a1e:	f100 0001 	add.w	r0, r0, #1
 8009a22:	d003      	beq.n	8009a2c <__lo0bits+0x56>
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	4770      	bx	lr
 8009a28:	2000      	movs	r0, #0
 8009a2a:	4770      	bx	lr
 8009a2c:	2020      	movs	r0, #32
 8009a2e:	4770      	bx	lr

08009a30 <__i2b>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	2101      	movs	r1, #1
 8009a36:	f7ff ff07 	bl	8009848 <_Balloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	b928      	cbnz	r0, 8009a4a <__i2b+0x1a>
 8009a3e:	4b05      	ldr	r3, [pc, #20]	@ (8009a54 <__i2b+0x24>)
 8009a40:	4805      	ldr	r0, [pc, #20]	@ (8009a58 <__i2b+0x28>)
 8009a42:	f240 1145 	movw	r1, #325	@ 0x145
 8009a46:	f000 fcfb 	bl	800a440 <__assert_func>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	6144      	str	r4, [r0, #20]
 8009a4e:	6103      	str	r3, [r0, #16]
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	bf00      	nop
 8009a54:	0800b274 	.word	0x0800b274
 8009a58:	0800b285 	.word	0x0800b285

08009a5c <__multiply>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	4617      	mov	r7, r2
 8009a62:	690a      	ldr	r2, [r1, #16]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	bfa8      	it	ge
 8009a6a:	463b      	movge	r3, r7
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	bfa4      	itt	ge
 8009a70:	460f      	movge	r7, r1
 8009a72:	4699      	movge	r9, r3
 8009a74:	693d      	ldr	r5, [r7, #16]
 8009a76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	eb05 060a 	add.w	r6, r5, sl
 8009a82:	42b3      	cmp	r3, r6
 8009a84:	b085      	sub	sp, #20
 8009a86:	bfb8      	it	lt
 8009a88:	3101      	addlt	r1, #1
 8009a8a:	f7ff fedd 	bl	8009848 <_Balloc>
 8009a8e:	b930      	cbnz	r0, 8009a9e <__multiply+0x42>
 8009a90:	4602      	mov	r2, r0
 8009a92:	4b41      	ldr	r3, [pc, #260]	@ (8009b98 <__multiply+0x13c>)
 8009a94:	4841      	ldr	r0, [pc, #260]	@ (8009b9c <__multiply+0x140>)
 8009a96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a9a:	f000 fcd1 	bl	800a440 <__assert_func>
 8009a9e:	f100 0414 	add.w	r4, r0, #20
 8009aa2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4573      	cmp	r3, lr
 8009aac:	d320      	bcc.n	8009af0 <__multiply+0x94>
 8009aae:	f107 0814 	add.w	r8, r7, #20
 8009ab2:	f109 0114 	add.w	r1, r9, #20
 8009ab6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009aba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009abe:	9302      	str	r3, [sp, #8]
 8009ac0:	1beb      	subs	r3, r5, r7
 8009ac2:	3b15      	subs	r3, #21
 8009ac4:	f023 0303 	bic.w	r3, r3, #3
 8009ac8:	3304      	adds	r3, #4
 8009aca:	3715      	adds	r7, #21
 8009acc:	42bd      	cmp	r5, r7
 8009ace:	bf38      	it	cc
 8009ad0:	2304      	movcc	r3, #4
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	9103      	str	r1, [sp, #12]
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	d80c      	bhi.n	8009af6 <__multiply+0x9a>
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	dd03      	ble.n	8009ae8 <__multiply+0x8c>
 8009ae0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d055      	beq.n	8009b94 <__multiply+0x138>
 8009ae8:	6106      	str	r6, [r0, #16]
 8009aea:	b005      	add	sp, #20
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	f843 2b04 	str.w	r2, [r3], #4
 8009af4:	e7d9      	b.n	8009aaa <__multiply+0x4e>
 8009af6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009afa:	f1ba 0f00 	cmp.w	sl, #0
 8009afe:	d01f      	beq.n	8009b40 <__multiply+0xe4>
 8009b00:	46c4      	mov	ip, r8
 8009b02:	46a1      	mov	r9, r4
 8009b04:	2700      	movs	r7, #0
 8009b06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8009b0e:	fa1f fb82 	uxth.w	fp, r2
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b18:	443b      	add	r3, r7
 8009b1a:	f8d9 7000 	ldr.w	r7, [r9]
 8009b1e:	0c12      	lsrs	r2, r2, #16
 8009b20:	0c3f      	lsrs	r7, r7, #16
 8009b22:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b30:	4565      	cmp	r5, ip
 8009b32:	f849 3b04 	str.w	r3, [r9], #4
 8009b36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b3a:	d8e4      	bhi.n	8009b06 <__multiply+0xaa>
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	50e7      	str	r7, [r4, r3]
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b46:	3104      	adds	r1, #4
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	d020      	beq.n	8009b90 <__multiply+0x134>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	4647      	mov	r7, r8
 8009b52:	46a4      	mov	ip, r4
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b60:	fb09 220b 	mla	r2, r9, fp, r2
 8009b64:	4452      	add	r2, sl
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b6c:	f84c 3b04 	str.w	r3, [ip], #4
 8009b70:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b78:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b7c:	fb09 330a 	mla	r3, r9, sl, r3
 8009b80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b84:	42bd      	cmp	r5, r7
 8009b86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b8a:	d8e5      	bhi.n	8009b58 <__multiply+0xfc>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	50a3      	str	r3, [r4, r2]
 8009b90:	3404      	adds	r4, #4
 8009b92:	e79f      	b.n	8009ad4 <__multiply+0x78>
 8009b94:	3e01      	subs	r6, #1
 8009b96:	e7a1      	b.n	8009adc <__multiply+0x80>
 8009b98:	0800b274 	.word	0x0800b274
 8009b9c:	0800b285 	.word	0x0800b285

08009ba0 <__pow5mult>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	f012 0203 	ands.w	r2, r2, #3
 8009baa:	4607      	mov	r7, r0
 8009bac:	460e      	mov	r6, r1
 8009bae:	d007      	beq.n	8009bc0 <__pow5mult+0x20>
 8009bb0:	4c25      	ldr	r4, [pc, #148]	@ (8009c48 <__pow5mult+0xa8>)
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bba:	f7ff fea7 	bl	800990c <__multadd>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	10ad      	asrs	r5, r5, #2
 8009bc2:	d03d      	beq.n	8009c40 <__pow5mult+0xa0>
 8009bc4:	69fc      	ldr	r4, [r7, #28]
 8009bc6:	b97c      	cbnz	r4, 8009be8 <__pow5mult+0x48>
 8009bc8:	2010      	movs	r0, #16
 8009bca:	f7ff fd87 	bl	80096dc <malloc>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	61f8      	str	r0, [r7, #28]
 8009bd2:	b928      	cbnz	r0, 8009be0 <__pow5mult+0x40>
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <__pow5mult+0xac>)
 8009bd6:	481e      	ldr	r0, [pc, #120]	@ (8009c50 <__pow5mult+0xb0>)
 8009bd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bdc:	f000 fc30 	bl	800a440 <__assert_func>
 8009be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009be4:	6004      	str	r4, [r0, #0]
 8009be6:	60c4      	str	r4, [r0, #12]
 8009be8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf0:	b94c      	cbnz	r4, 8009c06 <__pow5mult+0x66>
 8009bf2:	f240 2171 	movw	r1, #625	@ 0x271
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7ff ff1a 	bl	8009a30 <__i2b>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c02:	4604      	mov	r4, r0
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	f04f 0900 	mov.w	r9, #0
 8009c0a:	07eb      	lsls	r3, r5, #31
 8009c0c:	d50a      	bpl.n	8009c24 <__pow5mult+0x84>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4622      	mov	r2, r4
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff ff22 	bl	8009a5c <__multiply>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff fe53 	bl	80098c8 <_Bfree>
 8009c22:	4646      	mov	r6, r8
 8009c24:	106d      	asrs	r5, r5, #1
 8009c26:	d00b      	beq.n	8009c40 <__pow5mult+0xa0>
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	b938      	cbnz	r0, 8009c3c <__pow5mult+0x9c>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff13 	bl	8009a5c <__multiply>
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	f8c0 9000 	str.w	r9, [r0]
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	e7e4      	b.n	8009c0a <__pow5mult+0x6a>
 8009c40:	4630      	mov	r0, r6
 8009c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c46:	bf00      	nop
 8009c48:	0800b338 	.word	0x0800b338
 8009c4c:	0800b205 	.word	0x0800b205
 8009c50:	0800b285 	.word	0x0800b285

08009c54 <__lshift>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6849      	ldr	r1, [r1, #4]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	4607      	mov	r7, r0
 8009c66:	4691      	mov	r9, r2
 8009c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c6c:	f108 0601 	add.w	r6, r8, #1
 8009c70:	42b3      	cmp	r3, r6
 8009c72:	db0b      	blt.n	8009c8c <__lshift+0x38>
 8009c74:	4638      	mov	r0, r7
 8009c76:	f7ff fde7 	bl	8009848 <_Balloc>
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b948      	cbnz	r0, 8009c92 <__lshift+0x3e>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b28      	ldr	r3, [pc, #160]	@ (8009d24 <__lshift+0xd0>)
 8009c82:	4829      	ldr	r0, [pc, #164]	@ (8009d28 <__lshift+0xd4>)
 8009c84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c88:	f000 fbda 	bl	800a440 <__assert_func>
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	e7ee      	b.n	8009c70 <__lshift+0x1c>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f100 0114 	add.w	r1, r0, #20
 8009c98:	f100 0210 	add.w	r2, r0, #16
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4553      	cmp	r3, sl
 8009ca0:	db33      	blt.n	8009d0a <__lshift+0xb6>
 8009ca2:	6920      	ldr	r0, [r4, #16]
 8009ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca8:	f104 0314 	add.w	r3, r4, #20
 8009cac:	f019 091f 	ands.w	r9, r9, #31
 8009cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb8:	d02b      	beq.n	8009d12 <__lshift+0xbe>
 8009cba:	f1c9 0e20 	rsb	lr, r9, #32
 8009cbe:	468a      	mov	sl, r1
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8009cc8:	4310      	orrs	r0, r2
 8009cca:	f84a 0b04 	str.w	r0, [sl], #4
 8009cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd2:	459c      	cmp	ip, r3
 8009cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cd8:	d8f3      	bhi.n	8009cc2 <__lshift+0x6e>
 8009cda:	ebac 0304 	sub.w	r3, ip, r4
 8009cde:	3b15      	subs	r3, #21
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	f104 0015 	add.w	r0, r4, #21
 8009cea:	4560      	cmp	r0, ip
 8009cec:	bf88      	it	hi
 8009cee:	2304      	movhi	r3, #4
 8009cf0:	50ca      	str	r2, [r1, r3]
 8009cf2:	b10a      	cbz	r2, 8009cf8 <__lshift+0xa4>
 8009cf4:	f108 0602 	add.w	r6, r8, #2
 8009cf8:	3e01      	subs	r6, #1
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	612e      	str	r6, [r5, #16]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f7ff fde2 	bl	80098c8 <_Bfree>
 8009d04:	4628      	mov	r0, r5
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7c5      	b.n	8009c9e <__lshift+0x4a>
 8009d12:	3904      	subs	r1, #4
 8009d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d1c:	459c      	cmp	ip, r3
 8009d1e:	d8f9      	bhi.n	8009d14 <__lshift+0xc0>
 8009d20:	e7ea      	b.n	8009cf8 <__lshift+0xa4>
 8009d22:	bf00      	nop
 8009d24:	0800b274 	.word	0x0800b274
 8009d28:	0800b285 	.word	0x0800b285

08009d2c <__mcmp>:
 8009d2c:	690a      	ldr	r2, [r1, #16]
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6900      	ldr	r0, [r0, #16]
 8009d32:	1a80      	subs	r0, r0, r2
 8009d34:	b530      	push	{r4, r5, lr}
 8009d36:	d10e      	bne.n	8009d56 <__mcmp+0x2a>
 8009d38:	3314      	adds	r3, #20
 8009d3a:	3114      	adds	r1, #20
 8009d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d4c:	4295      	cmp	r5, r2
 8009d4e:	d003      	beq.n	8009d58 <__mcmp+0x2c>
 8009d50:	d205      	bcs.n	8009d5e <__mcmp+0x32>
 8009d52:	f04f 30ff 	mov.w	r0, #4294967295
 8009d56:	bd30      	pop	{r4, r5, pc}
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d3f3      	bcc.n	8009d44 <__mcmp+0x18>
 8009d5c:	e7fb      	b.n	8009d56 <__mcmp+0x2a>
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7f9      	b.n	8009d56 <__mcmp+0x2a>
	...

08009d64 <__mdiff>:
 8009d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4689      	mov	r9, r1
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4648      	mov	r0, r9
 8009d70:	4614      	mov	r4, r2
 8009d72:	f7ff ffdb 	bl	8009d2c <__mcmp>
 8009d76:	1e05      	subs	r5, r0, #0
 8009d78:	d112      	bne.n	8009da0 <__mdiff+0x3c>
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7ff fd63 	bl	8009848 <_Balloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <__mdiff+0x2e>
 8009d86:	4b3f      	ldr	r3, [pc, #252]	@ (8009e84 <__mdiff+0x120>)
 8009d88:	f240 2137 	movw	r1, #567	@ 0x237
 8009d8c:	483e      	ldr	r0, [pc, #248]	@ (8009e88 <__mdiff+0x124>)
 8009d8e:	f000 fb57 	bl	800a440 <__assert_func>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	b003      	add	sp, #12
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	bfbc      	itt	lt
 8009da2:	464b      	movlt	r3, r9
 8009da4:	46a1      	movlt	r9, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009dac:	bfba      	itte	lt
 8009dae:	461c      	movlt	r4, r3
 8009db0:	2501      	movlt	r5, #1
 8009db2:	2500      	movge	r5, #0
 8009db4:	f7ff fd48 	bl	8009848 <_Balloc>
 8009db8:	4602      	mov	r2, r0
 8009dba:	b918      	cbnz	r0, 8009dc4 <__mdiff+0x60>
 8009dbc:	4b31      	ldr	r3, [pc, #196]	@ (8009e84 <__mdiff+0x120>)
 8009dbe:	f240 2145 	movw	r1, #581	@ 0x245
 8009dc2:	e7e3      	b.n	8009d8c <__mdiff+0x28>
 8009dc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009dc8:	6926      	ldr	r6, [r4, #16]
 8009dca:	60c5      	str	r5, [r0, #12]
 8009dcc:	f109 0310 	add.w	r3, r9, #16
 8009dd0:	f109 0514 	add.w	r5, r9, #20
 8009dd4:	f104 0e14 	add.w	lr, r4, #20
 8009dd8:	f100 0b14 	add.w	fp, r0, #20
 8009ddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009de0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	46d9      	mov	r9, fp
 8009de8:	f04f 0c00 	mov.w	ip, #0
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009df2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	fa1f f38a 	uxth.w	r3, sl
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	b283      	uxth	r3, r0
 8009e00:	1acb      	subs	r3, r1, r3
 8009e02:	0c00      	lsrs	r0, r0, #16
 8009e04:	4463      	add	r3, ip
 8009e06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e14:	4576      	cmp	r6, lr
 8009e16:	f849 3b04 	str.w	r3, [r9], #4
 8009e1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e1e:	d8e5      	bhi.n	8009dec <__mdiff+0x88>
 8009e20:	1b33      	subs	r3, r6, r4
 8009e22:	3b15      	subs	r3, #21
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	3415      	adds	r4, #21
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	bf38      	it	cc
 8009e30:	2304      	movcc	r3, #4
 8009e32:	441d      	add	r5, r3
 8009e34:	445b      	add	r3, fp
 8009e36:	461e      	mov	r6, r3
 8009e38:	462c      	mov	r4, r5
 8009e3a:	4544      	cmp	r4, r8
 8009e3c:	d30e      	bcc.n	8009e5c <__mdiff+0xf8>
 8009e3e:	f108 0103 	add.w	r1, r8, #3
 8009e42:	1b49      	subs	r1, r1, r5
 8009e44:	f021 0103 	bic.w	r1, r1, #3
 8009e48:	3d03      	subs	r5, #3
 8009e4a:	45a8      	cmp	r8, r5
 8009e4c:	bf38      	it	cc
 8009e4e:	2100      	movcc	r1, #0
 8009e50:	440b      	add	r3, r1
 8009e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e56:	b191      	cbz	r1, 8009e7e <__mdiff+0x11a>
 8009e58:	6117      	str	r7, [r2, #16]
 8009e5a:	e79d      	b.n	8009d98 <__mdiff+0x34>
 8009e5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e60:	46e6      	mov	lr, ip
 8009e62:	0c08      	lsrs	r0, r1, #16
 8009e64:	fa1c fc81 	uxtah	ip, ip, r1
 8009e68:	4471      	add	r1, lr
 8009e6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e6e:	b289      	uxth	r1, r1
 8009e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e74:	f846 1b04 	str.w	r1, [r6], #4
 8009e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e7c:	e7dd      	b.n	8009e3a <__mdiff+0xd6>
 8009e7e:	3f01      	subs	r7, #1
 8009e80:	e7e7      	b.n	8009e52 <__mdiff+0xee>
 8009e82:	bf00      	nop
 8009e84:	0800b274 	.word	0x0800b274
 8009e88:	0800b285 	.word	0x0800b285

08009e8c <__d2b>:
 8009e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	460f      	mov	r7, r1
 8009e92:	2101      	movs	r1, #1
 8009e94:	ec59 8b10 	vmov	r8, r9, d0
 8009e98:	4616      	mov	r6, r2
 8009e9a:	f7ff fcd5 	bl	8009848 <_Balloc>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	b930      	cbnz	r0, 8009eb0 <__d2b+0x24>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4b23      	ldr	r3, [pc, #140]	@ (8009f34 <__d2b+0xa8>)
 8009ea6:	4824      	ldr	r0, [pc, #144]	@ (8009f38 <__d2b+0xac>)
 8009ea8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009eac:	f000 fac8 	bl	800a440 <__assert_func>
 8009eb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009eb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb8:	b10d      	cbz	r5, 8009ebe <__d2b+0x32>
 8009eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ec4:	d023      	beq.n	8009f0e <__d2b+0x82>
 8009ec6:	4668      	mov	r0, sp
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	f7ff fd84 	bl	80099d6 <__lo0bits>
 8009ece:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ed2:	b1d0      	cbz	r0, 8009f0a <__d2b+0x7e>
 8009ed4:	f1c0 0320 	rsb	r3, r0, #32
 8009ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8009edc:	430b      	orrs	r3, r1
 8009ede:	40c2      	lsrs	r2, r0
 8009ee0:	6163      	str	r3, [r4, #20]
 8009ee2:	9201      	str	r2, [sp, #4]
 8009ee4:	9b01      	ldr	r3, [sp, #4]
 8009ee6:	61a3      	str	r3, [r4, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bf0c      	ite	eq
 8009eec:	2201      	moveq	r2, #1
 8009eee:	2202      	movne	r2, #2
 8009ef0:	6122      	str	r2, [r4, #16]
 8009ef2:	b1a5      	cbz	r5, 8009f1e <__d2b+0x92>
 8009ef4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ef8:	4405      	add	r5, r0
 8009efa:	603d      	str	r5, [r7, #0]
 8009efc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f00:	6030      	str	r0, [r6, #0]
 8009f02:	4620      	mov	r0, r4
 8009f04:	b003      	add	sp, #12
 8009f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f0a:	6161      	str	r1, [r4, #20]
 8009f0c:	e7ea      	b.n	8009ee4 <__d2b+0x58>
 8009f0e:	a801      	add	r0, sp, #4
 8009f10:	f7ff fd61 	bl	80099d6 <__lo0bits>
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	3020      	adds	r0, #32
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	e7e8      	b.n	8009ef0 <__d2b+0x64>
 8009f1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f26:	6038      	str	r0, [r7, #0]
 8009f28:	6918      	ldr	r0, [r3, #16]
 8009f2a:	f7ff fd35 	bl	8009998 <__hi0bits>
 8009f2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f32:	e7e5      	b.n	8009f00 <__d2b+0x74>
 8009f34:	0800b274 	.word	0x0800b274
 8009f38:	0800b285 	.word	0x0800b285

08009f3c <__sfputc_r>:
 8009f3c:	6893      	ldr	r3, [r2, #8]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	b410      	push	{r4}
 8009f44:	6093      	str	r3, [r2, #8]
 8009f46:	da08      	bge.n	8009f5a <__sfputc_r+0x1e>
 8009f48:	6994      	ldr	r4, [r2, #24]
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	db01      	blt.n	8009f52 <__sfputc_r+0x16>
 8009f4e:	290a      	cmp	r1, #10
 8009f50:	d103      	bne.n	8009f5a <__sfputc_r+0x1e>
 8009f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f56:	f7fe bbfa 	b.w	800874e <__swbuf_r>
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	1c58      	adds	r0, r3, #1
 8009f5e:	6010      	str	r0, [r2, #0]
 8009f60:	7019      	strb	r1, [r3, #0]
 8009f62:	4608      	mov	r0, r1
 8009f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <__sfputs_r>:
 8009f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	460f      	mov	r7, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	18d5      	adds	r5, r2, r3
 8009f74:	42ac      	cmp	r4, r5
 8009f76:	d101      	bne.n	8009f7c <__sfputs_r+0x12>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e007      	b.n	8009f8c <__sfputs_r+0x22>
 8009f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f80:	463a      	mov	r2, r7
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ffda 	bl	8009f3c <__sfputc_r>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d1f3      	bne.n	8009f74 <__sfputs_r+0xa>
 8009f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f90 <_vfiprintf_r>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	460d      	mov	r5, r1
 8009f96:	b09d      	sub	sp, #116	@ 0x74
 8009f98:	4614      	mov	r4, r2
 8009f9a:	4698      	mov	r8, r3
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	b118      	cbz	r0, 8009fa8 <_vfiprintf_r+0x18>
 8009fa0:	6a03      	ldr	r3, [r0, #32]
 8009fa2:	b90b      	cbnz	r3, 8009fa8 <_vfiprintf_r+0x18>
 8009fa4:	f7fe faea 	bl	800857c <__sinit>
 8009fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009faa:	07d9      	lsls	r1, r3, #31
 8009fac:	d405      	bmi.n	8009fba <_vfiprintf_r+0x2a>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d402      	bmi.n	8009fba <_vfiprintf_r+0x2a>
 8009fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fb6:	f7fe fcdc 	bl	8008972 <__retarget_lock_acquire_recursive>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	071b      	lsls	r3, r3, #28
 8009fbe:	d501      	bpl.n	8009fc4 <_vfiprintf_r+0x34>
 8009fc0:	692b      	ldr	r3, [r5, #16]
 8009fc2:	b99b      	cbnz	r3, 8009fec <_vfiprintf_r+0x5c>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7fe fc00 	bl	80087cc <__swsetup_r>
 8009fcc:	b170      	cbz	r0, 8009fec <_vfiprintf_r+0x5c>
 8009fce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fd0:	07dc      	lsls	r4, r3, #31
 8009fd2:	d504      	bpl.n	8009fde <_vfiprintf_r+0x4e>
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	b01d      	add	sp, #116	@ 0x74
 8009fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	0598      	lsls	r0, r3, #22
 8009fe2:	d4f7      	bmi.n	8009fd4 <_vfiprintf_r+0x44>
 8009fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fe6:	f7fe fcc5 	bl	8008974 <__retarget_lock_release_recursive>
 8009fea:	e7f3      	b.n	8009fd4 <_vfiprintf_r+0x44>
 8009fec:	2300      	movs	r3, #0
 8009fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ff0:	2320      	movs	r3, #32
 8009ff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffa:	2330      	movs	r3, #48	@ 0x30
 8009ffc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1ac <_vfiprintf_r+0x21c>
 800a000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a004:	f04f 0901 	mov.w	r9, #1
 800a008:	4623      	mov	r3, r4
 800a00a:	469a      	mov	sl, r3
 800a00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a010:	b10a      	cbz	r2, 800a016 <_vfiprintf_r+0x86>
 800a012:	2a25      	cmp	r2, #37	@ 0x25
 800a014:	d1f9      	bne.n	800a00a <_vfiprintf_r+0x7a>
 800a016:	ebba 0b04 	subs.w	fp, sl, r4
 800a01a:	d00b      	beq.n	800a034 <_vfiprintf_r+0xa4>
 800a01c:	465b      	mov	r3, fp
 800a01e:	4622      	mov	r2, r4
 800a020:	4629      	mov	r1, r5
 800a022:	4630      	mov	r0, r6
 800a024:	f7ff ffa1 	bl	8009f6a <__sfputs_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	f000 80a7 	beq.w	800a17c <_vfiprintf_r+0x1ec>
 800a02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a030:	445a      	add	r2, fp
 800a032:	9209      	str	r2, [sp, #36]	@ 0x24
 800a034:	f89a 3000 	ldrb.w	r3, [sl]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 809f 	beq.w	800a17c <_vfiprintf_r+0x1ec>
 800a03e:	2300      	movs	r3, #0
 800a040:	f04f 32ff 	mov.w	r2, #4294967295
 800a044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a048:	f10a 0a01 	add.w	sl, sl, #1
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	9307      	str	r3, [sp, #28]
 800a050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a054:	931a      	str	r3, [sp, #104]	@ 0x68
 800a056:	4654      	mov	r4, sl
 800a058:	2205      	movs	r2, #5
 800a05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05e:	4853      	ldr	r0, [pc, #332]	@ (800a1ac <_vfiprintf_r+0x21c>)
 800a060:	f7f6 f8be 	bl	80001e0 <memchr>
 800a064:	9a04      	ldr	r2, [sp, #16]
 800a066:	b9d8      	cbnz	r0, 800a0a0 <_vfiprintf_r+0x110>
 800a068:	06d1      	lsls	r1, r2, #27
 800a06a:	bf44      	itt	mi
 800a06c:	2320      	movmi	r3, #32
 800a06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a072:	0713      	lsls	r3, r2, #28
 800a074:	bf44      	itt	mi
 800a076:	232b      	movmi	r3, #43	@ 0x2b
 800a078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a07c:	f89a 3000 	ldrb.w	r3, [sl]
 800a080:	2b2a      	cmp	r3, #42	@ 0x2a
 800a082:	d015      	beq.n	800a0b0 <_vfiprintf_r+0x120>
 800a084:	9a07      	ldr	r2, [sp, #28]
 800a086:	4654      	mov	r4, sl
 800a088:	2000      	movs	r0, #0
 800a08a:	f04f 0c0a 	mov.w	ip, #10
 800a08e:	4621      	mov	r1, r4
 800a090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a094:	3b30      	subs	r3, #48	@ 0x30
 800a096:	2b09      	cmp	r3, #9
 800a098:	d94b      	bls.n	800a132 <_vfiprintf_r+0x1a2>
 800a09a:	b1b0      	cbz	r0, 800a0ca <_vfiprintf_r+0x13a>
 800a09c:	9207      	str	r2, [sp, #28]
 800a09e:	e014      	b.n	800a0ca <_vfiprintf_r+0x13a>
 800a0a0:	eba0 0308 	sub.w	r3, r0, r8
 800a0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	46a2      	mov	sl, r4
 800a0ae:	e7d2      	b.n	800a056 <_vfiprintf_r+0xc6>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	1d19      	adds	r1, r3, #4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	9103      	str	r1, [sp, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bfbb      	ittet	lt
 800a0bc:	425b      	neglt	r3, r3
 800a0be:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c2:	9307      	strge	r3, [sp, #28]
 800a0c4:	9307      	strlt	r3, [sp, #28]
 800a0c6:	bfb8      	it	lt
 800a0c8:	9204      	strlt	r2, [sp, #16]
 800a0ca:	7823      	ldrb	r3, [r4, #0]
 800a0cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0ce:	d10a      	bne.n	800a0e6 <_vfiprintf_r+0x156>
 800a0d0:	7863      	ldrb	r3, [r4, #1]
 800a0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0d4:	d132      	bne.n	800a13c <_vfiprintf_r+0x1ac>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	1d1a      	adds	r2, r3, #4
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	9203      	str	r2, [sp, #12]
 800a0de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0e2:	3402      	adds	r4, #2
 800a0e4:	9305      	str	r3, [sp, #20]
 800a0e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1bc <_vfiprintf_r+0x22c>
 800a0ea:	7821      	ldrb	r1, [r4, #0]
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f7f6 f876 	bl	80001e0 <memchr>
 800a0f4:	b138      	cbz	r0, 800a106 <_vfiprintf_r+0x176>
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	eba0 000a 	sub.w	r0, r0, sl
 800a0fc:	2240      	movs	r2, #64	@ 0x40
 800a0fe:	4082      	lsls	r2, r0
 800a100:	4313      	orrs	r3, r2
 800a102:	3401      	adds	r4, #1
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10a:	4829      	ldr	r0, [pc, #164]	@ (800a1b0 <_vfiprintf_r+0x220>)
 800a10c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a110:	2206      	movs	r2, #6
 800a112:	f7f6 f865 	bl	80001e0 <memchr>
 800a116:	2800      	cmp	r0, #0
 800a118:	d03f      	beq.n	800a19a <_vfiprintf_r+0x20a>
 800a11a:	4b26      	ldr	r3, [pc, #152]	@ (800a1b4 <_vfiprintf_r+0x224>)
 800a11c:	bb1b      	cbnz	r3, 800a166 <_vfiprintf_r+0x1d6>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	3307      	adds	r3, #7
 800a122:	f023 0307 	bic.w	r3, r3, #7
 800a126:	3308      	adds	r3, #8
 800a128:	9303      	str	r3, [sp, #12]
 800a12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a12c:	443b      	add	r3, r7
 800a12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a130:	e76a      	b.n	800a008 <_vfiprintf_r+0x78>
 800a132:	fb0c 3202 	mla	r2, ip, r2, r3
 800a136:	460c      	mov	r4, r1
 800a138:	2001      	movs	r0, #1
 800a13a:	e7a8      	b.n	800a08e <_vfiprintf_r+0xfe>
 800a13c:	2300      	movs	r3, #0
 800a13e:	3401      	adds	r4, #1
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	4619      	mov	r1, r3
 800a144:	f04f 0c0a 	mov.w	ip, #10
 800a148:	4620      	mov	r0, r4
 800a14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14e:	3a30      	subs	r2, #48	@ 0x30
 800a150:	2a09      	cmp	r2, #9
 800a152:	d903      	bls.n	800a15c <_vfiprintf_r+0x1cc>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0c6      	beq.n	800a0e6 <_vfiprintf_r+0x156>
 800a158:	9105      	str	r1, [sp, #20]
 800a15a:	e7c4      	b.n	800a0e6 <_vfiprintf_r+0x156>
 800a15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a160:	4604      	mov	r4, r0
 800a162:	2301      	movs	r3, #1
 800a164:	e7f0      	b.n	800a148 <_vfiprintf_r+0x1b8>
 800a166:	ab03      	add	r3, sp, #12
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	462a      	mov	r2, r5
 800a16c:	4b12      	ldr	r3, [pc, #72]	@ (800a1b8 <_vfiprintf_r+0x228>)
 800a16e:	a904      	add	r1, sp, #16
 800a170:	4630      	mov	r0, r6
 800a172:	f7fd fdc1 	bl	8007cf8 <_printf_float>
 800a176:	4607      	mov	r7, r0
 800a178:	1c78      	adds	r0, r7, #1
 800a17a:	d1d6      	bne.n	800a12a <_vfiprintf_r+0x19a>
 800a17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a17e:	07d9      	lsls	r1, r3, #31
 800a180:	d405      	bmi.n	800a18e <_vfiprintf_r+0x1fe>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	059a      	lsls	r2, r3, #22
 800a186:	d402      	bmi.n	800a18e <_vfiprintf_r+0x1fe>
 800a188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a18a:	f7fe fbf3 	bl	8008974 <__retarget_lock_release_recursive>
 800a18e:	89ab      	ldrh	r3, [r5, #12]
 800a190:	065b      	lsls	r3, r3, #25
 800a192:	f53f af1f 	bmi.w	8009fd4 <_vfiprintf_r+0x44>
 800a196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a198:	e71e      	b.n	8009fd8 <_vfiprintf_r+0x48>
 800a19a:	ab03      	add	r3, sp, #12
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	462a      	mov	r2, r5
 800a1a0:	4b05      	ldr	r3, [pc, #20]	@ (800a1b8 <_vfiprintf_r+0x228>)
 800a1a2:	a904      	add	r1, sp, #16
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7fe f83f 	bl	8008228 <_printf_i>
 800a1aa:	e7e4      	b.n	800a176 <_vfiprintf_r+0x1e6>
 800a1ac:	0800b2de 	.word	0x0800b2de
 800a1b0:	0800b2e8 	.word	0x0800b2e8
 800a1b4:	08007cf9 	.word	0x08007cf9
 800a1b8:	08009f6b 	.word	0x08009f6b
 800a1bc:	0800b2e4 	.word	0x0800b2e4

0800a1c0 <__sflush_r>:
 800a1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	0716      	lsls	r6, r2, #28
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	d454      	bmi.n	800a27a <__sflush_r+0xba>
 800a1d0:	684b      	ldr	r3, [r1, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dc02      	bgt.n	800a1dc <__sflush_r+0x1c>
 800a1d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dd48      	ble.n	800a26e <__sflush_r+0xae>
 800a1dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	d045      	beq.n	800a26e <__sflush_r+0xae>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1e8:	682f      	ldr	r7, [r5, #0]
 800a1ea:	6a21      	ldr	r1, [r4, #32]
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	d030      	beq.n	800a252 <__sflush_r+0x92>
 800a1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	0759      	lsls	r1, r3, #29
 800a1f6:	d505      	bpl.n	800a204 <__sflush_r+0x44>
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1fe:	b10b      	cbz	r3, 800a204 <__sflush_r+0x44>
 800a200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a202:	1ad2      	subs	r2, r2, r3
 800a204:	2300      	movs	r3, #0
 800a206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a208:	6a21      	ldr	r1, [r4, #32]
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b0      	blx	r6
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	d106      	bne.n	800a222 <__sflush_r+0x62>
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	291d      	cmp	r1, #29
 800a218:	d82b      	bhi.n	800a272 <__sflush_r+0xb2>
 800a21a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c4 <__sflush_r+0x104>)
 800a21c:	40ca      	lsrs	r2, r1
 800a21e:	07d6      	lsls	r6, r2, #31
 800a220:	d527      	bpl.n	800a272 <__sflush_r+0xb2>
 800a222:	2200      	movs	r2, #0
 800a224:	6062      	str	r2, [r4, #4]
 800a226:	04d9      	lsls	r1, r3, #19
 800a228:	6922      	ldr	r2, [r4, #16]
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	d504      	bpl.n	800a238 <__sflush_r+0x78>
 800a22e:	1c42      	adds	r2, r0, #1
 800a230:	d101      	bne.n	800a236 <__sflush_r+0x76>
 800a232:	682b      	ldr	r3, [r5, #0]
 800a234:	b903      	cbnz	r3, 800a238 <__sflush_r+0x78>
 800a236:	6560      	str	r0, [r4, #84]	@ 0x54
 800a238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a23a:	602f      	str	r7, [r5, #0]
 800a23c:	b1b9      	cbz	r1, 800a26e <__sflush_r+0xae>
 800a23e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a242:	4299      	cmp	r1, r3
 800a244:	d002      	beq.n	800a24c <__sflush_r+0x8c>
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff f9fe 	bl	8009648 <_free_r>
 800a24c:	2300      	movs	r3, #0
 800a24e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a250:	e00d      	b.n	800a26e <__sflush_r+0xae>
 800a252:	2301      	movs	r3, #1
 800a254:	4628      	mov	r0, r5
 800a256:	47b0      	blx	r6
 800a258:	4602      	mov	r2, r0
 800a25a:	1c50      	adds	r0, r2, #1
 800a25c:	d1c9      	bne.n	800a1f2 <__sflush_r+0x32>
 800a25e:	682b      	ldr	r3, [r5, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0c6      	beq.n	800a1f2 <__sflush_r+0x32>
 800a264:	2b1d      	cmp	r3, #29
 800a266:	d001      	beq.n	800a26c <__sflush_r+0xac>
 800a268:	2b16      	cmp	r3, #22
 800a26a:	d11e      	bne.n	800a2aa <__sflush_r+0xea>
 800a26c:	602f      	str	r7, [r5, #0]
 800a26e:	2000      	movs	r0, #0
 800a270:	e022      	b.n	800a2b8 <__sflush_r+0xf8>
 800a272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a276:	b21b      	sxth	r3, r3
 800a278:	e01b      	b.n	800a2b2 <__sflush_r+0xf2>
 800a27a:	690f      	ldr	r7, [r1, #16]
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	d0f6      	beq.n	800a26e <__sflush_r+0xae>
 800a280:	0793      	lsls	r3, r2, #30
 800a282:	680e      	ldr	r6, [r1, #0]
 800a284:	bf08      	it	eq
 800a286:	694b      	ldreq	r3, [r1, #20]
 800a288:	600f      	str	r7, [r1, #0]
 800a28a:	bf18      	it	ne
 800a28c:	2300      	movne	r3, #0
 800a28e:	eba6 0807 	sub.w	r8, r6, r7
 800a292:	608b      	str	r3, [r1, #8]
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	dde9      	ble.n	800a26e <__sflush_r+0xae>
 800a29a:	6a21      	ldr	r1, [r4, #32]
 800a29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a29e:	4643      	mov	r3, r8
 800a2a0:	463a      	mov	r2, r7
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b0      	blx	r6
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	dc08      	bgt.n	800a2bc <__sflush_r+0xfc>
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2bc:	4407      	add	r7, r0
 800a2be:	eba8 0800 	sub.w	r8, r8, r0
 800a2c2:	e7e7      	b.n	800a294 <__sflush_r+0xd4>
 800a2c4:	20400001 	.word	0x20400001

0800a2c8 <_fflush_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	690b      	ldr	r3, [r1, #16]
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	b913      	cbnz	r3, 800a2d8 <_fflush_r+0x10>
 800a2d2:	2500      	movs	r5, #0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	b118      	cbz	r0, 800a2e2 <_fflush_r+0x1a>
 800a2da:	6a03      	ldr	r3, [r0, #32]
 800a2dc:	b90b      	cbnz	r3, 800a2e2 <_fflush_r+0x1a>
 800a2de:	f7fe f94d 	bl	800857c <__sinit>
 800a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0f3      	beq.n	800a2d2 <_fflush_r+0xa>
 800a2ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2ec:	07d0      	lsls	r0, r2, #31
 800a2ee:	d404      	bmi.n	800a2fa <_fflush_r+0x32>
 800a2f0:	0599      	lsls	r1, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_fflush_r+0x32>
 800a2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2f6:	f7fe fb3c 	bl	8008972 <__retarget_lock_acquire_recursive>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	f7ff ff5f 	bl	800a1c0 <__sflush_r>
 800a302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a304:	07da      	lsls	r2, r3, #31
 800a306:	4605      	mov	r5, r0
 800a308:	d4e4      	bmi.n	800a2d4 <_fflush_r+0xc>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	059b      	lsls	r3, r3, #22
 800a30e:	d4e1      	bmi.n	800a2d4 <_fflush_r+0xc>
 800a310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a312:	f7fe fb2f 	bl	8008974 <__retarget_lock_release_recursive>
 800a316:	e7dd      	b.n	800a2d4 <_fflush_r+0xc>

0800a318 <__swhatbuf_r>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	460c      	mov	r4, r1
 800a31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a320:	2900      	cmp	r1, #0
 800a322:	b096      	sub	sp, #88	@ 0x58
 800a324:	4615      	mov	r5, r2
 800a326:	461e      	mov	r6, r3
 800a328:	da0d      	bge.n	800a346 <__swhatbuf_r+0x2e>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a330:	f04f 0100 	mov.w	r1, #0
 800a334:	bf14      	ite	ne
 800a336:	2340      	movne	r3, #64	@ 0x40
 800a338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a33c:	2000      	movs	r0, #0
 800a33e:	6031      	str	r1, [r6, #0]
 800a340:	602b      	str	r3, [r5, #0]
 800a342:	b016      	add	sp, #88	@ 0x58
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	466a      	mov	r2, sp
 800a348:	f000 f848 	bl	800a3dc <_fstat_r>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dbec      	blt.n	800a32a <__swhatbuf_r+0x12>
 800a350:	9901      	ldr	r1, [sp, #4]
 800a352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a35a:	4259      	negs	r1, r3
 800a35c:	4159      	adcs	r1, r3
 800a35e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a362:	e7eb      	b.n	800a33c <__swhatbuf_r+0x24>

0800a364 <__smakebuf_r>:
 800a364:	898b      	ldrh	r3, [r1, #12]
 800a366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a368:	079d      	lsls	r5, r3, #30
 800a36a:	4606      	mov	r6, r0
 800a36c:	460c      	mov	r4, r1
 800a36e:	d507      	bpl.n	800a380 <__smakebuf_r+0x1c>
 800a370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	6123      	str	r3, [r4, #16]
 800a378:	2301      	movs	r3, #1
 800a37a:	6163      	str	r3, [r4, #20]
 800a37c:	b003      	add	sp, #12
 800a37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a380:	ab01      	add	r3, sp, #4
 800a382:	466a      	mov	r2, sp
 800a384:	f7ff ffc8 	bl	800a318 <__swhatbuf_r>
 800a388:	9f00      	ldr	r7, [sp, #0]
 800a38a:	4605      	mov	r5, r0
 800a38c:	4639      	mov	r1, r7
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff f9ce 	bl	8009730 <_malloc_r>
 800a394:	b948      	cbnz	r0, 800a3aa <__smakebuf_r+0x46>
 800a396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39a:	059a      	lsls	r2, r3, #22
 800a39c:	d4ee      	bmi.n	800a37c <__smakebuf_r+0x18>
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	f043 0302 	orr.w	r3, r3, #2
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	e7e2      	b.n	800a370 <__smakebuf_r+0xc>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	6020      	str	r0, [r4, #0]
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3ba:	b15b      	cbz	r3, 800a3d4 <__smakebuf_r+0x70>
 800a3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 f81d 	bl	800a400 <_isatty_r>
 800a3c6:	b128      	cbz	r0, 800a3d4 <__smakebuf_r+0x70>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	431d      	orrs	r5, r3
 800a3d8:	81a5      	strh	r5, [r4, #12]
 800a3da:	e7cf      	b.n	800a37c <__smakebuf_r+0x18>

0800a3dc <_fstat_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d07      	ldr	r5, [pc, #28]	@ (800a3fc <_fstat_r+0x20>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	f7f8 fc03 	bl	8002bf4 <_fstat>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d102      	bne.n	800a3f8 <_fstat_r+0x1c>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b103      	cbz	r3, 800a3f8 <_fstat_r+0x1c>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd38      	pop	{r3, r4, r5, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000a8c 	.word	0x20000a8c

0800a400 <_isatty_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	@ (800a41c <_isatty_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f8 fc02 	bl	8002c14 <_isatty>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_isatty_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_isatty_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20000a8c 	.word	0x20000a8c

0800a420 <_sbrk_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	@ (800a43c <_sbrk_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f8 fc0a 	bl	8002c44 <_sbrk>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_sbrk_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_sbrk_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20000a8c 	.word	0x20000a8c

0800a440 <__assert_func>:
 800a440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a442:	4614      	mov	r4, r2
 800a444:	461a      	mov	r2, r3
 800a446:	4b09      	ldr	r3, [pc, #36]	@ (800a46c <__assert_func+0x2c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4605      	mov	r5, r0
 800a44c:	68d8      	ldr	r0, [r3, #12]
 800a44e:	b14c      	cbz	r4, 800a464 <__assert_func+0x24>
 800a450:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <__assert_func+0x30>)
 800a452:	9100      	str	r1, [sp, #0]
 800a454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a458:	4906      	ldr	r1, [pc, #24]	@ (800a474 <__assert_func+0x34>)
 800a45a:	462b      	mov	r3, r5
 800a45c:	f000 f842 	bl	800a4e4 <fiprintf>
 800a460:	f000 f852 	bl	800a508 <abort>
 800a464:	4b04      	ldr	r3, [pc, #16]	@ (800a478 <__assert_func+0x38>)
 800a466:	461c      	mov	r4, r3
 800a468:	e7f3      	b.n	800a452 <__assert_func+0x12>
 800a46a:	bf00      	nop
 800a46c:	20000030 	.word	0x20000030
 800a470:	0800b2f9 	.word	0x0800b2f9
 800a474:	0800b306 	.word	0x0800b306
 800a478:	0800b334 	.word	0x0800b334

0800a47c <_calloc_r>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	fba1 5402 	umull	r5, r4, r1, r2
 800a482:	b934      	cbnz	r4, 800a492 <_calloc_r+0x16>
 800a484:	4629      	mov	r1, r5
 800a486:	f7ff f953 	bl	8009730 <_malloc_r>
 800a48a:	4606      	mov	r6, r0
 800a48c:	b928      	cbnz	r0, 800a49a <_calloc_r+0x1e>
 800a48e:	4630      	mov	r0, r6
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	220c      	movs	r2, #12
 800a494:	6002      	str	r2, [r0, #0]
 800a496:	2600      	movs	r6, #0
 800a498:	e7f9      	b.n	800a48e <_calloc_r+0x12>
 800a49a:	462a      	mov	r2, r5
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7fe f9eb 	bl	8008878 <memset>
 800a4a2:	e7f4      	b.n	800a48e <_calloc_r+0x12>

0800a4a4 <__ascii_mbtowc>:
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	b901      	cbnz	r1, 800a4aa <__ascii_mbtowc+0x6>
 800a4a8:	a901      	add	r1, sp, #4
 800a4aa:	b142      	cbz	r2, 800a4be <__ascii_mbtowc+0x1a>
 800a4ac:	b14b      	cbz	r3, 800a4c2 <__ascii_mbtowc+0x1e>
 800a4ae:	7813      	ldrb	r3, [r2, #0]
 800a4b0:	600b      	str	r3, [r1, #0]
 800a4b2:	7812      	ldrb	r2, [r2, #0]
 800a4b4:	1e10      	subs	r0, r2, #0
 800a4b6:	bf18      	it	ne
 800a4b8:	2001      	movne	r0, #1
 800a4ba:	b002      	add	sp, #8
 800a4bc:	4770      	bx	lr
 800a4be:	4610      	mov	r0, r2
 800a4c0:	e7fb      	b.n	800a4ba <__ascii_mbtowc+0x16>
 800a4c2:	f06f 0001 	mvn.w	r0, #1
 800a4c6:	e7f8      	b.n	800a4ba <__ascii_mbtowc+0x16>

0800a4c8 <__ascii_wctomb>:
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	b141      	cbz	r1, 800a4e0 <__ascii_wctomb+0x18>
 800a4ce:	2aff      	cmp	r2, #255	@ 0xff
 800a4d0:	d904      	bls.n	800a4dc <__ascii_wctomb+0x14>
 800a4d2:	228a      	movs	r2, #138	@ 0x8a
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4da:	4770      	bx	lr
 800a4dc:	700a      	strb	r2, [r1, #0]
 800a4de:	2001      	movs	r0, #1
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <fiprintf>:
 800a4e4:	b40e      	push	{r1, r2, r3}
 800a4e6:	b503      	push	{r0, r1, lr}
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	4805      	ldr	r0, [pc, #20]	@ (800a504 <fiprintf+0x20>)
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f7ff fd4b 	bl	8009f90 <_vfiprintf_r>
 800a4fa:	b002      	add	sp, #8
 800a4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a500:	b003      	add	sp, #12
 800a502:	4770      	bx	lr
 800a504:	20000030 	.word	0x20000030

0800a508 <abort>:
 800a508:	b508      	push	{r3, lr}
 800a50a:	2006      	movs	r0, #6
 800a50c:	f000 f82c 	bl	800a568 <raise>
 800a510:	2001      	movs	r0, #1
 800a512:	f7f8 fb1f 	bl	8002b54 <_exit>

0800a516 <_raise_r>:
 800a516:	291f      	cmp	r1, #31
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4605      	mov	r5, r0
 800a51c:	460c      	mov	r4, r1
 800a51e:	d904      	bls.n	800a52a <_raise_r+0x14>
 800a520:	2316      	movs	r3, #22
 800a522:	6003      	str	r3, [r0, #0]
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a52c:	b112      	cbz	r2, 800a534 <_raise_r+0x1e>
 800a52e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a532:	b94b      	cbnz	r3, 800a548 <_raise_r+0x32>
 800a534:	4628      	mov	r0, r5
 800a536:	f000 f831 	bl	800a59c <_getpid_r>
 800a53a:	4622      	mov	r2, r4
 800a53c:	4601      	mov	r1, r0
 800a53e:	4628      	mov	r0, r5
 800a540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a544:	f000 b818 	b.w	800a578 <_kill_r>
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d00a      	beq.n	800a562 <_raise_r+0x4c>
 800a54c:	1c59      	adds	r1, r3, #1
 800a54e:	d103      	bne.n	800a558 <_raise_r+0x42>
 800a550:	2316      	movs	r3, #22
 800a552:	6003      	str	r3, [r0, #0]
 800a554:	2001      	movs	r0, #1
 800a556:	e7e7      	b.n	800a528 <_raise_r+0x12>
 800a558:	2100      	movs	r1, #0
 800a55a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a55e:	4620      	mov	r0, r4
 800a560:	4798      	blx	r3
 800a562:	2000      	movs	r0, #0
 800a564:	e7e0      	b.n	800a528 <_raise_r+0x12>
	...

0800a568 <raise>:
 800a568:	4b02      	ldr	r3, [pc, #8]	@ (800a574 <raise+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f7ff bfd2 	b.w	800a516 <_raise_r>
 800a572:	bf00      	nop
 800a574:	20000030 	.word	0x20000030

0800a578 <_kill_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d07      	ldr	r5, [pc, #28]	@ (800a598 <_kill_r+0x20>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	4611      	mov	r1, r2
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f7f8 fad5 	bl	8002b34 <_kill>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d102      	bne.n	800a594 <_kill_r+0x1c>
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	b103      	cbz	r3, 800a594 <_kill_r+0x1c>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	20000a8c 	.word	0x20000a8c

0800a59c <_getpid_r>:
 800a59c:	f7f8 bac2 	b.w	8002b24 <_getpid>

0800a5a0 <atan2f>:
 800a5a0:	f000 b800 	b.w	800a5a4 <__ieee754_atan2f>

0800a5a4 <__ieee754_atan2f>:
 800a5a4:	ee10 2a90 	vmov	r2, s1
 800a5a8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a5ac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	eef0 7a40 	vmov.f32	s15, s0
 800a5b6:	d806      	bhi.n	800a5c6 <__ieee754_atan2f+0x22>
 800a5b8:	ee10 0a10 	vmov	r0, s0
 800a5bc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a5c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a5c4:	d904      	bls.n	800a5d0 <__ieee754_atan2f+0x2c>
 800a5c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ce:	bd10      	pop	{r4, pc}
 800a5d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a5d4:	d103      	bne.n	800a5de <__ieee754_atan2f+0x3a>
 800a5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5da:	f000 b883 	b.w	800a6e4 <atanf>
 800a5de:	1794      	asrs	r4, r2, #30
 800a5e0:	f004 0402 	and.w	r4, r4, #2
 800a5e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a5e8:	b943      	cbnz	r3, 800a5fc <__ieee754_atan2f+0x58>
 800a5ea:	2c02      	cmp	r4, #2
 800a5ec:	d05e      	beq.n	800a6ac <__ieee754_atan2f+0x108>
 800a5ee:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a6c0 <__ieee754_atan2f+0x11c>
 800a5f2:	2c03      	cmp	r4, #3
 800a5f4:	bf08      	it	eq
 800a5f6:	eef0 7a47 	vmoveq.f32	s15, s14
 800a5fa:	e7e6      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a5fc:	b941      	cbnz	r1, 800a610 <__ieee754_atan2f+0x6c>
 800a5fe:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a6c4 <__ieee754_atan2f+0x120>
 800a602:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a6c8 <__ieee754_atan2f+0x124>
 800a606:	2800      	cmp	r0, #0
 800a608:	bfa8      	it	ge
 800a60a:	eef0 7a47 	vmovge.f32	s15, s14
 800a60e:	e7dc      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a610:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a614:	d110      	bne.n	800a638 <__ieee754_atan2f+0x94>
 800a616:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a61a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a61e:	d107      	bne.n	800a630 <__ieee754_atan2f+0x8c>
 800a620:	2c02      	cmp	r4, #2
 800a622:	d846      	bhi.n	800a6b2 <__ieee754_atan2f+0x10e>
 800a624:	4b29      	ldr	r3, [pc, #164]	@ (800a6cc <__ieee754_atan2f+0x128>)
 800a626:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a62a:	edd3 7a00 	vldr	s15, [r3]
 800a62e:	e7cc      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a630:	2c02      	cmp	r4, #2
 800a632:	d841      	bhi.n	800a6b8 <__ieee754_atan2f+0x114>
 800a634:	4b26      	ldr	r3, [pc, #152]	@ (800a6d0 <__ieee754_atan2f+0x12c>)
 800a636:	e7f6      	b.n	800a626 <__ieee754_atan2f+0x82>
 800a638:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a63c:	d0df      	beq.n	800a5fe <__ieee754_atan2f+0x5a>
 800a63e:	1a5b      	subs	r3, r3, r1
 800a640:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a644:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a648:	da1a      	bge.n	800a680 <__ieee754_atan2f+0xdc>
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	da01      	bge.n	800a652 <__ieee754_atan2f+0xae>
 800a64e:	313c      	adds	r1, #60	@ 0x3c
 800a650:	db19      	blt.n	800a686 <__ieee754_atan2f+0xe2>
 800a652:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a656:	f000 f919 	bl	800a88c <fabsf>
 800a65a:	f000 f843 	bl	800a6e4 <atanf>
 800a65e:	eef0 7a40 	vmov.f32	s15, s0
 800a662:	2c01      	cmp	r4, #1
 800a664:	d012      	beq.n	800a68c <__ieee754_atan2f+0xe8>
 800a666:	2c02      	cmp	r4, #2
 800a668:	d017      	beq.n	800a69a <__ieee754_atan2f+0xf6>
 800a66a:	2c00      	cmp	r4, #0
 800a66c:	d0ad      	beq.n	800a5ca <__ieee754_atan2f+0x26>
 800a66e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a6d4 <__ieee754_atan2f+0x130>
 800a672:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a676:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a6d8 <__ieee754_atan2f+0x134>
 800a67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a67e:	e7a4      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a680:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800a6c8 <__ieee754_atan2f+0x124>
 800a684:	e7ed      	b.n	800a662 <__ieee754_atan2f+0xbe>
 800a686:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a6dc <__ieee754_atan2f+0x138>
 800a68a:	e7ea      	b.n	800a662 <__ieee754_atan2f+0xbe>
 800a68c:	ee17 3a90 	vmov	r3, s15
 800a690:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a694:	ee07 3a90 	vmov	s15, r3
 800a698:	e797      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a69a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a6d4 <__ieee754_atan2f+0x130>
 800a69e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a6d8 <__ieee754_atan2f+0x134>
 800a6a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6aa:	e78e      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a6ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a6d8 <__ieee754_atan2f+0x134>
 800a6b0:	e78b      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a6b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a6e0 <__ieee754_atan2f+0x13c>
 800a6b6:	e788      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a6b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a6dc <__ieee754_atan2f+0x138>
 800a6bc:	e785      	b.n	800a5ca <__ieee754_atan2f+0x26>
 800a6be:	bf00      	nop
 800a6c0:	c0490fdb 	.word	0xc0490fdb
 800a6c4:	bfc90fdb 	.word	0xbfc90fdb
 800a6c8:	3fc90fdb 	.word	0x3fc90fdb
 800a6cc:	0800b548 	.word	0x0800b548
 800a6d0:	0800b53c 	.word	0x0800b53c
 800a6d4:	33bbbd2e 	.word	0x33bbbd2e
 800a6d8:	40490fdb 	.word	0x40490fdb
 800a6dc:	00000000 	.word	0x00000000
 800a6e0:	3f490fdb 	.word	0x3f490fdb

0800a6e4 <atanf>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	ee10 5a10 	vmov	r5, s0
 800a6ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a6ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a6f2:	eef0 7a40 	vmov.f32	s15, s0
 800a6f6:	d310      	bcc.n	800a71a <atanf+0x36>
 800a6f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a6fc:	d904      	bls.n	800a708 <atanf+0x24>
 800a6fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a702:	eeb0 0a67 	vmov.f32	s0, s15
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a840 <atanf+0x15c>
 800a70c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a844 <atanf+0x160>
 800a710:	2d00      	cmp	r5, #0
 800a712:	bfc8      	it	gt
 800a714:	eef0 7a47 	vmovgt.f32	s15, s14
 800a718:	e7f3      	b.n	800a702 <atanf+0x1e>
 800a71a:	4b4b      	ldr	r3, [pc, #300]	@ (800a848 <atanf+0x164>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d810      	bhi.n	800a742 <atanf+0x5e>
 800a720:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a724:	d20a      	bcs.n	800a73c <atanf+0x58>
 800a726:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a84c <atanf+0x168>
 800a72a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a732:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73a:	dce2      	bgt.n	800a702 <atanf+0x1e>
 800a73c:	f04f 33ff 	mov.w	r3, #4294967295
 800a740:	e013      	b.n	800a76a <atanf+0x86>
 800a742:	f000 f8a3 	bl	800a88c <fabsf>
 800a746:	4b42      	ldr	r3, [pc, #264]	@ (800a850 <atanf+0x16c>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	d84f      	bhi.n	800a7ec <atanf+0x108>
 800a74c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a750:	429c      	cmp	r4, r3
 800a752:	d841      	bhi.n	800a7d8 <atanf+0xf4>
 800a754:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a758:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a75c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a760:	2300      	movs	r3, #0
 800a762:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a766:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a770:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a854 <atanf+0x170>
 800a774:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a858 <atanf+0x174>
 800a778:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a85c <atanf+0x178>
 800a77c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a780:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a784:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a860 <atanf+0x17c>
 800a788:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a78c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a864 <atanf+0x180>
 800a790:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a794:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a868 <atanf+0x184>
 800a798:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a79c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a86c <atanf+0x188>
 800a7a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a7a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a870 <atanf+0x18c>
 800a7a8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a7ac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a874 <atanf+0x190>
 800a7b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a7b4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a878 <atanf+0x194>
 800a7b8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a7bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a87c <atanf+0x198>
 800a7c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a7c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a7c8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a7cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7d0:	d121      	bne.n	800a816 <atanf+0x132>
 800a7d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7d6:	e794      	b.n	800a702 <atanf+0x1e>
 800a7d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a7dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a7e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a7ea:	e7be      	b.n	800a76a <atanf+0x86>
 800a7ec:	4b24      	ldr	r3, [pc, #144]	@ (800a880 <atanf+0x19c>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d80b      	bhi.n	800a80a <atanf+0x126>
 800a7f2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a7f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7fa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a7fe:	2302      	movs	r3, #2
 800a800:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a808:	e7af      	b.n	800a76a <atanf+0x86>
 800a80a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a80e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a812:	2303      	movs	r3, #3
 800a814:	e7a9      	b.n	800a76a <atanf+0x86>
 800a816:	4a1b      	ldr	r2, [pc, #108]	@ (800a884 <atanf+0x1a0>)
 800a818:	491b      	ldr	r1, [pc, #108]	@ (800a888 <atanf+0x1a4>)
 800a81a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a81e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a822:	edd3 6a00 	vldr	s13, [r3]
 800a826:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a830:	edd2 7a00 	vldr	s15, [r2]
 800a834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a838:	bfb8      	it	lt
 800a83a:	eef1 7a67 	vneglt.f32	s15, s15
 800a83e:	e760      	b.n	800a702 <atanf+0x1e>
 800a840:	bfc90fdb 	.word	0xbfc90fdb
 800a844:	3fc90fdb 	.word	0x3fc90fdb
 800a848:	3edfffff 	.word	0x3edfffff
 800a84c:	7149f2ca 	.word	0x7149f2ca
 800a850:	3f97ffff 	.word	0x3f97ffff
 800a854:	3c8569d7 	.word	0x3c8569d7
 800a858:	3d4bda59 	.word	0x3d4bda59
 800a85c:	bd6ef16b 	.word	0xbd6ef16b
 800a860:	3d886b35 	.word	0x3d886b35
 800a864:	3dba2e6e 	.word	0x3dba2e6e
 800a868:	3e124925 	.word	0x3e124925
 800a86c:	3eaaaaab 	.word	0x3eaaaaab
 800a870:	bd15a221 	.word	0xbd15a221
 800a874:	bd9d8795 	.word	0xbd9d8795
 800a878:	bde38e38 	.word	0xbde38e38
 800a87c:	be4ccccd 	.word	0xbe4ccccd
 800a880:	401bffff 	.word	0x401bffff
 800a884:	0800b564 	.word	0x0800b564
 800a888:	0800b554 	.word	0x0800b554

0800a88c <fabsf>:
 800a88c:	ee10 3a10 	vmov	r3, s0
 800a890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a894:	ee00 3a10 	vmov	s0, r3
 800a898:	4770      	bx	lr
	...

0800a89c <_init>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr

0800a8a8 <_fini>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr
