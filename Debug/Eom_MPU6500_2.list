
Eom_MPU6500_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd4  0800b140  0800b140  0000c140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be14  0800be14  0000d1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be1c  0800be1c  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be1c  0800be1c  0000ce1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800be24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200001f4  0800c018  0000d1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800c018  0000daa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014829  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c2  00000000  00000000  00021a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00024c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  00025db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d4c  00000000  00000000  00026b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189cd  00000000  00000000  000408d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093790  00000000  00000000  0005929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eca2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  000eca74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f27a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b124 	.word	0x0800b124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800b124 	.word	0x0800b124

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <mpu6500_read_accel_raw>:
  * @param  accel_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  accel_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  accel_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_accel_raw(int16_t* accel_x, int16_t* accel_y, int16_t* accel_z) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    // 加速度计数据寄存器地址是连续的: ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ..., ACCEL_ZOUT_L
    // 可以通过一次I2C读取6个字节
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2306      	movs	r3, #6
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	223b      	movs	r2, #59	@ 0x3b
 8000fa4:	21d0      	movs	r1, #208	@ 0xd0
 8000fa6:	4817      	ldr	r0, [pc, #92]	@ (8001004 <mpu6500_read_accel_raw+0x80>)
 8000fa8:	f003 fa5a 	bl	8004460 <HAL_I2C_Mem_Read>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11f      	bne.n	8000ff2 <mpu6500_read_accel_raw+0x6e>
        *accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000fb2:	7c3b      	ldrb	r3, [r7, #16]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7c7b      	ldrb	r3, [r7, #17]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	801a      	strh	r2, [r3, #0]
        *accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000fc6:	7cbb      	ldrb	r3, [r7, #18]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	801a      	strh	r2, [r3, #0]
        *accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000fda:	7d3b      	ldrb	r3, [r7, #20]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
        return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e004      	b.n	8000ffc <mpu6500_read_accel_raw+0x78>
    }
    printf("MPU6500 Read Accel Raw Error\r\n");
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <mpu6500_read_accel_raw+0x84>)
 8000ff4:	f007 fd72 	bl	8008adc <puts>
    return -1;
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e8 	.word	0x200002e8
 8001008:	0800b164 	.word	0x0800b164

0800100c <mpu6500_read_gyro_raw>:
  * @param  gyro_x: 指向 int16_t 变量的指针，用于存储 X 轴数据
  * @param  gyro_y: 指向 int16_t 变量的指针，用于存储 Y 轴数据
  * @param  gyro_z: 指向 int16_t 变量的指针，用于存储 Z 轴数据
  * @retval 0: 成功, -1: 失败
  */
int8_t mpu6500_read_gyro_raw(int16_t* gyro_x, int16_t* gyro_y, int16_t* gyro_z) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
     // 陀螺仪数据寄存器地址是连续的: GYRO_XOUT_H, ..., GYRO_ZOUT_L
    uint8_t buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, GYRO_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY) == HAL_OK) {
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2306      	movs	r3, #6
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2243      	movs	r2, #67	@ 0x43
 800102c:	21d0      	movs	r1, #208	@ 0xd0
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <mpu6500_read_gyro_raw+0x80>)
 8001030:	f003 fa16 	bl	8004460 <HAL_I2C_Mem_Read>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11f      	bne.n	800107a <mpu6500_read_gyro_raw+0x6e>
        *gyro_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 800103a:	7c3b      	ldrb	r3, [r7, #16]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7c7b      	ldrb	r3, [r7, #17]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	801a      	strh	r2, [r3, #0]
        *gyro_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 800104e:	7cbb      	ldrb	r3, [r7, #18]
 8001050:	b21b      	sxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	801a      	strh	r2, [r3, #0]
        *gyro_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001062:	7d3b      	ldrb	r3, [r7, #20]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	801a      	strh	r2, [r3, #0]
        return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <mpu6500_read_gyro_raw+0x78>
    }
    printf("MPU6500 Read Gyro Raw Error\r\n");
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <mpu6500_read_gyro_raw+0x84>)
 800107c:	f007 fd2e 	bl	8008adc <puts>
    return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002e8 	.word	0x200002e8
 8001090:	0800b184 	.word	0x0800b184

08001094 <mpu6500_write_byte>:
  * @param  reg_addr: 目标寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void mpu6500_write_byte(uint8_t reg_addr, uint8_t data)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	21d0      	movs	r1, #208	@ 0xd0
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <mpu6500_write_byte+0x4c>)
 80010bc:	f003 f8d6 	bl	800426c <HAL_I2C_Mem_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <mpu6500_write_byte+0x42>
    {
        // 错误处理，例如打印错误信息或进入 Error_Handler()
        printf("MPU6500 Write Error: reg 0x%X, status %d\r\n", reg_addr, status);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <mpu6500_write_byte+0x50>)
 80010d2:	f007 fc93 	bl	80089fc <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002e8 	.word	0x200002e8
 80010e4:	0800b1a4 	.word	0x0800b1a4

080010e8 <mpu6500_read_byte>:
  * @brief  从 MPU6500 指定寄存器读取一个字节数据
  * @param  reg_addr: 目标寄存器地址
  * @retval 读取到的数据
  */
uint8_t mpu6500_read_byte(uint8_t reg_addr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c2, MPU6500_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &read_data, 1, HAL_MAX_DELAY);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	21d0      	movs	r1, #208	@ 0xd0
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <mpu6500_read_byte+0x4c>)
 8001110:	f003 f9a6 	bl	8004460 <HAL_I2C_Mem_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <mpu6500_read_byte+0x42>
    {
        // 错误处理
        printf("MPU6500 Read Error: reg 0x%X, status %d\r\n", reg_addr, status);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <mpu6500_read_byte+0x50>)
 8001126:	f007 fc69 	bl	80089fc <iprintf>
        // Error_Handler(); // 如果需要，可以取消注释
    }
    return read_data;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002e8 	.word	0x200002e8
 8001138:	0800b1d0 	.word	0x0800b1d0

0800113c <mpu6500_init>:
  * @brief  初始化 MPU6500
  * @param  None
  * @retval 0: 成功, -1: 失败
  */
int  mpu6500_init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
    uint8_t who_am_i_val = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    HAL_Delay(100); // 等待 MPU6500 上电稳定
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f002 fb9a 	bl	8003880 <HAL_Delay>

    // 1. 检查设备是否在线
    // 尝试3次，超时100ms，使用 HAL_I2C_IsDeviceReady 更好
    status = HAL_I2C_IsDeviceReady(&hi2c2, MPU6500_I2C_ADDR, 3, 100);
 800114c:	2364      	movs	r3, #100	@ 0x64
 800114e:	2203      	movs	r2, #3
 8001150:	21d0      	movs	r1, #208	@ 0xd0
 8001152:	482d      	ldr	r0, [pc, #180]	@ (8001208 <mpu6500_init+0xcc>)
 8001154:	f003 fbb6 	bl	80048c4 <HAL_I2C_IsDeviceReady>
 8001158:	4603      	mov	r3, r0
 800115a:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <mpu6500_init+0x36>
    {
        printf("MPU6500 not found on I2C2. Status: %d\r\n", status);
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	4619      	mov	r1, r3
 8001166:	4829      	ldr	r0, [pc, #164]	@ (800120c <mpu6500_init+0xd0>)
 8001168:	f007 fc48 	bl	80089fc <iprintf>
        // Error_Handler(); // 初始化失败通常应该阻止程序继续
        return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e045      	b.n	80011fe <mpu6500_init+0xc2>
    }
    else
    {
        printf("MPU6500 found on I2C2.\r\n");
 8001172:	4827      	ldr	r0, [pc, #156]	@ (8001210 <mpu6500_init+0xd4>)
 8001174:	f007 fcb2 	bl	8008adc <puts>
    }

    // 2. 读取 WHO_AM_I 寄存器进行验证
    who_am_i_val = mpu6500_read_byte(WHO_AM_I_REG);
 8001178:	2075      	movs	r0, #117	@ 0x75
 800117a:	f7ff ffb5 	bl	80010e8 <mpu6500_read_byte>
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    printf("WHO_AM_I register value: 0x%X\r\n", who_am_i_val);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	@ (8001214 <mpu6500_init+0xd8>)
 8001188:	f007 fc38 	bl	80089fc <iprintf>

    // MPU6500 的 WHO_AM_I 默认值是 0x70。根据模块型号也可能是 0x71 (MPU9250/6500), 0x68 (MPU6050), 0x73, 0x7D, 0x98。
    // 请根据你的 MPU6500 模块数据手册确认。
    if (who_am_i_val != 0x70 && who_am_i_val != 0x71 && who_am_i_val != 0x68 && who_am_i_val != 0x73 && who_am_i_val != 0x7D && who_am_i_val != 0x98) {
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b70      	cmp	r3, #112	@ 0x70
 8001190:	d016      	beq.n	80011c0 <mpu6500_init+0x84>
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b71      	cmp	r3, #113	@ 0x71
 8001196:	d013      	beq.n	80011c0 <mpu6500_init+0x84>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b68      	cmp	r3, #104	@ 0x68
 800119c:	d010      	beq.n	80011c0 <mpu6500_init+0x84>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b73      	cmp	r3, #115	@ 0x73
 80011a2:	d00d      	beq.n	80011c0 <mpu6500_init+0x84>
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80011a8:	d00a      	beq.n	80011c0 <mpu6500_init+0x84>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b98      	cmp	r3, #152	@ 0x98
 80011ae:	d007      	beq.n	80011c0 <mpu6500_init+0x84>
        printf("MPU6500 WHO_AM_I check failed. Expected 0x70 or similar, got 0x%X\r\n", who_am_i_val);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4818      	ldr	r0, [pc, #96]	@ (8001218 <mpu6500_init+0xdc>)
 80011b6:	f007 fc21 	bl	80089fc <iprintf>
        // Error_Handler(); // WHO_AM_I 错误通常是接线或设备问题
        return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e01e      	b.n	80011fe <mpu6500_init+0xc2>
    } else {
        printf("MPU6500 WHO_AM_I check passed.\r\n");
 80011c0:	4816      	ldr	r0, [pc, #88]	@ (800121c <mpu6500_init+0xe0>)
 80011c2:	f007 fc8b 	bl	8008adc <puts>
    }

    HAL_Delay(50); // 等待稳定
 80011c6:	2032      	movs	r0, #50	@ 0x32
 80011c8:	f002 fb5a 	bl	8003880 <HAL_Delay>

    // 3. 唤醒 MPU6500 (清除 PWR_MGMT_1 寄存器的 SLEEP 位)
    mpu6500_write_byte(PWR_MGMT_1_REG, 0x00); // 设置 CLKSEL=0 (PLL)
 80011cc:	2100      	movs	r1, #0
 80011ce:	206b      	movs	r0, #107	@ 0x6b
 80011d0:	f7ff ff60 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011d4:	2032      	movs	r0, #50	@ 0x32
 80011d6:	f002 fb53 	bl	8003880 <HAL_Delay>
//    HAL_Delay(50);


    // 5. 配置陀螺仪量程
    //    0x18: ±2000 dps (对应灵敏度 16.4 LSB/dps) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(GYRO_CONFIG_REG, 0x18);
 80011da:	2118      	movs	r1, #24
 80011dc:	201b      	movs	r0, #27
 80011de:	f7ff ff59 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011e2:	2032      	movs	r0, #50	@ 0x32
 80011e4:	f002 fb4c 	bl	8003880 <HAL_Delay>

    // 6. 配置加速度计量程
    //    0x00: ±2g (对应灵敏度 16384 LSB/g) - 与 mpu6500.h 中的定义一致
    mpu6500_write_byte(ACCEL_CONFIG_REG, 0x00);
 80011e8:	2100      	movs	r1, #0
 80011ea:	201c      	movs	r0, #28
 80011ec:	f7ff ff52 	bl	8001094 <mpu6500_write_byte>
    HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f002 fb45 	bl	8003880 <HAL_Delay>

    // 更多配置 (例如中断设置 INT_PIN_CFG, INT_ENABLE 等，如果需要中断)
    // mpu6500_write_byte(0x37, 0x02); // INT_PIN_CFG: INT_ANYRD_2CLEAR, LATCH_INT_EN=0
    // mpu6500_write_byte(0x38, 0x01); // INT_ENABLE: DATA_RDY_EN=1

    printf("MPU6500 configured successfully.\r\n");
 80011f6:	480a      	ldr	r0, [pc, #40]	@ (8001220 <mpu6500_init+0xe4>)
 80011f8:	f007 fc70 	bl	8008adc <puts>
    return 0; // 初始化成功
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002e8 	.word	0x200002e8
 800120c:	0800b1fc 	.word	0x0800b1fc
 8001210:	0800b224 	.word	0x0800b224
 8001214:	0800b23c 	.word	0x0800b23c
 8001218:	0800b25c 	.word	0x0800b25c
 800121c:	0800b2a0 	.word	0x0800b2a0
 8001220:	0800b2c0 	.word	0x0800b2c0

08001224 <hc05_init>:
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <hc05_init+0x2c>)
 800122e:	f007 fd57 	bl	8008ce0 <memset>
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <hc05_init+0x30>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <hc05_init+0x34>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <hc05_init+0x38>)
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <hc05_init+0x3c>)
 8001244:	f005 fedb 	bl	8006ffe <HAL_UART_Receive_IT>
 8001248:	4603      	mov	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000210 	.word	0x20000210
 8001254:	20000292 	.word	0x20000292
 8001258:	20000291 	.word	0x20000291
 800125c:	20000290 	.word	0x20000290
 8001260:	2000090c 	.word	0x2000090c

08001264 <hc05_is_data_received>:
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <hc05_is_data_received+0x14>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000291 	.word	0x20000291

0800127c <hc05_get_received_data>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <hc05_get_received_data+0x84>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <hc05_get_received_data+0x28>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <hc05_get_received_data+0x28>
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <hc05_get_received_data+0x2c>
 80012a4:	2300      	movs	r3, #0
 80012a6:	e026      	b.n	80012f6 <hc05_get_received_data+0x7a>
 80012a8:	2047      	movs	r0, #71	@ 0x47
 80012aa:	f002 fc36 	bl	8003b1a <HAL_NVIC_DisableIRQ>
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <hc05_get_received_data+0x88>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	81fb      	strh	r3, [r7, #14]
 80012b4:	89fa      	ldrh	r2, [r7, #14]
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <hc05_get_received_data+0x46>
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	3b01      	subs	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4910      	ldr	r1, [pc, #64]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f007 fdb6 	bl	8008e3a <memcpy>
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <hc05_get_received_data+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <hc05_get_received_data+0x88>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	2100      	movs	r1, #0
 80012e8:	4807      	ldr	r0, [pc, #28]	@ (8001308 <hc05_get_received_data+0x8c>)
 80012ea:	f007 fcf9 	bl	8008ce0 <memset>
 80012ee:	2047      	movs	r0, #71	@ 0x47
 80012f0:	f002 fc05 	bl	8003afe <HAL_NVIC_EnableIRQ>
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000291 	.word	0x20000291
 8001304:	20000292 	.word	0x20000292
 8001308:	20000210 	.word	0x20000210

0800130c <hc05_transmit_data>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <hc05_transmit_data+0x18>
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <hc05_transmit_data+0x1c>
 8001324:	2301      	movs	r3, #1
 8001326:	e007      	b.n	8001338 <hc05_transmit_data+0x2c>
 8001328:	887a      	ldrh	r2, [r7, #2]
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <hc05_transmit_data+0x34>)
 8001332:	f005 fdd9 	bl	8006ee8 <HAL_UART_Transmit>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000090c 	.word	0x2000090c

08001344 <hc05_uart_rx_callback_handler>:
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d142      	bne.n	80013de <hc05_uart_rx_callback_handler+0x9a>
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12b      	bne.n	80013ba <hc05_uart_rx_callback_handler+0x76>
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	2b7e      	cmp	r3, #126	@ 0x7e
 800136a:	d81f      	bhi.n	80013ac <hc05_uart_rx_callback_handler+0x68>
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	b291      	uxth	r1, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001378:	8011      	strh	r1, [r2, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 8001382:	5499      	strb	r1, [r3, r2]
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d004      	beq.n	8001396 <hc05_uart_rx_callback_handler+0x52>
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b7e      	cmp	r3, #126	@ 0x7e
 8001394:	d911      	bls.n	80013ba <hc05_uart_rx_callback_handler+0x76>
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <hc05_uart_rx_callback_handler+0xac>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e006      	b.n	80013ba <hc05_uart_rx_callback_handler+0x76>
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <hc05_uart_rx_callback_handler+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <hc05_uart_rx_callback_handler+0xa8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <hc05_uart_rx_callback_handler+0x90>
 80013ca:	2201      	movs	r2, #1
 80013cc:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013d0:	f005 fe15 	bl	8006ffe <HAL_UART_Receive_IT>
 80013d4:	2201      	movs	r2, #1
 80013d6:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <hc05_uart_rx_callback_handler+0xb0>)
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <hc05_uart_rx_callback_handler+0xa4>)
 80013da:	f005 fe10 	bl	8006ffe <HAL_UART_Receive_IT>
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000090c 	.word	0x2000090c
 80013ec:	20000291 	.word	0x20000291
 80013f0:	20000292 	.word	0x20000292
 80013f4:	20000290 	.word	0x20000290
 80013f8:	20000210 	.word	0x20000210

080013fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b4e      	ldr	r3, [pc, #312]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a4d      	ldr	r2, [pc, #308]	@ (8001550 <MX_GPIO_Init+0x154>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a46      	ldr	r2, [pc, #280]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a3f      	ldr	r2, [pc, #252]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <MX_GPIO_Init+0x154>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <MX_GPIO_Init+0x154>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <MX_GPIO_Init+0x154>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2120      	movs	r1, #32
 8001486:	4833      	ldr	r0, [pc, #204]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001488:	f002 fd78 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	4831      	ldr	r0, [pc, #196]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001494:	f002 fd72 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gyro_cs_GPIO_Port, gyro_cs_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149e:	482d      	ldr	r0, [pc, #180]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014a0:	f002 fd6c 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80014a4:	2313      	movs	r3, #19
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4827      	ldr	r0, [pc, #156]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014b8:	f002 fbdc 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80014bc:	2320      	movs	r3, #32
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	@ (8001554 <MX_GPIO_Init+0x158>)
 80014d4:	f002 fbce 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	481b      	ldr	r0, [pc, #108]	@ (800155c <MX_GPIO_Init+0x160>)
 80014ee:	f002 fbc1 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4813      	ldr	r0, [pc, #76]	@ (8001558 <MX_GPIO_Init+0x15c>)
 800150c:	f002 fbb2 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0x15c>)
 8001526:	f002 fba5 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : gyro_cs_Pin */
  GPIO_InitStruct.Pin = gyro_cs_Pin;
 800152a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(gyro_cs_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0x158>)
 8001544:	f002 fb96 	bl	8003c74 <HAL_GPIO_Init>

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400

08001560 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f002 fd21 	bl	8003fe4 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 fd08 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000294 	.word	0x20000294
 80015b4:	40005400 	.word	0x40005400
 80015b8:	00061a80 	.word	0x00061a80

080015bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f002 fcf3 	bl	8003fe4 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fcda 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002e8 	.word	0x200002e8
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a3b      	ldr	r2, [pc, #236]	@ (8001724 <HAL_I2C_MspInit+0x10c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12d      	bne.n	8001696 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a39      	ldr	r2, [pc, #228]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <HAL_I2C_MspInit+0x114>)
 8001674:	f002 fafe 	bl	8003c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001694:	e041      	b.n	800171a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_I2C_MspInit+0x118>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13c      	bne.n	800171a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4814      	ldr	r0, [pc, #80]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016da:	f002 facb 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016de:	2308      	movs	r3, #8
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80016ee:	2309      	movs	r3, #9
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <HAL_I2C_MspInit+0x114>)
 80016fa:	f002 fabb 	bl	8003c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_I2C_MspInit+0x110>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400
 8001730:	40005800 	.word	0x40005800

08001734 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <__io_putchar+0x20>)
 8001746:	f005 fbcf 	bl	8006ee8 <HAL_UART_Transmit>
  return ch;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200008c4 	.word	0x200008c4

08001758 <calibrate_mpu6500_bias>:
  * @brief  Calibrates MPU6500 sensor bias.
  *         Requires the robot to be held stationary and balanced during execution.
  * @param  num_samples: Number of samples to collect for averaging.
  * @retval None
  */
void calibrate_mpu6500_bias(uint16_t num_samples) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
    printf("\r\n--- MPU6500 Calibration Start ---\r\n");
 8001762:	4869      	ldr	r0, [pc, #420]	@ (8001908 <calibrate_mpu6500_bias+0x1b0>)
 8001764:	f007 f9ba 	bl	8008adc <puts>
    printf("Please hold the robot VERTICAL and STATIONARY for %d seconds...\r\n", num_samples / 1000); // Assuming 1ms delay per sample
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4a68      	ldr	r2, [pc, #416]	@ (800190c <calibrate_mpu6500_bias+0x1b4>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	b29b      	uxth	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	4866      	ldr	r0, [pc, #408]	@ (8001910 <calibrate_mpu6500_bias+0x1b8>)
 8001778:	f007 f940 	bl	80089fc <iprintf>

    // Give user time to position the robot
    HAL_Delay(3000); // 3 seconds initial delay
 800177c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001780:	f002 f87e 	bl	8003880 <HAL_Delay>

    // Accumulate sums
    int32_t gyro_x_sum = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyro_y_sum = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t gyro_z_sum = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    float accel_pitch_angle_sum = 0.0f;
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    int16_t accel_x_raw, accel_y_raw, accel_z_raw;
    int16_t gyro_x_raw, gyro_y_raw, gyro_z_raw;
    float current_accel_pitch_angle;

    // Collect samples
    for (uint16_t i = 0; i < num_samples; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	83fb      	strh	r3, [r7, #30]
 800179a:	e063      	b.n	8001864 <calibrate_mpu6500_bias+0x10c>
        // Read raw data
        if (mpu6500_read_accel_raw(&accel_x_raw, &accel_y_raw, &accel_z_raw) != 0) {
 800179c:	f107 0212 	add.w	r2, r7, #18
 80017a0:	f107 0114 	add.w	r1, r7, #20
 80017a4:	f107 0316 	add.w	r3, r7, #22
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fbeb 	bl	8000f84 <mpu6500_read_accel_raw>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <calibrate_mpu6500_bias+0x64>
            printf("Calibration Error: Failed to read accel raw.\r\n");
 80017b4:	4857      	ldr	r0, [pc, #348]	@ (8001914 <calibrate_mpu6500_bias+0x1bc>)
 80017b6:	f007 f991 	bl	8008adc <puts>
            // Optionally skip this sample or break calibration
            continue; // Skip this sample
 80017ba:	e050      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }
        if (mpu6500_read_gyro_raw(&gyro_x_raw, &gyro_y_raw, &gyro_z_raw) != 0) {
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	f107 010e 	add.w	r1, r7, #14
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc1f 	bl	800100c <mpu6500_read_gyro_raw>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <calibrate_mpu6500_bias+0x84>
            printf("Calibration Error: Failed to read gyro raw.\r\n");
 80017d4:	4850      	ldr	r0, [pc, #320]	@ (8001918 <calibrate_mpu6500_bias+0x1c0>)
 80017d6:	f007 f981 	bl	8008adc <puts>
            // Optionally skip this sample or break calibration
             continue; // Skip this sample
 80017da:	e040      	b.n	800185e <calibrate_mpu6500_bias+0x106>
        }

        // Accumulate gyro raw sums
        gyro_x_sum += gyro_x_raw;
 80017dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e0:	461a      	mov	r2, r3
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	4413      	add	r3, r2
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        gyro_y_sum += gyro_y_raw;
 80017e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ec:	461a      	mov	r2, r3
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	4413      	add	r3, r2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyro_z_sum += gyro_z_raw;
 80017f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017f8:	461a      	mov	r2, r3
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	4413      	add	r3, r2
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

        // Calculate accelerometer pitch angle for this sample (based on Accel X and Z)
        // atan2f handles the case where the first parameter is 0.
        // If accel_z_raw is 0 (e.g., MPU horizontal), atan2f(accel_x_raw, 0) would give +/-90 or 0/180 depending on accel_x_raw sign.
        // In vertical calibration, accel_z_raw is expected to be large (~16384), so 0 is very unlikely.
        current_accel_pitch_angle = atan2f((float)accel_x_raw, (float)accel_z_raw) * (180.0f / M_PI);
 8001800:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001810:	ee07 3a10 	vmov	s14, r3
 8001814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001818:	eef0 0a47 	vmov.f32	s1, s14
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f009 fafa 	bl	800ae18 <atan2f>
 8001824:	ee10 3a10 	vmov	r3, s0
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe95 	bl	8000558 <__aeabi_f2d>
 800182e:	a334      	add	r3, pc, #208	@ (adr r3, 8001900 <calibrate_mpu6500_bias+0x1a8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fee8 	bl	8000608 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9ba 	bl	8000bb8 <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
        accel_pitch_angle_sum += current_accel_pitch_angle;
 8001848:	ed97 7a08 	vldr	s14, [r7, #32]
 800184c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a08 	vstr	s15, [r7, #32]

        // Add a small delay to ensure distinct readings
        HAL_Delay(1); // 1ms delay per sample
 8001858:	2001      	movs	r0, #1
 800185a:	f002 f811 	bl	8003880 <HAL_Delay>
    for (uint16_t i = 0; i < num_samples; i++) {
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	3301      	adds	r3, #1
 8001862:	83fb      	strh	r3, [r7, #30]
 8001864:	8bfa      	ldrh	r2, [r7, #30]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d397      	bcc.n	800179c <calibrate_mpu6500_bias+0x44>
    }

    // Calculate averages (biases)
    // Ensure num_samples is not zero to avoid division by zero
    if (num_samples > 0) {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d021      	beq.n	80018b6 <calibrate_mpu6500_bias+0x15e>
         g_gyro_x_bias_raw = (int16_t)(gyro_x_sum / num_samples);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001876:	fb92 f3f3 	sdiv	r3, r2, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 800187e:	801a      	strh	r2, [r3, #0]
         g_gyro_y_bias_raw = (int16_t)(gyro_y_sum / num_samples);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001884:	fb92 f3f3 	sdiv	r3, r2, r3
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 800188c:	801a      	strh	r2, [r3, #0]
         g_gyro_z_bias_raw = (int16_t)(gyro_z_sum / num_samples);
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	fb92 f3f3 	sdiv	r3, r2, r3
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 800189a:	801a      	strh	r2, [r3, #0]
         g_accel_pitch_bias_deg = accel_pitch_angle_sum / num_samples;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80018aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018b0:	edc3 7a00 	vstr	s15, [r3]
 80018b4:	e002      	b.n	80018bc <calibrate_mpu6500_bias+0x164>
    } else {
         printf("Calibration Warning: num_samples is 0.\r\n");
 80018b6:	481d      	ldr	r0, [pc, #116]	@ (800192c <calibrate_mpu6500_bias+0x1d4>)
 80018b8:	f007 f910 	bl	8008adc <puts>
         // Biases remain 0
    }


    printf("Calibration Complete.\r\n");
 80018bc:	481c      	ldr	r0, [pc, #112]	@ (8001930 <calibrate_mpu6500_bias+0x1d8>)
 80018be:	f007 f90d 	bl	8008adc <puts>
    printf("Gyro Bias Raw: X=%d, Y=%d, Z=%d\r\n", g_gyro_x_bias_raw, g_gyro_y_bias_raw, g_gyro_z_bias_raw);
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <calibrate_mpu6500_bias+0x1c4>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <calibrate_mpu6500_bias+0x1c8>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <calibrate_mpu6500_bias+0x1cc>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <calibrate_mpu6500_bias+0x1dc>)
 80018da:	f007 f88f 	bl	80089fc <iprintf>
    printf("Accel Pitch Bias (deg): %.2f\r\n", g_accel_pitch_bias_deg);
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <calibrate_mpu6500_bias+0x1d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4812      	ldr	r0, [pc, #72]	@ (8001938 <calibrate_mpu6500_bias+0x1e0>)
 80018ee:	f007 f885 	bl	80089fc <iprintf>
    printf("--- MPU6500 Calibration End ---\r\n");
 80018f2:	4812      	ldr	r0, [pc, #72]	@ (800193c <calibrate_mpu6500_bias+0x1e4>)
 80018f4:	f007 f8f2 	bl	8008adc <puts>
}
 80018f8:	bf00      	nop
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	1a63c1f8 	.word	0x1a63c1f8
 8001904:	404ca5dc 	.word	0x404ca5dc
 8001908:	0800b2e4 	.word	0x0800b2e4
 800190c:	10624dd3 	.word	0x10624dd3
 8001910:	0800b30c 	.word	0x0800b30c
 8001914:	0800b350 	.word	0x0800b350
 8001918:	0800b380 	.word	0x0800b380
 800191c:	20000752 	.word	0x20000752
 8001920:	20000754 	.word	0x20000754
 8001924:	20000756 	.word	0x20000756
 8001928:	20000758 	.word	0x20000758
 800192c:	0800b3b0 	.word	0x0800b3b0
 8001930:	0800b3d8 	.word	0x0800b3d8
 8001934:	0800b3f0 	.word	0x0800b3f0
 8001938:	0800b414 	.word	0x0800b414
 800193c:	0800b434 	.word	0x0800b434

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001944:	b0e8      	sub	sp, #416	@ 0x1a0
 8001946:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  char oled_buffer[30]; // 用于在OLED上显示字符串，大小根据需要调整
  float gyro_z_value = 0.0f;
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f001 ff24 	bl	800379c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 faba 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f7ff fd50 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195c:	f001 fe1a 	bl	8003594 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001960:	f7ff fdfe 	bl	8001560 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001964:	f001 fb64 	bl	8003030 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001968:	f7ff fe28 	bl	80015bc <MX_I2C2_Init>
  MX_TIM5_Init();
 800196c:	f001 fcce 	bl	800330c <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001970:	f001 fe3a 	bl	80035e8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001974:	f001 fc22 	bl	80031bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001978:	f001 fc74 	bl	8003264 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // 启动编码器模式
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // 启动电机1编码器
 800197c:	213c      	movs	r1, #60	@ 0x3c
 800197e:	48b5      	ldr	r0, [pc, #724]	@ (8001c54 <main+0x314>)
 8001980:	f004 fb7c 	bl	800607c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // 启动电机2编码器
 8001984:	213c      	movs	r1, #60	@ 0x3c
 8001986:	48b4      	ldr	r0, [pc, #720]	@ (8001c58 <main+0x318>)
 8001988:	f004 fb78 	bl	800607c <HAL_TIM_Encoder_Start>
  int hc05=0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    if (hc05_init() != HAL_OK) {
 8001992:	f7ff fc47 	bl	8001224 <hc05_init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <main+0x6e>
        printf("BT failed");
 800199c:	48af      	ldr	r0, [pc, #700]	@ (8001c5c <main+0x31c>)
 800199e:	f007 f82d 	bl	80089fc <iprintf>
        hc05=-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
        // 初始化失败处理
        Error_Handler();
 80019aa:	f000 fb07 	bl	8001fbc <Error_Handler>
    }
    // ... hc05_init() OK ...

    const char* test_msg = "Hello from STM32!\r\n";
 80019ae:	4bac      	ldr	r3, [pc, #688]	@ (8001c60 <main+0x320>)
 80019b0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    if (hc05_transmit_data((uint8_t*)test_msg, strlen(test_msg)) == HAL_OK) {
 80019b4:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80019b8:	f7fe fc62 	bl	8000280 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80019c6:	f7ff fca1 	bl	800130c <hc05_transmit_data>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <main+0x98>
        printf("Test message sent to Bluetooth.\r\n");
 80019d0:	48a4      	ldr	r0, [pc, #656]	@ (8001c64 <main+0x324>)
 80019d2:	f007 f883 	bl	8008adc <puts>
 80019d6:	e002      	b.n	80019de <main+0x9e>

    } else {
        printf("Failed to send test message to Bluetooth.\r\n");
 80019d8:	48a3      	ldr	r0, [pc, #652]	@ (8001c68 <main+0x328>)
 80019da:	f007 f87f 	bl	8008adc <puts>
    }
//  // 初始化OLED (使用 hi2c1)
  if (ssd1306_Init(&hi2c1) != 0 ){
 80019de:	48a3      	ldr	r0, [pc, #652]	@ (8001c6c <main+0x32c>)
 80019e0:	f000 fc24 	bl	800222c <ssd1306_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <main+0xb4>
      printf("OLED SSD1306 initialization failed!\r\n");
 80019ea:	48a1      	ldr	r0, [pc, #644]	@ (8001c70 <main+0x330>)
 80019ec:	f007 f876 	bl	8008adc <puts>
      Error_Handler(); // 初始化失败
 80019f0:	f000 fae4 	bl	8001fbc <Error_Handler>
  }
  printf("OLED SSD1306 initialized successfully.\r\n");
 80019f4:	489f      	ldr	r0, [pc, #636]	@ (8001c74 <main+0x334>)
 80019f6:	f007 f871 	bl	8008adc <puts>


  // 初始化MPU6500 (使用 hi2c2, mpu6500.c 中应使用 extern I2C_HandleTypeDef hi2c2;)
  if(mpu6500_init()==-1){
 80019fa:	f7ff fb9f 	bl	800113c <mpu6500_init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d114      	bne.n	8001a30 <main+0xf0>
      ssd1306_Fill(Black);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 fd1c 	bl	8002444 <ssd1306_Fill>
      ssd1306_SetCursor(0,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 fdd6 	bl	80025c0 <ssd1306_SetCursor>
      ssd1306_WriteString("MPU Fail", Font_7x10, White);
 8001a14:	4a98      	ldr	r2, [pc, #608]	@ (8001c78 <main+0x338>)
 8001a16:	2301      	movs	r3, #1
 8001a18:	ca06      	ldmia	r2, {r1, r2}
 8001a1a:	4898      	ldr	r0, [pc, #608]	@ (8001c7c <main+0x33c>)
 8001a1c:	f000 fe70 	bl	8002700 <ssd1306_WriteString>
      ssd1306_UpdateScreen(&hi2c1);
 8001a20:	4892      	ldr	r0, [pc, #584]	@ (8001c6c <main+0x32c>)
 8001a22:	f000 fd29 	bl	8002478 <ssd1306_UpdateScreen>
      HAL_Delay(1000);
 8001a26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a2a:	f001 ff29 	bl	8003880 <HAL_Delay>
 8001a2e:	e002      	b.n	8001a36 <main+0xf6>
  } else {
	    printf("MPU6500 initialized.\r\n");
 8001a30:	4893      	ldr	r0, [pc, #588]	@ (8001c80 <main+0x340>)
 8001a32:	f007 f853 	bl	8008adc <puts>
	}// 这个函数内部应该有打印信息指示是否成功
  // Calibrate MPU6500 bias
//   Need to hold the robot stationary and balanced during this process
  calibrate_mpu6500_bias(2000); // Collect 2000 samples (takes ~2 seconds + initial delay)
 8001a36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a3a:	f7ff fe8d 	bl	8001758 <calibrate_mpu6500_bias>

  // 清屏并显示初始文本
  ssd1306_Fill(Black);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fd00 	bl	8002444 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 8001a44:	2100      	movs	r1, #0
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 fdba 	bl	80025c0 <ssd1306_SetCursor>
  ssd1306_WriteString("OLED Init OK", Font_7x10, White);
 8001a4c:	4a8a      	ldr	r2, [pc, #552]	@ (8001c78 <main+0x338>)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	ca06      	ldmia	r2, {r1, r2}
 8001a52:	488c      	ldr	r0, [pc, #560]	@ (8001c84 <main+0x344>)
 8001a54:	f000 fe54 	bl	8002700 <ssd1306_WriteString>
  ssd1306_UpdateScreen(&hi2c1);
 8001a58:	4884      	ldr	r0, [pc, #528]	@ (8001c6c <main+0x32c>)
 8001a5a:	f000 fd0d 	bl	8002478 <ssd1306_UpdateScreen>
//        HAL_Delay(1000);
//        Error_Handler();
//    }

    // 初始化电机模块 (会启动 TIM1 PWM 通道)
    Motor_Init();
 8001a5e:	f000 fab9 	bl	8001fd4 <Motor_Init>
    printf("Motor module initialized.\r\n");
 8001a62:	4889      	ldr	r0, [pc, #548]	@ (8001c88 <main+0x348>)
 8001a64:	f007 f83a 	bl	8008adc <puts>

    // 启动控制循环定时器 TIM5 的中断
    if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 8001a68:	4888      	ldr	r0, [pc, #544]	@ (8001c8c <main+0x34c>)
 8001a6a:	f004 f8f5 	bl	8005c58 <HAL_TIM_Base_Start_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <main+0x13e>
    	printf("Failed to start control loop timer (TIM5)!\r\n");
 8001a74:	4886      	ldr	r0, [pc, #536]	@ (8001c90 <main+0x350>)
 8001a76:	f007 f831 	bl	8008adc <puts>
    	Error_Handler(); // 启动定时器失败是严重错误
 8001a7a:	f000 fa9f 	bl	8001fbc <Error_Handler>
    }
    printf("Control Loop Timer (TIM5) Started.\r\n");
 8001a7e:	4885      	ldr	r0, [pc, #532]	@ (8001c94 <main+0x354>)
 8001a80:	f007 f82c 	bl	8008adc <puts>
        STATE_MOVING_FORWARD_PULSE
    } RobotMoveState;

    static RobotMoveState current_move_state = STATE_BALANCING_AT_ZERO; // 初始状态为原地平衡
    static uint32_t last_state_change_time = 0;
    int instruction=0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    char PID[64]={0};
 8001a8a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001a8e:	2240      	movs	r2, #64	@ 0x40
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 f924 	bl	8008ce0 <memset>
    int len = sprintf(PID, "Kp:%.2f Kd:%.1f",
 8001a98:	4b7f      	ldr	r3, [pc, #508]	@ (8001c98 <main+0x358>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd5b 	bl	8000558 <__aeabi_f2d>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8001c9c <main+0x35c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8001ab8:	e9cd 2300 	strd	r2, r3, [sp]
 8001abc:	4622      	mov	r2, r4
 8001abe:	462b      	mov	r3, r5
 8001ac0:	4977      	ldr	r1, [pc, #476]	@ (8001ca0 <main+0x360>)
 8001ac2:	f007 f813 	bl	8008aec <siprintf>
 8001ac6:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
                      g_balance_kp, g_balance_kd);
    for(int i=0;i<len;i++){
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001ad0:	e00d      	b.n	8001aee <main+0x1ae>
    	printf("%c",PID[i]);
 8001ad2:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8001ad6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 ff9e 	bl	8008a20 <putchar>
    for(int i=0;i<len;i++){
 8001ae4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001aee:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8001af2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbeb      	blt.n	8001ad2 <main+0x192>
    }
    HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afe:	f001 febf 	bl	8003880 <HAL_Delay>
    srand(time(NULL));
 8001b02:	2000      	movs	r0, #0
 8001b04:	f007 f8f4 	bl	8008cf0 <time>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f006 f9f0 	bl	8007ef4 <srand>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    	  	 printf("test");

          if (hc05_is_data_received()) {
 8001b14:	f7ff fba6 	bl	8001264 <hc05_is_data_received>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d039      	beq.n	8001b92 <main+0x252>
              printf("success");
 8001b1e:	4861      	ldr	r0, [pc, #388]	@ (8001ca4 <main+0x364>)
 8001b20:	f006 ff6c 	bl	80089fc <iprintf>
              uint8_t received_buffer[BLUETOOTH_RX_BUFFER_SIZE];
              uint16_t len = hc05_get_received_data(received_buffer, BLUETOOTH_RX_BUFFER_SIZE);
 8001b24:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fba6 	bl	800127c <hc05_get_received_data>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
              if (len > 0) {
 8001b36:	f8b7 3172 	ldrh.w	r3, [r7, #370]	@ 0x172
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d029      	beq.n	8001b92 <main+0x252>
//                  printf("BT:");
                  // 处理接收到的数据 received_buffer，长度为 len
                  // 例如，通过另一个 UART 打印出来，或者回传给蓝牙

                  printf("BT Rcvd: %s\n", (char*)received_buffer);
 8001b3e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001b42:	4619      	mov	r1, r3
 8001b44:	4858      	ldr	r0, [pc, #352]	@ (8001ca8 <main+0x368>)
 8001b46:	f006 ff59 	bl	80089fc <iprintf>
                  instruction=(int)received_buffer[0]-48;
 8001b4a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3b30      	subs	r3, #48	@ 0x30
 8001b56:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                  for(int i=0;i<10;i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b60:	e010      	b.n	8001b84 <main+0x244>
                  {
                	  printf("%c ",received_buffer[i]);
 8001b62:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001b66:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8001b6a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	484d      	ldr	r0, [pc, #308]	@ (8001cac <main+0x36c>)
 8001b76:	f006 ff41 	bl	80089fc <iprintf>
                  for(int i=0;i<10;i++)
 8001b7a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b84:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	ddea      	ble.n	8001b62 <main+0x222>
                  }
                  printf("\n");
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f006 ff47 	bl	8008a20 <putchar>
              }
          }
          if(instruction==1){
 8001b92:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d111      	bne.n	8001bbe <main+0x27e>
        	                                left_right = 3.0f;
 8001b9a:	4b45      	ldr	r3, [pc, #276]	@ (8001cb0 <main+0x370>)
 8001b9c:	4a45      	ldr	r2, [pc, #276]	@ (8001cb4 <main+0x374>)
 8001b9e:	601a      	str	r2, [r3, #0]
                                      		g_target_linear_speed_mps = 0.02f;
 8001ba0:	4b45      	ldr	r3, [pc, #276]	@ (8001cb8 <main+0x378>)
 8001ba2:	4a46      	ldr	r2, [pc, #280]	@ (8001cbc <main+0x37c>)
 8001ba4:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(100);
 8001ba6:	2064      	movs	r0, #100	@ 0x64
 8001ba8:	f001 fe6a 	bl	8003880 <HAL_Delay>
                                      	    g_target_linear_speed_mps = 0.0f;
 8001bac:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <main+0x378>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(2000);
 8001bb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bb8:	f001 fe62 	bl	8003880 <HAL_Delay>
 8001bbc:	e08f      	b.n	8001cde <main+0x39e>
                                        }else if(instruction==2){
 8001bbe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d111      	bne.n	8001bea <main+0x2aa>
                                        	left_right = 3.0f;
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb0 <main+0x370>)
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb4 <main+0x374>)
 8001bca:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = -0.02f;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <main+0x378>)
 8001bce:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <main+0x380>)
 8001bd0:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(100);
 8001bd2:	2064      	movs	r0, #100	@ 0x64
 8001bd4:	f001 fe54 	bl	8003880 <HAL_Delay>
                                           	g_target_linear_speed_mps = 0.0f;
 8001bd8:	4b37      	ldr	r3, [pc, #220]	@ (8001cb8 <main+0x378>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(2000);
 8001be0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001be4:	f001 fe4c 	bl	8003880 <HAL_Delay>
 8001be8:	e079      	b.n	8001cde <main+0x39e>
                                        }else if(instruction==3){
 8001bea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d115      	bne.n	8001c1e <main+0x2de>
                                        	left_right = 1.0f;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <main+0x370>)
 8001bf4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bf8:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.01f;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <main+0x378>)
 8001bfc:	4a31      	ldr	r2, [pc, #196]	@ (8001cc4 <main+0x384>)
 8001bfe:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(50);
 8001c00:	2032      	movs	r0, #50	@ 0x32
 8001c02:	f001 fe3d 	bl	8003880 <HAL_Delay>
                                           	left_right = 3.0f;
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <main+0x370>)
 8001c08:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb4 <main+0x374>)
 8001c0a:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.0f;
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <main+0x378>)
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(1500);
 8001c14:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c18:	f001 fe32 	bl	8003880 <HAL_Delay>
 8001c1c:	e05f      	b.n	8001cde <main+0x39e>
                                        }else if(instruction==4){
 8001c1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d150      	bne.n	8001cc8 <main+0x388>
                                        	left_right = 2.0f;
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <main+0x370>)
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c2c:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.01f;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <main+0x378>)
 8001c30:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <main+0x384>)
 8001c32:	601a      	str	r2, [r3, #0]
                                           	HAL_Delay(50);
 8001c34:	2032      	movs	r0, #50	@ 0x32
 8001c36:	f001 fe23 	bl	8003880 <HAL_Delay>
                                           	left_right = 3.0f;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <main+0x370>)
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <main+0x374>)
 8001c3e:	601a      	str	r2, [r3, #0]
                                           	g_target_linear_speed_mps = 0.0f;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <main+0x378>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
                                              HAL_Delay(1500);
 8001c48:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c4c:	f001 fe18 	bl	8003880 <HAL_Delay>
 8001c50:	e045      	b.n	8001cde <main+0x39e>
 8001c52:	bf00      	nop
 8001c54:	200007ec 	.word	0x200007ec
 8001c58:	20000834 	.word	0x20000834
 8001c5c:	0800b594 	.word	0x0800b594
 8001c60:	0800b5a0 	.word	0x0800b5a0
 8001c64:	0800b5b4 	.word	0x0800b5b4
 8001c68:	0800b5d8 	.word	0x0800b5d8
 8001c6c:	20000294 	.word	0x20000294
 8001c70:	0800b604 	.word	0x0800b604
 8001c74:	0800b62c 	.word	0x0800b62c
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	0800b654 	.word	0x0800b654
 8001c80:	0800b660 	.word	0x0800b660
 8001c84:	0800b678 	.word	0x0800b678
 8001c88:	0800b688 	.word	0x0800b688
 8001c8c:	2000087c 	.word	0x2000087c
 8001c90:	0800b6a4 	.word	0x0800b6a4
 8001c94:	0800b6d0 	.word	0x0800b6d0
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	0800b6f4 	.word	0x0800b6f4
 8001ca4:	0800b704 	.word	0x0800b704
 8001ca8:	0800b70c 	.word	0x0800b70c
 8001cac:	0800b71c 	.word	0x0800b71c
 8001cb0:	2000001c 	.word	0x2000001c
 8001cb4:	40400000 	.word	0x40400000
 8001cb8:	20000794 	.word	0x20000794
 8001cbc:	3ca3d70a 	.word	0x3ca3d70a
 8001cc0:	bca3d70a 	.word	0xbca3d70a
 8001cc4:	3c23d70a 	.word	0x3c23d70a
                                        }else{
                                        	left_right = 3.0f;
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e88 <main+0x548>)
 8001cca:	4a70      	ldr	r2, [pc, #448]	@ (8001e8c <main+0x54c>)
 8001ccc:	601a      	str	r2, [r3, #0]
                                      	 	g_target_linear_speed_mps = 0.0f;
 8001cce:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <main+0x550>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
                                      	    HAL_Delay(1000);
 8001cd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cda:	f001 fdd1 	bl	8003880 <HAL_Delay>




    	      	  static uint32_t print_counter = 0;
    	  if (++print_counter % 100 == 0) { // Print approximately every 1 second (adjust frequency as needed)
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <main+0x554>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e94 <main+0x554>)
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <main+0x554>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <main+0x558>)
 8001cee:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2164      	movs	r1, #100	@ 0x64
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <main+0x3da>
    	       print_counter = 0;
 8001d00:	4b64      	ldr	r3, [pc, #400]	@ (8001e94 <main+0x554>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

//    	        Calculate current pitch error for printing (error is calculated in the IRQ, but recalculate here for printing convenience)
    	       float current_pitch_error = g_target_pitch_angle - g_pitch_angle;
 8001d06:	4b65      	ldr	r3, [pc, #404]	@ (8001e9c <main+0x55c>)
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	4b64      	ldr	r3, [pc, #400]	@ (8001ea0 <main+0x560>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d16:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c
//    	              g_balance_kp * current_pitch_error + g_balance_kd * g_gyro_x_dps, // Recalculate Control Output for printing (simplified PD)
//    	              g_motor_output_left,  // Final motor output (left)
//    	              g_motor_output_right  // Final motor output (right)
//    	              );
    	  }
    	    float random_num = rand()%1000;
 8001d1a:	f006 f919 	bl	8007f50 <rand>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a60      	ldr	r2, [pc, #384]	@ (8001ea4 <main+0x564>)
 8001d22:	fb82 1203 	smull	r1, r2, r2, r3
 8001d26:	1191      	asrs	r1, r2, #6
 8001d28:	17da      	asrs	r2, r3, #31
 8001d2a:	1a8a      	subs	r2, r1, r2
 8001d2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d30:	fb01 f202 	mul.w	r2, r1, r2
 8001d34:	1a9a      	subs	r2, r3, r2
 8001d36:	ee07 2a90 	vmov	s15, r2
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
    	    	float distance=random_num/1000.0+9.5;
 8001d42:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b56      	ldr	r3, [pc, #344]	@ (8001ea8 <main+0x568>)
 8001d50:	f7fe fd84 	bl	800085c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b52      	ldr	r3, [pc, #328]	@ (8001eac <main+0x56c>)
 8001d62:	f7fe fa9b 	bl	800029c <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe ff23 	bl	8000bb8 <__aeabi_d2f>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    		  ssd1306_Fill(Black);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 fb63 	bl	8002444 <ssd1306_Fill>
    		  ssd1306_SetCursor(0, 0);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fc1d 	bl	80025c0 <ssd1306_SetCursor>
    		  char angle[64]={0};
 8001d86:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001d8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d8e:	4618      	mov	r0, r3
 8001d90:	2340      	movs	r3, #64	@ 0x40
 8001d92:	461a      	mov	r2, r3
 8001d94:	2100      	movs	r1, #0
 8001d96:	f006 ffa3 	bl	8008ce0 <memset>
    		  sprintf(angle,"Pitch: %.3f",g_pitch_angle);
 8001d9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ea0 <main+0x560>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbda 	bl	8000558 <__aeabi_f2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	1d38      	adds	r0, r7, #4
 8001daa:	4941      	ldr	r1, [pc, #260]	@ (8001eb0 <main+0x570>)
 8001dac:	f006 fe9e 	bl	8008aec <siprintf>
    		  ssd1306_WriteString(angle, Font_7x10, White);
 8001db0:	4a40      	ldr	r2, [pc, #256]	@ (8001eb4 <main+0x574>)
 8001db2:	1d38      	adds	r0, r7, #4
 8001db4:	2301      	movs	r3, #1
 8001db6:	ca06      	ldmia	r2, {r1, r2}
 8001db8:	f000 fca2 	bl	8002700 <ssd1306_WriteString>
    		  ssd1306_SetCursor(0, 14);
 8001dbc:	210e      	movs	r1, #14
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 fbfe 	bl	80025c0 <ssd1306_SetCursor>
    		  char dis[64]={0};
 8001dc4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001dc8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dcc:	4618      	mov	r0, r3
 8001dce:	2340      	movs	r3, #64	@ 0x40
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f006 ff84 	bl	8008ce0 <memset>
    		  sprintf(dis,"Distance:%.2f\r\n",distance);
 8001dd8:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001de8:	4933      	ldr	r1, [pc, #204]	@ (8001eb8 <main+0x578>)
 8001dea:	f006 fe7f 	bl	8008aec <siprintf>

    		  ssd1306_WriteString(dis, Font_7x10, White);
 8001dee:	4a31      	ldr	r2, [pc, #196]	@ (8001eb4 <main+0x574>)
 8001df0:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001df4:	2301      	movs	r3, #1
 8001df6:	ca06      	ldmia	r2, {r1, r2}
 8001df8:	f000 fc82 	bl	8002700 <ssd1306_WriteString>
    		  ssd1306_SetCursor(0, 28);
 8001dfc:	211c      	movs	r1, #28
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 fbde 	bl	80025c0 <ssd1306_SetCursor>

    		  ssd1306_WriteString(PID, Font_7x10, White);
 8001e04:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <main+0x574>)
 8001e06:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	ca06      	ldmia	r2, {r1, r2}
 8001e0e:	f000 fc77 	bl	8002700 <ssd1306_WriteString>
    		  ssd1306_UpdateScreen(&hi2c1);
 8001e12:	482a      	ldr	r0, [pc, #168]	@ (8001ebc <main+0x57c>)
 8001e14:	f000 fb30 	bl	8002478 <ssd1306_UpdateScreen>
    		   char msg[64]={0};
 8001e18:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e20:	4618      	mov	r0, r3
 8001e22:	2340      	movs	r3, #64	@ 0x40
 8001e24:	461a      	mov	r2, r3
 8001e26:	2100      	movs	r1, #0
 8001e28:	f006 ff5a 	bl	8008ce0 <memset>
    		   sprintf(msg,"Pitch:%f Accel:%f gyro:%f\r\n",g_pitch_angle,g_accel_angle,g_gyro_x_dps);
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <main+0x560>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb91 	bl	8000558 <__aeabi_f2d>
 8001e36:	4680      	mov	r8, r0
 8001e38:	4689      	mov	r9, r1
 8001e3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <main+0x580>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb8a 	bl	8000558 <__aeabi_f2d>
 8001e44:	4604      	mov	r4, r0
 8001e46:	460d      	mov	r5, r1
 8001e48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <main+0x584>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb83 	bl	8000558 <__aeabi_f2d>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8001e5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001e62:	4642      	mov	r2, r8
 8001e64:	464b      	mov	r3, r9
 8001e66:	4918      	ldr	r1, [pc, #96]	@ (8001ec8 <main+0x588>)
 8001e68:	f006 fe40 	bl	8008aec <siprintf>
    	      hc05_transmit_data((uint8_t*)msg, strlen(msg));
 8001e6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fa05 	bl	8000280 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fa43 	bl	800130c <hc05_transmit_data>
    while (1){
 8001e86:	e645      	b.n	8001b14 <main+0x1d4>
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	40400000 	.word	0x40400000
 8001e90:	20000794 	.word	0x20000794
 8001e94:	2000033c 	.word	0x2000033c
 8001e98:	51eb851f 	.word	0x51eb851f
 8001e9c:	20000770 	.word	0x20000770
 8001ea0:	2000075c 	.word	0x2000075c
 8001ea4:	10624dd3 	.word	0x10624dd3
 8001ea8:	408f4000 	.word	0x408f4000
 8001eac:	40230000 	.word	0x40230000
 8001eb0:	0800b720 	.word	0x0800b720
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	0800b72c 	.word	0x0800b72c
 8001ebc:	20000294 	.word	0x20000294
 8001ec0:	20000760 	.word	0x20000760
 8001ec4:	20000764 	.word	0x20000764
 8001ec8:	0800b73c 	.word	0x0800b73c

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	@ 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	@ 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 ff00 	bl	8008ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a28      	ldr	r2, [pc, #160]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <SystemClock_Config+0xd4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f18:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <SystemClock_Config+0xd4>)
 8001f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <SystemClock_Config+0xd4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f40:	2308      	movs	r3, #8
 8001f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f44:	23a8      	movs	r3, #168	@ 0xa8
 8001f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 f997 	bl	8005288 <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f60:	f000 f82c 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2102      	movs	r1, #2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fbf8 	bl	8005778 <HAL_RCC_ClockConfig>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f8e:	f000 f815 	bl	8001fbc <Error_Handler>
  }
}
 8001f92:	bf00      	nop
 8001f94:	3750      	adds	r7, #80	@ 0x50
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000

08001fa4 <HAL_UART_RxCpltCallback>:
  * @brief  UART接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    // 调用蓝牙模块的内部回调处理函数
    hc05_uart_rx_callback_handler(huart);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f9c9 	bl	8001344 <hc05_uart_rx_callback_handler>


}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  // 假设是 PA5 (Nucleo 板载 LED)
  // 请确保 led_GPIO_Port 和 led_Pin 宏定义正确
  // 或者直接使用 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  while (1)
  {
    HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); // 使用 main.h 中定义的宏
 8001fc4:	2120      	movs	r1, #32
 8001fc6:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <Error_Handler+0x14>)
 8001fc8:	f001 fff1 	bl	8003fae <HAL_GPIO_TogglePin>
 8001fcc:	e7fa      	b.n	8001fc4 <Error_Handler+0x8>
 8001fce:	bf00      	nop
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <Motor_Init>:
/**
  * @brief 初始化电机控制模块
  * @note  此函数应在定时器和GPIO初始化之后调用。
  *        它会启动PWM通道。
  */
void Motor_Init(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    // 启动所有四个 PWM 通道
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); } // Motor A AIN1 (Speed/PWM)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4813      	ldr	r0, [pc, #76]	@ (8002028 <Motor_Init+0x54>)
 8001fdc:	f003 fef8 	bl	8005dd0 <HAL_TIM_PWM_Start>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <Motor_Init+0x16>
 8001fe6:	f7ff ffe9 	bl	8001fbc <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) { Error_Handler(); } // Motor A AIN2 (High/PWM)
 8001fea:	2108      	movs	r1, #8
 8001fec:	480e      	ldr	r0, [pc, #56]	@ (8002028 <Motor_Init+0x54>)
 8001fee:	f003 feef 	bl	8005dd0 <HAL_TIM_PWM_Start>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <Motor_Init+0x28>
 8001ff8:	f7ff ffe0 	bl	8001fbc <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK) { Error_Handler(); } // Motor B BIN1 (Speed/PWM)
 8001ffc:	210c      	movs	r1, #12
 8001ffe:	480a      	ldr	r0, [pc, #40]	@ (8002028 <Motor_Init+0x54>)
 8002000:	f003 fee6 	bl	8005dd0 <HAL_TIM_PWM_Start>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <Motor_Init+0x3a>
 800200a:	f7ff ffd7 	bl	8001fbc <Error_Handler>
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) { Error_Handler(); } // Motor B BIN2 (High/PWM)
 800200e:	2104      	movs	r1, #4
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <Motor_Init+0x54>)
 8002012:	f003 fedd 	bl	8005dd0 <HAL_TIM_PWM_Start>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <Motor_Init+0x4c>
 800201c:	f7ff ffce 	bl	8001fbc <Error_Handler>

    // 初始状态停止电机
    Car_Stop();
 8002020:	f000 f8c2 	bl	80021a8 <Car_Stop>
    // printf("Motor PWM channels started.\r\n");
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200007a4 	.word	0x200007a4

0800202c <Motor_SetSpeed>:
  * @brief 设置指定电机的速度和方向 (Slow Decay PWM - Two PWM Inputs)
  * @param motor_idx: 电机索引 (MOTOR_A 或 MOTOR_B)
  * @param speed_percent: 速度百分比 (-100 到 100)。
  *                       正值表示前进，负值表示后退，0表示停止。
  */
void Motor_SetSpeed(uint8_t motor_idx, int16_t speed_percent) {
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	80bb      	strh	r3, [r7, #4]
    uint32_t pwm_val_for_variable_pin; // 用于可变PWM信号的占空比 (0 = 最快，PWM_PERIOD = 最慢/制动)
    uint32_t pwm_val_for_fixed_pin;    // 用于固定高电平的占空比 (通常是 PWM_PERIOD，表示100%占空比)
    int16_t abs_speed_percent;

    // 限制速度百分比在 -100 到 100 之间
    if (speed_percent > 100) speed_percent = 100;
 800203c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002040:	2b64      	cmp	r3, #100	@ 0x64
 8002042:	dd01      	ble.n	8002048 <Motor_SetSpeed+0x1c>
 8002044:	2364      	movs	r3, #100	@ 0x64
 8002046:	80bb      	strh	r3, [r7, #4]
    if (speed_percent < -100) speed_percent = -100;
 8002048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800204c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002050:	da02      	bge.n	8002058 <Motor_SetSpeed+0x2c>
 8002052:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8002056:	80bb      	strh	r3, [r7, #4]

    // 获取速度百分比的绝对值用于计算 PWM 幅度
    if (speed_percent >= 0) {
 8002058:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db02      	blt.n	8002066 <Motor_SetSpeed+0x3a>
        abs_speed_percent = speed_percent;
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	81fb      	strh	r3, [r7, #14]
 8002064:	e003      	b.n	800206e <Motor_SetSpeed+0x42>
    } else {
        abs_speed_percent = -speed_percent; // abs(speed_percent)
 8002066:	88bb      	ldrh	r3, [r7, #4]
 8002068:	425b      	negs	r3, r3
 800206a:	b29b      	uxth	r3, r3
 800206c:	81fb      	strh	r3, [r7, #14]
    }

    // 根据速度百分比设置 PWM 值和固定高电平值
    if (speed_percent == 0) {
 800206e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <Motor_SetSpeed+0x54>
        // 停止 (滑行模式): 两个控制引脚都设为低电平 (0%占空比)
        pwm_val_for_variable_pin = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
        pwm_val_for_fixed_pin = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e023      	b.n	80020c8 <Motor_SetSpeed+0x9c>
    } else {
        // 对于慢衰减模式，我们需要的PWM占空比与期望速度成反比。
        // 例如：100% 速度对应 0% PWM 占空比 (0值)
        //       10% 速度对应 90% PWM 占空比 (0.9 * PWM_PERIOD 值)
        pwm_val_for_variable_pin = (uint32_t)((float)(100 - abs_speed_percent) * PWM_PERIOD / 100.0f);
 8002080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002084:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800216c <Motor_SetSpeed+0x140>
 8002094:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002098:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002170 <Motor_SetSpeed+0x144>
 800209c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a4:	ee17 3a90 	vmov	r3, s15
 80020a8:	617b      	str	r3, [r7, #20]
        // 确保即使是非常小的非零速度百分比，也能产生实际的驱动。
        // 如果计算出的 pwm_val_for_variable_pin 等于 PWM_PERIOD
        // 而 abs_speed_percent 却大于 0，说明由于浮点精度或PWM_PERIOD值小，
        // 导致计算结果实际是100%占空比，这会导致电机停止（制动效果）。
        // 此时我们将其设置为 PWM_PERIOD - 1，以确保有微小的非零驱动。
        if (abs_speed_percent > 0 && pwm_val_for_variable_pin >= PWM_PERIOD) {
 80020aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dd07      	ble.n	80020c2 <Motor_SetSpeed+0x96>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f240 3246 	movw	r2, #838	@ 0x346
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d902      	bls.n	80020c2 <Motor_SetSpeed+0x96>
             pwm_val_for_variable_pin = PWM_PERIOD - 1; // 确保不完全制动
 80020bc:	f240 3346 	movw	r3, #838	@ 0x346
 80020c0:	617b      	str	r3, [r7, #20]
        }

        // 固定高电平的引脚，始终保持100%占空比
        pwm_val_for_fixed_pin = PWM_PERIOD;
 80020c2:	f240 3347 	movw	r3, #839	@ 0x347
 80020c6:	613b      	str	r3, [r7, #16]
    }

    // 根据电机索引和方向设置对应的 PWM 通道
    if (motor_idx == MOTOR_A) {
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d122      	bne.n	8002114 <Motor_SetSpeed+0xe8>
        // Motor A: AIN1 (PA8, TIM1_CH1), AIN2 (PA10, TIM1_CH3)
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: AIN1=High, AIN2=PWM)
 80020ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	dd08      	ble.n	80020e8 <Motor_SetSpeed+0xbc>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin);     // AIN1 = 固定高电平
 80020d6:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <Motor_SetSpeed+0x148>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin);  // AIN2 = 可变PWM
 80020de:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <Motor_SetSpeed+0x148>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        } else { // 停止 (speed_percent == 0) - 已在上面统一处理
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
        }
    }
}
 80020e6:	e03a      	b.n	800215e <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: AIN1=PWM, AIN2=High)
 80020e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da08      	bge.n	8002102 <Motor_SetSpeed+0xd6>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_variable_pin);  // AIN1 = 可变PWM
 80020f0:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <Motor_SetSpeed+0x148>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_fixed_pin);     // AIN2 = 固定高电平
 80020f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <Motor_SetSpeed+0x148>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002100:	e02d      	b.n	800215e <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val_for_fixed_pin); // AIN1 = 0 (实际上是0，因为fixed_pwm_value和variable_pwm_value都为0)
 8002102:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <Motor_SetSpeed+0x148>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_val_for_variable_pin); // AIN2 = 0
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <Motor_SetSpeed+0x148>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002112:	e024      	b.n	800215e <Motor_SetSpeed+0x132>
    } else if (motor_idx == MOTOR_B) {
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d121      	bne.n	800215e <Motor_SetSpeed+0x132>
        if (speed_percent > 0) { // 前进 (Slow Decay Forward: BIN1=High, BIN2=PWM)
 800211a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	dd08      	ble.n	8002134 <Motor_SetSpeed+0x108>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin);     // BIN1 = 固定高电平
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <Motor_SetSpeed+0x148>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin);  // BIN2 = 可变PWM
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <Motor_SetSpeed+0x148>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002132:	e014      	b.n	800215e <Motor_SetSpeed+0x132>
        } else if (speed_percent < 0) { // 后退 (Slow Decay Reverse: BIN1=PWM, BIN2=High)
 8002134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	da08      	bge.n	800214e <Motor_SetSpeed+0x122>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_variable_pin);  // BIN1 = 可变PWM
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <Motor_SetSpeed+0x148>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_fixed_pin);     // BIN2 = 固定高电平
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <Motor_SetSpeed+0x148>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800214c:	e007      	b.n	800215e <Motor_SetSpeed+0x132>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_val_for_fixed_pin); // BIN1 = 0
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <Motor_SetSpeed+0x148>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_val_for_variable_pin); // BIN2 = 0
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <Motor_SetSpeed+0x148>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	4451c000 	.word	0x4451c000
 8002170:	42c80000 	.word	0x42c80000
 8002174:	200007a4 	.word	0x200007a4

08002178 <Car_Move>:
/**
  * @brief 控制小车整体移动
  * @param speed_A_percent: 电机A的速度百分比 (-100 到 100)
  * @param speed_B_percent: 电机B的速度百分比 (-100 到 100)
  */
void Car_Move(int16_t speed_A_percent, int16_t speed_B_percent) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	80fb      	strh	r3, [r7, #6]
 8002184:	4613      	mov	r3, r2
 8002186:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_A, speed_A_percent);
 8002188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218c:	4619      	mov	r1, r3
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff ff4c 	bl	800202c <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_B, speed_B_percent);
 8002194:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff46 	bl	800202c <Motor_SetSpeed>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <Car_Stop>:
}

/**
  * @brief 小车停止
  */
void Car_Stop(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    Car_Move(0, 0);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff ffe2 	bl	8002178 <Car_Move>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <ssd1306_WriteCommand>:
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
 80021c4:	2364      	movs	r3, #100	@ 0x64
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	1cfb      	adds	r3, r7, #3
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	2200      	movs	r2, #0
 80021d4:	2178      	movs	r1, #120	@ 0x78
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f002 f848 	bl	800426c <HAL_I2C_Mem_Write>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <ssd1306_WriteCommand+0x2e>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <ssd1306_WriteCommand+0x30>
 80021e6:	2300      	movs	r3, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ssd1306_WriteData>:
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af04      	add	r7, sp, #16
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2264      	movs	r2, #100	@ 0x64
 8002202:	9202      	str	r2, [sp, #8]
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2301      	movs	r3, #1
 800220c:	2240      	movs	r2, #64	@ 0x40
 800220e:	2178      	movs	r1, #120	@ 0x78
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f002 f82b 	bl	800426c <HAL_I2C_Mem_Write>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <ssd1306_WriteData+0x30>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <ssd1306_WriteData+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <ssd1306_Init>:
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	2364      	movs	r3, #100	@ 0x64
 8002236:	2203      	movs	r2, #3
 8002238:	2178      	movs	r1, #120	@ 0x78
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f002 fb42 	bl	80048c4 <HAL_I2C_IsDeviceReady>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <ssd1306_Init+0x1e>
 8002246:	2301      	movs	r3, #1
 8002248:	e0f6      	b.n	8002438 <ssd1306_Init+0x20c>
 800224a:	2064      	movs	r0, #100	@ 0x64
 800224c:	f001 fb18 	bl	8003880 <HAL_Delay>
 8002250:	21ae      	movs	r1, #174	@ 0xae
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffb0 	bl	80021b8 <ssd1306_WriteCommand>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <ssd1306_Init+0x36>
 800225e:	2301      	movs	r3, #1
 8002260:	e0ea      	b.n	8002438 <ssd1306_Init+0x20c>
 8002262:	21d5      	movs	r1, #213	@ 0xd5
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffa7 	bl	80021b8 <ssd1306_WriteCommand>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <ssd1306_Init+0x48>
 8002270:	2301      	movs	r3, #1
 8002272:	e0e1      	b.n	8002438 <ssd1306_Init+0x20c>
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff9e 	bl	80021b8 <ssd1306_WriteCommand>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <ssd1306_Init+0x5a>
 8002282:	2301      	movs	r3, #1
 8002284:	e0d8      	b.n	8002438 <ssd1306_Init+0x20c>
 8002286:	21a8      	movs	r1, #168	@ 0xa8
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff95 	bl	80021b8 <ssd1306_WriteCommand>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <ssd1306_Init+0x6c>
 8002294:	2301      	movs	r3, #1
 8002296:	e0cf      	b.n	8002438 <ssd1306_Init+0x20c>
 8002298:	213f      	movs	r1, #63	@ 0x3f
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff8c 	bl	80021b8 <ssd1306_WriteCommand>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <ssd1306_Init+0x7e>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0c6      	b.n	8002438 <ssd1306_Init+0x20c>
 80022aa:	21d3      	movs	r1, #211	@ 0xd3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff83 	bl	80021b8 <ssd1306_WriteCommand>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <ssd1306_Init+0x90>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0bd      	b.n	8002438 <ssd1306_Init+0x20c>
 80022bc:	2100      	movs	r1, #0
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff7a 	bl	80021b8 <ssd1306_WriteCommand>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <ssd1306_Init+0xa2>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0b4      	b.n	8002438 <ssd1306_Init+0x20c>
 80022ce:	2140      	movs	r1, #64	@ 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff71 	bl	80021b8 <ssd1306_WriteCommand>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <ssd1306_Init+0xb4>
 80022dc:	2301      	movs	r3, #1
 80022de:	e0ab      	b.n	8002438 <ssd1306_Init+0x20c>
 80022e0:	218d      	movs	r1, #141	@ 0x8d
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff68 	bl	80021b8 <ssd1306_WriteCommand>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <ssd1306_Init+0xc6>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0a2      	b.n	8002438 <ssd1306_Init+0x20c>
 80022f2:	2114      	movs	r1, #20
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff5f 	bl	80021b8 <ssd1306_WriteCommand>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <ssd1306_Init+0xd8>
 8002300:	2301      	movs	r3, #1
 8002302:	e099      	b.n	8002438 <ssd1306_Init+0x20c>
 8002304:	2120      	movs	r1, #32
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff56 	bl	80021b8 <ssd1306_WriteCommand>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <ssd1306_Init+0xea>
 8002312:	2301      	movs	r3, #1
 8002314:	e090      	b.n	8002438 <ssd1306_Init+0x20c>
 8002316:	2100      	movs	r1, #0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff4d 	bl	80021b8 <ssd1306_WriteCommand>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <ssd1306_Init+0xfc>
 8002324:	2301      	movs	r3, #1
 8002326:	e087      	b.n	8002438 <ssd1306_Init+0x20c>
 8002328:	21a1      	movs	r1, #161	@ 0xa1
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff44 	bl	80021b8 <ssd1306_WriteCommand>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <ssd1306_Init+0x10e>
 8002336:	2301      	movs	r3, #1
 8002338:	e07e      	b.n	8002438 <ssd1306_Init+0x20c>
 800233a:	21c8      	movs	r1, #200	@ 0xc8
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff3b 	bl	80021b8 <ssd1306_WriteCommand>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <ssd1306_Init+0x120>
 8002348:	2301      	movs	r3, #1
 800234a:	e075      	b.n	8002438 <ssd1306_Init+0x20c>
 800234c:	21da      	movs	r1, #218	@ 0xda
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff32 	bl	80021b8 <ssd1306_WriteCommand>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <ssd1306_Init+0x132>
 800235a:	2301      	movs	r3, #1
 800235c:	e06c      	b.n	8002438 <ssd1306_Init+0x20c>
 800235e:	2112      	movs	r1, #18
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <ssd1306_WriteCommand>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <ssd1306_Init+0x144>
 800236c:	2301      	movs	r3, #1
 800236e:	e063      	b.n	8002438 <ssd1306_Init+0x20c>
 8002370:	2181      	movs	r1, #129	@ 0x81
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff20 	bl	80021b8 <ssd1306_WriteCommand>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <ssd1306_Init+0x156>
 800237e:	2301      	movs	r3, #1
 8002380:	e05a      	b.n	8002438 <ssd1306_Init+0x20c>
 8002382:	21cf      	movs	r1, #207	@ 0xcf
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff17 	bl	80021b8 <ssd1306_WriteCommand>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <ssd1306_Init+0x168>
 8002390:	2301      	movs	r3, #1
 8002392:	e051      	b.n	8002438 <ssd1306_Init+0x20c>
 8002394:	21d9      	movs	r1, #217	@ 0xd9
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff0e 	bl	80021b8 <ssd1306_WriteCommand>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <ssd1306_Init+0x17a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e048      	b.n	8002438 <ssd1306_Init+0x20c>
 80023a6:	21f1      	movs	r1, #241	@ 0xf1
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff05 	bl	80021b8 <ssd1306_WriteCommand>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <ssd1306_Init+0x18c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e03f      	b.n	8002438 <ssd1306_Init+0x20c>
 80023b8:	21db      	movs	r1, #219	@ 0xdb
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fefc 	bl	80021b8 <ssd1306_WriteCommand>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <ssd1306_Init+0x19e>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e036      	b.n	8002438 <ssd1306_Init+0x20c>
 80023ca:	2140      	movs	r1, #64	@ 0x40
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fef3 	bl	80021b8 <ssd1306_WriteCommand>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <ssd1306_Init+0x1b0>
 80023d8:	2301      	movs	r3, #1
 80023da:	e02d      	b.n	8002438 <ssd1306_Init+0x20c>
 80023dc:	21a4      	movs	r1, #164	@ 0xa4
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff feea 	bl	80021b8 <ssd1306_WriteCommand>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <ssd1306_Init+0x1c2>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e024      	b.n	8002438 <ssd1306_Init+0x20c>
 80023ee:	21a6      	movs	r1, #166	@ 0xa6
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fee1 	bl	80021b8 <ssd1306_WriteCommand>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <ssd1306_Init+0x1d4>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e01b      	b.n	8002438 <ssd1306_Init+0x20c>
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f81f 	bl	8002444 <ssd1306_Fill>
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f836 	bl	8002478 <ssd1306_UpdateScreen>
 800240c:	21af      	movs	r1, #175	@ 0xaf
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fed2 	bl	80021b8 <ssd1306_WriteCommand>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <ssd1306_Init+0x1f2>
 800241a:	2301      	movs	r3, #1
 800241c:	e00c      	b.n	8002438 <ssd1306_Init+0x20c>
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <ssd1306_Init+0x214>)
 8002420:	2200      	movs	r2, #0
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <ssd1306_Init+0x214>)
 8002426:	2200      	movs	r2, #0
 8002428:	805a      	strh	r2, [r3, #2]
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <ssd1306_Init+0x214>)
 800242c:	2201      	movs	r2, #1
 800242e:	715a      	strb	r2, [r3, #5]
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <ssd1306_Init+0x214>)
 8002432:	2200      	movs	r2, #0
 8002434:	711a      	strb	r2, [r3, #4]
 8002436:	2300      	movs	r3, #0
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000740 	.word	0x20000740

08002444 <ssd1306_Fill>:
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <ssd1306_Fill+0x14>
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <ssd1306_Fill+0x16>
 8002458:	23ff      	movs	r3, #255	@ 0xff
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002462:	4619      	mov	r1, r3
 8002464:	4803      	ldr	r0, [pc, #12]	@ (8002474 <ssd1306_Fill+0x30>)
 8002466:	f006 fc3b 	bl	8008ce0 <memset>
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000340 	.word	0x20000340

08002478 <ssd1306_UpdateScreen>:
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <ssd1306_UpdateScreen+0xa0>)
 8002482:	795b      	ldrb	r3, [r3, #5]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <ssd1306_UpdateScreen+0x14>
 8002488:	2301      	movs	r3, #1
 800248a:	e041      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 800248c:	2121      	movs	r1, #33	@ 0x21
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe92 	bl	80021b8 <ssd1306_WriteCommand>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <ssd1306_UpdateScreen+0x26>
 800249a:	2301      	movs	r3, #1
 800249c:	e038      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fe89 	bl	80021b8 <ssd1306_WriteCommand>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <ssd1306_UpdateScreen+0x38>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e02f      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 80024b0:	217f      	movs	r1, #127	@ 0x7f
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fe80 	bl	80021b8 <ssd1306_WriteCommand>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <ssd1306_UpdateScreen+0x4a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e026      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 80024c2:	2122      	movs	r1, #34	@ 0x22
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fe77 	bl	80021b8 <ssd1306_WriteCommand>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <ssd1306_UpdateScreen+0x5c>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e01d      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 80024d4:	2100      	movs	r1, #0
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fe6e 	bl	80021b8 <ssd1306_WriteCommand>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <ssd1306_UpdateScreen+0x6e>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e014      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 80024e6:	2107      	movs	r1, #7
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fe65 	bl	80021b8 <ssd1306_WriteCommand>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <ssd1306_UpdateScreen+0x80>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00b      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 80024f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fc:	4907      	ldr	r1, [pc, #28]	@ (800251c <ssd1306_UpdateScreen+0xa4>)
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fe76 	bl	80021f0 <ssd1306_WriteData>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <ssd1306_UpdateScreen+0x96>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <ssd1306_UpdateScreen+0x98>
 800250e:	2300      	movs	r3, #0
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000740 	.word	0x20000740
 800251c:	20000340 	.word	0x20000340

08002520 <ssd1306_DrawPixel>:
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	460b      	mov	r3, r1
 800252c:	80bb      	strh	r3, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	70fb      	strb	r3, [r7, #3]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b7f      	cmp	r3, #127	@ 0x7f
 8002536:	d838      	bhi.n	80025aa <ssd1306_DrawPixel+0x8a>
 8002538:	88bb      	ldrh	r3, [r7, #4]
 800253a:	2b3f      	cmp	r3, #63	@ 0x3f
 800253c:	d835      	bhi.n	80025aa <ssd1306_DrawPixel+0x8a>
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <ssd1306_DrawPixel+0x98>)
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <ssd1306_DrawPixel+0x34>
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	70fb      	strb	r3, [r7, #3]
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	08db      	lsrs	r3, r3, #3
 8002558:	b29b      	uxth	r3, r3
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	b29a      	uxth	r2, r3
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4413      	add	r3, r2
 8002562:	81fb      	strh	r3, [r7, #14]
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	2201      	movs	r2, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	737b      	strb	r3, [r7, #13]
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d109      	bne.n	800258c <ssd1306_DrawPixel+0x6c>
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	4a10      	ldr	r2, [pc, #64]	@ (80025bc <ssd1306_DrawPixel+0x9c>)
 800257c:	5cd1      	ldrb	r1, [r2, r3]
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	7b7a      	ldrb	r2, [r7, #13]
 8002582:	430a      	orrs	r2, r1
 8002584:	b2d1      	uxtb	r1, r2
 8002586:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <ssd1306_DrawPixel+0x9c>)
 8002588:	54d1      	strb	r1, [r2, r3]
 800258a:	e00f      	b.n	80025ac <ssd1306_DrawPixel+0x8c>
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <ssd1306_DrawPixel+0x9c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	b25a      	sxtb	r2, r3
 8002594:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002598:	43db      	mvns	r3, r3
 800259a:	b25b      	sxtb	r3, r3
 800259c:	4013      	ands	r3, r2
 800259e:	b25a      	sxtb	r2, r3
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	b2d1      	uxtb	r1, r2
 80025a4:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <ssd1306_DrawPixel+0x9c>)
 80025a6:	54d1      	strb	r1, [r2, r3]
 80025a8:	e000      	b.n	80025ac <ssd1306_DrawPixel+0x8c>
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000740 	.word	0x20000740
 80025bc:	20000340 	.word	0x20000340

080025c0 <ssd1306_SetCursor>:
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	460a      	mov	r2, r1
 80025ca:	80fb      	strh	r3, [r7, #6]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80bb      	strh	r3, [r7, #4]
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025d4:	bf28      	it	cs
 80025d6:	237f      	movcs	r3, #127	@ 0x7f
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <ssd1306_SetCursor+0x38>)
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025e2:	bf28      	it	cs
 80025e4:	233f      	movcs	r3, #63	@ 0x3f
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b03      	ldr	r3, [pc, #12]	@ (80025f8 <ssd1306_SetCursor+0x38>)
 80025ea:	805a      	strh	r2, [r3, #2]
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	20000740 	.word	0x20000740

080025fc <ssd1306_WriteChar>:
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08b      	sub	sp, #44	@ 0x2c
 8002600:	af00      	add	r7, sp, #0
 8002602:	4604      	mov	r4, r0
 8002604:	1d38      	adds	r0, r7, #4
 8002606:	e880 0006 	stmia.w	r0, {r1, r2}
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	4613      	mov	r3, r2
 8002612:	73bb      	strb	r3, [r7, #14]
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b1f      	cmp	r3, #31
 8002618:	d902      	bls.n	8002620 <ssd1306_WriteChar+0x24>
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b7e      	cmp	r3, #126	@ 0x7e
 800261e:	d901      	bls.n	8002624 <ssd1306_WriteChar+0x28>
 8002620:	2320      	movs	r3, #32
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	4b35      	ldr	r3, [pc, #212]	@ (80026fc <ssd1306_WriteChar+0x100>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	793b      	ldrb	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002630:	dc06      	bgt.n	8002640 <ssd1306_WriteChar+0x44>
 8002632:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <ssd1306_WriteChar+0x100>)
 8002634:	885b      	ldrh	r3, [r3, #2]
 8002636:	461a      	mov	r2, r3
 8002638:	797b      	ldrb	r3, [r7, #5]
 800263a:	4413      	add	r3, r2
 800263c:	2b3f      	cmp	r3, #63	@ 0x3f
 800263e:	dd01      	ble.n	8002644 <ssd1306_WriteChar+0x48>
 8002640:	2300      	movs	r3, #0
 8002642:	e056      	b.n	80026f2 <ssd1306_WriteChar+0xf6>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	3a20      	subs	r2, #32
 800264a:	7939      	ldrb	r1, [r7, #4]
 800264c:	fb01 f202 	mul.w	r2, r1, r2
 8002650:	4413      	add	r3, r2
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	e03e      	b.n	80026d8 <ssd1306_WriteChar+0xdc>
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	76fb      	strb	r3, [r7, #27]
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	e030      	b.n	80026cc <ssd1306_WriteChar+0xd0>
 800266a:	797b      	ldrb	r3, [r7, #5]
 800266c:	461a      	mov	r2, r3
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	4293      	cmp	r3, r2
 8002672:	d227      	bcs.n	80026c4 <ssd1306_WriteChar+0xc8>
 8002674:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <ssd1306_WriteChar+0x100>)
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	b29b      	uxth	r3, r3
 800267c:	4413      	add	r3, r2
 800267e:	833b      	strh	r3, [r7, #24]
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <ssd1306_WriteChar+0x100>)
 8002682:	885a      	ldrh	r2, [r3, #2]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4413      	add	r3, r2
 800268a:	82fb      	strh	r3, [r7, #22]
 800268c:	7efa      	ldrb	r2, [r7, #27]
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	fa42 f303 	asr.w	r3, r2, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <ssd1306_WriteChar+0xae>
 800269c:	7bba      	ldrb	r2, [r7, #14]
 800269e:	8af9      	ldrh	r1, [r7, #22]
 80026a0:	8b3b      	ldrh	r3, [r7, #24]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff3c 	bl	8002520 <ssd1306_DrawPixel>
 80026a8:	e00d      	b.n	80026c6 <ssd1306_WriteChar+0xca>
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	8af9      	ldrh	r1, [r7, #22]
 80026ba:	8b3b      	ldrh	r3, [r7, #24]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff2f 	bl	8002520 <ssd1306_DrawPixel>
 80026c2:	e000      	b.n	80026c6 <ssd1306_WriteChar+0xca>
 80026c4:	bf00      	nop
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	3301      	adds	r3, #1
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d9cb      	bls.n	800266a <ssd1306_WriteChar+0x6e>
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d8:	793b      	ldrb	r3, [r7, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	4293      	cmp	r3, r2
 80026e0:	d3bb      	bcc.n	800265a <ssd1306_WriteChar+0x5e>
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <ssd1306_WriteChar+0x100>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	793a      	ldrb	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <ssd1306_WriteChar+0x100>)
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	4618      	mov	r0, r3
 80026f4:	372c      	adds	r7, #44	@ 0x2c
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000740 	.word	0x20000740

08002700 <ssd1306_WriteString>:
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	1d38      	adds	r0, r7, #4
 800270a:	e880 0006 	stmia.w	r0, {r1, r2}
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e030      	b.n	8002778 <ssd1306_WriteString+0x78>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d111      	bne.n	8002742 <ssd1306_WriteString+0x42>
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <ssd1306_WriteString+0x8c>)
 8002720:	2200      	movs	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <ssd1306_WriteString+0x8c>)
 8002726:	885b      	ldrh	r3, [r3, #2]
 8002728:	797a      	ldrb	r2, [r7, #5]
 800272a:	4413      	add	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <ssd1306_WriteString+0x8c>)
 8002730:	805a      	strh	r2, [r3, #2]
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <ssd1306_WriteString+0x8c>)
 8002734:	885b      	ldrh	r3, [r3, #2]
 8002736:	2b3f      	cmp	r3, #63	@ 0x3f
 8002738:	d91b      	bls.n	8002772 <ssd1306_WriteString+0x72>
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <ssd1306_WriteString+0x8c>)
 800273c:	2200      	movs	r2, #0
 800273e:	805a      	strh	r2, [r3, #2]
 8002740:	e017      	b.n	8002772 <ssd1306_WriteString+0x72>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b0d      	cmp	r3, #13
 8002748:	d103      	bne.n	8002752 <ssd1306_WriteString+0x52>
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <ssd1306_WriteString+0x8c>)
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e00f      	b.n	8002772 <ssd1306_WriteString+0x72>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	7818      	ldrb	r0, [r3, #0]
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	1d3a      	adds	r2, r7, #4
 800275a:	ca06      	ldmia	r2, {r1, r2}
 800275c:	f7ff ff4e 	bl	80025fc <ssd1306_WriteChar>
 8002760:	4603      	mov	r3, r0
 8002762:	75bb      	strb	r3, [r7, #22]
 8002764:	7dbb      	ldrb	r3, [r7, #22]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <ssd1306_WriteString+0x6e>
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	e009      	b.n	8002782 <ssd1306_WriteString+0x82>
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	75fb      	strb	r3, [r7, #23]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ca      	bne.n	8002716 <ssd1306_WriteString+0x16>
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000740 	.word	0x20000740

08002790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	4a0f      	ldr	r2, [pc, #60]	@ (80027dc <HAL_MspInit+0x4c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <NMI_Handler+0x4>

080027e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <HardFault_Handler+0x4>

080027f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <MemManage_Handler+0x4>

080027f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <UsageFault_Handler+0x4>

08002808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002836:	f001 f803 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b096      	sub	sp, #88	@ 0x58
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002846:	481e      	ldr	r0, [pc, #120]	@ (80028c0 <TIM5_IRQHandler+0x80>)
 8002848:	f003 fca6 	bl	8006198 <HAL_TIM_IRQHandler>
	// -------------------------------------------------------------------------

	// 1. 读取当前编码器计数值
	// 注意：TIM3用于左轮，TIM4用于右轮。编码器模式下，计数器会自动增减，反映方向。
	// 读取后，立即清零计数器，以便下一个控制周期重新计数。
	uint16_t current_count_left = __HAL_TIM_GET_COUNTER(&htim3);
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <TIM5_IRQHandler+0x84>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
//	__HAL_TIM_SET_COUNTER(&htim3, 0); // 将左轮编码器计数器清零

	uint16_t current_count_right = __HAL_TIM_GET_COUNTER(&htim4);
 8002856:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <TIM5_IRQHandler+0x88>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

	// 2. 计算每个控制周期内的编码器计数差值 (delta)
	// 由于计数器已清零，delta就是本次读取到的值。将其转换为int32_t以便处理负值。
//	g_encoder_delta_left = - (int32_t)current_count_left; // 加了个负号因为是相反的
//	g_encoder_delta_right = (int32_t)current_count_right;
	int32_t delta_left = (int32_t)current_count_left - (int32_t)g_encoder_count_left_prev;
 8002860:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <TIM5_IRQHandler+0x8c>)
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	b292      	uxth	r2, r2
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	657b      	str	r3, [r7, #84]	@ 0x54
	int32_t delta_right = (int32_t)current_count_right - (int32_t)g_encoder_count_right_prev;
 800286e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002872:	4a17      	ldr	r2, [pc, #92]	@ (80028d0 <TIM5_IRQHandler+0x90>)
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	b292      	uxth	r2, r2
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50

	// 处理环绕 (Overflow/Underflow)
	// 如果差值的绝对值大于计数器周期的一半 (65535 / 2 = 32767.5)
	const int32_t HALF_PERIOD = 65536 / 2; // Using 65536 for uint16_t period
 800287c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int32_t FULL_PERIOD = 65536;
 8002882:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (delta_left > HALF_PERIOD) { // 向下溢出 (例如从很小的正数跳到很大的正数)
 8002888:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800288a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288c:	429a      	cmp	r2, r3
 800288e:	dd04      	ble.n	800289a <TIM5_IRQHandler+0x5a>
	    delta_left -= FULL_PERIOD;
 8002890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	657b      	str	r3, [r7, #84]	@ 0x54
 8002898:	e008      	b.n	80028ac <TIM5_IRQHandler+0x6c>
	} else if (delta_left < -HALF_PERIOD) { // 向上溢出 (例如从很小的负数(大无符号数)跳到很小的负数)
 800289a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289c:	425b      	negs	r3, r3
 800289e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028a0:	429a      	cmp	r2, r3
 80028a2:	da03      	bge.n	80028ac <TIM5_IRQHandler+0x6c>
	    delta_left += FULL_PERIOD;
 80028a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	4413      	add	r3, r2
 80028aa:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	if (delta_right > HALF_PERIOD) { // 向下溢出
 80028ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dd0f      	ble.n	80028d4 <TIM5_IRQHandler+0x94>
	    delta_right -= FULL_PERIOD;
 80028b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80028bc:	e013      	b.n	80028e6 <TIM5_IRQHandler+0xa6>
 80028be:	bf00      	nop
 80028c0:	2000087c 	.word	0x2000087c
 80028c4:	200007ec 	.word	0x200007ec
 80028c8:	20000834 	.word	0x20000834
 80028cc:	20000778 	.word	0x20000778
 80028d0:	2000077a 	.word	0x2000077a
	} else if (delta_right < -HALF_PERIOD) { // 向上溢出
 80028d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d6:	425b      	negs	r3, r3
 80028d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028da:	429a      	cmp	r2, r3
 80028dc:	da03      	bge.n	80028e6 <TIM5_IRQHandler+0xa6>
	    delta_right += FULL_PERIOD;
 80028de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e2:	4413      	add	r3, r2
 80028e4:	653b      	str	r3, [r7, #80]	@ 0x50
	// 3. **修正编码器计数方向**
	// 根据你的测试，左轮计数方向与右轮相反
	// 假设我们希望小车前进时，左右轮计数delta都为正。
	// 右轮：前转 -> 向上计数 (正 delta) - 保持不变
	// 左轮：前转 -> 向下计数 (负 delta) - 需要反转符号
	g_encoder_delta_left = -delta_left; // 反转左轮计数差值的符号
 80028e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e8:	425b      	negs	r3, r3
 80028ea:	4ac6      	ldr	r2, [pc, #792]	@ (8002c04 <TIM5_IRQHandler+0x3c4>)
 80028ec:	6013      	str	r3, [r2, #0]
	g_encoder_delta_right = delta_right; // 右轮保持不变
 80028ee:	4ac6      	ldr	r2, [pc, #792]	@ (8002c08 <TIM5_IRQHandler+0x3c8>)
 80028f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f2:	6013      	str	r3, [r2, #0]


	// 4. 更新上一次的计数值
	g_encoder_count_left_prev = current_count_left;
 80028f4:	4ac5      	ldr	r2, [pc, #788]	@ (8002c0c <TIM5_IRQHandler+0x3cc>)
 80028f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80028fa:	8013      	strh	r3, [r2, #0]
	g_encoder_count_right_prev = current_count_right;
 80028fc:	4ac4      	ldr	r2, [pc, #784]	@ (8002c10 <TIM5_IRQHandler+0x3d0>)
 80028fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002902:	8013      	strh	r3, [r2, #0]

	// 5. 将编码器计数差值转换为轮子转速 (转/秒, RPS)
	// 转速 = (计数差值 / 每转总计数) / 控制周期时间
	g_left_wheel_speed_rps = (float)g_encoder_delta_left / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 8002904:	4bbf      	ldr	r3, [pc, #764]	@ (8002c04 <TIM5_IRQHandler+0x3c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002910:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8002c14 <TIM5_IRQHandler+0x3d4>
 8002914:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002918:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002c18 <TIM5_IRQHandler+0x3d8>
 800291c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002920:	4bbe      	ldr	r3, [pc, #760]	@ (8002c1c <TIM5_IRQHandler+0x3dc>)
 8002922:	edc3 7a00 	vstr	s15, [r3]
	g_right_wheel_speed_rps = (float)g_encoder_delta_right / ENCODER_CPR_QUADRATURE / CONTROL_LOOP_PERIOD_S;
 8002926:	4bb8      	ldr	r3, [pc, #736]	@ (8002c08 <TIM5_IRQHandler+0x3c8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8002c14 <TIM5_IRQHandler+0x3d4>
 8002936:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800293a:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8002c18 <TIM5_IRQHandler+0x3d8>
 800293e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002942:	4bb7      	ldr	r3, [pc, #732]	@ (8002c20 <TIM5_IRQHandler+0x3e0>)
 8002944:	edc3 7a00 	vstr	s15, [r3]

	// 6. 将轮子转速转换为小车线速度 (米/秒, MPS)
	// 线速度 = 转速 * 车轮周长
	// 车轮周长 = PI * 直径
	float wheel_circumference = WHEEL_DIAMETER_M * M_PI;
 8002948:	4bb6      	ldr	r3, [pc, #728]	@ (8002c24 <TIM5_IRQHandler+0x3e4>)
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
	float left_wheel_linear_speed_mps = g_left_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 800294c:	4bb3      	ldr	r3, [pc, #716]	@ (8002c1c <TIM5_IRQHandler+0x3dc>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002c28 <TIM5_IRQHandler+0x3e8>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float right_wheel_linear_speed_mps = g_right_wheel_speed_rps * (WHEEL_DIAMETER_M * M_PI);
 800295e:	4bb0      	ldr	r3, [pc, #704]	@ (8002c20 <TIM5_IRQHandler+0x3e0>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002c28 <TIM5_IRQHandler+0x3e8>
 8002968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800296c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// 7. 计算小车整体的线速度和角速度
	// 小车线速度 (向前/向后) 是左右轮线速度的平均值
	g_robot_linear_speed_mps = (left_wheel_linear_speed_mps + right_wheel_linear_speed_mps) / 2.0f;
 8002970:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002974:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800297c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002984:	4ba9      	ldr	r3, [pc, #676]	@ (8002c2c <TIM5_IRQHandler+0x3ec>)
 8002986:	edc3 7a00 	vstr	s15, [r3]
//	 g_robot_linear_speed_mps = -g_robot_linear_speed_mps;
//	 printf("g_robot_linear_speed_mps: %d", g_robot_linear_speed_mps);


	// 小车角速度 (原地转弯) 是左右轮线速度的差值除以轮距
	float angular_speed_radps = (right_wheel_linear_speed_mps - left_wheel_linear_speed_mps) / WHEEL_TRACK_M;
 800298a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800298e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8002c30 <TIM5_IRQHandler+0x3f0>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	// 将弧度/秒转换为度/秒
	g_robot_angular_speed_dps = angular_speed_radps * (180.0f / M_PI);
 80029a2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029a6:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8002c34 <TIM5_IRQHandler+0x3f4>
 80029aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002c38 <TIM5_IRQHandler+0x3f8>)
 80029b0:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 姿态数据处理 (MPU6500) BEGIN
	// -------------------------------------------------------------------------

	// Read raw sensor data from MPU6500
	mpu6500_read_accel_raw(&g_accel_x_raw, &g_accel_y_raw, &g_accel_z_raw);
 80029b4:	4aa1      	ldr	r2, [pc, #644]	@ (8002c3c <TIM5_IRQHandler+0x3fc>)
 80029b6:	49a2      	ldr	r1, [pc, #648]	@ (8002c40 <TIM5_IRQHandler+0x400>)
 80029b8:	48a2      	ldr	r0, [pc, #648]	@ (8002c44 <TIM5_IRQHandler+0x404>)
 80029ba:	f7fe fae3 	bl	8000f84 <mpu6500_read_accel_raw>
	mpu6500_read_gyro_raw(&g_gyro_x_raw, &g_gyro_y_raw, &g_gyro_z_raw);
 80029be:	4aa2      	ldr	r2, [pc, #648]	@ (8002c48 <TIM5_IRQHandler+0x408>)
 80029c0:	49a2      	ldr	r1, [pc, #648]	@ (8002c4c <TIM5_IRQHandler+0x40c>)
 80029c2:	48a3      	ldr	r0, [pc, #652]	@ (8002c50 <TIM5_IRQHandler+0x410>)
 80029c4:	f7fe fb22 	bl	800100c <mpu6500_read_gyro_raw>

	// Apply bias correction to Gyro raw data
	int16_t gyro_x_corrected_raw = g_gyro_x_raw - g_gyro_x_bias_raw;
 80029c8:	4ba1      	ldr	r3, [pc, #644]	@ (8002c50 <TIM5_IRQHandler+0x410>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002c54 <TIM5_IRQHandler+0x414>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	b29b      	uxth	r3, r3
 80029dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t gyro_y_corrected_raw = g_gyro_y_raw - g_gyro_y_bias_raw;
 80029de:	4b9b      	ldr	r3, [pc, #620]	@ (8002c4c <TIM5_IRQHandler+0x40c>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002c58 <TIM5_IRQHandler+0x418>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t gyro_z_corrected_raw = g_gyro_z_raw - g_gyro_z_bias_raw;
 80029f4:	4b94      	ldr	r3, [pc, #592]	@ (8002c48 <TIM5_IRQHandler+0x408>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b21b      	sxth	r3, r3
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b97      	ldr	r3, [pc, #604]	@ (8002c5c <TIM5_IRQHandler+0x41c>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	847b      	strh	r3, [r7, #34]	@ 0x22

	// Convert bias-corrected Gyro data and raw Accel data to physical units
	float accel_x_g = (float)g_accel_x_raw / ACCEL_SENSITIVITY_2G;
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c44 <TIM5_IRQHandler+0x404>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a18:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8002c60 <TIM5_IRQHandler+0x420>
 8002a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a20:	edc7 7a07 	vstr	s15, [r7, #28]
	float accel_y_g = (float)g_accel_y_raw / ACCEL_SENSITIVITY_2G;
 8002a24:	4b86      	ldr	r3, [pc, #536]	@ (8002c40 <TIM5_IRQHandler+0x400>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a32:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8002c60 <TIM5_IRQHandler+0x420>
 8002a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3a:	edc7 7a06 	vstr	s15, [r7, #24]
	float accel_z_g = (float)g_accel_z_raw / ACCEL_SENSITIVITY_2G;
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <TIM5_IRQHandler+0x3fc>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a4c:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8002c60 <TIM5_IRQHandler+0x420>
 8002a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a54:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	g_gyro_x_dps = (float)gyro_x_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Pitch rate
 8002a58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a64:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002c64 <TIM5_IRQHandler+0x424>
 8002a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <TIM5_IRQHandler+0x428>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_y_dps = (float)gyro_y_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Roll rate
 8002a72:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002c64 <TIM5_IRQHandler+0x424>
 8002a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a86:	4b79      	ldr	r3, [pc, #484]	@ (8002c6c <TIM5_IRQHandler+0x42c>)
 8002a88:	edc3 7a00 	vstr	s15, [r3]
	g_gyro_z_dps = (float)gyro_z_corrected_raw / GYRO_SENSITIVITY_2000DPS; // Yaw rate
 8002a8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a98:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8002c64 <TIM5_IRQHandler+0x424>
 8002a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa0:	4b73      	ldr	r3, [pc, #460]	@ (8002c70 <TIM5_IRQHandler+0x430>)
 8002aa2:	edc3 7a00 	vstr	s15, [r3]

	// Calculate accelerometer angle (Pitch)
	if (accel_z_g == 0.0f) accel_z_g = 0.001f;
 8002aa6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002aaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d101      	bne.n	8002ab8 <TIM5_IRQHandler+0x278>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <TIM5_IRQHandler+0x434>)
 8002ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	g_accel_angle = atan2f(accel_x_g, accel_z_g) * (180.0f / M_PI);
 8002ab8:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 8002abc:	ed97 0a07 	vldr	s0, [r7, #28]
 8002ac0:	f008 f9aa 	bl	800ae18 <atan2f>
 8002ac4:	eef0 7a40 	vmov.f32	s15, s0
 8002ac8:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002c34 <TIM5_IRQHandler+0x3f4>
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <TIM5_IRQHandler+0x438>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
	g_accel_angle -= g_accel_pitch_bias_deg;
 8002ad6:	4b69      	ldr	r3, [pc, #420]	@ (8002c7c <TIM5_IRQHandler+0x43c>)
 8002ad8:	edd3 7a00 	vldr	s15, [r3]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <TIM5_IRQHandler+0x438>)
 8002ade:	ed93 7a00 	vldr	s14, [r3]
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	4b64      	ldr	r3, [pc, #400]	@ (8002c78 <TIM5_IRQHandler+0x438>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]

	// Sensor fusion (Complementary Filter)
	g_pitch_angle = COMPLEMENTARY_FILTER_KP * (g_pitch_angle + g_gyro_x_dps * CONTROL_LOOP_PERIOD_S) + (1.0f - COMPLEMENTARY_FILTER_KP) * g_accel_angle;
 8002aec:	4b5e      	ldr	r3, [pc, #376]	@ (8002c68 <TIM5_IRQHandler+0x428>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002c18 <TIM5_IRQHandler+0x3d8>
 8002af6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002afa:	4b61      	ldr	r3, [pc, #388]	@ (8002c80 <TIM5_IRQHandler+0x440>)
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002c84 <TIM5_IRQHandler+0x444>
 8002b08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b0c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8002c84 <TIM5_IRQHandler+0x444>
 8002b10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b18:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <TIM5_IRQHandler+0x438>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b26:	4b56      	ldr	r3, [pc, #344]	@ (8002c80 <TIM5_IRQHandler+0x440>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	// -------------------------------------------------------------------------
	// 速度环 PID 控制 BEGIN
	// -------------------------------------------------------------------------

	// 1. 计算速度误差
	float speed_error = g_target_linear_speed_mps - g_robot_linear_speed_mps;
 8002b2c:	4b56      	ldr	r3, [pc, #344]	@ (8002c88 <TIM5_IRQHandler+0x448>)
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <TIM5_IRQHandler+0x3ec>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3c:	edc7 7a05 	vstr	s15, [r7, #20]

	// 2. 累积积分误差并进行抗积分饱和 (Anti-Windup)
	g_speed_integral_error += speed_error * CONTROL_LOOP_PERIOD_S;
 8002b40:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002c18 <TIM5_IRQHandler+0x3d8>
 8002b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	4b4d      	ldr	r3, [pc, #308]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b58:	edc3 7a00 	vstr	s15, [r3]
	// 限制积分项的累积，防止电机长时间饱和导致过冲
	if (g_speed_integral_error > INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = INTEGRAL_ERROR_MAX_ABS;
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002c90 <TIM5_IRQHandler+0x450>
 8002b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	dd02      	ble.n	8002b76 <TIM5_IRQHandler+0x336>
 8002b70:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b72:	4a48      	ldr	r2, [pc, #288]	@ (8002c94 <TIM5_IRQHandler+0x454>)
 8002b74:	601a      	str	r2, [r3, #0]
	if (g_speed_integral_error < -INTEGRAL_ERROR_MAX_ABS) g_speed_integral_error = -INTEGRAL_ERROR_MAX_ABS;
 8002b76:	4b45      	ldr	r3, [pc, #276]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002c98 <TIM5_IRQHandler+0x458>
 8002b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b88:	d502      	bpl.n	8002b90 <TIM5_IRQHandler+0x350>
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002b8c:	4a43      	ldr	r2, [pc, #268]	@ (8002c9c <TIM5_IRQHandler+0x45c>)
 8002b8e:	601a      	str	r2, [r3, #0]

	// 3. 计算微分项 (使用当前速度的导数，而不是误差的导数，更稳定)
	// 速度的导数就是加速度
	float speed_derivative_term = (g_robot_linear_speed_mps - g_speed_prev_linear_speed_mps) / CONTROL_LOOP_PERIOD_S;
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <TIM5_IRQHandler+0x3ec>)
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <TIM5_IRQHandler+0x460>)
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002c18 <TIM5_IRQHandler+0x3d8>
 8002ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba8:	edc7 7a04 	vstr	s15, [r7, #16]
	g_speed_prev_linear_speed_mps = g_robot_linear_speed_mps; // 更新上一次速度
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <TIM5_IRQHandler+0x3ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca0 <TIM5_IRQHandler+0x460>)
 8002bb2:	6013      	str	r3, [r2, #0]

	// 4. 计算速度环 PID 输出
	// 这里的输出是期望的倾斜角度（度）
	float speed_pid_output = g_speed_kp * speed_error +
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <TIM5_IRQHandler+0x464>)
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
	                         g_speed_ki * g_speed_integral_error - // 积分项
 8002bc2:	4b39      	ldr	r3, [pc, #228]	@ (8002ca8 <TIM5_IRQHandler+0x468>)
 8002bc4:	edd3 6a00 	vldr	s13, [r3]
 8002bc8:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <TIM5_IRQHandler+0x44c>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 8002bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
	                         g_speed_kd * speed_derivative_term;   // 微分项，注意这里是负号，因为我们希望通过反向的加速度来减小速度偏差
 8002bd6:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <TIM5_IRQHandler+0x46c>)
 8002bd8:	edd3 6a00 	vldr	s13, [r3]
 8002bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_pid_output = g_speed_kp * speed_error +
 8002be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
//    printf("speed_pid_output: %.2f\r\n", speed_pid_output);

	// 5. 限制速度环PID输出，作为平衡环的目标倾斜角度
	// 确保目标角度不会过大，防止小车摔倒
	if (speed_pid_output > SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = SPEED_PID_OUTPUT_MAX_DEG;
 8002bec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002bf0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	dd5a      	ble.n	8002cb4 <TIM5_IRQHandler+0x474>
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <TIM5_IRQHandler+0x470>)
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c02:	e057      	b.n	8002cb4 <TIM5_IRQHandler+0x474>
 8002c04:	2000077c 	.word	0x2000077c
 8002c08:	20000780 	.word	0x20000780
 8002c0c:	20000778 	.word	0x20000778
 8002c10:	2000077a 	.word	0x2000077a
 8002c14:	47f00000 	.word	0x47f00000
 8002c18:	3c23d70a 	.word	0x3c23d70a
 8002c1c:	20000784 	.word	0x20000784
 8002c20:	20000788 	.word	0x20000788
 8002c24:	3e5692c3 	.word	0x3e5692c3
 8002c28:	3e5692c3 	.word	0x3e5692c3
 8002c2c:	2000078c 	.word	0x2000078c
 8002c30:	3e3126e9 	.word	0x3e3126e9
 8002c34:	42652ee0 	.word	0x42652ee0
 8002c38:	20000790 	.word	0x20000790
 8002c3c:	2000074a 	.word	0x2000074a
 8002c40:	20000748 	.word	0x20000748
 8002c44:	20000746 	.word	0x20000746
 8002c48:	20000750 	.word	0x20000750
 8002c4c:	2000074e 	.word	0x2000074e
 8002c50:	2000074c 	.word	0x2000074c
 8002c54:	20000752 	.word	0x20000752
 8002c58:	20000754 	.word	0x20000754
 8002c5c:	20000756 	.word	0x20000756
 8002c60:	46800000 	.word	0x46800000
 8002c64:	41833333 	.word	0x41833333
 8002c68:	20000764 	.word	0x20000764
 8002c6c:	20000768 	.word	0x20000768
 8002c70:	2000076c 	.word	0x2000076c
 8002c74:	3a83126f 	.word	0x3a83126f
 8002c78:	20000760 	.word	0x20000760
 8002c7c:	20000758 	.word	0x20000758
 8002c80:	2000075c 	.word	0x2000075c
 8002c84:	3f7ae148 	.word	0x3f7ae148
 8002c88:	20000794 	.word	0x20000794
 8002c8c:	20000798 	.word	0x20000798
 8002c90:	3dcccccd 	.word	0x3dcccccd
 8002c94:	3dcccccd 	.word	0x3dcccccd
 8002c98:	bdcccccd 	.word	0xbdcccccd
 8002c9c:	bdcccccd 	.word	0xbdcccccd
 8002ca0:	2000079c 	.word	0x2000079c
 8002ca4:	20000010 	.word	0x20000010
 8002ca8:	20000014 	.word	0x20000014
 8002cac:	20000018 	.word	0x20000018
 8002cb0:	40a00000 	.word	0x40a00000
	if (speed_pid_output < -SPEED_PID_OUTPUT_MAX_DEG) speed_pid_output = -SPEED_PID_OUTPUT_MAX_DEG;
 8002cb4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002cb8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8002cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d501      	bpl.n	8002cca <TIM5_IRQHandler+0x48a>
 8002cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e40 <TIM5_IRQHandler+0x600>)
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48

	// 将速度环的输出作为平衡环的目标角度
	// 如果小车向前加速，speed_error为负，speed_pid_output为负，则g_target_pitch_angle为负，
	// 意味着期望小车向后倾斜以减速。
	g_target_pitch_angle = speed_pid_output;
 8002cca:	4a5e      	ldr	r2, [pc, #376]	@ (8002e44 <TIM5_IRQHandler+0x604>)
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cce:	6013      	str	r3, [r2, #0]

	// PID Control Calculation
	// PID inputs: Pitch error (current angle - target angle) and Pitch rate (g_gyro_x_dps)

	// Note: g_target_pitch_angle is now dynamically set by the speed loop
	float pitch_error = g_target_pitch_angle - g_pitch_angle; // Angle error for P and I terms
 8002cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e44 <TIM5_IRQHandler+0x604>)
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e48 <TIM5_IRQHandler+0x608>)
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce0:	edc7 7a03 	vstr	s15, [r7, #12]

	// **关键修正：平衡环D项符号**
	// 如果小车向前倾斜 (g_gyro_x_dps > 0)，需要向后推以减小角速度，所以D项贡献应为负。
	float control_output = g_balance_kp * pitch_error - g_balance_kd * g_gyro_x_dps; // ***重要：g_balance_kd前加负号***
 8002ce4:	4b59      	ldr	r3, [pc, #356]	@ (8002e4c <TIM5_IRQHandler+0x60c>)
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <TIM5_IRQHandler+0x610>)
 8002cf4:	edd3 6a00 	vldr	s13, [r3]
 8002cf8:	4b56      	ldr	r3, [pc, #344]	@ (8002e54 <TIM5_IRQHandler+0x614>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	edc7 7a02 	vstr	s15, [r7, #8]

	// Map Control Output to Motor Speed Percentage
	int16_t motor_speed = (int16_t)control_output;
 8002d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d12:	ee17 3a90 	vmov	r3, s15
 8002d16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	// **处理电机最小启动阈值（死区补偿）**
	// 如果计算出的速度在0和最小启动阈值之间（非零），将其提升到最小阈值
	if (motor_speed > 0 && motor_speed < MIN_MOTOR_SPEED_PERCENTAGE) {
 8002d1a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dd07      	ble.n	8002d32 <TIM5_IRQHandler+0x4f2>
 8002d22:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	dc03      	bgt.n	8002d32 <TIM5_IRQHandler+0x4f2>
	    motor_speed = MIN_MOTOR_SPEED_PERCENTAGE;
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002d30:	e00c      	b.n	8002d4c <TIM5_IRQHandler+0x50c>
	} else if (motor_speed < 0 && motor_speed > -MIN_MOTOR_SPEED_PERCENTAGE) {
 8002d32:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da08      	bge.n	8002d4c <TIM5_IRQHandler+0x50c>
 8002d3a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d3e:	f113 0f04 	cmn.w	r3, #4
 8002d42:	db03      	blt.n	8002d4c <TIM5_IRQHandler+0x50c>
	    motor_speed = -MIN_MOTOR_SPEED_PERCENTAGE;
 8002d44:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002d48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	}
	// 如果control_output接近0，则强制motor_speed为0，防止死区补偿导致在静止时抖动
	// 注意：这里使用 fabs(control_output) < FLOAT_ZERO_THRESHOLD 进行浮点数比较
	if (fabs(control_output) < FLOAT_ZERO_THRESHOLD) {
 8002d4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d50:	eef0 7ae7 	vabs.f32	s15, s15
 8002d54:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002e58 <TIM5_IRQHandler+0x618>
 8002d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d502      	bpl.n	8002d68 <TIM5_IRQHandler+0x528>
	    motor_speed = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	}


	// Apply motor speed limits (-100 to 100 percent)
	if (motor_speed > 100) motor_speed = 100;
 8002d68:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d6c:	2b64      	cmp	r3, #100	@ 0x64
 8002d6e:	dd02      	ble.n	8002d76 <TIM5_IRQHandler+0x536>
 8002d70:	2364      	movs	r3, #100	@ 0x64
 8002d72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	if (motor_speed < -100) motor_speed = -100;
 8002d76:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d7a:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002d7e:	da03      	bge.n	8002d88 <TIM5_IRQHandler+0x548>
 8002d80:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8002d84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	// Basic Safety Check: Stop motor if tilt angle exceeds a safe threshold
	float safety_angle_threshold = 30.0f; // Degrees (adjust as needed, e.g., 30 degrees)
 8002d88:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <TIM5_IRQHandler+0x61c>)
 8002d8a:	607b      	str	r3, [r7, #4]

	if (fabs(g_pitch_angle) > safety_angle_threshold) {
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e48 <TIM5_IRQHandler+0x608>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	eef0 7ae7 	vabs.f32	s15, s15
 8002d96:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	d506      	bpl.n	8002db2 <TIM5_IRQHandler+0x572>
	    // Stop motors if the robot is falling
	    g_motor_output_left = 0;
 8002da4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e60 <TIM5_IRQHandler+0x620>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	801a      	strh	r2, [r3, #0]
	    g_motor_output_right = 0;
 8002daa:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <TIM5_IRQHandler+0x624>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e037      	b.n	8002e22 <TIM5_IRQHandler+0x5e2>
	    // TODO: Add other safety actions like an alarm or state change
	}
	// 将 "=" 改为 "=="
	// 同时，为了浮点数比较的健壮性，使用 fabs 和 FLOAT_ZERO_THRESHOLD
	else if (fabs(left_right - 1.0f) < FLOAT_ZERO_THRESHOLD) { // 检查是否是左转指令
 8002db2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <TIM5_IRQHandler+0x628>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dc0:	eef0 7ae7 	vabs.f32	s15, s15
 8002dc4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002e58 <TIM5_IRQHandler+0x618>
 8002dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	d507      	bpl.n	8002de2 <TIM5_IRQHandler+0x5a2>
	    g_motor_output_left = motor_speed;
 8002dd2:	4a23      	ldr	r2, [pc, #140]	@ (8002e60 <TIM5_IRQHandler+0x620>)
 8002dd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002dd8:	8013      	strh	r3, [r2, #0]
	    g_motor_output_right = 0;
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <TIM5_IRQHandler+0x624>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e01f      	b.n	8002e22 <TIM5_IRQHandler+0x5e2>
	}
	else if (fabs(left_right - 2.0f) < FLOAT_ZERO_THRESHOLD) { // 检查是否是右转指令
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <TIM5_IRQHandler+0x628>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002dec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df0:	eef0 7ae7 	vabs.f32	s15, s15
 8002df4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002e58 <TIM5_IRQHandler+0x618>
 8002df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d507      	bpl.n	8002e12 <TIM5_IRQHandler+0x5d2>
		g_motor_output_left = 0;
 8002e02:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <TIM5_IRQHandler+0x620>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
	    g_motor_output_right = motor_speed;
 8002e08:	4a16      	ldr	r2, [pc, #88]	@ (8002e64 <TIM5_IRQHandler+0x624>)
 8002e0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e0e:	8013      	strh	r3, [r2, #0]
 8002e10:	e007      	b.n	8002e22 <TIM5_IRQHandler+0x5e2>

	}
	else {
	    // If within safe angle, apply the calculated motor speed
	    g_motor_output_left = motor_speed;
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <TIM5_IRQHandler+0x620>)
 8002e14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e18:	8013      	strh	r3, [r2, #0]
	    g_motor_output_right = motor_speed;
 8002e1a:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <TIM5_IRQHandler+0x624>)
 8002e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e20:	8013      	strh	r3, [r2, #0]
	}

	// Apply Motor Speed using the Motor module functions
	    Car_Move(g_motor_output_left, g_motor_output_right);
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <TIM5_IRQHandler+0x620>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <TIM5_IRQHandler+0x624>)
 8002e2a:	8812      	ldrh	r2, [r2, #0]
 8002e2c:	b212      	sxth	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f9a1 	bl	8002178 <Car_Move>


	// --- PID control calculation and Motor application END ---

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	3758      	adds	r7, #88	@ 0x58
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	c0a00000 	.word	0xc0a00000
 8002e44:	20000770 	.word	0x20000770
 8002e48:	2000075c 	.word	0x2000075c
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	2000000c 	.word	0x2000000c
 8002e54:	20000764 	.word	0x20000764
 8002e58:	3a83126f 	.word	0x3a83126f
 8002e5c:	41f00000 	.word	0x41f00000
 8002e60:	20000774 	.word	0x20000774
 8002e64:	20000776 	.word	0x20000776
 8002e68:	2000001c 	.word	0x2000001c

08002e6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e70:	4802      	ldr	r0, [pc, #8]	@ (8002e7c <USART6_IRQHandler+0x10>)
 8002e72:	f004 f8e9 	bl	8007048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000090c 	.word	0x2000090c

08002e80 <_getpid>:
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	2301      	movs	r3, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_kill>:
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	f005 ffa1 	bl	8008de0 <__errno>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2216      	movs	r2, #22
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_exit>:
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ffe7 	bl	8002e90 <_kill>
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <_exit+0x12>

08002ec6 <_read>:
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e00a      	b.n	8002eee <_read+0x28>
 8002ed8:	f3af 8000 	nop.w
 8002edc:	4601      	mov	r1, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	60ba      	str	r2, [r7, #8]
 8002ee4:	b2ca      	uxtb	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbf0      	blt.n	8002ed8 <_read+0x12>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_write>:
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e009      	b.n	8002f26 <_write+0x26>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	60ba      	str	r2, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fc0a 	bl	8001734 <__io_putchar>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	dbf1      	blt.n	8002f12 <_write+0x12>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_close>:
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_fstat>:
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	2300      	movs	r3, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_isatty>:
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_lseek>:
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	2300      	movs	r3, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <_sbrk>:
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <_sbrk+0x5c>)
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <_sbrk+0x60>)
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	4b13      	ldr	r3, [pc, #76]	@ (8003004 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <_sbrk+0x22>
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <_sbrk+0x64>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <_sbrk+0x68>)
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <_sbrk+0x40>
 8002fd0:	f005 ff06 	bl	8008de0 <__errno>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e009      	b.n	8002ff4 <_sbrk+0x54>
 8002fe0:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <_sbrk+0x64>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	4a05      	ldr	r2, [pc, #20]	@ (8003004 <_sbrk+0x64>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20018000 	.word	0x20018000
 8003000:	00000400 	.word	0x00000400
 8003004:	200007a0 	.word	0x200007a0
 8003008:	20000aa8 	.word	0x20000aa8

0800300c <SystemInit>:
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <SystemInit+0x20>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	4a05      	ldr	r2, [pc, #20]	@ (800302c <SystemInit+0x20>)
 8003018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800301c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b096      	sub	sp, #88	@ 0x58
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003036:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003044:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	611a      	str	r2, [r3, #16]
 800305e:	615a      	str	r2, [r3, #20]
 8003060:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2220      	movs	r2, #32
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fe39 	bl	8008ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800306e:	4b51      	ldr	r3, [pc, #324]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003070:	4a51      	ldr	r2, [pc, #324]	@ (80031b8 <MX_TIM1_Init+0x188>)
 8003072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003074:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003076:	2253      	movs	r2, #83	@ 0x53
 8003078:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b4e      	ldr	r3, [pc, #312]	@ (80031b4 <MX_TIM1_Init+0x184>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 8003080:	4b4c      	ldr	r3, [pc, #304]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003082:	f240 3247 	movw	r2, #839	@ 0x347
 8003086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <MX_TIM1_Init+0x184>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800308e:	4b49      	ldr	r3, [pc, #292]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003094:	4b47      	ldr	r3, [pc, #284]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800309a:	4846      	ldr	r0, [pc, #280]	@ (80031b4 <MX_TIM1_Init+0x184>)
 800309c:	f002 fd8c 	bl	8005bb8 <HAL_TIM_Base_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030a6:	f7fe ff89 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b4:	4619      	mov	r1, r3
 80030b6:	483f      	ldr	r0, [pc, #252]	@ (80031b4 <MX_TIM1_Init+0x184>)
 80030b8:	f003 fa20 	bl	80064fc <HAL_TIM_ConfigClockSource>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030c2:	f7fe ff7b 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030c6:	483b      	ldr	r0, [pc, #236]	@ (80031b4 <MX_TIM1_Init+0x184>)
 80030c8:	f002 fe28 	bl	8005d1c <HAL_TIM_PWM_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80030d2:	f7fe ff73 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030e2:	4619      	mov	r1, r3
 80030e4:	4833      	ldr	r0, [pc, #204]	@ (80031b4 <MX_TIM1_Init+0x184>)
 80030e6:	f003 fddb 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80030f0:	f7fe ff64 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f4:	2360      	movs	r3, #96	@ 0x60
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003114:	2200      	movs	r2, #0
 8003116:	4619      	mov	r1, r3
 8003118:	4826      	ldr	r0, [pc, #152]	@ (80031b4 <MX_TIM1_Init+0x184>)
 800311a:	f003 f92d 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003124:	f7fe ff4a 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800312c:	2204      	movs	r2, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4820      	ldr	r0, [pc, #128]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003132:	f003 f921 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800313c:	f7fe ff3e 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003144:	2208      	movs	r2, #8
 8003146:	4619      	mov	r1, r3
 8003148:	481a      	ldr	r0, [pc, #104]	@ (80031b4 <MX_TIM1_Init+0x184>)
 800314a:	f003 f915 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003154:	f7fe ff32 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800315c:	220c      	movs	r2, #12
 800315e:	4619      	mov	r1, r3
 8003160:	4814      	ldr	r0, [pc, #80]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003162:	f003 f909 	bl	8006378 <HAL_TIM_PWM_ConfigChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800316c:	f7fe ff26 	bl	8001fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003188:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800318a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800318e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4807      	ldr	r0, [pc, #28]	@ (80031b4 <MX_TIM1_Init+0x184>)
 8003196:	f003 fdf1 	bl	8006d7c <HAL_TIMEx_ConfigBreakDeadTime>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80031a0:	f7fe ff0c 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031a4:	4803      	ldr	r0, [pc, #12]	@ (80031b4 <MX_TIM1_Init+0x184>)
 80031a6:	f000 f9bb 	bl	8003520 <HAL_TIM_MspPostInit>

}
 80031aa:	bf00      	nop
 80031ac:	3758      	adds	r7, #88	@ 0x58
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200007a4 	.word	0x200007a4
 80031b8:	40010000 	.word	0x40010000

080031bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fd88 	bl	8008ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031d8:	4b20      	ldr	r3, [pc, #128]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <MX_TIM3_Init+0xa4>)
 80031dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031de:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <MX_TIM3_Init+0xa0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031fe:	2303      	movs	r3, #3
 8003200:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003206:	2301      	movs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003216:	2301      	movs	r3, #1
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800321a:	2300      	movs	r3, #0
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	4619      	mov	r1, r3
 8003228:	480c      	ldr	r0, [pc, #48]	@ (800325c <MX_TIM3_Init+0xa0>)
 800322a:	f002 fe81 	bl	8005f30 <HAL_TIM_Encoder_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003234:	f7fe fec2 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4805      	ldr	r0, [pc, #20]	@ (800325c <MX_TIM3_Init+0xa0>)
 8003246:	f003 fd2b 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003250:	f7fe feb4 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	3730      	adds	r7, #48	@ 0x30
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200007ec 	.word	0x200007ec
 8003260:	40000400 	.word	0x40000400

08003264 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	@ 0x30
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800326a:	f107 030c 	add.w	r3, r7, #12
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f005 fd34 	bl	8008ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003280:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <MX_TIM4_Init+0xa0>)
 8003282:	4a21      	ldr	r2, [pc, #132]	@ (8003308 <MX_TIM4_Init+0xa4>)
 8003284:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003286:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <MX_TIM4_Init+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <MX_TIM4_Init+0xa0>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003292:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <MX_TIM4_Init+0xa0>)
 8003294:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003298:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <MX_TIM4_Init+0xa0>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <MX_TIM4_Init+0xa0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032a6:	2303      	movs	r3, #3
 80032a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032be:	2301      	movs	r3, #1
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	4619      	mov	r1, r3
 80032d0:	480c      	ldr	r0, [pc, #48]	@ (8003304 <MX_TIM4_Init+0xa0>)
 80032d2:	f002 fe2d 	bl	8005f30 <HAL_TIM_Encoder_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80032dc:	f7fe fe6e 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	@ (8003304 <MX_TIM4_Init+0xa0>)
 80032ee:	f003 fcd7 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80032f8:	f7fe fe60 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	3730      	adds	r7, #48	@ 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000834 	.word	0x20000834
 8003308:	40000800 	.word	0x40000800

0800330c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	463b      	mov	r3, r7
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <MX_TIM5_Init+0x94>)
 800332a:	4a1e      	ldr	r2, [pc, #120]	@ (80033a4 <MX_TIM5_Init+0x98>)
 800332c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800332e:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <MX_TIM5_Init+0x94>)
 8003330:	2253      	movs	r2, #83	@ 0x53
 8003332:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <MX_TIM5_Init+0x94>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 800333a:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <MX_TIM5_Init+0x94>)
 800333c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003340:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b17      	ldr	r3, [pc, #92]	@ (80033a0 <MX_TIM5_Init+0x94>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <MX_TIM5_Init+0x94>)
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800334e:	4814      	ldr	r0, [pc, #80]	@ (80033a0 <MX_TIM5_Init+0x94>)
 8003350:	f002 fc32 	bl	8005bb8 <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800335a:	f7fe fe2f 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003364:	f107 0308 	add.w	r3, r7, #8
 8003368:	4619      	mov	r1, r3
 800336a:	480d      	ldr	r0, [pc, #52]	@ (80033a0 <MX_TIM5_Init+0x94>)
 800336c:	f003 f8c6 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003376:	f7fe fe21 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003382:	463b      	mov	r3, r7
 8003384:	4619      	mov	r1, r3
 8003386:	4806      	ldr	r0, [pc, #24]	@ (80033a0 <MX_TIM5_Init+0x94>)
 8003388:	f003 fc8a 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003392:	f7fe fe13 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	2000087c 	.word	0x2000087c
 80033a4:	40000c00 	.word	0x40000c00

080033a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <HAL_TIM_Base_MspInit+0x70>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10e      	bne.n	80033d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	4a16      	ldr	r2, [pc, #88]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80033d6:	e01a      	b.n	800340e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a10      	ldr	r2, [pc, #64]	@ (8003420 <HAL_TIM_Base_MspInit+0x78>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d115      	bne.n	800340e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a0c      	ldr	r2, [pc, #48]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033ec:	f043 0308 	orr.w	r3, r3, #8
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_TIM_Base_MspInit+0x74>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2101      	movs	r1, #1
 8003402:	2032      	movs	r0, #50	@ 0x32
 8003404:	f000 fb5f 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003408:	2032      	movs	r0, #50	@ 0x32
 800340a:	f000 fb78 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40023800 	.word	0x40023800
 8003420:	40000c00 	.word	0x40000c00

08003424 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	@ 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a32      	ldr	r2, [pc, #200]	@ (800350c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d12c      	bne.n	80034a0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6413      	str	r3, [r2, #64]	@ 0x40
 8003456:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	4b2a      	ldr	r3, [pc, #168]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a29      	ldr	r2, [pc, #164]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800347e:	23c0      	movs	r3, #192	@ 0xc0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348e:	2302      	movs	r3, #2
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	f107 031c 	add.w	r3, r7, #28
 8003496:	4619      	mov	r1, r3
 8003498:	481e      	ldr	r0, [pc, #120]	@ (8003514 <HAL_TIM_Encoder_MspInit+0xf0>)
 800349a:	f000 fbeb 	bl	8003c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800349e:	e030      	b.n	8003502 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_TIM_Encoder_MspInit+0xf4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d12b      	bne.n	8003502 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_TIM_Encoder_MspInit+0xec>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e2:	23c0      	movs	r3, #192	@ 0xc0
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034f2:	2302      	movs	r3, #2
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	4807      	ldr	r0, [pc, #28]	@ (800351c <HAL_TIM_Encoder_MspInit+0xf8>)
 80034fe:	f000 fbb9 	bl	8003c74 <HAL_GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	3730      	adds	r7, #48	@ 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40000400 	.word	0x40000400
 8003510:	40023800 	.word	0x40023800
 8003514:	40020000 	.word	0x40020000
 8003518:	40000800 	.word	0x40000800
 800351c:	40020400 	.word	0x40020400

08003520 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 030c 	add.w	r3, r7, #12
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <HAL_TIM_MspPostInit+0x68>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11e      	bne.n	8003580 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_TIM_MspPostInit+0x6c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a10      	ldr	r2, [pc, #64]	@ (800358c <HAL_TIM_MspPostInit+0x6c>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <HAL_TIM_MspPostInit+0x6c>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800355e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003570:	2301      	movs	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4619      	mov	r1, r3
 800357a:	4805      	ldr	r0, [pc, #20]	@ (8003590 <HAL_TIM_MspPostInit+0x70>)
 800357c:	f000 fb7a 	bl	8003c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000
 800358c:	40023800 	.word	0x40023800
 8003590:	40020000 	.word	0x40020000

08003594 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003598:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 800359a:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <MX_USART2_UART_Init+0x50>)
 800359c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800359e:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035b8:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035ba:	220c      	movs	r2, #12
 80035bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035ca:	4805      	ldr	r0, [pc, #20]	@ (80035e0 <MX_USART2_UART_Init+0x4c>)
 80035cc:	f003 fc3c 	bl	8006e48 <HAL_UART_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035d6:	f7fe fcf1 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200008c4 	.word	0x200008c4
 80035e4:	40004400 	.word	0x40004400

080035e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035ec:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <MX_USART6_UART_Init+0x50>)
 80035f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80035f2:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 80035f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80035f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 800360e:	220c      	movs	r2, #12
 8003610:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003612:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800361e:	4805      	ldr	r0, [pc, #20]	@ (8003634 <MX_USART6_UART_Init+0x4c>)
 8003620:	f003 fc12 	bl	8006e48 <HAL_UART_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800362a:	f7fe fcc7 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000090c 	.word	0x2000090c
 8003638:	40011400 	.word	0x40011400

0800363c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	@ 0x30
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <HAL_UART_MspInit+0xf8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d12c      	bne.n	80036b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	4b35      	ldr	r3, [pc, #212]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a34      	ldr	r2, [pc, #208]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 8003668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	4b2e      	ldr	r3, [pc, #184]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6313      	str	r3, [r2, #48]	@ 0x30
 800368a:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003696:	230c      	movs	r3, #12
 8003698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	2303      	movs	r3, #3
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036a6:	2307      	movs	r3, #7
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	4619      	mov	r1, r3
 80036b0:	4822      	ldr	r0, [pc, #136]	@ (800373c <HAL_UART_MspInit+0x100>)
 80036b2:	f000 fadf 	bl	8003c74 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80036b6:	e038      	b.n	800372a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <HAL_UART_MspInit+0x104>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d133      	bne.n	800372a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036d2:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ee:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_UART_MspInit+0xfc>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036fa:	23c0      	movs	r3, #192	@ 0xc0
 80036fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800370a:	2308      	movs	r3, #8
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4619      	mov	r1, r3
 8003714:	480b      	ldr	r0, [pc, #44]	@ (8003744 <HAL_UART_MspInit+0x108>)
 8003716:	f000 faad 	bl	8003c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2101      	movs	r1, #1
 800371e:	2047      	movs	r0, #71	@ 0x47
 8003720:	f000 f9d1 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003724:	2047      	movs	r0, #71	@ 0x47
 8003726:	f000 f9ea 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3730      	adds	r7, #48	@ 0x30
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40004400 	.word	0x40004400
 8003738:	40023800 	.word	0x40023800
 800373c:	40020000 	.word	0x40020000
 8003740:	40011400 	.word	0x40011400
 8003744:	40020800 	.word	0x40020800

08003748 <Reset_Handler>:
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003780 <LoopFillZerobss+0xe>
 800374c:	f7ff fc5e 	bl	800300c <SystemInit>
 8003750:	480c      	ldr	r0, [pc, #48]	@ (8003784 <LoopFillZerobss+0x12>)
 8003752:	490d      	ldr	r1, [pc, #52]	@ (8003788 <LoopFillZerobss+0x16>)
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <LoopFillZerobss+0x1a>)
 8003756:	2300      	movs	r3, #0
 8003758:	e002      	b.n	8003760 <LoopCopyDataInit>

0800375a <CopyDataInit>:
 800375a:	58d4      	ldr	r4, [r2, r3]
 800375c:	50c4      	str	r4, [r0, r3]
 800375e:	3304      	adds	r3, #4

08003760 <LoopCopyDataInit>:
 8003760:	18c4      	adds	r4, r0, r3
 8003762:	428c      	cmp	r4, r1
 8003764:	d3f9      	bcc.n	800375a <CopyDataInit>
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <LoopFillZerobss+0x1e>)
 8003768:	4c0a      	ldr	r4, [pc, #40]	@ (8003794 <LoopFillZerobss+0x22>)
 800376a:	2300      	movs	r3, #0
 800376c:	e001      	b.n	8003772 <LoopFillZerobss>

0800376e <FillZerobss>:
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	3204      	adds	r2, #4

08003772 <LoopFillZerobss>:
 8003772:	42a2      	cmp	r2, r4
 8003774:	d3fb      	bcc.n	800376e <FillZerobss>
 8003776:	f005 fb39 	bl	8008dec <__libc_init_array>
 800377a:	f7fe f8e1 	bl	8001940 <main>
 800377e:	4770      	bx	lr
 8003780:	20018000 	.word	0x20018000
 8003784:	20000000 	.word	0x20000000
 8003788:	200001f4 	.word	0x200001f4
 800378c:	0800be24 	.word	0x0800be24
 8003790:	200001f4 	.word	0x200001f4
 8003794:	20000aa4 	.word	0x20000aa4

08003798 <ADC_IRQHandler>:
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>
	...

0800379c <HAL_Init>:
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 f973 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>
 80037ca:	2000      	movs	r0, #0
 80037cc:	f000 f808 	bl	80037e0 <HAL_InitTick>
 80037d0:	f7fe ffde 	bl	8002790 <HAL_MspInit>
 80037d4:	2300      	movs	r3, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_InitTick>:
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_InitTick+0x54>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_InitTick+0x58>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f999 	bl	8003b36 <HAL_SYSTICK_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_InitTick+0x2e>
 800380a:	2301      	movs	r3, #1
 800380c:	e00e      	b.n	800382c <HAL_InitTick+0x4c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d80a      	bhi.n	800382a <HAL_InitTick+0x4a>
 8003814:	2200      	movs	r2, #0
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	f000 f953 	bl	8003ac6 <HAL_NVIC_SetPriority>
 8003820:	4a06      	ldr	r2, [pc, #24]	@ (800383c <HAL_InitTick+0x5c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_InitTick+0x4c>
 800382a:	2301      	movs	r3, #1
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000020 	.word	0x20000020
 8003838:	20000028 	.word	0x20000028
 800383c:	20000024 	.word	0x20000024

08003840 <HAL_IncTick>:
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000028 	.word	0x20000028
 8003864:	20000954 	.word	0x20000954

08003868 <HAL_GetTick>:
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
 800386c:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000954 	.word	0x20000954

08003880 <HAL_Delay>:
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d005      	beq.n	80038a6 <HAL_Delay+0x26>
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_Delay+0x44>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	bf00      	nop
 80038a8:	f7ff ffde 	bl	8003868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f7      	bhi.n	80038a8 <HAL_Delay+0x28>
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000028 	.word	0x20000028

080038c8 <__NVIC_SetPriorityGrouping>:
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	@ (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_DisableIRQ>:
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db12      	blt.n	80039a0 <__NVIC_DisableIRQ+0x38>
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	490a      	ldr	r1, [pc, #40]	@ (80039ac <__NVIC_DisableIRQ+0x44>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	3320      	adds	r3, #32
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	bf00      	nop
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	@ (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	@ (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	@ 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	@ 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff05 	bl	80038c8 <__NVIC_SetPriorityGrouping>
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	f7ff ff1a 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff8e 	bl	8003a04 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5d 	bl	80039b0 <__NVIC_SetPriority>
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff0d 	bl	800392c <__NVIC_EnableIRQ>
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_DisableIRQ>:
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff1d 	bl	8003968 <__NVIC_DisableIRQ>
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SYSTICK_Config>:
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff94 	bl	8003a6c <SysTick_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_DMA_Abort>:
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	f7ff fe84 	bl	8003868 <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d008      	beq.n	8003b80 <HAL_DMA_Abort+0x32>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e052      	b.n	8003c26 <HAL_DMA_Abort+0xd8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0216 	bic.w	r2, r2, #22
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <HAL_DMA_Abort+0x62>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_DMA_Abort+0x72>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0208 	bic.w	r2, r2, #8
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e013      	b.n	8003bfa <HAL_DMA_Abort+0xac>
 8003bd2:	f7ff fe49 	bl	8003868 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d90c      	bls.n	8003bfa <HAL_DMA_Abort+0xac>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e015      	b.n	8003c26 <HAL_DMA_Abort+0xd8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e4      	bne.n	8003bd2 <HAL_DMA_Abort+0x84>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	223f      	movs	r2, #63	@ 0x3f
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003c24:	2300      	movs	r3, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_DMA_Abort_IT>:
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_Abort_IT+0x1e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e00c      	b.n	8003c66 <HAL_DMA_Abort_IT+0x38>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2205      	movs	r2, #5
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_GPIO_Init>:
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	@ 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e159      	b.n	8003f44 <HAL_GPIO_Init+0x2d0>
 8003c90:	2201      	movs	r2, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 8148 	bne.w	8003f3e <HAL_GPIO_Init+0x2ca>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d005      	beq.n	8003cc6 <HAL_GPIO_Init+0x52>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d130      	bne.n	8003d28 <HAL_GPIO_Init+0xb4>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 0201 	and.w	r2, r3, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d017      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d123      	bne.n	8003db8 <HAL_GPIO_Init+0x144>
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	08da      	lsrs	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3208      	adds	r2, #8
 8003d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a2 	beq.w	8003f3e <HAL_GPIO_Init+0x2ca>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <HAL_GPIO_Init+0x2e8>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	4a56      	ldr	r2, [pc, #344]	@ (8003f5c <HAL_GPIO_Init+0x2e8>)
 8003e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0a:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <HAL_GPIO_Init+0x2e8>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_GPIO_Init+0x2ec>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a49      	ldr	r2, [pc, #292]	@ (8003f64 <HAL_GPIO_Init+0x2f0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d019      	beq.n	8003e76 <HAL_GPIO_Init+0x202>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a48      	ldr	r2, [pc, #288]	@ (8003f68 <HAL_GPIO_Init+0x2f4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_GPIO_Init+0x1fe>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a47      	ldr	r2, [pc, #284]	@ (8003f6c <HAL_GPIO_Init+0x2f8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_GPIO_Init+0x1fa>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a46      	ldr	r2, [pc, #280]	@ (8003f70 <HAL_GPIO_Init+0x2fc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x1f6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a45      	ldr	r2, [pc, #276]	@ (8003f74 <HAL_GPIO_Init+0x300>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_GPIO_Init+0x1f2>
 8003e62:	2304      	movs	r3, #4
 8003e64:	e008      	b.n	8003e78 <HAL_GPIO_Init+0x204>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e006      	b.n	8003e78 <HAL_GPIO_Init+0x204>
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e004      	b.n	8003e78 <HAL_GPIO_Init+0x204>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e002      	b.n	8003e78 <HAL_GPIO_Init+0x204>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_GPIO_Init+0x204>
 8003e76:	2300      	movs	r3, #0
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	f002 0203 	and.w	r2, r2, #3
 8003e7e:	0092      	lsls	r2, r2, #2
 8003e80:	4093      	lsls	r3, r2
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	4935      	ldr	r1, [pc, #212]	@ (8003f60 <HAL_GPIO_Init+0x2ec>)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003e96:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x246>
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	4a2f      	ldr	r2, [pc, #188]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	6093      	str	r3, [r2, #8]
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x270>
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	60d3      	str	r3, [r2, #12]
 8003eea:	4b23      	ldr	r3, [pc, #140]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x29a>
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	6053      	str	r3, [r2, #4]
 8003f14:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x2c4>
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	4a0f      	ldr	r2, [pc, #60]	@ (8003f78 <HAL_GPIO_Init+0x304>)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3301      	adds	r3, #1
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b0f      	cmp	r3, #15
 8003f48:	f67f aea2 	bls.w	8003c90 <HAL_GPIO_Init+0x1c>
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3724      	adds	r7, #36	@ 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40013800 	.word	0x40013800
 8003f64:	40020000 	.word	0x40020000
 8003f68:	40020400 	.word	0x40020400
 8003f6c:	40020800 	.word	0x40020800
 8003f70:	40020c00 	.word	0x40020c00
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40013c00 	.word	0x40013c00

08003f7c <HAL_GPIO_WritePin>:
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	707b      	strb	r3, [r7, #1]
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x1e>
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
 8003f98:	e003      	b.n	8003fa2 <HAL_GPIO_WritePin+0x26>
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	041a      	lsls	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	619a      	str	r2, [r3, #24]
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_GPIO_TogglePin>:
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	807b      	strh	r3, [r7, #2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	041a      	lsls	r2, r3, #16
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	400b      	ands	r3, r1
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	619a      	str	r2, [r3, #24]
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_I2C_Init>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fb04 	bl	8001618 <HAL_I2C_MspInit>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	@ 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f001 fd8e 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	@ (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	@ (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	@ (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	@ (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	@ (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	@ (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424c:	2300      	movs	r3, #0
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2C_Mem_Write>:
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
 8004286:	f7ff faef 	bl	8003868 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 80d9 	bne.w	800444c <HAL_I2C_Mem_Write+0x1e0>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2319      	movs	r3, #25
 80042a0:	2201      	movs	r2, #1
 80042a2:	496d      	ldr	r1, [pc, #436]	@ (8004458 <HAL_I2C_Mem_Write+0x1ec>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fdb9 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Write+0x48>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0cc      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2C_Mem_Write+0x56>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0c5      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d007      	beq.n	80042e8 <HAL_I2C_Mem_Write+0x7c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2221      	movs	r2, #33	@ 0x21
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a4d      	ldr	r2, [pc, #308]	@ (800445c <HAL_I2C_Mem_Write+0x1f0>)
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800432a:	88f8      	ldrh	r0, [r7, #6]
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fbf0 	bl	8004b20 <I2C_RequestMemoryWrite>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d052      	beq.n	80043ec <HAL_I2C_Mem_Write+0x180>
 8004346:	2301      	movs	r3, #1
 8004348:	e081      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fe7e 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <HAL_I2C_Mem_Write+0x10a>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <HAL_I2C_Mem_Write+0x106>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	2301      	movs	r3, #1
 8004374:	e06b      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	611a      	str	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11b      	bne.n	80043ec <HAL_I2C_Mem_Write+0x180>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_I2C_Mem_Write+0x180>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1aa      	bne.n	800434a <HAL_I2C_Mem_Write+0xde>
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fe71 	bl	80050e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Mem_Write+0x1b4>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Mem_Write+0x1b0>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	2301      	movs	r3, #1
 800441e:	e016      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_I2C_Mem_Write+0x1e2>
 800444c:	2302      	movs	r3, #2
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00100002 	.word	0x00100002
 800445c:	ffff0000 	.word	0xffff0000

08004460 <HAL_I2C_Mem_Read>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	@ 0x30
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
 800447a:	f7ff f9f5 	bl	8003868 <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	f040 8214 	bne.w	80048b6 <HAL_I2C_Mem_Read+0x456>
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2319      	movs	r3, #25
 8004494:	2201      	movs	r2, #1
 8004496:	497b      	ldr	r1, [pc, #492]	@ (8004684 <HAL_I2C_Mem_Read+0x224>)
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fcbf 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Read+0x48>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e207      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x56>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e200      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d007      	beq.n	80044dc <HAL_I2C_Mem_Read+0x7c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2222      	movs	r2, #34	@ 0x22
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a5b      	ldr	r2, [pc, #364]	@ (8004688 <HAL_I2C_Mem_Read+0x228>)
 800451c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800451e:	88f8      	ldrh	r0, [r7, #6]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fb8c 	bl	8004c4c <I2C_RequestMemoryRead>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Mem_Read+0xde>
 800453a:	2301      	movs	r3, #1
 800453c:	e1bc      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <HAL_I2C_Mem_Read+0x10e>
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e190      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004572:	2b01      	cmp	r3, #1
 8004574:	d11b      	bne.n	80045ae <HAL_I2C_Mem_Read+0x14e>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e170      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d11b      	bne.n	80045ee <HAL_I2C_Mem_Read+0x18e>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	e150      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	e144      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	2b03      	cmp	r3, #3
 800460c:	f200 80f1 	bhi.w	80047f2 <HAL_I2C_Mem_Read+0x392>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	2b01      	cmp	r3, #1
 8004616:	d123      	bne.n	8004660 <HAL_I2C_Mem_Read+0x200>
 8004618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fda7 	bl	8005170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Mem_Read+0x1cc>
 8004628:	2301      	movs	r3, #1
 800462a:	e145      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	@ 0x24
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800465e:	e117      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004664:	2b02      	cmp	r3, #2
 8004666:	d14e      	bne.n	8004706 <HAL_I2C_Mem_Read+0x2a6>
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2200      	movs	r2, #0
 8004670:	4906      	ldr	r1, [pc, #24]	@ (800468c <HAL_I2C_Mem_Read+0x22c>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fbd2 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_I2C_Mem_Read+0x230>
 800467e:	2301      	movs	r3, #1
 8004680:	e11a      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 8004682:	bf00      	nop
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000
 800468c:	00010004 	.word	0x00010004
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004704:	e0c4      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	2200      	movs	r2, #0
 800470e:	496c      	ldr	r1, [pc, #432]	@ (80048c0 <HAL_I2C_Mem_Read+0x460>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fb83 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Read+0x2c0>
 800471c:	2301      	movs	r3, #1
 800471e:	e0cb      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	4955      	ldr	r1, [pc, #340]	@ (80048c0 <HAL_I2C_Mem_Read+0x460>)
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fb55 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_I2C_Mem_Read+0x31c>
 8004778:	2301      	movs	r3, #1
 800477a:	e09d      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f0:	e04e      	b.n	8004890 <HAL_I2C_Mem_Read+0x430>
 80047f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fcba 	bl	8005170 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_I2C_Mem_Read+0x3a6>
 8004802:	2301      	movs	r3, #1
 8004804:	e058      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	@ 0x28
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d124      	bne.n	8004890 <HAL_I2C_Mem_Read+0x430>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484a:	2b03      	cmp	r3, #3
 800484c:	d107      	bne.n	800485e <HAL_I2C_Mem_Read+0x3fe>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f aeb6 	bne.w	8004606 <HAL_I2C_Mem_Read+0x1a6>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <HAL_I2C_Mem_Read+0x458>
 80048b6:	2302      	movs	r3, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	@ 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	00010004 	.word	0x00010004

080048c4 <HAL_I2C_IsDeviceReady>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	460b      	mov	r3, r1
 80048d2:	817b      	strh	r3, [r7, #10]
 80048d4:	f7fe ffc8 	bl	8003868 <HAL_GetTick>
 80048d8:	61f8      	str	r0, [r7, #28]
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f040 8111 	bne.w	8004b0e <HAL_I2C_IsDeviceReady+0x24a>
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2319      	movs	r3, #25
 80048f2:	2201      	movs	r2, #1
 80048f4:	4988      	ldr	r1, [pc, #544]	@ (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fa90 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_IsDeviceReady+0x42>
 8004902:	2302      	movs	r3, #2
 8004904:	e104      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2C_IsDeviceReady+0x50>
 8004910:	2302      	movs	r3, #2
 8004912:	e0fd      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d007      	beq.n	800493a <HAL_I2C_IsDeviceReady+0x76>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2224      	movs	r2, #36	@ 0x24
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	@ 0x40
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a70      	ldr	r2, [pc, #448]	@ (8004b1c <HAL_I2C_IsDeviceReady+0x258>)
 800495c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa4e 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_I2C_IsDeviceReady+0xde>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004994:	d103      	bne.n	800499e <HAL_I2C_IsDeviceReady+0xda>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40
 800499e:	2303      	movs	r3, #3
 80049a0:	e0b6      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	f7fe ff59 	bl	8003868 <HAL_GetTick>
 80049b6:	61f8      	str	r0, [r7, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	75fb      	strb	r3, [r7, #23]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	75bb      	strb	r3, [r7, #22]
 80049e6:	e025      	b.n	8004a34 <HAL_I2C_IsDeviceReady+0x170>
 80049e8:	f7fe ff3e 	bl	8003868 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <HAL_I2C_IsDeviceReady+0x13a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_I2C_IsDeviceReady+0x142>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	22a0      	movs	r2, #160	@ 0xa0
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	75fb      	strb	r3, [r7, #23]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	75bb      	strb	r3, [r7, #22]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a3e:	d005      	beq.n	8004a4c <HAL_I2C_IsDeviceReady+0x188>
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_I2C_IsDeviceReady+0x188>
 8004a46:	7dbb      	ldrb	r3, [r7, #22]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0cd      	beq.n	80049e8 <HAL_I2C_IsDeviceReady+0x124>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d129      	bne.n	8004ab6 <HAL_I2C_IsDeviceReady+0x1f2>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4921      	ldr	r1, [pc, #132]	@ (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f9c2 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_IsDeviceReady+0x1de>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e036      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e02c      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ace:	615a      	str	r2, [r3, #20]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2319      	movs	r3, #25
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	490f      	ldr	r1, [pc, #60]	@ (8004b18 <HAL_I2C_IsDeviceReady+0x254>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f99e 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_IsDeviceReady+0x226>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e012      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f4ff af32 	bcc.w	800495e <HAL_I2C_IsDeviceReady+0x9a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x24c>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	00100002 	.word	0x00100002
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <I2C_RequestMemoryWrite>:
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	817b      	strh	r3, [r7, #10]
 8004b32:	460b      	mov	r3, r1
 8004b34:	813b      	strh	r3, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f960 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <I2C_RequestMemoryWrite+0x5e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b70:	d103      	bne.n	8004b7a <I2C_RequestMemoryWrite+0x5a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e05f      	b.n	8004c3e <I2C_RequestMemoryWrite+0x11e>
 8004b7e:	897b      	ldrh	r3, [r7, #10]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	492d      	ldr	r1, [pc, #180]	@ (8004c48 <I2C_RequestMemoryWrite+0x128>)
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f9bb 	bl	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <I2C_RequestMemoryWrite+0x84>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e04c      	b.n	8004c3e <I2C_RequestMemoryWrite+0x11e>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbc:	6a39      	ldr	r1, [r7, #32]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa46 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <I2C_RequestMemoryWrite+0xc6>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d107      	bne.n	8004be2 <I2C_RequestMemoryWrite+0xc2>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	2301      	movs	r3, #1
 8004be4:	e02b      	b.n	8004c3e <I2C_RequestMemoryWrite+0x11e>
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <I2C_RequestMemoryWrite+0xd8>
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]
 8004bf6:	e021      	b.n	8004c3c <I2C_RequestMemoryWrite+0x11c>
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c08:	6a39      	ldr	r1, [r7, #32]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fa20 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <I2C_RequestMemoryWrite+0x112>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d107      	bne.n	8004c2e <I2C_RequestMemoryWrite+0x10e>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e005      	b.n	8004c3e <I2C_RequestMemoryWrite+0x11e>
 8004c32:	893b      	ldrh	r3, [r7, #8]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	00010002 	.word	0x00010002

08004c4c <I2C_RequestMemoryRead>:
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	813b      	strh	r3, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f8c2 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <I2C_RequestMemoryRead+0x6e>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cac:	d103      	bne.n	8004cb6 <I2C_RequestMemoryRead+0x6a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0aa      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004cba:	897b      	ldrh	r3, [r7, #10]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cc8:	611a      	str	r2, [r3, #16]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	6a3a      	ldr	r2, [r7, #32]
 8004cce:	4952      	ldr	r1, [pc, #328]	@ (8004e18 <I2C_RequestMemoryRead+0x1cc>)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f91d 	bl	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <I2C_RequestMemoryRead+0x94>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e097      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf8:	6a39      	ldr	r1, [r7, #32]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f9a8 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <I2C_RequestMemoryRead+0xd6>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d107      	bne.n	8004d1e <I2C_RequestMemoryRead+0xd2>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e076      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <I2C_RequestMemoryRead+0xe8>
 8004d28:	893b      	ldrh	r3, [r7, #8]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	611a      	str	r2, [r3, #16]
 8004d32:	e021      	b.n	8004d78 <I2C_RequestMemoryRead+0x12c>
 8004d34:	893b      	ldrh	r3, [r7, #8]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	611a      	str	r2, [r3, #16]
 8004d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f982 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <I2C_RequestMemoryRead+0x122>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <I2C_RequestMemoryRead+0x11e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e050      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004d6e:	893b      	ldrh	r3, [r7, #8]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	611a      	str	r2, [r3, #16]
 8004d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7a:	6a39      	ldr	r1, [r7, #32]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f967 	bl	8005050 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_RequestMemoryRead+0x158>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d107      	bne.n	8004da0 <I2C_RequestMemoryRead+0x154>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	e035      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f82b 	bl	8004e1c <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <I2C_RequestMemoryRead+0x19c>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dda:	d103      	bne.n	8004de4 <I2C_RequestMemoryRead+0x198>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004de4:	2303      	movs	r3, #3
 8004de6:	e013      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004de8:	897b      	ldrh	r3, [r7, #10]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	6a3a      	ldr	r2, [r7, #32]
 8004dfc:	4906      	ldr	r1, [pc, #24]	@ (8004e18 <I2C_RequestMemoryRead+0x1cc>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f886 	bl	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_RequestMemoryRead+0x1c2>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_RequestMemoryRead+0x1c4>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	00010002 	.word	0x00010002

08004e1c <I2C_WaitOnFlagUntilTimeout>:
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
 8004e2c:	e048      	b.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d044      	beq.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e36:	f7fe fd17 	bl	8003868 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d139      	bne.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10d      	bne.n	8004e72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	e00c      	b.n	8004e8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d116      	bne.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e023      	b.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0xec>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10d      	bne.n	8004ee6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	43da      	mvns	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	e00c      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d093      	beq.n	8004e2e <I2C_WaitOnFlagUntilTimeout+0x12>
 8004f06:	2300      	movs	r3, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	e071      	b.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d123      	bne.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f48:	615a      	str	r2, [r3, #20]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f043 0204 	orr.w	r2, r3, #4
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f74:	2301      	movs	r3, #1
 8004f76:	e067      	b.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d041      	beq.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004f80:	f7fe fc72 	bl	8003868 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d136      	bne.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d10c      	bne.n	8004fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf14      	ite	ne
 8004fb2:	2301      	movne	r3, #1
 8004fb4:	2300      	moveq	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e00b      	b.n	8004fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005000:	2301      	movs	r3, #1
 8005002:	e021      	b.n	8005048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10c      	bne.n	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	43da      	mvns	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4013      	ands	r3, r2
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e00b      	b.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	43da      	mvns	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	bf14      	ite	ne
 800503a:	2301      	movne	r3, #1
 800503c:	2300      	moveq	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f af6d 	bne.w	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8005046:	2300      	movs	r3, #0
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	e034      	b.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f8e3 	bl	800522a <I2C_IsAcknowledgeFailed>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800506a:	2301      	movs	r3, #1
 800506c:	e034      	b.n	80050d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d028      	beq.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8005076:	f7fe fbf7 	bl	8003868 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	d302      	bcc.n	800508c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11d      	bne.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b80      	cmp	r3, #128	@ 0x80
 8005098:	d016      	beq.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80050c4:	2301      	movs	r3, #1
 80050c6:	e007      	b.n	80050d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b80      	cmp	r3, #128	@ 0x80
 80050d4:	d1c3      	bne.n	800505e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80050d6:	2300      	movs	r3, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_WaitOnBTFFlagUntilTimeout>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	e034      	b.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f89b 	bl	800522a <I2C_IsAcknowledgeFailed>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e034      	b.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d028      	beq.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8005106:	f7fe fbaf 	bl	8003868 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11d      	bne.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d016      	beq.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d1c3      	bne.n	80050ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8005166:	2300      	movs	r3, #0
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	e049      	b.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	d119      	bne.n	80051c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0210 	mvn.w	r2, #16
 8005194:	615a      	str	r2, [r3, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80051bc:	2301      	movs	r3, #1
 80051be:	e030      	b.n	8005222 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80051c0:	f7fe fb52 	bl	8003868 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11d      	bne.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	d016      	beq.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	@ 0x40
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800520e:	2301      	movs	r3, #1
 8005210:	e007      	b.n	8005222 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d1ae      	bne.n	800517e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8005220:	2300      	movs	r3, #0
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_IsAcknowledgeFailed>:
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005240:	d11b      	bne.n	800527a <I2C_IsAcknowledgeFailed+0x50>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800524a:	615a      	str	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	@ 0x30
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f043 0204 	orr.w	r2, r3, #4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <I2C_IsAcknowledgeFailed+0x52>
 800527a:	2300      	movs	r3, #0
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_RCC_OscConfig>:
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_OscConfig+0x12>
 8005296:	2301      	movs	r3, #1
 8005298:	e267      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d075      	beq.n	8005392 <HAL_RCC_OscConfig+0x10a>
 80052a6:	4b88      	ldr	r3, [pc, #544]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d00c      	beq.n	80052cc <HAL_RCC_OscConfig+0x44>
 80052b2:	4b85      	ldr	r3, [pc, #532]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d112      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5c>
 80052be:	4b82      	ldr	r3, [pc, #520]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ca:	d10b      	bne.n	80052e4 <HAL_RCC_OscConfig+0x5c>
 80052cc:	4b7e      	ldr	r3, [pc, #504]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d05b      	beq.n	8005390 <HAL_RCC_OscConfig+0x108>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d157      	bne.n	8005390 <HAL_RCC_OscConfig+0x108>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e242      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x74>
 80052ee:	4b76      	ldr	r3, [pc, #472]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a75      	ldr	r2, [pc, #468]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e01d      	b.n	8005338 <HAL_RCC_OscConfig+0xb0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x98>
 8005306:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6f      	ldr	r2, [pc, #444]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800530c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b6d      	ldr	r3, [pc, #436]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6c      	ldr	r2, [pc, #432]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0xb0>
 8005320:	4b69      	ldr	r3, [pc, #420]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a68      	ldr	r2, [pc, #416]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b66      	ldr	r3, [pc, #408]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a65      	ldr	r2, [pc, #404]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d013      	beq.n	8005368 <HAL_RCC_OscConfig+0xe0>
 8005340:	f7fe fa92 	bl	8003868 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xd2>
 8005348:	f7fe fa8e 	bl	8003868 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xd2>
 8005356:	2303      	movs	r3, #3
 8005358:	e207      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 800535a:	4b5b      	ldr	r3, [pc, #364]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0xc0>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x10a>
 8005368:	f7fe fa7e 	bl	8003868 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0xfa>
 8005370:	f7fe fa7a 	bl	8003868 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	@ 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0xfa>
 800537e:	2303      	movs	r3, #3
 8005380:	e1f3      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 8005382:	4b51      	ldr	r3, [pc, #324]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0xe8>
 800538e:	e000      	b.n	8005392 <HAL_RCC_OscConfig+0x10a>
 8005390:	bf00      	nop
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_OscConfig+0x1de>
 800539e:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_RCC_OscConfig+0x13a>
 80053aa:	4b47      	ldr	r3, [pc, #284]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d11c      	bne.n	80053f0 <HAL_RCC_OscConfig+0x168>
 80053b6:	4b44      	ldr	r3, [pc, #272]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d116      	bne.n	80053f0 <HAL_RCC_OscConfig+0x168>
 80053c2:	4b41      	ldr	r3, [pc, #260]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_RCC_OscConfig+0x152>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <HAL_RCC_OscConfig+0x152>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e1c7      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80053da:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	4937      	ldr	r1, [pc, #220]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]
 80053ee:	e03a      	b.n	8005466 <HAL_RCC_OscConfig+0x1de>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d020      	beq.n	800543a <HAL_RCC_OscConfig+0x1b2>
 80053f8:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x244>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f7fe fa33 	bl	8003868 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x190>
 8005406:	f7fe fa2f 	bl	8003868 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x190>
 8005414:	2303      	movs	r3, #3
 8005416:	e1a8      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 8005418:	4b2b      	ldr	r3, [pc, #172]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x17e>
 8005424:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4925      	ldr	r1, [pc, #148]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]
 8005438:	e015      	b.n	8005466 <HAL_RCC_OscConfig+0x1de>
 800543a:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <HAL_RCC_OscConfig+0x244>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f7fe fa12 	bl	8003868 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x1d2>
 8005448:	f7fe fa0e 	bl	8003868 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x1d2>
 8005456:	2303      	movs	r3, #3
 8005458:	e187      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 800545a:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x1c0>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d036      	beq.n	80054e0 <HAL_RCC_OscConfig+0x258>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_RCC_OscConfig+0x220>
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <HAL_RCC_OscConfig+0x248>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f7fe f9f2 	bl	8003868 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x212>
 8005488:	f7fe f9ee 	bl	8003868 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x212>
 8005496:	2303      	movs	r3, #3
 8005498:	e167      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 800549a:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_OscConfig+0x240>)
 800549c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x200>
 80054a6:	e01b      	b.n	80054e0 <HAL_RCC_OscConfig+0x258>
 80054a8:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <HAL_RCC_OscConfig+0x248>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f7fe f9db 	bl	8003868 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]
 80054b4:	e00e      	b.n	80054d4 <HAL_RCC_OscConfig+0x24c>
 80054b6:	f7fe f9d7 	bl	8003868 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d907      	bls.n	80054d4 <HAL_RCC_OscConfig+0x24c>
 80054c4:	2303      	movs	r3, #3
 80054c6:	e150      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	42470000 	.word	0x42470000
 80054d0:	42470e80 	.word	0x42470e80
 80054d4:	4b88      	ldr	r3, [pc, #544]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80054d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ea      	bne.n	80054b6 <HAL_RCC_OscConfig+0x22e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8097 	beq.w	800561c <HAL_RCC_OscConfig+0x394>
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
 80054f2:	4b81      	ldr	r3, [pc, #516]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <HAL_RCC_OscConfig+0x296>
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	4b7d      	ldr	r3, [pc, #500]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	4a7c      	ldr	r2, [pc, #496]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800550c:	6413      	str	r3, [r2, #64]	@ 0x40
 800550e:	4b7a      	ldr	r3, [pc, #488]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	4b77      	ldr	r3, [pc, #476]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_RCC_OscConfig+0x2d4>
 800552a:	4b74      	ldr	r3, [pc, #464]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a73      	ldr	r2, [pc, #460]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	f7fe f997 	bl	8003868 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x2c8>
 800553e:	f7fe f993 	bl	8003868 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x2c8>
 800554c:	2303      	movs	r3, #3
 800554e:	e10c      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 8005550:	4b6a      	ldr	r3, [pc, #424]	@ (80056fc <HAL_RCC_OscConfig+0x474>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x2b6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x2ea>
 8005564:	4b64      	ldr	r3, [pc, #400]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	4a63      	ldr	r2, [pc, #396]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005570:	e01c      	b.n	80055ac <HAL_RCC_OscConfig+0x324>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x30c>
 800557a:	4b5f      	ldr	r3, [pc, #380]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	4a5e      	ldr	r2, [pc, #376]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005580:	f043 0304 	orr.w	r3, r3, #4
 8005584:	6713      	str	r3, [r2, #112]	@ 0x70
 8005586:	4b5c      	ldr	r3, [pc, #368]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	4a5b      	ldr	r2, [pc, #364]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	6713      	str	r3, [r2, #112]	@ 0x70
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0x324>
 8005594:	4b58      	ldr	r3, [pc, #352]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005598:	4a57      	ldr	r2, [pc, #348]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	@ 0x70
 80055a0:	4b55      	ldr	r3, [pc, #340]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	4a54      	ldr	r2, [pc, #336]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_RCC_OscConfig+0x358>
 80055b4:	f7fe f958 	bl	8003868 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x34a>
 80055bc:	f7fe f954 	bl	8003868 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x34a>
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0cb      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80055d2:	4b49      	ldr	r3, [pc, #292]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCC_OscConfig+0x334>
 80055de:	e014      	b.n	800560a <HAL_RCC_OscConfig+0x382>
 80055e0:	f7fe f942 	bl	8003868 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x376>
 80055e8:	f7fe f93e 	bl	8003868 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x376>
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0b5      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80055fe:	4b3e      	ldr	r3, [pc, #248]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ee      	bne.n	80055e8 <HAL_RCC_OscConfig+0x360>
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCC_OscConfig+0x394>
 8005610:	4b39      	ldr	r3, [pc, #228]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	4a38      	ldr	r2, [pc, #224]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561a:	6413      	str	r3, [r2, #64]	@ 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80a1 	beq.w	8005768 <HAL_RCC_OscConfig+0x4e0>
 8005626:	4b34      	ldr	r3, [pc, #208]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d05c      	beq.n	80056ec <HAL_RCC_OscConfig+0x464>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d141      	bne.n	80056be <HAL_RCC_OscConfig+0x436>
 800563a:	4b31      	ldr	r3, [pc, #196]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f7fe f912 	bl	8003868 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x3d2>
 8005648:	f7fe f90e 	bl	8003868 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x3d2>
 8005656:	2303      	movs	r3, #3
 8005658:	e087      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 800565a:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x3c0>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	3b01      	subs	r3, #1
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	491b      	ldr	r1, [pc, #108]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	f7fe f8e7 	bl	8003868 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x428>
 800569e:	f7fe f8e3 	bl	8003868 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x428>
 80056ac:	2303      	movs	r3, #3
 80056ae:	e05c      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80056b0:	4b11      	ldr	r3, [pc, #68]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x416>
 80056bc:	e054      	b.n	8005768 <HAL_RCC_OscConfig+0x4e0>
 80056be:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <HAL_RCC_OscConfig+0x478>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f7fe f8d0 	bl	8003868 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x456>
 80056cc:	f7fe f8cc 	bl	8003868 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x456>
 80056da:	2303      	movs	r3, #3
 80056dc:	e045      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80056de:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <HAL_RCC_OscConfig+0x470>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x444>
 80056ea:	e03d      	b.n	8005768 <HAL_RCC_OscConfig+0x4e0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_OscConfig+0x47c>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e038      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40007000 	.word	0x40007000
 8005700:	42470060 	.word	0x42470060
 8005704:	4b1b      	ldr	r3, [pc, #108]	@ (8005774 <HAL_RCC_OscConfig+0x4ec>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d028      	beq.n	8005764 <HAL_RCC_OscConfig+0x4dc>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	429a      	cmp	r2, r3
 800571e:	d121      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	429a      	cmp	r2, r3
 800572c:	d11a      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800573a:	0192      	lsls	r2, r2, #6
 800573c:	4293      	cmp	r3, r2
 800573e:	d111      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	085b      	lsrs	r3, r3, #1
 800574c:	3b01      	subs	r3, #1
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	429a      	cmp	r2, r3
 8005752:	d107      	bne.n	8005764 <HAL_RCC_OscConfig+0x4dc>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x4e0>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x4e2>
 8005768:	2300      	movs	r3, #0
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800

08005778 <HAL_RCC_ClockConfig>:
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
 8005788:	2301      	movs	r3, #1
 800578a:	e0cc      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 800578c:	4b68      	ldr	r3, [pc, #416]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d90c      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x3c>
 800579a:	4b65      	ldr	r3, [pc, #404]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	4b63      	ldr	r3, [pc, #396]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d001      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x3c>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0b8      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <HAL_RCC_ClockConfig+0x8a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x60>
 80057cc:	4b59      	ldr	r3, [pc, #356]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a58      	ldr	r2, [pc, #352]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x78>
 80057e4:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a52      	ldr	r2, [pc, #328]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057ee:	6093      	str	r3, [r2, #8]
 80057f0:	4b50      	ldr	r3, [pc, #320]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	494d      	ldr	r1, [pc, #308]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	608b      	str	r3, [r1, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d044      	beq.n	8005898 <HAL_RCC_ClockConfig+0x120>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <HAL_RCC_ClockConfig+0xae>
 8005816:	4b47      	ldr	r3, [pc, #284]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d119      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
 8005822:	2301      	movs	r3, #1
 8005824:	e07f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d003      	beq.n	8005836 <HAL_RCC_ClockConfig+0xbe>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d107      	bne.n	8005846 <HAL_RCC_ClockConfig+0xce>
 8005836:	4b3f      	ldr	r3, [pc, #252]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
 8005842:	2301      	movs	r3, #1
 8005844:	e06f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 8005846:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RCC_ClockConfig+0xde>
 8005852:	2301      	movs	r3, #1
 8005854:	e067      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 8005856:	4b37      	ldr	r3, [pc, #220]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f023 0203 	bic.w	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4934      	ldr	r1, [pc, #208]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	4313      	orrs	r3, r2
 8005866:	608b      	str	r3, [r1, #8]
 8005868:	f7fd fffe 	bl	8003868 <HAL_GetTick>
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	e00a      	b.n	8005886 <HAL_RCC_ClockConfig+0x10e>
 8005870:	f7fd fffa 	bl	8003868 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_ClockConfig+0x10e>
 8005882:	2303      	movs	r3, #3
 8005884:	e04f      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 8005886:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 020c 	and.w	r2, r3, #12
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	429a      	cmp	r2, r3
 8005896:	d1eb      	bne.n	8005870 <HAL_RCC_ClockConfig+0xf8>
 8005898:	4b25      	ldr	r3, [pc, #148]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d20c      	bcs.n	80058c0 <HAL_RCC_ClockConfig+0x148>
 80058a6:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x148>
 80058bc:	2301      	movs	r3, #1
 80058be:	e032      	b.n	8005926 <HAL_RCC_ClockConfig+0x1ae>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RCC_ClockConfig+0x166>
 80058cc:	4b19      	ldr	r3, [pc, #100]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4916      	ldr	r1, [pc, #88]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <HAL_RCC_ClockConfig+0x186>
 80058ea:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	490e      	ldr	r1, [pc, #56]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	608b      	str	r3, [r1, #8]
 80058fe:	f000 f821 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8005902:	4602      	mov	r2, r0
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	490a      	ldr	r1, [pc, #40]	@ (8005938 <HAL_RCC_ClockConfig+0x1c0>)
 8005910:	5ccb      	ldrb	r3, [r1, r3]
 8005912:	fa22 f303 	lsr.w	r3, r2, r3
 8005916:	4a09      	ldr	r2, [pc, #36]	@ (800593c <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd ff5e 	bl	80037e0 <HAL_InitTick>
 8005924:	2300      	movs	r3, #0
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023c00 	.word	0x40023c00
 8005934:	40023800 	.word	0x40023800
 8005938:	0800b9f4 	.word	0x0800b9f4
 800593c:	20000020 	.word	0x20000020
 8005940:	20000024 	.word	0x20000024

08005944 <HAL_RCC_GetSysClockFreq>:
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b094      	sub	sp, #80	@ 0x50
 800594a:	af00      	add	r7, sp, #0
 800594c:	2300      	movs	r3, #0
 800594e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005950:	2300      	movs	r3, #0
 8005952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005954:	2300      	movs	r3, #0
 8005956:	643b      	str	r3, [r7, #64]	@ 0x40
 8005958:	2300      	movs	r3, #0
 800595a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800595c:	4b79      	ldr	r3, [pc, #484]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b08      	cmp	r3, #8
 8005966:	d00d      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x40>
 8005968:	2b08      	cmp	r3, #8
 800596a:	f200 80e1 	bhi.w	8005b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_RCC_GetSysClockFreq+0x34>
 8005972:	2b04      	cmp	r3, #4
 8005974:	d003      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x3a>
 8005976:	e0db      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005978:	4b73      	ldr	r3, [pc, #460]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800597a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597c:	e0db      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x1f2>
 800597e:	4b73      	ldr	r3, [pc, #460]	@ (8005b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8005980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005982:	e0d8      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005984:	4b6f      	ldr	r3, [pc, #444]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d063      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x11e>
 800599a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	099b      	lsrs	r3, r3, #6
 80059a0:	2200      	movs	r2, #0
 80059a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ae:	2300      	movs	r3, #0
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059b6:	4622      	mov	r2, r4
 80059b8:	462b      	mov	r3, r5
 80059ba:	f04f 0000 	mov.w	r0, #0
 80059be:	f04f 0100 	mov.w	r1, #0
 80059c2:	0159      	lsls	r1, r3, #5
 80059c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c8:	0150      	lsls	r0, r2, #5
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4621      	mov	r1, r4
 80059d0:	1a51      	subs	r1, r2, r1
 80059d2:	6139      	str	r1, [r7, #16]
 80059d4:	4629      	mov	r1, r5
 80059d6:	eb63 0301 	sbc.w	r3, r3, r1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e8:	4659      	mov	r1, fp
 80059ea:	018b      	lsls	r3, r1, #6
 80059ec:	4651      	mov	r1, sl
 80059ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059f2:	4651      	mov	r1, sl
 80059f4:	018a      	lsls	r2, r1, #6
 80059f6:	4651      	mov	r1, sl
 80059f8:	ebb2 0801 	subs.w	r8, r2, r1
 80059fc:	4659      	mov	r1, fp
 80059fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a16:	4690      	mov	r8, r2
 8005a18:	4699      	mov	r9, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	eb18 0303 	adds.w	r3, r8, r3
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	462b      	mov	r3, r5
 8005a24:	eb49 0303 	adc.w	r3, r9, r3
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a36:	4629      	mov	r1, r5
 8005a38:	024b      	lsls	r3, r1, #9
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a40:	4621      	mov	r1, r4
 8005a42:	024a      	lsls	r2, r1, #9
 8005a44:	4610      	mov	r0, r2
 8005a46:	4619      	mov	r1, r3
 8005a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a54:	f7fb f900 	bl	8000c58 <__aeabi_uldivmod>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a60:	e058      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x1d0>
 8005a62:	4b38      	ldr	r3, [pc, #224]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a72:	623b      	str	r3, [r7, #32]
 8005a74:	2300      	movs	r3, #0
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	f04f 0000 	mov.w	r0, #0
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	0159      	lsls	r1, r3, #5
 8005a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a8e:	0150      	lsls	r0, r2, #5
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4641      	mov	r1, r8
 8005a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	00eb      	lsls	r3, r5, #3
 8005ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aca:	00e2      	lsls	r2, r4, #3
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	18e3      	adds	r3, r4, r3
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	eb45 0303 	adc.w	r3, r5, r3
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aea:	4629      	mov	r1, r5
 8005aec:	028b      	lsls	r3, r1, #10
 8005aee:	4621      	mov	r1, r4
 8005af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005af4:	4621      	mov	r1, r4
 8005af6:	028a      	lsls	r2, r1, #10
 8005af8:	4610      	mov	r0, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afe:	2200      	movs	r2, #0
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	61fa      	str	r2, [r7, #28]
 8005b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b08:	f7fb f8a6 	bl	8000c58 <__aeabi_uldivmod>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4613      	mov	r3, r2
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	4b0b      	ldr	r3, [pc, #44]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b2e:	e002      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x1f2>
 8005b30:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	bf00      	nop
 8005b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3750      	adds	r7, #80	@ 0x50
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	007a1200 	.word	0x007a1200

08005b50 <HAL_RCC_GetHCLKFreq>:
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4b03      	ldr	r3, [pc, #12]	@ (8005b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000020 	.word	0x20000020

08005b68 <HAL_RCC_GetPCLK1Freq>:
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	f7ff fff0 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	0a9b      	lsrs	r3, r3, #10
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	4903      	ldr	r1, [pc, #12]	@ (8005b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7e:	5ccb      	ldrb	r3, [r1, r3]
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
 8005b84:	4618      	mov	r0, r3
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	0800ba04 	.word	0x0800ba04

08005b90 <HAL_RCC_GetPCLK2Freq>:
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f7ff ffdc 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0b5b      	lsrs	r3, r3, #13
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4903      	ldr	r1, [pc, #12]	@ (8005bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba6:	5ccb      	ldrb	r3, [r1, r3]
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800ba04 	.word	0x0800ba04

08005bb8 <HAL_TIM_Base_Init>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_Base_Init+0x12>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e041      	b.n	8005c4e <HAL_TIM_Base_Init+0x96>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_TIM_Base_Init+0x2c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fd fbe2 	bl	80033a8 <HAL_TIM_Base_MspInit>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f000 fd7a 	bl	80066f0 <TIM_Base_SetConfig>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_Base_Start_IT>:
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d001      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x18>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e044      	b.n	8005cfa <HAL_TIM_Base_Start_IT+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d018      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9a:	d013      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a19      	ldr	r2, [pc, #100]	@ (8005d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	@ (8005d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	@ (8005d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d111      	bne.n	8005ce8 <HAL_TIM_Base_Start_IT+0x90>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d010      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0xa0>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e007      	b.n	8005cf8 <HAL_TIM_Base_Start_IT+0xa0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40014000 	.word	0x40014000

08005d1c <HAL_TIM_PWM_Init>:
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_Init+0x12>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e041      	b.n	8005db2 <HAL_TIM_PWM_Init+0x96>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_TIM_PWM_Init+0x2c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f839 	bl	8005dba <HAL_TIM_PWM_MspInit>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f000 fcc8 	bl	80066f0 <TIM_Base_SetConfig>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005db0:	2300      	movs	r3, #0
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_TIM_PWM_MspInit>:
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIM_PWM_Start>:
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x24>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e022      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d109      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x3e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e015      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d109      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x58>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e008      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x72>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e068      	b.n	8005f14 <HAL_TIM_PWM_Start+0x144>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x82>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x92>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fee6 	bl	8006c54 <TIM_CCxChannelCmd>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a23      	ldr	r2, [pc, #140]	@ (8005f1c <HAL_TIM_PWM_Start+0x14c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0xd2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f1c <HAL_TIM_PWM_Start+0x14c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d018      	beq.n	8005ede <HAL_TIM_PWM_Start+0x10e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d013      	beq.n	8005ede <HAL_TIM_PWM_Start+0x10e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a19      	ldr	r2, [pc, #100]	@ (8005f20 <HAL_TIM_PWM_Start+0x150>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00e      	beq.n	8005ede <HAL_TIM_PWM_Start+0x10e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	@ (8005f24 <HAL_TIM_PWM_Start+0x154>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d009      	beq.n	8005ede <HAL_TIM_PWM_Start+0x10e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a16      	ldr	r2, [pc, #88]	@ (8005f28 <HAL_TIM_PWM_Start+0x158>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d004      	beq.n	8005ede <HAL_TIM_PWM_Start+0x10e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a14      	ldr	r2, [pc, #80]	@ (8005f2c <HAL_TIM_PWM_Start+0x15c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d111      	bne.n	8005f02 <HAL_TIM_PWM_Start+0x132>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b06      	cmp	r3, #6
 8005eee:	d010      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x142>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e007      	b.n	8005f12 <HAL_TIM_PWM_Start+0x142>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40014000 	.word	0x40014000

08005f30 <HAL_TIM_Encoder_Init>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_Encoder_Init+0x14>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e097      	b.n	8006074 <HAL_TIM_Encoder_Init+0x144>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <HAL_TIM_Encoder_Init+0x2e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fd fa63 	bl	8003424 <HAL_TIM_Encoder_MspInit>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	6093      	str	r3, [r2, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f000 fbb3 	bl	80066f0 <TIM_Base_SetConfig>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005fd0:	f023 030c 	bic.w	r3, r3, #12
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	4313      	orrs	r3, r2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	031b      	lsls	r3, r3, #12
 8006000:	4313      	orrs	r3, r2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	4313      	orrs	r3, r2
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	619a      	str	r2, [r3, #24]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006072:	2300      	movs	r3, #0
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_Encoder_Start>:
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800608c:	73fb      	strb	r3, [r7, #15]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006094:	73bb      	strb	r3, [r7, #14]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800609c:	737b      	strb	r3, [r7, #13]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060a4:	733b      	strb	r3, [r7, #12]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d110      	bne.n	80060ce <HAL_TIM_Encoder_Start+0x52>
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d102      	bne.n	80060b8 <HAL_TIM_Encoder_Start+0x3c>
 80060b2:	7b7b      	ldrb	r3, [r7, #13]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d001      	beq.n	80060bc <HAL_TIM_Encoder_Start+0x40>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e069      	b.n	8006190 <HAL_TIM_Encoder_Start+0x114>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060cc:	e031      	b.n	8006132 <HAL_TIM_Encoder_Start+0xb6>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d110      	bne.n	80060f6 <HAL_TIM_Encoder_Start+0x7a>
 80060d4:	7bbb      	ldrb	r3, [r7, #14]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_TIM_Encoder_Start+0x64>
 80060da:	7b3b      	ldrb	r3, [r7, #12]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Encoder_Start+0x68>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e055      	b.n	8006190 <HAL_TIM_Encoder_Start+0x114>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060f4:	e01d      	b.n	8006132 <HAL_TIM_Encoder_Start+0xb6>
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d108      	bne.n	800610e <HAL_TIM_Encoder_Start+0x92>
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <HAL_TIM_Encoder_Start+0x92>
 8006102:	7b7b      	ldrb	r3, [r7, #13]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <HAL_TIM_Encoder_Start+0x92>
 8006108:	7b3b      	ldrb	r3, [r7, #12]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d001      	beq.n	8006112 <HAL_TIM_Encoder_Start+0x96>
 800610e:	2301      	movs	r3, #1
 8006110:	e03e      	b.n	8006190 <HAL_TIM_Encoder_Start+0x114>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_TIM_Encoder_Start+0xc4>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b04      	cmp	r3, #4
 800613c:	d008      	beq.n	8006150 <HAL_TIM_Encoder_Start+0xd4>
 800613e:	e00f      	b.n	8006160 <HAL_TIM_Encoder_Start+0xe4>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fd83 	bl	8006c54 <TIM_CCxChannelCmd>
 800614e:	e016      	b.n	800617e <HAL_TIM_Encoder_Start+0x102>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	2104      	movs	r1, #4
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fd7b 	bl	8006c54 <TIM_CCxChannelCmd>
 800615e:	e00e      	b.n	800617e <HAL_TIM_Encoder_Start+0x102>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fd73 	bl	8006c54 <TIM_CCxChannelCmd>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2201      	movs	r2, #1
 8006174:	2104      	movs	r1, #4
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fd6c 	bl	8006c54 <TIM_CCxChannelCmd>
 800617c:	bf00      	nop
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_IRQHandler>:
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x52>
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa65 	bl	80066b2 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x5e>
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa57 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fa68 	bl	80066c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0204 	mvn.w	r2, #4
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x9e>
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa3f 	bl	80066b2 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xaa>
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa31 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa42 	bl	80066c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0208 	mvn.w	r2, #8
 8006264:	611a      	str	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	771a      	strb	r2, [r3, #28]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0xea>
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa19 	bl	80066b2 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xf6>
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa0b 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa1c 	bl	80066c6 <HAL_TIM_PWM_PulseFinishedCallback>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0210 	mvn.w	r2, #16
 80062b0:	611a      	str	r2, [r3, #16]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2208      	movs	r2, #8
 80062b6:	771a      	strb	r2, [r3, #28]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x136>
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9f3 	bl	80066b2 <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x142>
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9e5 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f9f6 	bl	80066c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0201 	mvn.w	r2, #1
 80062fc:	611a      	str	r2, [r3, #16]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9c3 	bl	800668a <HAL_TIM_PeriodElapsedCallback>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <HAL_TIM_IRQHandler+0x190>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006320:	611a      	str	r2, [r3, #16]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fd86 	bl	8006e34 <HAL_TIMEx_BreakCallback>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00c      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_TIM_IRQHandler+0x1b4>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9c7 	bl	80066da <HAL_TIM_TriggerCallback>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <HAL_TIM_IRQHandler+0x1d8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0220 	mvn.w	r2, #32
 8006368:	611a      	str	r2, [r3, #16]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fd58 	bl	8006e20 <HAL_TIMEx_CommutCallback>
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_PWM_ConfigChannel>:
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006392:	2302      	movs	r3, #2
 8006394:	e0ae      	b.n	80064f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	f200 809f 	bhi.w	80064e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080064e5 	.word	0x080064e5
 80063b4:	080064e5 	.word	0x080064e5
 80063b8:	080064e5 	.word	0x080064e5
 80063bc:	08006421 	.word	0x08006421
 80063c0:	080064e5 	.word	0x080064e5
 80063c4:	080064e5 	.word	0x080064e5
 80063c8:	080064e5 	.word	0x080064e5
 80063cc:	08006463 	.word	0x08006463
 80063d0:	080064e5 	.word	0x080064e5
 80063d4:	080064e5 	.word	0x080064e5
 80063d8:	080064e5 	.word	0x080064e5
 80063dc:	080064a3 	.word	0x080064a3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa0e 	bl	8006808 <TIM_OC1_SetConfig>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0208 	orr.w	r2, r2, #8
 80063fa:	619a      	str	r2, [r3, #24]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0204 	bic.w	r2, r2, #4
 800640a:	619a      	str	r2, [r3, #24]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	619a      	str	r2, [r3, #24]
 800641e:	e064      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa54 	bl	80068d4 <TIM_OC2_SetConfig>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800643a:	619a      	str	r2, [r3, #24]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800644a:	619a      	str	r2, [r3, #24]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6999      	ldr	r1, [r3, #24]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	021a      	lsls	r2, r3, #8
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]
 8006460:	e043      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fa9f 	bl	80069ac <TIM_OC3_SetConfig>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0208 	orr.w	r2, r2, #8
 800647c:	61da      	str	r2, [r3, #28]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0204 	bic.w	r2, r2, #4
 800648c:	61da      	str	r2, [r3, #28]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69d9      	ldr	r1, [r3, #28]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	61da      	str	r2, [r3, #28]
 80064a0:	e023      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fae9 	bl	8006a80 <TIM_OC4_SetConfig>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064bc:	61da      	str	r2, [r3, #28]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064cc:	61da      	str	r2, [r3, #28]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69d9      	ldr	r1, [r3, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	61da      	str	r2, [r3, #28]
 80064e2:	e002      	b.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
 80064e8:	bf00      	nop
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_ConfigClockSource>:
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIM_ConfigClockSource+0x1c>
 8006514:	2302      	movs	r3, #2
 8006516:	e0b4      	b.n	8006682 <HAL_TIM_ConfigClockSource+0x186>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	60bb      	str	r3, [r7, #8]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006550:	d03e      	beq.n	80065d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006556:	f200 8087 	bhi.w	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655e:	f000 8086 	beq.w	800666e <HAL_TIM_ConfigClockSource+0x172>
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006566:	d87f      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b70      	cmp	r3, #112	@ 0x70
 800656a:	d01a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0xa6>
 800656c:	2b70      	cmp	r3, #112	@ 0x70
 800656e:	d87b      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b60      	cmp	r3, #96	@ 0x60
 8006572:	d050      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x11a>
 8006574:	2b60      	cmp	r3, #96	@ 0x60
 8006576:	d877      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b50      	cmp	r3, #80	@ 0x50
 800657a:	d03c      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0xfa>
 800657c:	2b50      	cmp	r3, #80	@ 0x50
 800657e:	d873      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b40      	cmp	r3, #64	@ 0x40
 8006582:	d058      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x13a>
 8006584:	2b40      	cmp	r3, #64	@ 0x40
 8006586:	d86f      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b30      	cmp	r3, #48	@ 0x30
 800658a:	d064      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 800658c:	2b30      	cmp	r3, #48	@ 0x30
 800658e:	d86b      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b20      	cmp	r3, #32
 8006592:	d060      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d867      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d05c      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 800659c:	2b10      	cmp	r3, #16
 800659e:	d05a      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x15a>
 80065a0:	e062      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x16c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f000 fb2f 	bl	8006c14 <TIM_ETR_SetConfig>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	609a      	str	r2, [r3, #8]
 80065ce:	e04f      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6818      	ldr	r0, [r3, #0]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6899      	ldr	r1, [r3, #8]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f000 fb18 	bl	8006c14 <TIM_ETR_SetConfig>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	e03c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	461a      	mov	r2, r3
 8006604:	f000 fa8c 	bl	8006b20 <TIM_TI1_ConfigInputStage>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2150      	movs	r1, #80	@ 0x50
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fae5 	bl	8006bde <TIM_ITRx_SetConfig>
 8006614:	e02c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	461a      	mov	r2, r3
 8006624:	f000 faab 	bl	8006b7e <TIM_TI2_ConfigInputStage>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2160      	movs	r1, #96	@ 0x60
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fad5 	bl	8006bde <TIM_ITRx_SetConfig>
 8006634:	e01c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	461a      	mov	r2, r3
 8006644:	f000 fa6c 	bl	8006b20 <TIM_TI1_ConfigInputStage>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2140      	movs	r1, #64	@ 0x40
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fac5 	bl	8006bde <TIM_ITRx_SetConfig>
 8006654:	e00c      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f000 fabc 	bl	8006bde <TIM_ITRx_SetConfig>
 8006666:	e003      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
 800666c:	e000      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x174>
 800666e:	bf00      	nop
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_TIM_PeriodElapsedCallback>:
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_TIM_OC_DelayElapsedCallback>:
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_TIM_IC_CaptureCallback>:
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_TIM_TriggerCallback>:
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <TIM_Base_SetConfig>:
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3a      	ldr	r2, [pc, #232]	@ (80067ec <TIM_Base_SetConfig+0xfc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a37      	ldr	r2, [pc, #220]	@ (80067f0 <TIM_Base_SetConfig+0x100>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a36      	ldr	r2, [pc, #216]	@ (80067f4 <TIM_Base_SetConfig+0x104>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a35      	ldr	r2, [pc, #212]	@ (80067f8 <TIM_Base_SetConfig+0x108>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x4a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	@ (80067ec <TIM_Base_SetConfig+0xfc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006748:	d017      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a28      	ldr	r2, [pc, #160]	@ (80067f0 <TIM_Base_SetConfig+0x100>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a27      	ldr	r2, [pc, #156]	@ (80067f4 <TIM_Base_SetConfig+0x104>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <TIM_Base_SetConfig+0x108>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a25      	ldr	r2, [pc, #148]	@ (80067fc <TIM_Base_SetConfig+0x10c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a24      	ldr	r2, [pc, #144]	@ (8006800 <TIM_Base_SetConfig+0x110>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a23      	ldr	r2, [pc, #140]	@ (8006804 <TIM_Base_SetConfig+0x114>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0x9c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0e      	ldr	r2, [pc, #56]	@ (80067ec <TIM_Base_SetConfig+0xfc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d103      	bne.n	80067c0 <TIM_Base_SetConfig+0xd0>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	615a      	str	r2, [r3, #20]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d105      	bne.n	80067de <TIM_Base_SetConfig+0xee>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	611a      	str	r2, [r3, #16]
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <TIM_OC1_SetConfig>:
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f023 0201 	bic.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 0302 	bic.w	r3, r3, #2
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a1c      	ldr	r2, [pc, #112]	@ (80068d0 <TIM_OC1_SetConfig+0xc8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10c      	bne.n	800687e <TIM_OC1_SetConfig+0x76>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0308 	bic.w	r3, r3, #8
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0304 	bic.w	r3, r3, #4
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a13      	ldr	r2, [pc, #76]	@ (80068d0 <TIM_OC1_SetConfig+0xc8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d111      	bne.n	80068aa <TIM_OC1_SetConfig+0xa2>
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	605a      	str	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	619a      	str	r2, [r3, #24]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40010000 	.word	0x40010000

080068d4 <TIM_OC2_SetConfig>:
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f023 0210 	bic.w	r2, r3, #16
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0320 	bic.w	r3, r3, #32
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1e      	ldr	r2, [pc, #120]	@ (80069a8 <TIM_OC2_SetConfig+0xd4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d10d      	bne.n	8006950 <TIM_OC2_SetConfig+0x7c>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a15      	ldr	r2, [pc, #84]	@ (80069a8 <TIM_OC2_SetConfig+0xd4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d113      	bne.n	8006980 <TIM_OC2_SetConfig+0xac>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	639a      	str	r2, [r3, #56]	@ 0x38
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000

080069ac <TIM_OC3_SetConfig>:
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <TIM_OC3_SetConfig+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10d      	bne.n	8006a26 <TIM_OC3_SetConfig+0x7a>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a14      	ldr	r2, [pc, #80]	@ (8006a7c <TIM_OC3_SetConfig+0xd0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d113      	bne.n	8006a56 <TIM_OC3_SetConfig+0xaa>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	61da      	str	r2, [r3, #28]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	621a      	str	r2, [r3, #32]
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40010000 	.word	0x40010000

08006a80 <TIM_OC4_SetConfig>:
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a10      	ldr	r2, [pc, #64]	@ (8006b1c <TIM_OC4_SetConfig+0x9c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d109      	bne.n	8006af4 <TIM_OC4_SetConfig+0x74>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	019b      	lsls	r3, r3, #6
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	61da      	str	r2, [r3, #28]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	621a      	str	r2, [r3, #32]
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000

08006b20 <TIM_TI1_ConfigInputStage>:
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f023 0201 	bic.w	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	621a      	str	r2, [r3, #32]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 030a 	bic.w	r3, r3, #10
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_TI2_ConfigInputStage>:
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f023 0210 	bic.w	r2, r3, #16
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	621a      	str	r2, [r3, #32]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	031b      	lsls	r3, r3, #12
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	619a      	str	r2, [r3, #24]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	621a      	str	r2, [r3, #32]
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <TIM_ITRx_SetConfig>:
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f043 0307 	orr.w	r3, r3, #7
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	609a      	str	r2, [r3, #8]
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <TIM_ETR_SetConfig>:
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	021a      	lsls	r2, r3, #8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	609a      	str	r2, [r3, #8]
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_CCxChannelCmd>:
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2201      	movs	r2, #1
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	401a      	ands	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	621a      	str	r2, [r3, #32]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	621a      	str	r2, [r3, #32]
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_TIMEx_MasterConfigSynchronization>:
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e050      	b.n	8006d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d04:	d013      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a18      	ldr	r2, [pc, #96]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a16      	ldr	r2, [pc, #88]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10c      	bne.n	8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40014000 	.word	0x40014000

08006d7c <HAL_TIMEx_ConfigBreakDeadTime>:
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e03d      	b.n	8006e14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	645a      	str	r2, [r3, #68]	@ 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e12:	2300      	movs	r3, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_CommutCallback>:
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_BreakCallback>:
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UART_Init>:
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Init+0x12>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e042      	b.n	8006ee0 <HAL_UART_Init+0x98>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_UART_Init+0x2c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fc fbe4 	bl	800363c <HAL_UART_MspInit>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	@ 0x24
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e8a:	60da      	str	r2, [r3, #12]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fdbd 	bl	8007a0c <UART_SetConfig>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ea0:	611a      	str	r2, [r3, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eb0:	615a      	str	r2, [r3, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_UART_Transmit>:
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	@ 0x28
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80fb      	strh	r3, [r7, #6]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d175      	bne.n	8006ff4 <HAL_UART_Transmit+0x10c>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_UART_Transmit+0x2c>
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_UART_Transmit+0x30>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e06e      	b.n	8006ff6 <HAL_UART_Transmit+0x10e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2221      	movs	r2, #33	@ 0x21
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f26:	f7fc fc9f 	bl	8003868 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	88fa      	ldrh	r2, [r7, #6]
 8006f30:	849a      	strh	r2, [r3, #36]	@ 0x24
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	84da      	strh	r2, [r3, #38]	@ 0x26
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f40:	d108      	bne.n	8006f54 <HAL_UART_Transmit+0x6c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <HAL_UART_Transmit+0x6c>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e003      	b.n	8006f5c <HAL_UART_Transmit+0x74>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	e02e      	b.n	8006fbc <HAL_UART_Transmit+0xd4>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2200      	movs	r2, #0
 8006f66:	2180      	movs	r1, #128	@ 0x80
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fb1f 	bl	80075ac <UART_WaitOnFlagUntilTimeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_UART_Transmit+0x98>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e03a      	b.n	8006ff6 <HAL_UART_Transmit+0x10e>
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <HAL_UART_Transmit+0xb6>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	3302      	adds	r3, #2
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	e007      	b.n	8006fae <HAL_UART_Transmit+0xc6>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	84da      	strh	r2, [r3, #38]	@ 0x26
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1cb      	bne.n	8006f5e <HAL_UART_Transmit+0x76>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2140      	movs	r1, #64	@ 0x40
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 faeb 	bl	80075ac <UART_WaitOnFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_UART_Transmit+0x100>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e006      	b.n	8006ff6 <HAL_UART_Transmit+0x10e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <HAL_UART_Transmit+0x10e>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_UART_Receive_IT>:
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	4613      	mov	r3, r2
 800700a:	80fb      	strh	r3, [r7, #6]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b20      	cmp	r3, #32
 8007016:	d112      	bne.n	800703e <HAL_UART_Receive_IT+0x40>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_UART_Receive_IT+0x26>
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_UART_Receive_IT+0x2a>
 8007024:	2301      	movs	r3, #1
 8007026:	e00b      	b.n	8007040 <HAL_UART_Receive_IT+0x42>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	461a      	mov	r2, r3
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fb12 	bl	800765e <UART_Start_Receive_IT>
 800703a:	4603      	mov	r3, r0
 800703c:	e000      	b.n	8007040 <HAL_UART_Receive_IT+0x42>
 800703e:	2302      	movs	r3, #2
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_IRQHandler>:
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ba      	sub	sp, #232	@ 0xe8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_UART_IRQHandler+0x66>
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fbf2 	bl	8007890 <UART_Receive_IT>
 80070ac:	e25b      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
 80070ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80de 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
 80070b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_UART_IRQHandler+0x8a>
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80d1 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	@ 0x44
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_UART_IRQHandler+0x11a>
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 81f2 	beq.w	800755c <HAL_UART_IRQHandler+0x514>
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb7d 	bl	8007890 <UART_Receive_IT>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_UART_IRQHandler+0x17a>
 80071ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04f      	beq.n	8007262 <HAL_UART_IRQHandler+0x21a>
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa85 	bl	80076d2 <UART_EndRxTransfer>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d2:	2b40      	cmp	r3, #64	@ 0x40
 80071d4:	d141      	bne.n	800725a <HAL_UART_IRQHandler+0x212>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800720a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800720e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800721a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x18e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <HAL_UART_IRQHandler+0x20a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	4a7e      	ldr	r2, [pc, #504]	@ (8007428 <HAL_UART_IRQHandler+0x3e0>)
 8007230:	651a      	str	r2, [r3, #80]	@ 0x50
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fcf9 	bl	8003c2e <HAL_DMA_Abort_IT>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <HAL_UART_IRQHandler+0x228>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	e00e      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f994 	bl	8007580 <HAL_UART_ErrorCallback>
 8007258:	e00a      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f990 	bl	8007580 <HAL_UART_ErrorCallback>
 8007260:	e006      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f98c 	bl	8007580 <HAL_UART_ErrorCallback>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	645a      	str	r2, [r3, #68]	@ 0x44
 800726e:	e175      	b.n	800755c <HAL_UART_IRQHandler+0x514>
 8007270:	bf00      	nop
 8007272:	e173      	b.n	800755c <HAL_UART_IRQHandler+0x514>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 814f 	bne.w	800751c <HAL_UART_IRQHandler+0x4d4>
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8148 	beq.w	800751c <HAL_UART_IRQHandler+0x4d4>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8141 	beq.w	800751c <HAL_UART_IRQHandler+0x4d4>
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ba:	2b40      	cmp	r3, #64	@ 0x40
 80072bc:	f040 80b6 	bne.w	800742c <HAL_UART_IRQHandler+0x3e4>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80072cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8145 	beq.w	8007560 <HAL_UART_IRQHandler+0x518>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 813e 	bcs.w	8007560 <HAL_UART_IRQHandler+0x518>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f6:	f000 8088 	beq.w	800740a <HAL_UART_IRQHandler+0x3c2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800732e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1d9      	bne.n	80072fa <HAL_UART_IRQHandler+0x2b2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	677b      	str	r3, [r7, #116]	@ 0x74
 800734e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	673b      	str	r3, [r7, #112]	@ 0x70
 8007356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800736a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800736e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800737c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e1      	bne.n	8007346 <HAL_UART_IRQHandler+0x2fe>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	663b      	str	r3, [r7, #96]	@ 0x60
 800738a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80073b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <HAL_UART_IRQHandler+0x33a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80073f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <HAL_UART_IRQHandler+0x380>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fba2 	bl	8003b4e <HAL_DMA_Abort>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007418:	b29b      	uxth	r3, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	b29b      	uxth	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8b7 	bl	8007594 <HAL_UARTEx_RxEventCallback>
 8007426:	e09b      	b.n	8007560 <HAL_UART_IRQHandler+0x518>
 8007428:	08007799 	.word	0x08007799
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 808e 	beq.w	8007564 <HAL_UART_IRQHandler+0x51c>
 8007448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8089 	beq.w	8007564 <HAL_UART_IRQHandler+0x51c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	63bb      	str	r3, [r7, #56]	@ 0x38
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007476:	647a      	str	r2, [r7, #68]	@ 0x44
 8007478:	643b      	str	r3, [r7, #64]	@ 0x40
 800747a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x40a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x442>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074f4:	61fa      	str	r2, [r7, #28]
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e3      	bne.n	80074d0 <HAL_UART_IRQHandler+0x488>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	635a      	str	r2, [r3, #52]	@ 0x34
 800750e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f83d 	bl	8007594 <HAL_UARTEx_RxEventCallback>
 800751a:	e023      	b.n	8007564 <HAL_UART_IRQHandler+0x51c>
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <HAL_UART_IRQHandler+0x4f4>
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_UART_IRQHandler+0x4f4>
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f943 	bl	80077c0 <UART_Transmit_IT>
 800753a:	e014      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <HAL_UART_IRQHandler+0x51e>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <HAL_UART_IRQHandler+0x51e>
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f983 	bl	8007860 <UART_EndTransmit_IT>
 800755a:	e004      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
 800755c:	bf00      	nop
 800755e:	e002      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
 8007564:	bf00      	nop
 8007566:	37e8      	adds	r7, #232	@ 0xe8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_TxCpltCallback>:
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_ErrorCallback>:
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UARTEx_RxEventCallback>:
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <UART_WaitOnFlagUntilTimeout>:
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	71fb      	strb	r3, [r7, #7]
 80075bc:	e03b      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d037      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075c6:	f7fc f94f 	bl	8003868 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d302      	bcc.n	80075dc <UART_WaitOnFlagUntilTimeout+0x30>
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x34>
 80075dc:	2303      	movs	r3, #3
 80075de:	e03a      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xaa>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d023      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b80      	cmp	r3, #128	@ 0x80
 80075f2:	d020      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d01d      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b08      	cmp	r3, #8
 8007606:	d116      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f857 	bl	80076d2 <UART_EndRxTransfer>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2208      	movs	r2, #8
 8007628:	645a      	str	r2, [r3, #68]	@ 0x44
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007632:	2301      	movs	r3, #1
 8007634:	e00f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xaa>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d0b4      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0x12>
 8007654:	2300      	movs	r3, #0
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_Start_Receive_IT>:
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	4613      	mov	r3, r2
 800766a:	80fb      	strh	r3, [r7, #6]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	629a      	str	r2, [r3, #40]	@ 0x28
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	645a      	str	r2, [r3, #68]	@ 0x44
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2222      	movs	r2, #34	@ 0x22
 8007688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <UART_Start_Receive_IT+0x46>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076a2:	60da      	str	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	615a      	str	r2, [r3, #20]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0220 	orr.w	r2, r2, #32
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	2300      	movs	r3, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <UART_EndRxTransfer>:
 80076d2:	b480      	push	{r7}
 80076d4:	b095      	sub	sp, #84	@ 0x54
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_EndRxTransfer+0x8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3314      	adds	r3, #20
 8007714:	623b      	str	r3, [r7, #32]
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f023 0301 	bic.w	r3, r3, #1
 8007724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3314      	adds	r3, #20
 800772c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800772e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e5      	bne.n	800770e <UART_EndRxTransfer+0x3c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	2b01      	cmp	r3, #1
 8007748:	d119      	bne.n	800777e <UART_EndRxTransfer+0xac>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f023 0310 	bic.w	r3, r3, #16
 8007760:	647b      	str	r3, [r7, #68]	@ 0x44
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800776a:	61ba      	str	r2, [r7, #24]
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e5      	bne.n	800774a <UART_EndRxTransfer+0x78>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30
 800778c:	bf00      	nop
 800778e:	3754      	adds	r7, #84	@ 0x54
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <UART_DMAAbortOnError>:
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	84da      	strh	r2, [r3, #38]	@ 0x26
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fee4 	bl	8007580 <HAL_UART_ErrorCallback>
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <UART_Transmit_IT>:
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b21      	cmp	r3, #33	@ 0x21
 80077d2:	d13e      	bne.n	8007852 <UART_Transmit_IT+0x92>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077dc:	d114      	bne.n	8007808 <UART_Transmit_IT+0x48>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d110      	bne.n	8007808 <UART_Transmit_IT+0x48>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fa:	605a      	str	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]
 8007806:	e008      	b.n	800781a <UART_Transmit_IT+0x5a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	1c59      	adds	r1, r3, #1
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6211      	str	r1, [r2, #32]
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29b      	uxth	r3, r3
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4619      	mov	r1, r3
 8007828:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10f      	bne.n	800784e <UART_Transmit_IT+0x8e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	2300      	movs	r3, #0
 8007850:	e000      	b.n	8007854 <UART_Transmit_IT+0x94>
 8007852:	2302      	movs	r3, #2
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_EndTransmit_IT>:
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007876:	60da      	str	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fe73 	bl	800756c <HAL_UART_TxCpltCallback>
 8007886:	2300      	movs	r3, #0
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_Receive_IT>:
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	@ 0x30
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b22      	cmp	r3, #34	@ 0x22
 80078a2:	f040 80ae 	bne.w	8007a02 <UART_Receive_IT+0x172>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ae:	d117      	bne.n	80078e0 <UART_Receive_IT+0x50>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d113      	bne.n	80078e0 <UART_Receive_IT+0x50>
 80078b8:	2300      	movs	r3, #0
 80078ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	1c9a      	adds	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80078de:	e026      	b.n	800792e <UART_Receive_IT+0x9e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078e6:	2300      	movs	r3, #0
 80078e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f2:	d007      	beq.n	8007904 <UART_Receive_IT+0x74>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <UART_Receive_IT+0x82>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <UART_Receive_IT+0x82>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e008      	b.n	8007924 <UART_Receive_IT+0x94>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791e:	b2da      	uxtb	r2, r3
 8007920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	629a      	str	r2, [r3, #40]	@ 0x28
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29b      	uxth	r3, r3
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4619      	mov	r1, r3
 800793c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800793e:	2b00      	cmp	r3, #0
 8007940:	d15d      	bne.n	80079fe <UART_Receive_IT+0x16e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0220 	bic.w	r2, r2, #32
 8007950:	60da      	str	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695a      	ldr	r2, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	615a      	str	r2, [r3, #20]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007984:	2b01      	cmp	r3, #1
 8007986:	d135      	bne.n	80079f4 <UART_Receive_IT+0x164>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	@ 0x30
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f023 0310 	bic.w	r3, r3, #16
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330c      	adds	r3, #12
 80079ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ae:	623a      	str	r2, [r7, #32]
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	69f9      	ldr	r1, [r7, #28]
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e5      	bne.n	800798e <UART_Receive_IT+0xfe>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	d10a      	bne.n	80079e6 <UART_Receive_IT+0x156>
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fdd1 	bl	8007594 <HAL_UARTEx_RxEventCallback>
 80079f2:	e002      	b.n	80079fa <UART_Receive_IT+0x16a>
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fa fad5 	bl	8001fa4 <HAL_UART_RxCpltCallback>
 80079fa:	2300      	movs	r3, #0
 80079fc:	e002      	b.n	8007a04 <UART_Receive_IT+0x174>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <UART_Receive_IT+0x174>
 8007a02:	2302      	movs	r3, #2
 8007a04:	4618      	mov	r0, r3
 8007a06:	3730      	adds	r7, #48	@ 0x30
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_SetConfig>:
 8007a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a10:	b0c0      	sub	sp, #256	@ 0x100
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a28:	68d9      	ldr	r1, [r3, #12]
 8007a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	ea40 0301 	orr.w	r3, r0, r1
 8007a34:	6113      	str	r3, [r2, #16]
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a64:	f021 010c 	bic.w	r1, r1, #12
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a72:	430b      	orrs	r3, r1
 8007a74:	60d3      	str	r3, [r2, #12]
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a86:	6999      	ldr	r1, [r3, #24]
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	ea40 0301 	orr.w	r3, r0, r1
 8007a92:	6153      	str	r3, [r2, #20]
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8007cd8 <UART_SetConfig+0x2cc>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d005      	beq.n	8007aac <UART_SetConfig+0xa0>
 8007aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8007cdc <UART_SetConfig+0x2d0>)
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d104      	bne.n	8007ab6 <UART_SetConfig+0xaa>
 8007aac:	f7fe f870 	bl	8005b90 <HAL_RCC_GetPCLK2Freq>
 8007ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ab4:	e003      	b.n	8007abe <UART_SetConfig+0xb2>
 8007ab6:	f7fe f857 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8007aba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac8:	f040 810c 	bne.w	8007ce4 <UART_SetConfig+0x2d8>
 8007acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ade:	4622      	mov	r2, r4
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	1891      	adds	r1, r2, r2
 8007ae4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ae6:	415b      	adcs	r3, r3
 8007ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007aee:	4621      	mov	r1, r4
 8007af0:	eb12 0801 	adds.w	r8, r2, r1
 8007af4:	4629      	mov	r1, r5
 8007af6:	eb43 0901 	adc.w	r9, r3, r1
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	f04f 0300 	mov.w	r3, #0
 8007b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b0e:	4690      	mov	r8, r2
 8007b10:	4699      	mov	r9, r3
 8007b12:	4623      	mov	r3, r4
 8007b14:	eb18 0303 	adds.w	r3, r8, r3
 8007b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b1c:	462b      	mov	r3, r5
 8007b1e:	eb49 0303 	adc.w	r3, r9, r3
 8007b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	18db      	adds	r3, r3, r3
 8007b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b40:	4613      	mov	r3, r2
 8007b42:	eb42 0303 	adc.w	r3, r2, r3
 8007b46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b50:	f7f9 f882 	bl	8000c58 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4b61      	ldr	r3, [pc, #388]	@ (8007ce0 <UART_SetConfig+0x2d4>)
 8007b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	011c      	lsls	r4, r3, #4
 8007b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	1891      	adds	r1, r2, r2
 8007b7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b7c:	415b      	adcs	r3, r3
 8007b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b84:	4641      	mov	r1, r8
 8007b86:	eb12 0a01 	adds.w	sl, r2, r1
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba4:	4692      	mov	sl, r2
 8007ba6:	469b      	mov	fp, r3
 8007ba8:	4643      	mov	r3, r8
 8007baa:	eb1a 0303 	adds.w	r3, sl, r3
 8007bae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8007bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	18db      	adds	r3, r3, r3
 8007bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	eb42 0303 	adc.w	r3, r2, r3
 8007bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007be6:	f7f9 f837 	bl	8000c58 <__aeabi_uldivmod>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ce0 <UART_SetConfig+0x2d4>)
 8007bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	2264      	movs	r2, #100	@ 0x64
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	1acb      	subs	r3, r1, r3
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c06:	4b36      	ldr	r3, [pc, #216]	@ (8007ce0 <UART_SetConfig+0x2d4>)
 8007c08:	fba3 2302 	umull	r2, r3, r3, r2
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c14:	441c      	add	r4, r3
 8007c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c30:	415b      	adcs	r3, r3
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c38:	4641      	mov	r1, r8
 8007c3a:	1851      	adds	r1, r2, r1
 8007c3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c3e:	4649      	mov	r1, r9
 8007c40:	414b      	adcs	r3, r1
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c50:	4659      	mov	r1, fp
 8007c52:	00cb      	lsls	r3, r1, #3
 8007c54:	4651      	mov	r1, sl
 8007c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	00ca      	lsls	r2, r1, #3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	4642      	mov	r2, r8
 8007c66:	189b      	adds	r3, r3, r2
 8007c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	460a      	mov	r2, r1
 8007c70:	eb42 0303 	adc.w	r3, r2, r3
 8007c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	18db      	adds	r3, r3, r3
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c92:	4613      	mov	r3, r2
 8007c94:	eb42 0303 	adc.w	r3, r2, r3
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ca2:	f7f8 ffd9 	bl	8000c58 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <UART_SetConfig+0x2d4>)
 8007cac:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb0:	095b      	lsrs	r3, r3, #5
 8007cb2:	2164      	movs	r1, #100	@ 0x64
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	3332      	adds	r3, #50	@ 0x32
 8007cbe:	4a08      	ldr	r2, [pc, #32]	@ (8007ce0 <UART_SetConfig+0x2d4>)
 8007cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	f003 0207 	and.w	r2, r3, #7
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4422      	add	r2, r4
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	e106      	b.n	8007ee4 <UART_SetConfig+0x4d8>
 8007cd6:	bf00      	nop
 8007cd8:	40011000 	.word	0x40011000
 8007cdc:	40011400 	.word	0x40011400
 8007ce0:	51eb851f 	.word	0x51eb851f
 8007ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007cee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	1891      	adds	r1, r2, r2
 8007cfc:	6239      	str	r1, [r7, #32]
 8007cfe:	415b      	adcs	r3, r3
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d06:	4641      	mov	r1, r8
 8007d08:	1854      	adds	r4, r2, r1
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	eb43 0501 	adc.w	r5, r3, r1
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	00eb      	lsls	r3, r5, #3
 8007d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d1e:	00e2      	lsls	r2, r4, #3
 8007d20:	4614      	mov	r4, r2
 8007d22:	461d      	mov	r5, r3
 8007d24:	4643      	mov	r3, r8
 8007d26:	18e3      	adds	r3, r4, r3
 8007d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	eb45 0303 	adc.w	r3, r5, r3
 8007d32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d52:	4629      	mov	r1, r5
 8007d54:	008b      	lsls	r3, r1, #2
 8007d56:	4621      	mov	r1, r4
 8007d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	008a      	lsls	r2, r1, #2
 8007d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d64:	f7f8 ff78 	bl	8000c58 <__aeabi_uldivmod>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4b60      	ldr	r3, [pc, #384]	@ (8007ef0 <UART_SetConfig+0x4e4>)
 8007d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	011c      	lsls	r4, r3, #4
 8007d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	1891      	adds	r1, r2, r2
 8007d8e:	61b9      	str	r1, [r7, #24]
 8007d90:	415b      	adcs	r3, r3
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d98:	4641      	mov	r1, r8
 8007d9a:	1851      	adds	r1, r2, r1
 8007d9c:	6139      	str	r1, [r7, #16]
 8007d9e:	4649      	mov	r1, r9
 8007da0:	414b      	adcs	r3, r1
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007db0:	4659      	mov	r1, fp
 8007db2:	00cb      	lsls	r3, r1, #3
 8007db4:	4651      	mov	r1, sl
 8007db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dba:	4651      	mov	r1, sl
 8007dbc:	00ca      	lsls	r2, r1, #3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dcc:	464b      	mov	r3, r9
 8007dce:	460a      	mov	r2, r1
 8007dd0:	eb42 0303 	adc.w	r3, r2, r3
 8007dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007de2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007df0:	4649      	mov	r1, r9
 8007df2:	008b      	lsls	r3, r1, #2
 8007df4:	4641      	mov	r1, r8
 8007df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	008a      	lsls	r2, r1, #2
 8007dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e02:	f7f8 ff29 	bl	8000c58 <__aeabi_uldivmod>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4b38      	ldr	r3, [pc, #224]	@ (8007ef0 <UART_SetConfig+0x4e4>)
 8007e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	2264      	movs	r2, #100	@ 0x64
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	1acb      	subs	r3, r1, r3
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	3332      	adds	r3, #50	@ 0x32
 8007e20:	4a33      	ldr	r2, [pc, #204]	@ (8007ef0 <UART_SetConfig+0x4e4>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e2c:	441c      	add	r4, r3
 8007e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e32:	2200      	movs	r2, #0
 8007e34:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e36:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	1891      	adds	r1, r2, r2
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	415b      	adcs	r3, r3
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e4c:	4641      	mov	r1, r8
 8007e4e:	1851      	adds	r1, r2, r1
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	4649      	mov	r1, r9
 8007e54:	414b      	adcs	r3, r1
 8007e56:	607b      	str	r3, [r7, #4]
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e64:	4659      	mov	r1, fp
 8007e66:	00cb      	lsls	r3, r1, #3
 8007e68:	4651      	mov	r1, sl
 8007e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6e:	4651      	mov	r1, sl
 8007e70:	00ca      	lsls	r2, r1, #3
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	4642      	mov	r2, r8
 8007e7a:	189b      	adds	r3, r3, r2
 8007e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e7e:	464b      	mov	r3, r9
 8007e80:	460a      	mov	r2, r1
 8007e82:	eb42 0303 	adc.w	r3, r2, r3
 8007e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e92:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	008b      	lsls	r3, r1, #2
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eaa:	4641      	mov	r1, r8
 8007eac:	008a      	lsls	r2, r1, #2
 8007eae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007eb2:	f7f8 fed1 	bl	8000c58 <__aeabi_uldivmod>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <UART_SetConfig+0x4e4>)
 8007ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	2164      	movs	r1, #100	@ 0x64
 8007ec4:	fb01 f303 	mul.w	r3, r1, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	3332      	adds	r3, #50	@ 0x32
 8007ece:	4a08      	ldr	r2, [pc, #32]	@ (8007ef0 <UART_SetConfig+0x4e4>)
 8007ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	f003 020f 	and.w	r2, r3, #15
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4422      	add	r2, r4
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	bf00      	nop
 8007ee6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007eea:	46bd      	mov	sp, r7
 8007eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef0:	51eb851f 	.word	0x51eb851f

08007ef4 <srand>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4b10      	ldr	r3, [pc, #64]	@ (8007f38 <srand+0x44>)
 8007ef8:	681d      	ldr	r5, [r3, #0]
 8007efa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007efc:	4604      	mov	r4, r0
 8007efe:	b9b3      	cbnz	r3, 8007f2e <srand+0x3a>
 8007f00:	2018      	movs	r0, #24
 8007f02:	f001 fe6b 	bl	8009bdc <malloc>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6328      	str	r0, [r5, #48]	@ 0x30
 8007f0a:	b920      	cbnz	r0, 8007f16 <srand+0x22>
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f3c <srand+0x48>)
 8007f0e:	480c      	ldr	r0, [pc, #48]	@ (8007f40 <srand+0x4c>)
 8007f10:	2146      	movs	r1, #70	@ 0x46
 8007f12:	f000 ffa1 	bl	8008e58 <__assert_func>
 8007f16:	490b      	ldr	r1, [pc, #44]	@ (8007f44 <srand+0x50>)
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <srand+0x54>)
 8007f1a:	e9c0 1300 	strd	r1, r3, [r0]
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f4c <srand+0x58>)
 8007f20:	6083      	str	r3, [r0, #8]
 8007f22:	230b      	movs	r3, #11
 8007f24:	8183      	strh	r3, [r0, #12]
 8007f26:	2100      	movs	r1, #0
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007f30:	2200      	movs	r2, #0
 8007f32:	611c      	str	r4, [r3, #16]
 8007f34:	615a      	str	r2, [r3, #20]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	20000038 	.word	0x20000038
 8007f3c:	0800ba0c 	.word	0x0800ba0c
 8007f40:	0800ba23 	.word	0x0800ba23
 8007f44:	abcd330e 	.word	0xabcd330e
 8007f48:	e66d1234 	.word	0xe66d1234
 8007f4c:	0005deec 	.word	0x0005deec

08007f50 <rand>:
 8007f50:	4b16      	ldr	r3, [pc, #88]	@ (8007fac <rand+0x5c>)
 8007f52:	b510      	push	{r4, lr}
 8007f54:	681c      	ldr	r4, [r3, #0]
 8007f56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007f58:	b9b3      	cbnz	r3, 8007f88 <rand+0x38>
 8007f5a:	2018      	movs	r0, #24
 8007f5c:	f001 fe3e 	bl	8009bdc <malloc>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6320      	str	r0, [r4, #48]	@ 0x30
 8007f64:	b920      	cbnz	r0, 8007f70 <rand+0x20>
 8007f66:	4b12      	ldr	r3, [pc, #72]	@ (8007fb0 <rand+0x60>)
 8007f68:	4812      	ldr	r0, [pc, #72]	@ (8007fb4 <rand+0x64>)
 8007f6a:	2152      	movs	r1, #82	@ 0x52
 8007f6c:	f000 ff74 	bl	8008e58 <__assert_func>
 8007f70:	4911      	ldr	r1, [pc, #68]	@ (8007fb8 <rand+0x68>)
 8007f72:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <rand+0x6c>)
 8007f74:	e9c0 1300 	strd	r1, r3, [r0]
 8007f78:	4b11      	ldr	r3, [pc, #68]	@ (8007fc0 <rand+0x70>)
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	230b      	movs	r3, #11
 8007f7e:	8183      	strh	r3, [r0, #12]
 8007f80:	2100      	movs	r1, #0
 8007f82:	2001      	movs	r0, #1
 8007f84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007f8a:	480e      	ldr	r0, [pc, #56]	@ (8007fc4 <rand+0x74>)
 8007f8c:	690b      	ldr	r3, [r1, #16]
 8007f8e:	694c      	ldr	r4, [r1, #20]
 8007f90:	4a0d      	ldr	r2, [pc, #52]	@ (8007fc8 <rand+0x78>)
 8007f92:	4358      	muls	r0, r3
 8007f94:	fb02 0004 	mla	r0, r2, r4, r0
 8007f98:	fba3 3202 	umull	r3, r2, r3, r2
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	eb40 0002 	adc.w	r0, r0, r2
 8007fa2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007fa6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007faa:	bd10      	pop	{r4, pc}
 8007fac:	20000038 	.word	0x20000038
 8007fb0:	0800ba0c 	.word	0x0800ba0c
 8007fb4:	0800ba23 	.word	0x0800ba23
 8007fb8:	abcd330e 	.word	0xabcd330e
 8007fbc:	e66d1234 	.word	0xe66d1234
 8007fc0:	0005deec 	.word	0x0005deec
 8007fc4:	5851f42d 	.word	0x5851f42d
 8007fc8:	4c957f2d 	.word	0x4c957f2d

08007fcc <__cvt>:
 8007fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	ec57 6b10 	vmov	r6, r7, d0
 8007fd4:	2f00      	cmp	r7, #0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4619      	mov	r1, r3
 8007fda:	463b      	mov	r3, r7
 8007fdc:	bfbb      	ittet	lt
 8007fde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007fe2:	461f      	movlt	r7, r3
 8007fe4:	2300      	movge	r3, #0
 8007fe6:	232d      	movlt	r3, #45	@ 0x2d
 8007fe8:	700b      	strb	r3, [r1, #0]
 8007fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ff0:	4691      	mov	r9, r2
 8007ff2:	f023 0820 	bic.w	r8, r3, #32
 8007ff6:	bfbc      	itt	lt
 8007ff8:	4632      	movlt	r2, r6
 8007ffa:	4616      	movlt	r6, r2
 8007ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008000:	d005      	beq.n	800800e <__cvt+0x42>
 8008002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008006:	d100      	bne.n	800800a <__cvt+0x3e>
 8008008:	3401      	adds	r4, #1
 800800a:	2102      	movs	r1, #2
 800800c:	e000      	b.n	8008010 <__cvt+0x44>
 800800e:	2103      	movs	r1, #3
 8008010:	ab03      	add	r3, sp, #12
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	ab02      	add	r3, sp, #8
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	ec47 6b10 	vmov	d0, r6, r7
 800801c:	4653      	mov	r3, sl
 800801e:	4622      	mov	r2, r4
 8008020:	f000 ffc2 	bl	8008fa8 <_dtoa_r>
 8008024:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008028:	4605      	mov	r5, r0
 800802a:	d119      	bne.n	8008060 <__cvt+0x94>
 800802c:	f019 0f01 	tst.w	r9, #1
 8008030:	d00e      	beq.n	8008050 <__cvt+0x84>
 8008032:	eb00 0904 	add.w	r9, r0, r4
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	4630      	mov	r0, r6
 800803c:	4639      	mov	r1, r7
 800803e:	f7f8 fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008042:	b108      	cbz	r0, 8008048 <__cvt+0x7c>
 8008044:	f8cd 900c 	str.w	r9, [sp, #12]
 8008048:	2230      	movs	r2, #48	@ 0x30
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	454b      	cmp	r3, r9
 800804e:	d31e      	bcc.n	800808e <__cvt+0xc2>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008054:	1b5b      	subs	r3, r3, r5
 8008056:	4628      	mov	r0, r5
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	b004      	add	sp, #16
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008064:	eb00 0904 	add.w	r9, r0, r4
 8008068:	d1e5      	bne.n	8008036 <__cvt+0x6a>
 800806a:	7803      	ldrb	r3, [r0, #0]
 800806c:	2b30      	cmp	r3, #48	@ 0x30
 800806e:	d10a      	bne.n	8008086 <__cvt+0xba>
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800807c:	b918      	cbnz	r0, 8008086 <__cvt+0xba>
 800807e:	f1c4 0401 	rsb	r4, r4, #1
 8008082:	f8ca 4000 	str.w	r4, [sl]
 8008086:	f8da 3000 	ldr.w	r3, [sl]
 800808a:	4499      	add	r9, r3
 800808c:	e7d3      	b.n	8008036 <__cvt+0x6a>
 800808e:	1c59      	adds	r1, r3, #1
 8008090:	9103      	str	r1, [sp, #12]
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e7d9      	b.n	800804a <__cvt+0x7e>

08008096 <__exponent>:
 8008096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008098:	2900      	cmp	r1, #0
 800809a:	bfba      	itte	lt
 800809c:	4249      	neglt	r1, r1
 800809e:	232d      	movlt	r3, #45	@ 0x2d
 80080a0:	232b      	movge	r3, #43	@ 0x2b
 80080a2:	2909      	cmp	r1, #9
 80080a4:	7002      	strb	r2, [r0, #0]
 80080a6:	7043      	strb	r3, [r0, #1]
 80080a8:	dd29      	ble.n	80080fe <__exponent+0x68>
 80080aa:	f10d 0307 	add.w	r3, sp, #7
 80080ae:	461d      	mov	r5, r3
 80080b0:	270a      	movs	r7, #10
 80080b2:	461a      	mov	r2, r3
 80080b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80080b8:	fb07 1416 	mls	r4, r7, r6, r1
 80080bc:	3430      	adds	r4, #48	@ 0x30
 80080be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080c2:	460c      	mov	r4, r1
 80080c4:	2c63      	cmp	r4, #99	@ 0x63
 80080c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ca:	4631      	mov	r1, r6
 80080cc:	dcf1      	bgt.n	80080b2 <__exponent+0x1c>
 80080ce:	3130      	adds	r1, #48	@ 0x30
 80080d0:	1e94      	subs	r4, r2, #2
 80080d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080d6:	1c41      	adds	r1, r0, #1
 80080d8:	4623      	mov	r3, r4
 80080da:	42ab      	cmp	r3, r5
 80080dc:	d30a      	bcc.n	80080f4 <__exponent+0x5e>
 80080de:	f10d 0309 	add.w	r3, sp, #9
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	42ac      	cmp	r4, r5
 80080e6:	bf88      	it	hi
 80080e8:	2300      	movhi	r3, #0
 80080ea:	3302      	adds	r3, #2
 80080ec:	4403      	add	r3, r0
 80080ee:	1a18      	subs	r0, r3, r0
 80080f0:	b003      	add	sp, #12
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80080f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80080fc:	e7ed      	b.n	80080da <__exponent+0x44>
 80080fe:	2330      	movs	r3, #48	@ 0x30
 8008100:	3130      	adds	r1, #48	@ 0x30
 8008102:	7083      	strb	r3, [r0, #2]
 8008104:	70c1      	strb	r1, [r0, #3]
 8008106:	1d03      	adds	r3, r0, #4
 8008108:	e7f1      	b.n	80080ee <__exponent+0x58>
	...

0800810c <_printf_float>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	b08d      	sub	sp, #52	@ 0x34
 8008112:	460c      	mov	r4, r1
 8008114:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008118:	4616      	mov	r6, r2
 800811a:	461f      	mov	r7, r3
 800811c:	4605      	mov	r5, r0
 800811e:	f000 fe03 	bl	8008d28 <_localeconv_r>
 8008122:	6803      	ldr	r3, [r0, #0]
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 f8aa 	bl	8000280 <strlen>
 800812c:	2300      	movs	r3, #0
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	f8d8 3000 	ldr.w	r3, [r8]
 8008134:	9005      	str	r0, [sp, #20]
 8008136:	3307      	adds	r3, #7
 8008138:	f023 0307 	bic.w	r3, r3, #7
 800813c:	f103 0208 	add.w	r2, r3, #8
 8008140:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008144:	f8d4 b000 	ldr.w	fp, [r4]
 8008148:	f8c8 2000 	str.w	r2, [r8]
 800814c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008154:	9307      	str	r3, [sp, #28]
 8008156:	f8cd 8018 	str.w	r8, [sp, #24]
 800815a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800815e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008162:	4b9c      	ldr	r3, [pc, #624]	@ (80083d4 <_printf_float+0x2c8>)
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	f7f8 fce8 	bl	8000b3c <__aeabi_dcmpun>
 800816c:	bb70      	cbnz	r0, 80081cc <_printf_float+0xc0>
 800816e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008172:	4b98      	ldr	r3, [pc, #608]	@ (80083d4 <_printf_float+0x2c8>)
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	f7f8 fcc2 	bl	8000b00 <__aeabi_dcmple>
 800817c:	bb30      	cbnz	r0, 80081cc <_printf_float+0xc0>
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	4640      	mov	r0, r8
 8008184:	4649      	mov	r1, r9
 8008186:	f7f8 fcb1 	bl	8000aec <__aeabi_dcmplt>
 800818a:	b110      	cbz	r0, 8008192 <_printf_float+0x86>
 800818c:	232d      	movs	r3, #45	@ 0x2d
 800818e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008192:	4a91      	ldr	r2, [pc, #580]	@ (80083d8 <_printf_float+0x2cc>)
 8008194:	4b91      	ldr	r3, [pc, #580]	@ (80083dc <_printf_float+0x2d0>)
 8008196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800819a:	bf8c      	ite	hi
 800819c:	4690      	movhi	r8, r2
 800819e:	4698      	movls	r8, r3
 80081a0:	2303      	movs	r3, #3
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	f02b 0304 	bic.w	r3, fp, #4
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	f04f 0900 	mov.w	r9, #0
 80081ae:	9700      	str	r7, [sp, #0]
 80081b0:	4633      	mov	r3, r6
 80081b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f9d2 	bl	8008560 <_printf_common>
 80081bc:	3001      	adds	r0, #1
 80081be:	f040 808d 	bne.w	80082dc <_printf_float+0x1d0>
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	b00d      	add	sp, #52	@ 0x34
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	4642      	mov	r2, r8
 80081ce:	464b      	mov	r3, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f8 fcb2 	bl	8000b3c <__aeabi_dcmpun>
 80081d8:	b140      	cbz	r0, 80081ec <_printf_float+0xe0>
 80081da:	464b      	mov	r3, r9
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbc      	itt	lt
 80081e0:	232d      	movlt	r3, #45	@ 0x2d
 80081e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80081e6:	4a7e      	ldr	r2, [pc, #504]	@ (80083e0 <_printf_float+0x2d4>)
 80081e8:	4b7e      	ldr	r3, [pc, #504]	@ (80083e4 <_printf_float+0x2d8>)
 80081ea:	e7d4      	b.n	8008196 <_printf_float+0x8a>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80081f2:	9206      	str	r2, [sp, #24]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	d13b      	bne.n	8008270 <_printf_float+0x164>
 80081f8:	2306      	movs	r3, #6
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008200:	2300      	movs	r3, #0
 8008202:	6022      	str	r2, [r4, #0]
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	ab0a      	add	r3, sp, #40	@ 0x28
 8008208:	e9cd a301 	strd	sl, r3, [sp, #4]
 800820c:	ab09      	add	r3, sp, #36	@ 0x24
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	ec49 8b10 	vmov	d0, r8, r9
 8008216:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800821a:	4628      	mov	r0, r5
 800821c:	f7ff fed6 	bl	8007fcc <__cvt>
 8008220:	9b06      	ldr	r3, [sp, #24]
 8008222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008224:	2b47      	cmp	r3, #71	@ 0x47
 8008226:	4680      	mov	r8, r0
 8008228:	d129      	bne.n	800827e <_printf_float+0x172>
 800822a:	1cc8      	adds	r0, r1, #3
 800822c:	db02      	blt.n	8008234 <_printf_float+0x128>
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	4299      	cmp	r1, r3
 8008232:	dd41      	ble.n	80082b8 <_printf_float+0x1ac>
 8008234:	f1aa 0a02 	sub.w	sl, sl, #2
 8008238:	fa5f fa8a 	uxtb.w	sl, sl
 800823c:	3901      	subs	r1, #1
 800823e:	4652      	mov	r2, sl
 8008240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008244:	9109      	str	r1, [sp, #36]	@ 0x24
 8008246:	f7ff ff26 	bl	8008096 <__exponent>
 800824a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800824c:	1813      	adds	r3, r2, r0
 800824e:	2a01      	cmp	r2, #1
 8008250:	4681      	mov	r9, r0
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	dc02      	bgt.n	800825c <_printf_float+0x150>
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	07d2      	lsls	r2, r2, #31
 800825a:	d501      	bpl.n	8008260 <_printf_float+0x154>
 800825c:	3301      	adds	r3, #1
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0a2      	beq.n	80081ae <_printf_float+0xa2>
 8008268:	232d      	movs	r3, #45	@ 0x2d
 800826a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800826e:	e79e      	b.n	80081ae <_printf_float+0xa2>
 8008270:	9a06      	ldr	r2, [sp, #24]
 8008272:	2a47      	cmp	r2, #71	@ 0x47
 8008274:	d1c2      	bne.n	80081fc <_printf_float+0xf0>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1c0      	bne.n	80081fc <_printf_float+0xf0>
 800827a:	2301      	movs	r3, #1
 800827c:	e7bd      	b.n	80081fa <_printf_float+0xee>
 800827e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008282:	d9db      	bls.n	800823c <_printf_float+0x130>
 8008284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008288:	d118      	bne.n	80082bc <_printf_float+0x1b0>
 800828a:	2900      	cmp	r1, #0
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	dd0b      	ble.n	80082a8 <_printf_float+0x19c>
 8008290:	6121      	str	r1, [r4, #16]
 8008292:	b913      	cbnz	r3, 800829a <_printf_float+0x18e>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	07d0      	lsls	r0, r2, #31
 8008298:	d502      	bpl.n	80082a0 <_printf_float+0x194>
 800829a:	3301      	adds	r3, #1
 800829c:	440b      	add	r3, r1
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082a2:	f04f 0900 	mov.w	r9, #0
 80082a6:	e7db      	b.n	8008260 <_printf_float+0x154>
 80082a8:	b913      	cbnz	r3, 80082b0 <_printf_float+0x1a4>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	07d2      	lsls	r2, r2, #31
 80082ae:	d501      	bpl.n	80082b4 <_printf_float+0x1a8>
 80082b0:	3302      	adds	r3, #2
 80082b2:	e7f4      	b.n	800829e <_printf_float+0x192>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7f2      	b.n	800829e <_printf_float+0x192>
 80082b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082be:	4299      	cmp	r1, r3
 80082c0:	db05      	blt.n	80082ce <_printf_float+0x1c2>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	6121      	str	r1, [r4, #16]
 80082c6:	07d8      	lsls	r0, r3, #31
 80082c8:	d5ea      	bpl.n	80082a0 <_printf_float+0x194>
 80082ca:	1c4b      	adds	r3, r1, #1
 80082cc:	e7e7      	b.n	800829e <_printf_float+0x192>
 80082ce:	2900      	cmp	r1, #0
 80082d0:	bfd4      	ite	le
 80082d2:	f1c1 0202 	rsble	r2, r1, #2
 80082d6:	2201      	movgt	r2, #1
 80082d8:	4413      	add	r3, r2
 80082da:	e7e0      	b.n	800829e <_printf_float+0x192>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	055a      	lsls	r2, r3, #21
 80082e0:	d407      	bmi.n	80082f2 <_printf_float+0x1e6>
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	4642      	mov	r2, r8
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	d12b      	bne.n	8008348 <_printf_float+0x23c>
 80082f0:	e767      	b.n	80081c2 <_printf_float+0xb6>
 80082f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082f6:	f240 80dd 	bls.w	80084b4 <_printf_float+0x3a8>
 80082fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	f7f8 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008306:	2800      	cmp	r0, #0
 8008308:	d033      	beq.n	8008372 <_printf_float+0x266>
 800830a:	4a37      	ldr	r2, [pc, #220]	@ (80083e8 <_printf_float+0x2dc>)
 800830c:	2301      	movs	r3, #1
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f af54 	beq.w	80081c2 <_printf_float+0xb6>
 800831a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800831e:	4543      	cmp	r3, r8
 8008320:	db02      	blt.n	8008328 <_printf_float+0x21c>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	07d8      	lsls	r0, r3, #31
 8008326:	d50f      	bpl.n	8008348 <_printf_float+0x23c>
 8008328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af45 	beq.w	80081c2 <_printf_float+0xb6>
 8008338:	f04f 0900 	mov.w	r9, #0
 800833c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008340:	f104 0a1a 	add.w	sl, r4, #26
 8008344:	45c8      	cmp	r8, r9
 8008346:	dc09      	bgt.n	800835c <_printf_float+0x250>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	079b      	lsls	r3, r3, #30
 800834c:	f100 8103 	bmi.w	8008556 <_printf_float+0x44a>
 8008350:	68e0      	ldr	r0, [r4, #12]
 8008352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008354:	4298      	cmp	r0, r3
 8008356:	bfb8      	it	lt
 8008358:	4618      	movlt	r0, r3
 800835a:	e734      	b.n	80081c6 <_printf_float+0xba>
 800835c:	2301      	movs	r3, #1
 800835e:	4652      	mov	r2, sl
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af2b 	beq.w	80081c2 <_printf_float+0xb6>
 800836c:	f109 0901 	add.w	r9, r9, #1
 8008370:	e7e8      	b.n	8008344 <_printf_float+0x238>
 8008372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc39      	bgt.n	80083ec <_printf_float+0x2e0>
 8008378:	4a1b      	ldr	r2, [pc, #108]	@ (80083e8 <_printf_float+0x2dc>)
 800837a:	2301      	movs	r3, #1
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	f43f af1d 	beq.w	80081c2 <_printf_float+0xb6>
 8008388:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800838c:	ea59 0303 	orrs.w	r3, r9, r3
 8008390:	d102      	bne.n	8008398 <_printf_float+0x28c>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	07d9      	lsls	r1, r3, #31
 8008396:	d5d7      	bpl.n	8008348 <_printf_float+0x23c>
 8008398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f af0d 	beq.w	80081c2 <_printf_float+0xb6>
 80083a8:	f04f 0a00 	mov.w	sl, #0
 80083ac:	f104 0b1a 	add.w	fp, r4, #26
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	425b      	negs	r3, r3
 80083b4:	4553      	cmp	r3, sl
 80083b6:	dc01      	bgt.n	80083bc <_printf_float+0x2b0>
 80083b8:	464b      	mov	r3, r9
 80083ba:	e793      	b.n	80082e4 <_printf_float+0x1d8>
 80083bc:	2301      	movs	r3, #1
 80083be:	465a      	mov	r2, fp
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f aefb 	beq.w	80081c2 <_printf_float+0xb6>
 80083cc:	f10a 0a01 	add.w	sl, sl, #1
 80083d0:	e7ee      	b.n	80083b0 <_printf_float+0x2a4>
 80083d2:	bf00      	nop
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	0800ba7f 	.word	0x0800ba7f
 80083dc:	0800ba7b 	.word	0x0800ba7b
 80083e0:	0800ba87 	.word	0x0800ba87
 80083e4:	0800ba83 	.word	0x0800ba83
 80083e8:	0800ba8b 	.word	0x0800ba8b
 80083ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083f2:	4553      	cmp	r3, sl
 80083f4:	bfa8      	it	ge
 80083f6:	4653      	movge	r3, sl
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	4699      	mov	r9, r3
 80083fc:	dc36      	bgt.n	800846c <_printf_float+0x360>
 80083fe:	f04f 0b00 	mov.w	fp, #0
 8008402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008406:	f104 021a 	add.w	r2, r4, #26
 800840a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800840c:	9306      	str	r3, [sp, #24]
 800840e:	eba3 0309 	sub.w	r3, r3, r9
 8008412:	455b      	cmp	r3, fp
 8008414:	dc31      	bgt.n	800847a <_printf_float+0x36e>
 8008416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008418:	459a      	cmp	sl, r3
 800841a:	dc3a      	bgt.n	8008492 <_printf_float+0x386>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07da      	lsls	r2, r3, #31
 8008420:	d437      	bmi.n	8008492 <_printf_float+0x386>
 8008422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008424:	ebaa 0903 	sub.w	r9, sl, r3
 8008428:	9b06      	ldr	r3, [sp, #24]
 800842a:	ebaa 0303 	sub.w	r3, sl, r3
 800842e:	4599      	cmp	r9, r3
 8008430:	bfa8      	it	ge
 8008432:	4699      	movge	r9, r3
 8008434:	f1b9 0f00 	cmp.w	r9, #0
 8008438:	dc33      	bgt.n	80084a2 <_printf_float+0x396>
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008442:	f104 0b1a 	add.w	fp, r4, #26
 8008446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008448:	ebaa 0303 	sub.w	r3, sl, r3
 800844c:	eba3 0309 	sub.w	r3, r3, r9
 8008450:	4543      	cmp	r3, r8
 8008452:	f77f af79 	ble.w	8008348 <_printf_float+0x23c>
 8008456:	2301      	movs	r3, #1
 8008458:	465a      	mov	r2, fp
 800845a:	4631      	mov	r1, r6
 800845c:	4628      	mov	r0, r5
 800845e:	47b8      	blx	r7
 8008460:	3001      	adds	r0, #1
 8008462:	f43f aeae 	beq.w	80081c2 <_printf_float+0xb6>
 8008466:	f108 0801 	add.w	r8, r8, #1
 800846a:	e7ec      	b.n	8008446 <_printf_float+0x33a>
 800846c:	4642      	mov	r2, r8
 800846e:	4631      	mov	r1, r6
 8008470:	4628      	mov	r0, r5
 8008472:	47b8      	blx	r7
 8008474:	3001      	adds	r0, #1
 8008476:	d1c2      	bne.n	80083fe <_printf_float+0x2f2>
 8008478:	e6a3      	b.n	80081c2 <_printf_float+0xb6>
 800847a:	2301      	movs	r3, #1
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	9206      	str	r2, [sp, #24]
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae9c 	beq.w	80081c2 <_printf_float+0xb6>
 800848a:	9a06      	ldr	r2, [sp, #24]
 800848c:	f10b 0b01 	add.w	fp, fp, #1
 8008490:	e7bb      	b.n	800840a <_printf_float+0x2fe>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	d1c0      	bne.n	8008422 <_printf_float+0x316>
 80084a0:	e68f      	b.n	80081c2 <_printf_float+0xb6>
 80084a2:	9a06      	ldr	r2, [sp, #24]
 80084a4:	464b      	mov	r3, r9
 80084a6:	4442      	add	r2, r8
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	d1c3      	bne.n	800843a <_printf_float+0x32e>
 80084b2:	e686      	b.n	80081c2 <_printf_float+0xb6>
 80084b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084b8:	f1ba 0f01 	cmp.w	sl, #1
 80084bc:	dc01      	bgt.n	80084c2 <_printf_float+0x3b6>
 80084be:	07db      	lsls	r3, r3, #31
 80084c0:	d536      	bpl.n	8008530 <_printf_float+0x424>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4642      	mov	r2, r8
 80084c6:	4631      	mov	r1, r6
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b8      	blx	r7
 80084cc:	3001      	adds	r0, #1
 80084ce:	f43f ae78 	beq.w	80081c2 <_printf_float+0xb6>
 80084d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	f43f ae70 	beq.w	80081c2 <_printf_float+0xb6>
 80084e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084e6:	2200      	movs	r2, #0
 80084e8:	2300      	movs	r3, #0
 80084ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ee:	f7f8 faf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80084f2:	b9c0      	cbnz	r0, 8008526 <_printf_float+0x41a>
 80084f4:	4653      	mov	r3, sl
 80084f6:	f108 0201 	add.w	r2, r8, #1
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	d10c      	bne.n	800851e <_printf_float+0x412>
 8008504:	e65d      	b.n	80081c2 <_printf_float+0xb6>
 8008506:	2301      	movs	r3, #1
 8008508:	465a      	mov	r2, fp
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f ae56 	beq.w	80081c2 <_printf_float+0xb6>
 8008516:	f108 0801 	add.w	r8, r8, #1
 800851a:	45d0      	cmp	r8, sl
 800851c:	dbf3      	blt.n	8008506 <_printf_float+0x3fa>
 800851e:	464b      	mov	r3, r9
 8008520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008524:	e6df      	b.n	80082e6 <_printf_float+0x1da>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	f104 0b1a 	add.w	fp, r4, #26
 800852e:	e7f4      	b.n	800851a <_printf_float+0x40e>
 8008530:	2301      	movs	r3, #1
 8008532:	4642      	mov	r2, r8
 8008534:	e7e1      	b.n	80084fa <_printf_float+0x3ee>
 8008536:	2301      	movs	r3, #1
 8008538:	464a      	mov	r2, r9
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae3e 	beq.w	80081c2 <_printf_float+0xb6>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	68e3      	ldr	r3, [r4, #12]
 800854c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800854e:	1a5b      	subs	r3, r3, r1
 8008550:	4543      	cmp	r3, r8
 8008552:	dcf0      	bgt.n	8008536 <_printf_float+0x42a>
 8008554:	e6fc      	b.n	8008350 <_printf_float+0x244>
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	f104 0919 	add.w	r9, r4, #25
 800855e:	e7f4      	b.n	800854a <_printf_float+0x43e>

08008560 <_printf_common>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	4698      	mov	r8, r3
 8008568:	688a      	ldr	r2, [r1, #8]
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008570:	4293      	cmp	r3, r2
 8008572:	bfb8      	it	lt
 8008574:	4613      	movlt	r3, r2
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800857c:	4607      	mov	r7, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b10a      	cbz	r2, 8008586 <_printf_common+0x26>
 8008582:	3301      	adds	r3, #1
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	6833      	ldrmi	r3, [r6, #0]
 800858e:	3302      	addmi	r3, #2
 8008590:	6033      	strmi	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	f015 0506 	ands.w	r5, r5, #6
 8008598:	d106      	bne.n	80085a8 <_printf_common+0x48>
 800859a:	f104 0a19 	add.w	sl, r4, #25
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	6832      	ldr	r2, [r6, #0]
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dc26      	bgt.n	80085f6 <_printf_common+0x96>
 80085a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	3b00      	subs	r3, #0
 80085b0:	bf18      	it	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	0692      	lsls	r2, r2, #26
 80085b6:	d42b      	bmi.n	8008610 <_printf_common+0xb0>
 80085b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085bc:	4641      	mov	r1, r8
 80085be:	4638      	mov	r0, r7
 80085c0:	47c8      	blx	r9
 80085c2:	3001      	adds	r0, #1
 80085c4:	d01e      	beq.n	8008604 <_printf_common+0xa4>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	f003 0306 	and.w	r3, r3, #6
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	bf02      	ittt	eq
 80085d2:	68e5      	ldreq	r5, [r4, #12]
 80085d4:	6833      	ldreq	r3, [r6, #0]
 80085d6:	1aed      	subeq	r5, r5, r3
 80085d8:	68a3      	ldr	r3, [r4, #8]
 80085da:	bf0c      	ite	eq
 80085dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e0:	2500      	movne	r5, #0
 80085e2:	4293      	cmp	r3, r2
 80085e4:	bfc4      	itt	gt
 80085e6:	1a9b      	subgt	r3, r3, r2
 80085e8:	18ed      	addgt	r5, r5, r3
 80085ea:	2600      	movs	r6, #0
 80085ec:	341a      	adds	r4, #26
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	d11a      	bne.n	8008628 <_printf_common+0xc8>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e008      	b.n	8008608 <_printf_common+0xa8>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4641      	mov	r1, r8
 80085fc:	4638      	mov	r0, r7
 80085fe:	47c8      	blx	r9
 8008600:	3001      	adds	r0, #1
 8008602:	d103      	bne.n	800860c <_printf_common+0xac>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	3501      	adds	r5, #1
 800860e:	e7c6      	b.n	800859e <_printf_common+0x3e>
 8008610:	18e1      	adds	r1, r4, r3
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	2030      	movs	r0, #48	@ 0x30
 8008616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800861a:	4422      	add	r2, r4
 800861c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008624:	3302      	adds	r3, #2
 8008626:	e7c7      	b.n	80085b8 <_printf_common+0x58>
 8008628:	2301      	movs	r3, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4641      	mov	r1, r8
 800862e:	4638      	mov	r0, r7
 8008630:	47c8      	blx	r9
 8008632:	3001      	adds	r0, #1
 8008634:	d0e6      	beq.n	8008604 <_printf_common+0xa4>
 8008636:	3601      	adds	r6, #1
 8008638:	e7d9      	b.n	80085ee <_printf_common+0x8e>
	...

0800863c <_printf_i>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	7e0f      	ldrb	r7, [r1, #24]
 8008642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008644:	2f78      	cmp	r7, #120	@ 0x78
 8008646:	4691      	mov	r9, r2
 8008648:	4680      	mov	r8, r0
 800864a:	460c      	mov	r4, r1
 800864c:	469a      	mov	sl, r3
 800864e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008652:	d807      	bhi.n	8008664 <_printf_i+0x28>
 8008654:	2f62      	cmp	r7, #98	@ 0x62
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x32>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f000 80d1 	beq.w	8008800 <_printf_i+0x1c4>
 800865e:	2f58      	cmp	r7, #88	@ 0x58
 8008660:	f000 80b8 	beq.w	80087d4 <_printf_i+0x198>
 8008664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800866c:	e03a      	b.n	80086e4 <_printf_i+0xa8>
 800866e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008672:	2b15      	cmp	r3, #21
 8008674:	d8f6      	bhi.n	8008664 <_printf_i+0x28>
 8008676:	a101      	add	r1, pc, #4	@ (adr r1, 800867c <_printf_i+0x40>)
 8008678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086e9 	.word	0x080086e9
 8008684:	08008665 	.word	0x08008665
 8008688:	08008665 	.word	0x08008665
 800868c:	08008665 	.word	0x08008665
 8008690:	08008665 	.word	0x08008665
 8008694:	080086e9 	.word	0x080086e9
 8008698:	08008665 	.word	0x08008665
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	080087e7 	.word	0x080087e7
 80086ac:	08008713 	.word	0x08008713
 80086b0:	080087a1 	.word	0x080087a1
 80086b4:	08008665 	.word	0x08008665
 80086b8:	08008665 	.word	0x08008665
 80086bc:	08008809 	.word	0x08008809
 80086c0:	08008665 	.word	0x08008665
 80086c4:	08008713 	.word	0x08008713
 80086c8:	08008665 	.word	0x08008665
 80086cc:	08008665 	.word	0x08008665
 80086d0:	080087a9 	.word	0x080087a9
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6032      	str	r2, [r6, #0]
 80086dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086e4:	2301      	movs	r3, #1
 80086e6:	e09c      	b.n	8008822 <_printf_i+0x1e6>
 80086e8:	6833      	ldr	r3, [r6, #0]
 80086ea:	6820      	ldr	r0, [r4, #0]
 80086ec:	1d19      	adds	r1, r3, #4
 80086ee:	6031      	str	r1, [r6, #0]
 80086f0:	0606      	lsls	r6, r0, #24
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0xbc>
 80086f4:	681d      	ldr	r5, [r3, #0]
 80086f6:	e003      	b.n	8008700 <_printf_i+0xc4>
 80086f8:	0645      	lsls	r5, r0, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0xb8>
 80086fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008700:	2d00      	cmp	r5, #0
 8008702:	da03      	bge.n	800870c <_printf_i+0xd0>
 8008704:	232d      	movs	r3, #45	@ 0x2d
 8008706:	426d      	negs	r5, r5
 8008708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800870c:	4858      	ldr	r0, [pc, #352]	@ (8008870 <_printf_i+0x234>)
 800870e:	230a      	movs	r3, #10
 8008710:	e011      	b.n	8008736 <_printf_i+0xfa>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	6833      	ldr	r3, [r6, #0]
 8008716:	0608      	lsls	r0, r1, #24
 8008718:	f853 5b04 	ldr.w	r5, [r3], #4
 800871c:	d402      	bmi.n	8008724 <_printf_i+0xe8>
 800871e:	0649      	lsls	r1, r1, #25
 8008720:	bf48      	it	mi
 8008722:	b2ad      	uxthmi	r5, r5
 8008724:	2f6f      	cmp	r7, #111	@ 0x6f
 8008726:	4852      	ldr	r0, [pc, #328]	@ (8008870 <_printf_i+0x234>)
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	bf14      	ite	ne
 800872c:	230a      	movne	r3, #10
 800872e:	2308      	moveq	r3, #8
 8008730:	2100      	movs	r1, #0
 8008732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008736:	6866      	ldr	r6, [r4, #4]
 8008738:	60a6      	str	r6, [r4, #8]
 800873a:	2e00      	cmp	r6, #0
 800873c:	db05      	blt.n	800874a <_printf_i+0x10e>
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	432e      	orrs	r6, r5
 8008742:	f021 0104 	bic.w	r1, r1, #4
 8008746:	6021      	str	r1, [r4, #0]
 8008748:	d04b      	beq.n	80087e2 <_printf_i+0x1a6>
 800874a:	4616      	mov	r6, r2
 800874c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008750:	fb03 5711 	mls	r7, r3, r1, r5
 8008754:	5dc7      	ldrb	r7, [r0, r7]
 8008756:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800875a:	462f      	mov	r7, r5
 800875c:	42bb      	cmp	r3, r7
 800875e:	460d      	mov	r5, r1
 8008760:	d9f4      	bls.n	800874c <_printf_i+0x110>
 8008762:	2b08      	cmp	r3, #8
 8008764:	d10b      	bne.n	800877e <_printf_i+0x142>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	07df      	lsls	r7, r3, #31
 800876a:	d508      	bpl.n	800877e <_printf_i+0x142>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	6861      	ldr	r1, [r4, #4]
 8008770:	4299      	cmp	r1, r3
 8008772:	bfde      	ittt	le
 8008774:	2330      	movle	r3, #48	@ 0x30
 8008776:	f806 3c01 	strble.w	r3, [r6, #-1]
 800877a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800877e:	1b92      	subs	r2, r2, r6
 8008780:	6122      	str	r2, [r4, #16]
 8008782:	f8cd a000 	str.w	sl, [sp]
 8008786:	464b      	mov	r3, r9
 8008788:	aa03      	add	r2, sp, #12
 800878a:	4621      	mov	r1, r4
 800878c:	4640      	mov	r0, r8
 800878e:	f7ff fee7 	bl	8008560 <_printf_common>
 8008792:	3001      	adds	r0, #1
 8008794:	d14a      	bne.n	800882c <_printf_i+0x1f0>
 8008796:	f04f 30ff 	mov.w	r0, #4294967295
 800879a:	b004      	add	sp, #16
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	f043 0320 	orr.w	r3, r3, #32
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	4832      	ldr	r0, [pc, #200]	@ (8008874 <_printf_i+0x238>)
 80087aa:	2778      	movs	r7, #120	@ 0x78
 80087ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	6831      	ldr	r1, [r6, #0]
 80087b4:	061f      	lsls	r7, r3, #24
 80087b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80087ba:	d402      	bmi.n	80087c2 <_printf_i+0x186>
 80087bc:	065f      	lsls	r7, r3, #25
 80087be:	bf48      	it	mi
 80087c0:	b2ad      	uxthmi	r5, r5
 80087c2:	6031      	str	r1, [r6, #0]
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	bf44      	itt	mi
 80087c8:	f043 0320 	orrmi.w	r3, r3, #32
 80087cc:	6023      	strmi	r3, [r4, #0]
 80087ce:	b11d      	cbz	r5, 80087d8 <_printf_i+0x19c>
 80087d0:	2310      	movs	r3, #16
 80087d2:	e7ad      	b.n	8008730 <_printf_i+0xf4>
 80087d4:	4826      	ldr	r0, [pc, #152]	@ (8008870 <_printf_i+0x234>)
 80087d6:	e7e9      	b.n	80087ac <_printf_i+0x170>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	f023 0320 	bic.w	r3, r3, #32
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	e7f6      	b.n	80087d0 <_printf_i+0x194>
 80087e2:	4616      	mov	r6, r2
 80087e4:	e7bd      	b.n	8008762 <_printf_i+0x126>
 80087e6:	6833      	ldr	r3, [r6, #0]
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	6961      	ldr	r1, [r4, #20]
 80087ec:	1d18      	adds	r0, r3, #4
 80087ee:	6030      	str	r0, [r6, #0]
 80087f0:	062e      	lsls	r6, r5, #24
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	d501      	bpl.n	80087fa <_printf_i+0x1be>
 80087f6:	6019      	str	r1, [r3, #0]
 80087f8:	e002      	b.n	8008800 <_printf_i+0x1c4>
 80087fa:	0668      	lsls	r0, r5, #25
 80087fc:	d5fb      	bpl.n	80087f6 <_printf_i+0x1ba>
 80087fe:	8019      	strh	r1, [r3, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	4616      	mov	r6, r2
 8008806:	e7bc      	b.n	8008782 <_printf_i+0x146>
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	6032      	str	r2, [r6, #0]
 800880e:	681e      	ldr	r6, [r3, #0]
 8008810:	6862      	ldr	r2, [r4, #4]
 8008812:	2100      	movs	r1, #0
 8008814:	4630      	mov	r0, r6
 8008816:	f7f7 fce3 	bl	80001e0 <memchr>
 800881a:	b108      	cbz	r0, 8008820 <_printf_i+0x1e4>
 800881c:	1b80      	subs	r0, r0, r6
 800881e:	6060      	str	r0, [r4, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	2300      	movs	r3, #0
 8008826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800882a:	e7aa      	b.n	8008782 <_printf_i+0x146>
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	4632      	mov	r2, r6
 8008830:	4649      	mov	r1, r9
 8008832:	4640      	mov	r0, r8
 8008834:	47d0      	blx	sl
 8008836:	3001      	adds	r0, #1
 8008838:	d0ad      	beq.n	8008796 <_printf_i+0x15a>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	079b      	lsls	r3, r3, #30
 800883e:	d413      	bmi.n	8008868 <_printf_i+0x22c>
 8008840:	68e0      	ldr	r0, [r4, #12]
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	4298      	cmp	r0, r3
 8008846:	bfb8      	it	lt
 8008848:	4618      	movlt	r0, r3
 800884a:	e7a6      	b.n	800879a <_printf_i+0x15e>
 800884c:	2301      	movs	r3, #1
 800884e:	4632      	mov	r2, r6
 8008850:	4649      	mov	r1, r9
 8008852:	4640      	mov	r0, r8
 8008854:	47d0      	blx	sl
 8008856:	3001      	adds	r0, #1
 8008858:	d09d      	beq.n	8008796 <_printf_i+0x15a>
 800885a:	3501      	adds	r5, #1
 800885c:	68e3      	ldr	r3, [r4, #12]
 800885e:	9903      	ldr	r1, [sp, #12]
 8008860:	1a5b      	subs	r3, r3, r1
 8008862:	42ab      	cmp	r3, r5
 8008864:	dcf2      	bgt.n	800884c <_printf_i+0x210>
 8008866:	e7eb      	b.n	8008840 <_printf_i+0x204>
 8008868:	2500      	movs	r5, #0
 800886a:	f104 0619 	add.w	r6, r4, #25
 800886e:	e7f5      	b.n	800885c <_printf_i+0x220>
 8008870:	0800ba8d 	.word	0x0800ba8d
 8008874:	0800ba9e 	.word	0x0800ba9e

08008878 <std>:
 8008878:	2300      	movs	r3, #0
 800887a:	b510      	push	{r4, lr}
 800887c:	4604      	mov	r4, r0
 800887e:	e9c0 3300 	strd	r3, r3, [r0]
 8008882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008886:	6083      	str	r3, [r0, #8]
 8008888:	8181      	strh	r1, [r0, #12]
 800888a:	6643      	str	r3, [r0, #100]	@ 0x64
 800888c:	81c2      	strh	r2, [r0, #14]
 800888e:	6183      	str	r3, [r0, #24]
 8008890:	4619      	mov	r1, r3
 8008892:	2208      	movs	r2, #8
 8008894:	305c      	adds	r0, #92	@ 0x5c
 8008896:	f000 fa23 	bl	8008ce0 <memset>
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <std+0x58>)
 800889c:	6263      	str	r3, [r4, #36]	@ 0x24
 800889e:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <std+0x5c>)
 80088a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088a2:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <std+0x60>)
 80088a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088a6:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <std+0x64>)
 80088a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80088aa:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <std+0x68>)
 80088ac:	6224      	str	r4, [r4, #32]
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d006      	beq.n	80088c0 <std+0x48>
 80088b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088b6:	4294      	cmp	r4, r2
 80088b8:	d002      	beq.n	80088c0 <std+0x48>
 80088ba:	33d0      	adds	r3, #208	@ 0xd0
 80088bc:	429c      	cmp	r4, r3
 80088be:	d105      	bne.n	80088cc <std+0x54>
 80088c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	f000 bab4 	b.w	8008e34 <__retarget_lock_init_recursive>
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	08008b31 	.word	0x08008b31
 80088d4:	08008b53 	.word	0x08008b53
 80088d8:	08008b8b 	.word	0x08008b8b
 80088dc:	08008baf 	.word	0x08008baf
 80088e0:	20000958 	.word	0x20000958

080088e4 <stdio_exit_handler>:
 80088e4:	4a02      	ldr	r2, [pc, #8]	@ (80088f0 <stdio_exit_handler+0xc>)
 80088e6:	4903      	ldr	r1, [pc, #12]	@ (80088f4 <stdio_exit_handler+0x10>)
 80088e8:	4803      	ldr	r0, [pc, #12]	@ (80088f8 <stdio_exit_handler+0x14>)
 80088ea:	f000 b869 	b.w	80089c0 <_fwalk_sglue>
 80088ee:	bf00      	nop
 80088f0:	2000002c 	.word	0x2000002c
 80088f4:	0800aa79 	.word	0x0800aa79
 80088f8:	2000003c 	.word	0x2000003c

080088fc <cleanup_stdio>:
 80088fc:	6841      	ldr	r1, [r0, #4]
 80088fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008930 <cleanup_stdio+0x34>)
 8008900:	4299      	cmp	r1, r3
 8008902:	b510      	push	{r4, lr}
 8008904:	4604      	mov	r4, r0
 8008906:	d001      	beq.n	800890c <cleanup_stdio+0x10>
 8008908:	f002 f8b6 	bl	800aa78 <_fflush_r>
 800890c:	68a1      	ldr	r1, [r4, #8]
 800890e:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <cleanup_stdio+0x38>)
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <cleanup_stdio+0x1e>
 8008914:	4620      	mov	r0, r4
 8008916:	f002 f8af 	bl	800aa78 <_fflush_r>
 800891a:	68e1      	ldr	r1, [r4, #12]
 800891c:	4b06      	ldr	r3, [pc, #24]	@ (8008938 <cleanup_stdio+0x3c>)
 800891e:	4299      	cmp	r1, r3
 8008920:	d004      	beq.n	800892c <cleanup_stdio+0x30>
 8008922:	4620      	mov	r0, r4
 8008924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008928:	f002 b8a6 	b.w	800aa78 <_fflush_r>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop
 8008930:	20000958 	.word	0x20000958
 8008934:	200009c0 	.word	0x200009c0
 8008938:	20000a28 	.word	0x20000a28

0800893c <global_stdio_init.part.0>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <global_stdio_init.part.0+0x30>)
 8008940:	4c0b      	ldr	r4, [pc, #44]	@ (8008970 <global_stdio_init.part.0+0x34>)
 8008942:	4a0c      	ldr	r2, [pc, #48]	@ (8008974 <global_stdio_init.part.0+0x38>)
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	4620      	mov	r0, r4
 8008948:	2200      	movs	r2, #0
 800894a:	2104      	movs	r1, #4
 800894c:	f7ff ff94 	bl	8008878 <std>
 8008950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008954:	2201      	movs	r2, #1
 8008956:	2109      	movs	r1, #9
 8008958:	f7ff ff8e 	bl	8008878 <std>
 800895c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008960:	2202      	movs	r2, #2
 8008962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008966:	2112      	movs	r1, #18
 8008968:	f7ff bf86 	b.w	8008878 <std>
 800896c:	20000a90 	.word	0x20000a90
 8008970:	20000958 	.word	0x20000958
 8008974:	080088e5 	.word	0x080088e5

08008978 <__sfp_lock_acquire>:
 8008978:	4801      	ldr	r0, [pc, #4]	@ (8008980 <__sfp_lock_acquire+0x8>)
 800897a:	f000 ba5c 	b.w	8008e36 <__retarget_lock_acquire_recursive>
 800897e:	bf00      	nop
 8008980:	20000a99 	.word	0x20000a99

08008984 <__sfp_lock_release>:
 8008984:	4801      	ldr	r0, [pc, #4]	@ (800898c <__sfp_lock_release+0x8>)
 8008986:	f000 ba57 	b.w	8008e38 <__retarget_lock_release_recursive>
 800898a:	bf00      	nop
 800898c:	20000a99 	.word	0x20000a99

08008990 <__sinit>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	f7ff fff0 	bl	8008978 <__sfp_lock_acquire>
 8008998:	6a23      	ldr	r3, [r4, #32]
 800899a:	b11b      	cbz	r3, 80089a4 <__sinit+0x14>
 800899c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a0:	f7ff bff0 	b.w	8008984 <__sfp_lock_release>
 80089a4:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <__sinit+0x28>)
 80089a6:	6223      	str	r3, [r4, #32]
 80089a8:	4b04      	ldr	r3, [pc, #16]	@ (80089bc <__sinit+0x2c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1f5      	bne.n	800899c <__sinit+0xc>
 80089b0:	f7ff ffc4 	bl	800893c <global_stdio_init.part.0>
 80089b4:	e7f2      	b.n	800899c <__sinit+0xc>
 80089b6:	bf00      	nop
 80089b8:	080088fd 	.word	0x080088fd
 80089bc:	20000a90 	.word	0x20000a90

080089c0 <_fwalk_sglue>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4607      	mov	r7, r0
 80089c6:	4688      	mov	r8, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	2600      	movs	r6, #0
 80089cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089d0:	f1b9 0901 	subs.w	r9, r9, #1
 80089d4:	d505      	bpl.n	80089e2 <_fwalk_sglue+0x22>
 80089d6:	6824      	ldr	r4, [r4, #0]
 80089d8:	2c00      	cmp	r4, #0
 80089da:	d1f7      	bne.n	80089cc <_fwalk_sglue+0xc>
 80089dc:	4630      	mov	r0, r6
 80089de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e2:	89ab      	ldrh	r3, [r5, #12]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d907      	bls.n	80089f8 <_fwalk_sglue+0x38>
 80089e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089ec:	3301      	adds	r3, #1
 80089ee:	d003      	beq.n	80089f8 <_fwalk_sglue+0x38>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c0      	blx	r8
 80089f6:	4306      	orrs	r6, r0
 80089f8:	3568      	adds	r5, #104	@ 0x68
 80089fa:	e7e9      	b.n	80089d0 <_fwalk_sglue+0x10>

080089fc <iprintf>:
 80089fc:	b40f      	push	{r0, r1, r2, r3}
 80089fe:	b507      	push	{r0, r1, r2, lr}
 8008a00:	4906      	ldr	r1, [pc, #24]	@ (8008a1c <iprintf+0x20>)
 8008a02:	ab04      	add	r3, sp, #16
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0a:	6881      	ldr	r1, [r0, #8]
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	f001 fe97 	bl	800a740 <_vfiprintf_r>
 8008a12:	b003      	add	sp, #12
 8008a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a18:	b004      	add	sp, #16
 8008a1a:	4770      	bx	lr
 8008a1c:	20000038 	.word	0x20000038

08008a20 <putchar>:
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <putchar+0xc>)
 8008a22:	4601      	mov	r1, r0
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	6882      	ldr	r2, [r0, #8]
 8008a28:	f002 b8c2 	b.w	800abb0 <_putc_r>
 8008a2c:	20000038 	.word	0x20000038

08008a30 <_puts_r>:
 8008a30:	6a03      	ldr	r3, [r0, #32]
 8008a32:	b570      	push	{r4, r5, r6, lr}
 8008a34:	6884      	ldr	r4, [r0, #8]
 8008a36:	4605      	mov	r5, r0
 8008a38:	460e      	mov	r6, r1
 8008a3a:	b90b      	cbnz	r3, 8008a40 <_puts_r+0x10>
 8008a3c:	f7ff ffa8 	bl	8008990 <__sinit>
 8008a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a42:	07db      	lsls	r3, r3, #31
 8008a44:	d405      	bmi.n	8008a52 <_puts_r+0x22>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_puts_r+0x22>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4e:	f000 f9f2 	bl	8008e36 <__retarget_lock_acquire_recursive>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	0719      	lsls	r1, r3, #28
 8008a56:	d502      	bpl.n	8008a5e <_puts_r+0x2e>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d135      	bne.n	8008aca <_puts_r+0x9a>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 f8e7 	bl	8008c34 <__swsetup_r>
 8008a66:	b380      	cbz	r0, 8008aca <_puts_r+0x9a>
 8008a68:	f04f 35ff 	mov.w	r5, #4294967295
 8008a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a6e:	07da      	lsls	r2, r3, #31
 8008a70:	d405      	bmi.n	8008a7e <_puts_r+0x4e>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	059b      	lsls	r3, r3, #22
 8008a76:	d402      	bmi.n	8008a7e <_puts_r+0x4e>
 8008a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a7a:	f000 f9dd 	bl	8008e38 <__retarget_lock_release_recursive>
 8008a7e:	4628      	mov	r0, r5
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da04      	bge.n	8008a90 <_puts_r+0x60>
 8008a86:	69a2      	ldr	r2, [r4, #24]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	dc17      	bgt.n	8008abc <_puts_r+0x8c>
 8008a8c:	290a      	cmp	r1, #10
 8008a8e:	d015      	beq.n	8008abc <_puts_r+0x8c>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6022      	str	r2, [r4, #0]
 8008a96:	7019      	strb	r1, [r3, #0]
 8008a98:	68a3      	ldr	r3, [r4, #8]
 8008a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	d1ed      	bne.n	8008a82 <_puts_r+0x52>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da11      	bge.n	8008ace <_puts_r+0x9e>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	210a      	movs	r1, #10
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f000 f881 	bl	8008bb6 <__swbuf_r>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d0d7      	beq.n	8008a68 <_puts_r+0x38>
 8008ab8:	250a      	movs	r5, #10
 8008aba:	e7d7      	b.n	8008a6c <_puts_r+0x3c>
 8008abc:	4622      	mov	r2, r4
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 f879 	bl	8008bb6 <__swbuf_r>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d1e7      	bne.n	8008a98 <_puts_r+0x68>
 8008ac8:	e7ce      	b.n	8008a68 <_puts_r+0x38>
 8008aca:	3e01      	subs	r6, #1
 8008acc:	e7e4      	b.n	8008a98 <_puts_r+0x68>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	6022      	str	r2, [r4, #0]
 8008ad4:	220a      	movs	r2, #10
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e7ee      	b.n	8008ab8 <_puts_r+0x88>
	...

08008adc <puts>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	@ (8008ae8 <puts+0xc>)
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	f7ff bfa5 	b.w	8008a30 <_puts_r>
 8008ae6:	bf00      	nop
 8008ae8:	20000038 	.word	0x20000038

08008aec <siprintf>:
 8008aec:	b40e      	push	{r1, r2, r3}
 8008aee:	b510      	push	{r4, lr}
 8008af0:	b09d      	sub	sp, #116	@ 0x74
 8008af2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008af4:	9002      	str	r0, [sp, #8]
 8008af6:	9006      	str	r0, [sp, #24]
 8008af8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008afc:	480a      	ldr	r0, [pc, #40]	@ (8008b28 <siprintf+0x3c>)
 8008afe:	9107      	str	r1, [sp, #28]
 8008b00:	9104      	str	r1, [sp, #16]
 8008b02:	490a      	ldr	r1, [pc, #40]	@ (8008b2c <siprintf+0x40>)
 8008b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b08:	9105      	str	r1, [sp, #20]
 8008b0a:	2400      	movs	r4, #0
 8008b0c:	a902      	add	r1, sp, #8
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008b14:	f001 fcee 	bl	800a4f4 <_svfiprintf_r>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	701c      	strb	r4, [r3, #0]
 8008b1c:	b01d      	add	sp, #116	@ 0x74
 8008b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b22:	b003      	add	sp, #12
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000038 	.word	0x20000038
 8008b2c:	ffff0208 	.word	0xffff0208

08008b30 <__sread>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	f000 f92e 	bl	8008d98 <_read_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	bfab      	itete	ge
 8008b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b42:	89a3      	ldrhlt	r3, [r4, #12]
 8008b44:	181b      	addge	r3, r3, r0
 8008b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b4a:	bfac      	ite	ge
 8008b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b4e:	81a3      	strhlt	r3, [r4, #12]
 8008b50:	bd10      	pop	{r4, pc}

08008b52 <__swrite>:
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	461f      	mov	r7, r3
 8008b58:	898b      	ldrh	r3, [r1, #12]
 8008b5a:	05db      	lsls	r3, r3, #23
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	4616      	mov	r6, r2
 8008b62:	d505      	bpl.n	8008b70 <__swrite+0x1e>
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2302      	movs	r3, #2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f000 f902 	bl	8008d74 <_lseek_r>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	f000 b919 	b.w	8008dbc <_write_r>

08008b8a <__sseek>:
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	f000 f8ef 	bl	8008d74 <_lseek_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	bf15      	itete	ne
 8008b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ba6:	81a3      	strheq	r3, [r4, #12]
 8008ba8:	bf18      	it	ne
 8008baa:	81a3      	strhne	r3, [r4, #12]
 8008bac:	bd10      	pop	{r4, pc}

08008bae <__sclose>:
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f000 b8bd 	b.w	8008d30 <_close_r>

08008bb6 <__swbuf_r>:
 8008bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb8:	460e      	mov	r6, r1
 8008bba:	4614      	mov	r4, r2
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	b118      	cbz	r0, 8008bc8 <__swbuf_r+0x12>
 8008bc0:	6a03      	ldr	r3, [r0, #32]
 8008bc2:	b90b      	cbnz	r3, 8008bc8 <__swbuf_r+0x12>
 8008bc4:	f7ff fee4 	bl	8008990 <__sinit>
 8008bc8:	69a3      	ldr	r3, [r4, #24]
 8008bca:	60a3      	str	r3, [r4, #8]
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	071a      	lsls	r2, r3, #28
 8008bd0:	d501      	bpl.n	8008bd6 <__swbuf_r+0x20>
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	b943      	cbnz	r3, 8008be8 <__swbuf_r+0x32>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f82b 	bl	8008c34 <__swsetup_r>
 8008bde:	b118      	cbz	r0, 8008be8 <__swbuf_r+0x32>
 8008be0:	f04f 37ff 	mov.w	r7, #4294967295
 8008be4:	4638      	mov	r0, r7
 8008be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	1a98      	subs	r0, r3, r2
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	b2f6      	uxtb	r6, r6
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	dc05      	bgt.n	8008c04 <__swbuf_r+0x4e>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f001 ff3c 	bl	800aa78 <_fflush_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1ed      	bne.n	8008be0 <__swbuf_r+0x2a>
 8008c04:	68a3      	ldr	r3, [r4, #8]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	60a3      	str	r3, [r4, #8]
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	701e      	strb	r6, [r3, #0]
 8008c12:	6962      	ldr	r2, [r4, #20]
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d004      	beq.n	8008c24 <__swbuf_r+0x6e>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	07db      	lsls	r3, r3, #31
 8008c1e:	d5e1      	bpl.n	8008be4 <__swbuf_r+0x2e>
 8008c20:	2e0a      	cmp	r6, #10
 8008c22:	d1df      	bne.n	8008be4 <__swbuf_r+0x2e>
 8008c24:	4621      	mov	r1, r4
 8008c26:	4628      	mov	r0, r5
 8008c28:	f001 ff26 	bl	800aa78 <_fflush_r>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d0d9      	beq.n	8008be4 <__swbuf_r+0x2e>
 8008c30:	e7d6      	b.n	8008be0 <__swbuf_r+0x2a>
	...

08008c34 <__swsetup_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4b29      	ldr	r3, [pc, #164]	@ (8008cdc <__swsetup_r+0xa8>)
 8008c38:	4605      	mov	r5, r0
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	b118      	cbz	r0, 8008c48 <__swsetup_r+0x14>
 8008c40:	6a03      	ldr	r3, [r0, #32]
 8008c42:	b90b      	cbnz	r3, 8008c48 <__swsetup_r+0x14>
 8008c44:	f7ff fea4 	bl	8008990 <__sinit>
 8008c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4c:	0719      	lsls	r1, r3, #28
 8008c4e:	d422      	bmi.n	8008c96 <__swsetup_r+0x62>
 8008c50:	06da      	lsls	r2, r3, #27
 8008c52:	d407      	bmi.n	8008c64 <__swsetup_r+0x30>
 8008c54:	2209      	movs	r2, #9
 8008c56:	602a      	str	r2, [r5, #0]
 8008c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	e033      	b.n	8008ccc <__swsetup_r+0x98>
 8008c64:	0758      	lsls	r0, r3, #29
 8008c66:	d512      	bpl.n	8008c8e <__swsetup_r+0x5a>
 8008c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c6a:	b141      	cbz	r1, 8008c7e <__swsetup_r+0x4a>
 8008c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c70:	4299      	cmp	r1, r3
 8008c72:	d002      	beq.n	8008c7a <__swsetup_r+0x46>
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 ff67 	bl	8009b48 <_free_r>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	2300      	movs	r3, #0
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f043 0308 	orr.w	r3, r3, #8
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	b94b      	cbnz	r3, 8008cae <__swsetup_r+0x7a>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca4:	d003      	beq.n	8008cae <__swsetup_r+0x7a>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f001 ff45 	bl	800ab38 <__smakebuf_r>
 8008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb2:	f013 0201 	ands.w	r2, r3, #1
 8008cb6:	d00a      	beq.n	8008cce <__swsetup_r+0x9a>
 8008cb8:	2200      	movs	r2, #0
 8008cba:	60a2      	str	r2, [r4, #8]
 8008cbc:	6962      	ldr	r2, [r4, #20]
 8008cbe:	4252      	negs	r2, r2
 8008cc0:	61a2      	str	r2, [r4, #24]
 8008cc2:	6922      	ldr	r2, [r4, #16]
 8008cc4:	b942      	cbnz	r2, 8008cd8 <__swsetup_r+0xa4>
 8008cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cca:	d1c5      	bne.n	8008c58 <__swsetup_r+0x24>
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	0799      	lsls	r1, r3, #30
 8008cd0:	bf58      	it	pl
 8008cd2:	6962      	ldrpl	r2, [r4, #20]
 8008cd4:	60a2      	str	r2, [r4, #8]
 8008cd6:	e7f4      	b.n	8008cc2 <__swsetup_r+0x8e>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e7f7      	b.n	8008ccc <__swsetup_r+0x98>
 8008cdc:	20000038 	.word	0x20000038

08008ce0 <memset>:
 8008ce0:	4402      	add	r2, r0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d100      	bne.n	8008cea <memset+0xa>
 8008ce8:	4770      	bx	lr
 8008cea:	f803 1b01 	strb.w	r1, [r3], #1
 8008cee:	e7f9      	b.n	8008ce4 <memset+0x4>

08008cf0 <time>:
 8008cf0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <time+0x34>)
 8008cf4:	f04f 36ff 	mov.w	r6, #4294967295
 8008cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8008cfc:	4669      	mov	r1, sp
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2200      	movs	r2, #0
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	e9cd 6700 	strd	r6, r7, [sp]
 8008d08:	f000 f822 	bl	8008d50 <_gettimeofday_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	bfb8      	it	lt
 8008d10:	e9cd 6700 	strdlt	r6, r7, [sp]
 8008d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d18:	b10c      	cbz	r4, 8008d1e <time+0x2e>
 8008d1a:	e9c4 0100 	strd	r0, r1, [r4]
 8008d1e:	b004      	add	sp, #16
 8008d20:	bdd0      	pop	{r4, r6, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000038 	.word	0x20000038

08008d28 <_localeconv_r>:
 8008d28:	4800      	ldr	r0, [pc, #0]	@ (8008d2c <_localeconv_r+0x4>)
 8008d2a:	4770      	bx	lr
 8008d2c:	20000178 	.word	0x20000178

08008d30 <_close_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d06      	ldr	r5, [pc, #24]	@ (8008d4c <_close_r+0x1c>)
 8008d34:	2300      	movs	r3, #0
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7fa f8fc 	bl	8002f38 <_close>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_close_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_close_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000a94 	.word	0x20000a94

08008d50 <_gettimeofday_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	@ (8008d70 <_gettimeofday_r+0x20>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f002 f9d9 	bl	800b114 <_gettimeofday>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d102      	bne.n	8008d6c <_gettimeofday_r+0x1c>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	b103      	cbz	r3, 8008d6c <_gettimeofday_r+0x1c>
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000a94 	.word	0x20000a94

08008d74 <_lseek_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d07      	ldr	r5, [pc, #28]	@ (8008d94 <_lseek_r+0x20>)
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	602a      	str	r2, [r5, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	f7fa f8ff 	bl	8002f86 <_lseek>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_lseek_r+0x1e>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_lseek_r+0x1e>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20000a94 	.word	0x20000a94

08008d98 <_read_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	@ (8008db8 <_read_r+0x20>)
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	602a      	str	r2, [r5, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f7fa f88d 	bl	8002ec6 <_read>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_read_r+0x1e>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_read_r+0x1e>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20000a94 	.word	0x20000a94

08008dbc <_write_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	@ (8008ddc <_write_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7fa f898 	bl	8002f00 <_write>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_write_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_write_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000a94 	.word	0x20000a94

08008de0 <__errno>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	@ (8008de8 <__errno+0x8>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000038 	.word	0x20000038

08008dec <__libc_init_array>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4d0d      	ldr	r5, [pc, #52]	@ (8008e24 <__libc_init_array+0x38>)
 8008df0:	4c0d      	ldr	r4, [pc, #52]	@ (8008e28 <__libc_init_array+0x3c>)
 8008df2:	1b64      	subs	r4, r4, r5
 8008df4:	10a4      	asrs	r4, r4, #2
 8008df6:	2600      	movs	r6, #0
 8008df8:	42a6      	cmp	r6, r4
 8008dfa:	d109      	bne.n	8008e10 <__libc_init_array+0x24>
 8008dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008e2c <__libc_init_array+0x40>)
 8008dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008e30 <__libc_init_array+0x44>)
 8008e00:	f002 f990 	bl	800b124 <_init>
 8008e04:	1b64      	subs	r4, r4, r5
 8008e06:	10a4      	asrs	r4, r4, #2
 8008e08:	2600      	movs	r6, #0
 8008e0a:	42a6      	cmp	r6, r4
 8008e0c:	d105      	bne.n	8008e1a <__libc_init_array+0x2e>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e14:	4798      	blx	r3
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7ee      	b.n	8008df8 <__libc_init_array+0xc>
 8008e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1e:	4798      	blx	r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	e7f2      	b.n	8008e0a <__libc_init_array+0x1e>
 8008e24:	0800be1c 	.word	0x0800be1c
 8008e28:	0800be1c 	.word	0x0800be1c
 8008e2c:	0800be1c 	.word	0x0800be1c
 8008e30:	0800be20 	.word	0x0800be20

08008e34 <__retarget_lock_init_recursive>:
 8008e34:	4770      	bx	lr

08008e36 <__retarget_lock_acquire_recursive>:
 8008e36:	4770      	bx	lr

08008e38 <__retarget_lock_release_recursive>:
 8008e38:	4770      	bx	lr

08008e3a <memcpy>:
 8008e3a:	440a      	add	r2, r1
 8008e3c:	4291      	cmp	r1, r2
 8008e3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e42:	d100      	bne.n	8008e46 <memcpy+0xc>
 8008e44:	4770      	bx	lr
 8008e46:	b510      	push	{r4, lr}
 8008e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e50:	4291      	cmp	r1, r2
 8008e52:	d1f9      	bne.n	8008e48 <memcpy+0xe>
 8008e54:	bd10      	pop	{r4, pc}
	...

08008e58 <__assert_func>:
 8008e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <__assert_func+0x2c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4605      	mov	r5, r0
 8008e64:	68d8      	ldr	r0, [r3, #12]
 8008e66:	b14c      	cbz	r4, 8008e7c <__assert_func+0x24>
 8008e68:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <__assert_func+0x30>)
 8008e6a:	9100      	str	r1, [sp, #0]
 8008e6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e70:	4906      	ldr	r1, [pc, #24]	@ (8008e8c <__assert_func+0x34>)
 8008e72:	462b      	mov	r3, r5
 8008e74:	f001 fe28 	bl	800aac8 <fiprintf>
 8008e78:	f001 ff1a 	bl	800acb0 <abort>
 8008e7c:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <__assert_func+0x38>)
 8008e7e:	461c      	mov	r4, r3
 8008e80:	e7f3      	b.n	8008e6a <__assert_func+0x12>
 8008e82:	bf00      	nop
 8008e84:	20000038 	.word	0x20000038
 8008e88:	0800baaf 	.word	0x0800baaf
 8008e8c:	0800babc 	.word	0x0800babc
 8008e90:	0800baea 	.word	0x0800baea

08008e94 <quorem>:
 8008e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	6903      	ldr	r3, [r0, #16]
 8008e9a:	690c      	ldr	r4, [r1, #16]
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	db7e      	blt.n	8008fa0 <quorem+0x10c>
 8008ea2:	3c01      	subs	r4, #1
 8008ea4:	f101 0814 	add.w	r8, r1, #20
 8008ea8:	00a3      	lsls	r3, r4, #2
 8008eaa:	f100 0514 	add.w	r5, r0, #20
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ec6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eca:	d32e      	bcc.n	8008f2a <quorem+0x96>
 8008ecc:	f04f 0a00 	mov.w	sl, #0
 8008ed0:	46c4      	mov	ip, r8
 8008ed2:	46ae      	mov	lr, r5
 8008ed4:	46d3      	mov	fp, sl
 8008ed6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008eda:	b298      	uxth	r0, r3
 8008edc:	fb06 a000 	mla	r0, r6, r0, sl
 8008ee0:	0c02      	lsrs	r2, r0, #16
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	fb06 2303 	mla	r3, r6, r3, r2
 8008ee8:	f8de 2000 	ldr.w	r2, [lr]
 8008eec:	b280      	uxth	r0, r0
 8008eee:	b292      	uxth	r2, r2
 8008ef0:	1a12      	subs	r2, r2, r0
 8008ef2:	445a      	add	r2, fp
 8008ef4:	f8de 0000 	ldr.w	r0, [lr]
 8008ef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f06:	b292      	uxth	r2, r2
 8008f08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f0c:	45e1      	cmp	r9, ip
 8008f0e:	f84e 2b04 	str.w	r2, [lr], #4
 8008f12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f16:	d2de      	bcs.n	8008ed6 <quorem+0x42>
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	58eb      	ldr	r3, [r5, r3]
 8008f1c:	b92b      	cbnz	r3, 8008f2a <quorem+0x96>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	3b04      	subs	r3, #4
 8008f22:	429d      	cmp	r5, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	d32f      	bcc.n	8008f88 <quorem+0xf4>
 8008f28:	613c      	str	r4, [r7, #16]
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f001 f97e 	bl	800a22c <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	db25      	blt.n	8008f80 <quorem+0xec>
 8008f34:	4629      	mov	r1, r5
 8008f36:	2000      	movs	r0, #0
 8008f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f3c:	f8d1 c000 	ldr.w	ip, [r1]
 8008f40:	fa1f fe82 	uxth.w	lr, r2
 8008f44:	fa1f f38c 	uxth.w	r3, ip
 8008f48:	eba3 030e 	sub.w	r3, r3, lr
 8008f4c:	4403      	add	r3, r0
 8008f4e:	0c12      	lsrs	r2, r2, #16
 8008f50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f5e:	45c1      	cmp	r9, r8
 8008f60:	f841 3b04 	str.w	r3, [r1], #4
 8008f64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f68:	d2e6      	bcs.n	8008f38 <quorem+0xa4>
 8008f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f72:	b922      	cbnz	r2, 8008f7e <quorem+0xea>
 8008f74:	3b04      	subs	r3, #4
 8008f76:	429d      	cmp	r5, r3
 8008f78:	461a      	mov	r2, r3
 8008f7a:	d30b      	bcc.n	8008f94 <quorem+0x100>
 8008f7c:	613c      	str	r4, [r7, #16]
 8008f7e:	3601      	adds	r6, #1
 8008f80:	4630      	mov	r0, r6
 8008f82:	b003      	add	sp, #12
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	6812      	ldr	r2, [r2, #0]
 8008f8a:	3b04      	subs	r3, #4
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	d1cb      	bne.n	8008f28 <quorem+0x94>
 8008f90:	3c01      	subs	r4, #1
 8008f92:	e7c6      	b.n	8008f22 <quorem+0x8e>
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	3b04      	subs	r3, #4
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	d1ef      	bne.n	8008f7c <quorem+0xe8>
 8008f9c:	3c01      	subs	r4, #1
 8008f9e:	e7ea      	b.n	8008f76 <quorem+0xe2>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7ee      	b.n	8008f82 <quorem+0xee>
 8008fa4:	0000      	movs	r0, r0
	...

08008fa8 <_dtoa_r>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	69c7      	ldr	r7, [r0, #28]
 8008fae:	b097      	sub	sp, #92	@ 0x5c
 8008fb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008fb4:	ec55 4b10 	vmov	r4, r5, d0
 8008fb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008fba:	9107      	str	r1, [sp, #28]
 8008fbc:	4681      	mov	r9, r0
 8008fbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008fc2:	b97f      	cbnz	r7, 8008fe4 <_dtoa_r+0x3c>
 8008fc4:	2010      	movs	r0, #16
 8008fc6:	f000 fe09 	bl	8009bdc <malloc>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008fd0:	b920      	cbnz	r0, 8008fdc <_dtoa_r+0x34>
 8008fd2:	4ba9      	ldr	r3, [pc, #676]	@ (8009278 <_dtoa_r+0x2d0>)
 8008fd4:	21ef      	movs	r1, #239	@ 0xef
 8008fd6:	48a9      	ldr	r0, [pc, #676]	@ (800927c <_dtoa_r+0x2d4>)
 8008fd8:	f7ff ff3e 	bl	8008e58 <__assert_func>
 8008fdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fe0:	6007      	str	r7, [r0, #0]
 8008fe2:	60c7      	str	r7, [r0, #12]
 8008fe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fe8:	6819      	ldr	r1, [r3, #0]
 8008fea:	b159      	cbz	r1, 8009004 <_dtoa_r+0x5c>
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	604a      	str	r2, [r1, #4]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4093      	lsls	r3, r2
 8008ff4:	608b      	str	r3, [r1, #8]
 8008ff6:	4648      	mov	r0, r9
 8008ff8:	f000 fee6 	bl	8009dc8 <_Bfree>
 8008ffc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	1e2b      	subs	r3, r5, #0
 8009006:	bfb9      	ittee	lt
 8009008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800900c:	9305      	strlt	r3, [sp, #20]
 800900e:	2300      	movge	r3, #0
 8009010:	6033      	strge	r3, [r6, #0]
 8009012:	9f05      	ldr	r7, [sp, #20]
 8009014:	4b9a      	ldr	r3, [pc, #616]	@ (8009280 <_dtoa_r+0x2d8>)
 8009016:	bfbc      	itt	lt
 8009018:	2201      	movlt	r2, #1
 800901a:	6032      	strlt	r2, [r6, #0]
 800901c:	43bb      	bics	r3, r7
 800901e:	d112      	bne.n	8009046 <_dtoa_r+0x9e>
 8009020:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009022:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800902c:	4323      	orrs	r3, r4
 800902e:	f000 855a 	beq.w	8009ae6 <_dtoa_r+0xb3e>
 8009032:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009034:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009294 <_dtoa_r+0x2ec>
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 855c 	beq.w	8009af6 <_dtoa_r+0xb4e>
 800903e:	f10a 0303 	add.w	r3, sl, #3
 8009042:	f000 bd56 	b.w	8009af2 <_dtoa_r+0xb4a>
 8009046:	ed9d 7b04 	vldr	d7, [sp, #16]
 800904a:	2200      	movs	r2, #0
 800904c:	ec51 0b17 	vmov	r0, r1, d7
 8009050:	2300      	movs	r3, #0
 8009052:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009056:	f7f7 fd3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800905a:	4680      	mov	r8, r0
 800905c:	b158      	cbz	r0, 8009076 <_dtoa_r+0xce>
 800905e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009060:	2301      	movs	r3, #1
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009066:	b113      	cbz	r3, 800906e <_dtoa_r+0xc6>
 8009068:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800906a:	4b86      	ldr	r3, [pc, #536]	@ (8009284 <_dtoa_r+0x2dc>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009298 <_dtoa_r+0x2f0>
 8009072:	f000 bd40 	b.w	8009af6 <_dtoa_r+0xb4e>
 8009076:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800907a:	aa14      	add	r2, sp, #80	@ 0x50
 800907c:	a915      	add	r1, sp, #84	@ 0x54
 800907e:	4648      	mov	r0, r9
 8009080:	f001 f984 	bl	800a38c <__d2b>
 8009084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009088:	9002      	str	r0, [sp, #8]
 800908a:	2e00      	cmp	r6, #0
 800908c:	d078      	beq.n	8009180 <_dtoa_r+0x1d8>
 800908e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009090:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800909c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090a8:	4619      	mov	r1, r3
 80090aa:	2200      	movs	r2, #0
 80090ac:	4b76      	ldr	r3, [pc, #472]	@ (8009288 <_dtoa_r+0x2e0>)
 80090ae:	f7f7 f8f3 	bl	8000298 <__aeabi_dsub>
 80090b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009260 <_dtoa_r+0x2b8>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 faa6 	bl	8000608 <__aeabi_dmul>
 80090bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009268 <_dtoa_r+0x2c0>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f7f7 f8eb 	bl	800029c <__adddf3>
 80090c6:	4604      	mov	r4, r0
 80090c8:	4630      	mov	r0, r6
 80090ca:	460d      	mov	r5, r1
 80090cc:	f7f7 fa32 	bl	8000534 <__aeabi_i2d>
 80090d0:	a367      	add	r3, pc, #412	@ (adr r3, 8009270 <_dtoa_r+0x2c8>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 fa97 	bl	8000608 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 f8db 	bl	800029c <__adddf3>
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	f7f7 fd3d 	bl	8000b68 <__aeabi_d2iz>
 80090ee:	2200      	movs	r2, #0
 80090f0:	4607      	mov	r7, r0
 80090f2:	2300      	movs	r3, #0
 80090f4:	4620      	mov	r0, r4
 80090f6:	4629      	mov	r1, r5
 80090f8:	f7f7 fcf8 	bl	8000aec <__aeabi_dcmplt>
 80090fc:	b140      	cbz	r0, 8009110 <_dtoa_r+0x168>
 80090fe:	4638      	mov	r0, r7
 8009100:	f7f7 fa18 	bl	8000534 <__aeabi_i2d>
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 fce6 	bl	8000ad8 <__aeabi_dcmpeq>
 800910c:	b900      	cbnz	r0, 8009110 <_dtoa_r+0x168>
 800910e:	3f01      	subs	r7, #1
 8009110:	2f16      	cmp	r7, #22
 8009112:	d852      	bhi.n	80091ba <_dtoa_r+0x212>
 8009114:	4b5d      	ldr	r3, [pc, #372]	@ (800928c <_dtoa_r+0x2e4>)
 8009116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009122:	f7f7 fce3 	bl	8000aec <__aeabi_dcmplt>
 8009126:	2800      	cmp	r0, #0
 8009128:	d049      	beq.n	80091be <_dtoa_r+0x216>
 800912a:	3f01      	subs	r7, #1
 800912c:	2300      	movs	r3, #0
 800912e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009130:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009132:	1b9b      	subs	r3, r3, r6
 8009134:	1e5a      	subs	r2, r3, #1
 8009136:	bf45      	ittet	mi
 8009138:	f1c3 0301 	rsbmi	r3, r3, #1
 800913c:	9300      	strmi	r3, [sp, #0]
 800913e:	2300      	movpl	r3, #0
 8009140:	2300      	movmi	r3, #0
 8009142:	9206      	str	r2, [sp, #24]
 8009144:	bf54      	ite	pl
 8009146:	9300      	strpl	r3, [sp, #0]
 8009148:	9306      	strmi	r3, [sp, #24]
 800914a:	2f00      	cmp	r7, #0
 800914c:	db39      	blt.n	80091c2 <_dtoa_r+0x21a>
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	970d      	str	r7, [sp, #52]	@ 0x34
 8009152:	443b      	add	r3, r7
 8009154:	9306      	str	r3, [sp, #24]
 8009156:	2300      	movs	r3, #0
 8009158:	9308      	str	r3, [sp, #32]
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	2b09      	cmp	r3, #9
 800915e:	d863      	bhi.n	8009228 <_dtoa_r+0x280>
 8009160:	2b05      	cmp	r3, #5
 8009162:	bfc4      	itt	gt
 8009164:	3b04      	subgt	r3, #4
 8009166:	9307      	strgt	r3, [sp, #28]
 8009168:	9b07      	ldr	r3, [sp, #28]
 800916a:	f1a3 0302 	sub.w	r3, r3, #2
 800916e:	bfcc      	ite	gt
 8009170:	2400      	movgt	r4, #0
 8009172:	2401      	movle	r4, #1
 8009174:	2b03      	cmp	r3, #3
 8009176:	d863      	bhi.n	8009240 <_dtoa_r+0x298>
 8009178:	e8df f003 	tbb	[pc, r3]
 800917c:	2b375452 	.word	0x2b375452
 8009180:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009184:	441e      	add	r6, r3
 8009186:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800918a:	2b20      	cmp	r3, #32
 800918c:	bfc1      	itttt	gt
 800918e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009192:	409f      	lslgt	r7, r3
 8009194:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009198:	fa24 f303 	lsrgt.w	r3, r4, r3
 800919c:	bfd6      	itet	le
 800919e:	f1c3 0320 	rsble	r3, r3, #32
 80091a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80091a6:	fa04 f003 	lslle.w	r0, r4, r3
 80091aa:	f7f7 f9b3 	bl	8000514 <__aeabi_ui2d>
 80091ae:	2201      	movs	r2, #1
 80091b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091b4:	3e01      	subs	r6, #1
 80091b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80091b8:	e776      	b.n	80090a8 <_dtoa_r+0x100>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e7b7      	b.n	800912e <_dtoa_r+0x186>
 80091be:	9010      	str	r0, [sp, #64]	@ 0x40
 80091c0:	e7b6      	b.n	8009130 <_dtoa_r+0x188>
 80091c2:	9b00      	ldr	r3, [sp, #0]
 80091c4:	1bdb      	subs	r3, r3, r7
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	427b      	negs	r3, r7
 80091ca:	9308      	str	r3, [sp, #32]
 80091cc:	2300      	movs	r3, #0
 80091ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80091d0:	e7c3      	b.n	800915a <_dtoa_r+0x1b2>
 80091d2:	2301      	movs	r3, #1
 80091d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091d8:	eb07 0b03 	add.w	fp, r7, r3
 80091dc:	f10b 0301 	add.w	r3, fp, #1
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	bfb8      	it	lt
 80091e6:	2301      	movlt	r3, #1
 80091e8:	e006      	b.n	80091f8 <_dtoa_r+0x250>
 80091ea:	2301      	movs	r3, #1
 80091ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dd28      	ble.n	8009246 <_dtoa_r+0x29e>
 80091f4:	469b      	mov	fp, r3
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80091fc:	2100      	movs	r1, #0
 80091fe:	2204      	movs	r2, #4
 8009200:	f102 0514 	add.w	r5, r2, #20
 8009204:	429d      	cmp	r5, r3
 8009206:	d926      	bls.n	8009256 <_dtoa_r+0x2ae>
 8009208:	6041      	str	r1, [r0, #4]
 800920a:	4648      	mov	r0, r9
 800920c:	f000 fd9c 	bl	8009d48 <_Balloc>
 8009210:	4682      	mov	sl, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	d142      	bne.n	800929c <_dtoa_r+0x2f4>
 8009216:	4b1e      	ldr	r3, [pc, #120]	@ (8009290 <_dtoa_r+0x2e8>)
 8009218:	4602      	mov	r2, r0
 800921a:	f240 11af 	movw	r1, #431	@ 0x1af
 800921e:	e6da      	b.n	8008fd6 <_dtoa_r+0x2e>
 8009220:	2300      	movs	r3, #0
 8009222:	e7e3      	b.n	80091ec <_dtoa_r+0x244>
 8009224:	2300      	movs	r3, #0
 8009226:	e7d5      	b.n	80091d4 <_dtoa_r+0x22c>
 8009228:	2401      	movs	r4, #1
 800922a:	2300      	movs	r3, #0
 800922c:	9307      	str	r3, [sp, #28]
 800922e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009230:	f04f 3bff 	mov.w	fp, #4294967295
 8009234:	2200      	movs	r2, #0
 8009236:	f8cd b00c 	str.w	fp, [sp, #12]
 800923a:	2312      	movs	r3, #18
 800923c:	920c      	str	r2, [sp, #48]	@ 0x30
 800923e:	e7db      	b.n	80091f8 <_dtoa_r+0x250>
 8009240:	2301      	movs	r3, #1
 8009242:	9309      	str	r3, [sp, #36]	@ 0x24
 8009244:	e7f4      	b.n	8009230 <_dtoa_r+0x288>
 8009246:	f04f 0b01 	mov.w	fp, #1
 800924a:	f8cd b00c 	str.w	fp, [sp, #12]
 800924e:	465b      	mov	r3, fp
 8009250:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009254:	e7d0      	b.n	80091f8 <_dtoa_r+0x250>
 8009256:	3101      	adds	r1, #1
 8009258:	0052      	lsls	r2, r2, #1
 800925a:	e7d1      	b.n	8009200 <_dtoa_r+0x258>
 800925c:	f3af 8000 	nop.w
 8009260:	636f4361 	.word	0x636f4361
 8009264:	3fd287a7 	.word	0x3fd287a7
 8009268:	8b60c8b3 	.word	0x8b60c8b3
 800926c:	3fc68a28 	.word	0x3fc68a28
 8009270:	509f79fb 	.word	0x509f79fb
 8009274:	3fd34413 	.word	0x3fd34413
 8009278:	0800ba0c 	.word	0x0800ba0c
 800927c:	0800baf8 	.word	0x0800baf8
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	0800ba8c 	.word	0x0800ba8c
 8009288:	3ff80000 	.word	0x3ff80000
 800928c:	0800bc10 	.word	0x0800bc10
 8009290:	0800bb50 	.word	0x0800bb50
 8009294:	0800baf4 	.word	0x0800baf4
 8009298:	0800ba8b 	.word	0x0800ba8b
 800929c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092a0:	6018      	str	r0, [r3, #0]
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	2b0e      	cmp	r3, #14
 80092a6:	f200 80a1 	bhi.w	80093ec <_dtoa_r+0x444>
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	f000 809e 	beq.w	80093ec <_dtoa_r+0x444>
 80092b0:	2f00      	cmp	r7, #0
 80092b2:	dd33      	ble.n	800931c <_dtoa_r+0x374>
 80092b4:	4b9c      	ldr	r3, [pc, #624]	@ (8009528 <_dtoa_r+0x580>)
 80092b6:	f007 020f 	and.w	r2, r7, #15
 80092ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092be:	ed93 7b00 	vldr	d7, [r3]
 80092c2:	05f8      	lsls	r0, r7, #23
 80092c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80092c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092cc:	d516      	bpl.n	80092fc <_dtoa_r+0x354>
 80092ce:	4b97      	ldr	r3, [pc, #604]	@ (800952c <_dtoa_r+0x584>)
 80092d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092d8:	f7f7 fac0 	bl	800085c <__aeabi_ddiv>
 80092dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e0:	f004 040f 	and.w	r4, r4, #15
 80092e4:	2603      	movs	r6, #3
 80092e6:	4d91      	ldr	r5, [pc, #580]	@ (800952c <_dtoa_r+0x584>)
 80092e8:	b954      	cbnz	r4, 8009300 <_dtoa_r+0x358>
 80092ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f2:	f7f7 fab3 	bl	800085c <__aeabi_ddiv>
 80092f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092fa:	e028      	b.n	800934e <_dtoa_r+0x3a6>
 80092fc:	2602      	movs	r6, #2
 80092fe:	e7f2      	b.n	80092e6 <_dtoa_r+0x33e>
 8009300:	07e1      	lsls	r1, r4, #31
 8009302:	d508      	bpl.n	8009316 <_dtoa_r+0x36e>
 8009304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009314:	3601      	adds	r6, #1
 8009316:	1064      	asrs	r4, r4, #1
 8009318:	3508      	adds	r5, #8
 800931a:	e7e5      	b.n	80092e8 <_dtoa_r+0x340>
 800931c:	f000 80af 	beq.w	800947e <_dtoa_r+0x4d6>
 8009320:	427c      	negs	r4, r7
 8009322:	4b81      	ldr	r3, [pc, #516]	@ (8009528 <_dtoa_r+0x580>)
 8009324:	4d81      	ldr	r5, [pc, #516]	@ (800952c <_dtoa_r+0x584>)
 8009326:	f004 020f 	and.w	r2, r4, #15
 800932a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009336:	f7f7 f967 	bl	8000608 <__aeabi_dmul>
 800933a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800933e:	1124      	asrs	r4, r4, #4
 8009340:	2300      	movs	r3, #0
 8009342:	2602      	movs	r6, #2
 8009344:	2c00      	cmp	r4, #0
 8009346:	f040 808f 	bne.w	8009468 <_dtoa_r+0x4c0>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1d3      	bne.n	80092f6 <_dtoa_r+0x34e>
 800934e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009350:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8094 	beq.w	8009482 <_dtoa_r+0x4da>
 800935a:	4b75      	ldr	r3, [pc, #468]	@ (8009530 <_dtoa_r+0x588>)
 800935c:	2200      	movs	r2, #0
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f7 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	f000 808b 	beq.w	8009482 <_dtoa_r+0x4da>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 8087 	beq.w	8009482 <_dtoa_r+0x4da>
 8009374:	f1bb 0f00 	cmp.w	fp, #0
 8009378:	dd34      	ble.n	80093e4 <_dtoa_r+0x43c>
 800937a:	4620      	mov	r0, r4
 800937c:	4b6d      	ldr	r3, [pc, #436]	@ (8009534 <_dtoa_r+0x58c>)
 800937e:	2200      	movs	r2, #0
 8009380:	4629      	mov	r1, r5
 8009382:	f7f7 f941 	bl	8000608 <__aeabi_dmul>
 8009386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800938a:	f107 38ff 	add.w	r8, r7, #4294967295
 800938e:	3601      	adds	r6, #1
 8009390:	465c      	mov	r4, fp
 8009392:	4630      	mov	r0, r6
 8009394:	f7f7 f8ce 	bl	8000534 <__aeabi_i2d>
 8009398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939c:	f7f7 f934 	bl	8000608 <__aeabi_dmul>
 80093a0:	4b65      	ldr	r3, [pc, #404]	@ (8009538 <_dtoa_r+0x590>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7f6 ff7a 	bl	800029c <__adddf3>
 80093a8:	4605      	mov	r5, r0
 80093aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	d16a      	bne.n	8009488 <_dtoa_r+0x4e0>
 80093b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093b6:	4b61      	ldr	r3, [pc, #388]	@ (800953c <_dtoa_r+0x594>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	f7f6 ff6d 	bl	8000298 <__aeabi_dsub>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093c6:	462a      	mov	r2, r5
 80093c8:	4633      	mov	r3, r6
 80093ca:	f7f7 fbad 	bl	8000b28 <__aeabi_dcmpgt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f040 8298 	bne.w	8009904 <_dtoa_r+0x95c>
 80093d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093d8:	462a      	mov	r2, r5
 80093da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093de:	f7f7 fb85 	bl	8000aec <__aeabi_dcmplt>
 80093e2:	bb38      	cbnz	r0, 8009434 <_dtoa_r+0x48c>
 80093e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80093e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f2c0 8157 	blt.w	80096a2 <_dtoa_r+0x6fa>
 80093f4:	2f0e      	cmp	r7, #14
 80093f6:	f300 8154 	bgt.w	80096a2 <_dtoa_r+0x6fa>
 80093fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009528 <_dtoa_r+0x580>)
 80093fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009400:	ed93 7b00 	vldr	d7, [r3]
 8009404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009406:	2b00      	cmp	r3, #0
 8009408:	ed8d 7b00 	vstr	d7, [sp]
 800940c:	f280 80e5 	bge.w	80095da <_dtoa_r+0x632>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f300 80e1 	bgt.w	80095da <_dtoa_r+0x632>
 8009418:	d10c      	bne.n	8009434 <_dtoa_r+0x48c>
 800941a:	4b48      	ldr	r3, [pc, #288]	@ (800953c <_dtoa_r+0x594>)
 800941c:	2200      	movs	r2, #0
 800941e:	ec51 0b17 	vmov	r0, r1, d7
 8009422:	f7f7 f8f1 	bl	8000608 <__aeabi_dmul>
 8009426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800942a:	f7f7 fb73 	bl	8000b14 <__aeabi_dcmpge>
 800942e:	2800      	cmp	r0, #0
 8009430:	f000 8266 	beq.w	8009900 <_dtoa_r+0x958>
 8009434:	2400      	movs	r4, #0
 8009436:	4625      	mov	r5, r4
 8009438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800943a:	4656      	mov	r6, sl
 800943c:	ea6f 0803 	mvn.w	r8, r3
 8009440:	2700      	movs	r7, #0
 8009442:	4621      	mov	r1, r4
 8009444:	4648      	mov	r0, r9
 8009446:	f000 fcbf 	bl	8009dc8 <_Bfree>
 800944a:	2d00      	cmp	r5, #0
 800944c:	f000 80bd 	beq.w	80095ca <_dtoa_r+0x622>
 8009450:	b12f      	cbz	r7, 800945e <_dtoa_r+0x4b6>
 8009452:	42af      	cmp	r7, r5
 8009454:	d003      	beq.n	800945e <_dtoa_r+0x4b6>
 8009456:	4639      	mov	r1, r7
 8009458:	4648      	mov	r0, r9
 800945a:	f000 fcb5 	bl	8009dc8 <_Bfree>
 800945e:	4629      	mov	r1, r5
 8009460:	4648      	mov	r0, r9
 8009462:	f000 fcb1 	bl	8009dc8 <_Bfree>
 8009466:	e0b0      	b.n	80095ca <_dtoa_r+0x622>
 8009468:	07e2      	lsls	r2, r4, #31
 800946a:	d505      	bpl.n	8009478 <_dtoa_r+0x4d0>
 800946c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009470:	f7f7 f8ca 	bl	8000608 <__aeabi_dmul>
 8009474:	3601      	adds	r6, #1
 8009476:	2301      	movs	r3, #1
 8009478:	1064      	asrs	r4, r4, #1
 800947a:	3508      	adds	r5, #8
 800947c:	e762      	b.n	8009344 <_dtoa_r+0x39c>
 800947e:	2602      	movs	r6, #2
 8009480:	e765      	b.n	800934e <_dtoa_r+0x3a6>
 8009482:	9c03      	ldr	r4, [sp, #12]
 8009484:	46b8      	mov	r8, r7
 8009486:	e784      	b.n	8009392 <_dtoa_r+0x3ea>
 8009488:	4b27      	ldr	r3, [pc, #156]	@ (8009528 <_dtoa_r+0x580>)
 800948a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800948c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009494:	4454      	add	r4, sl
 8009496:	2900      	cmp	r1, #0
 8009498:	d054      	beq.n	8009544 <_dtoa_r+0x59c>
 800949a:	4929      	ldr	r1, [pc, #164]	@ (8009540 <_dtoa_r+0x598>)
 800949c:	2000      	movs	r0, #0
 800949e:	f7f7 f9dd 	bl	800085c <__aeabi_ddiv>
 80094a2:	4633      	mov	r3, r6
 80094a4:	462a      	mov	r2, r5
 80094a6:	f7f6 fef7 	bl	8000298 <__aeabi_dsub>
 80094aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094ae:	4656      	mov	r6, sl
 80094b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b4:	f7f7 fb58 	bl	8000b68 <__aeabi_d2iz>
 80094b8:	4605      	mov	r5, r0
 80094ba:	f7f7 f83b 	bl	8000534 <__aeabi_i2d>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c6:	f7f6 fee7 	bl	8000298 <__aeabi_dsub>
 80094ca:	3530      	adds	r5, #48	@ 0x30
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094d4:	f806 5b01 	strb.w	r5, [r6], #1
 80094d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094dc:	f7f7 fb06 	bl	8000aec <__aeabi_dcmplt>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d172      	bne.n	80095ca <_dtoa_r+0x622>
 80094e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e8:	4911      	ldr	r1, [pc, #68]	@ (8009530 <_dtoa_r+0x588>)
 80094ea:	2000      	movs	r0, #0
 80094ec:	f7f6 fed4 	bl	8000298 <__aeabi_dsub>
 80094f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094f4:	f7f7 fafa 	bl	8000aec <__aeabi_dcmplt>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f040 80b4 	bne.w	8009666 <_dtoa_r+0x6be>
 80094fe:	42a6      	cmp	r6, r4
 8009500:	f43f af70 	beq.w	80093e4 <_dtoa_r+0x43c>
 8009504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009508:	4b0a      	ldr	r3, [pc, #40]	@ (8009534 <_dtoa_r+0x58c>)
 800950a:	2200      	movs	r2, #0
 800950c:	f7f7 f87c 	bl	8000608 <__aeabi_dmul>
 8009510:	4b08      	ldr	r3, [pc, #32]	@ (8009534 <_dtoa_r+0x58c>)
 8009512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009516:	2200      	movs	r2, #0
 8009518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800951c:	f7f7 f874 	bl	8000608 <__aeabi_dmul>
 8009520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009524:	e7c4      	b.n	80094b0 <_dtoa_r+0x508>
 8009526:	bf00      	nop
 8009528:	0800bc10 	.word	0x0800bc10
 800952c:	0800bbe8 	.word	0x0800bbe8
 8009530:	3ff00000 	.word	0x3ff00000
 8009534:	40240000 	.word	0x40240000
 8009538:	401c0000 	.word	0x401c0000
 800953c:	40140000 	.word	0x40140000
 8009540:	3fe00000 	.word	0x3fe00000
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	f7f7 f85e 	bl	8000608 <__aeabi_dmul>
 800954c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009550:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009552:	4656      	mov	r6, sl
 8009554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009558:	f7f7 fb06 	bl	8000b68 <__aeabi_d2iz>
 800955c:	4605      	mov	r5, r0
 800955e:	f7f6 ffe9 	bl	8000534 <__aeabi_i2d>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800956a:	f7f6 fe95 	bl	8000298 <__aeabi_dsub>
 800956e:	3530      	adds	r5, #48	@ 0x30
 8009570:	f806 5b01 	strb.w	r5, [r6], #1
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	42a6      	cmp	r6, r4
 800957a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800957e:	f04f 0200 	mov.w	r2, #0
 8009582:	d124      	bne.n	80095ce <_dtoa_r+0x626>
 8009584:	4baf      	ldr	r3, [pc, #700]	@ (8009844 <_dtoa_r+0x89c>)
 8009586:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800958a:	f7f6 fe87 	bl	800029c <__adddf3>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009596:	f7f7 fac7 	bl	8000b28 <__aeabi_dcmpgt>
 800959a:	2800      	cmp	r0, #0
 800959c:	d163      	bne.n	8009666 <_dtoa_r+0x6be>
 800959e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095a2:	49a8      	ldr	r1, [pc, #672]	@ (8009844 <_dtoa_r+0x89c>)
 80095a4:	2000      	movs	r0, #0
 80095a6:	f7f6 fe77 	bl	8000298 <__aeabi_dsub>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095b2:	f7f7 fa9b 	bl	8000aec <__aeabi_dcmplt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f af14 	beq.w	80093e4 <_dtoa_r+0x43c>
 80095bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80095be:	1e73      	subs	r3, r6, #1
 80095c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095c6:	2b30      	cmp	r3, #48	@ 0x30
 80095c8:	d0f8      	beq.n	80095bc <_dtoa_r+0x614>
 80095ca:	4647      	mov	r7, r8
 80095cc:	e03b      	b.n	8009646 <_dtoa_r+0x69e>
 80095ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009848 <_dtoa_r+0x8a0>)
 80095d0:	f7f7 f81a 	bl	8000608 <__aeabi_dmul>
 80095d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d8:	e7bc      	b.n	8009554 <_dtoa_r+0x5ac>
 80095da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80095de:	4656      	mov	r6, sl
 80095e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f7 f938 	bl	800085c <__aeabi_ddiv>
 80095ec:	f7f7 fabc 	bl	8000b68 <__aeabi_d2iz>
 80095f0:	4680      	mov	r8, r0
 80095f2:	f7f6 ff9f 	bl	8000534 <__aeabi_i2d>
 80095f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095fa:	f7f7 f805 	bl	8000608 <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800960a:	f7f6 fe45 	bl	8000298 <__aeabi_dsub>
 800960e:	f806 4b01 	strb.w	r4, [r6], #1
 8009612:	9d03      	ldr	r5, [sp, #12]
 8009614:	eba6 040a 	sub.w	r4, r6, sl
 8009618:	42a5      	cmp	r5, r4
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	d133      	bne.n	8009688 <_dtoa_r+0x6e0>
 8009620:	f7f6 fe3c 	bl	800029c <__adddf3>
 8009624:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	f7f7 fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8009630:	b9c0      	cbnz	r0, 8009664 <_dtoa_r+0x6bc>
 8009632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f7 fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800963e:	b110      	cbz	r0, 8009646 <_dtoa_r+0x69e>
 8009640:	f018 0f01 	tst.w	r8, #1
 8009644:	d10e      	bne.n	8009664 <_dtoa_r+0x6bc>
 8009646:	9902      	ldr	r1, [sp, #8]
 8009648:	4648      	mov	r0, r9
 800964a:	f000 fbbd 	bl	8009dc8 <_Bfree>
 800964e:	2300      	movs	r3, #0
 8009650:	7033      	strb	r3, [r6, #0]
 8009652:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009654:	3701      	adds	r7, #1
 8009656:	601f      	str	r7, [r3, #0]
 8009658:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 824b 	beq.w	8009af6 <_dtoa_r+0xb4e>
 8009660:	601e      	str	r6, [r3, #0]
 8009662:	e248      	b.n	8009af6 <_dtoa_r+0xb4e>
 8009664:	46b8      	mov	r8, r7
 8009666:	4633      	mov	r3, r6
 8009668:	461e      	mov	r6, r3
 800966a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966e:	2a39      	cmp	r2, #57	@ 0x39
 8009670:	d106      	bne.n	8009680 <_dtoa_r+0x6d8>
 8009672:	459a      	cmp	sl, r3
 8009674:	d1f8      	bne.n	8009668 <_dtoa_r+0x6c0>
 8009676:	2230      	movs	r2, #48	@ 0x30
 8009678:	f108 0801 	add.w	r8, r8, #1
 800967c:	f88a 2000 	strb.w	r2, [sl]
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	3201      	adds	r2, #1
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e7a0      	b.n	80095ca <_dtoa_r+0x622>
 8009688:	4b6f      	ldr	r3, [pc, #444]	@ (8009848 <_dtoa_r+0x8a0>)
 800968a:	2200      	movs	r2, #0
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	2200      	movs	r2, #0
 8009692:	2300      	movs	r3, #0
 8009694:	4604      	mov	r4, r0
 8009696:	460d      	mov	r5, r1
 8009698:	f7f7 fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800969c:	2800      	cmp	r0, #0
 800969e:	d09f      	beq.n	80095e0 <_dtoa_r+0x638>
 80096a0:	e7d1      	b.n	8009646 <_dtoa_r+0x69e>
 80096a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	f000 80ea 	beq.w	800987e <_dtoa_r+0x8d6>
 80096aa:	9a07      	ldr	r2, [sp, #28]
 80096ac:	2a01      	cmp	r2, #1
 80096ae:	f300 80cd 	bgt.w	800984c <_dtoa_r+0x8a4>
 80096b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	f000 80c1 	beq.w	800983c <_dtoa_r+0x894>
 80096ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096be:	9c08      	ldr	r4, [sp, #32]
 80096c0:	9e00      	ldr	r6, [sp, #0]
 80096c2:	9a00      	ldr	r2, [sp, #0]
 80096c4:	441a      	add	r2, r3
 80096c6:	9200      	str	r2, [sp, #0]
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	2101      	movs	r1, #1
 80096cc:	441a      	add	r2, r3
 80096ce:	4648      	mov	r0, r9
 80096d0:	9206      	str	r2, [sp, #24]
 80096d2:	f000 fc2d 	bl	8009f30 <__i2b>
 80096d6:	4605      	mov	r5, r0
 80096d8:	b166      	cbz	r6, 80096f4 <_dtoa_r+0x74c>
 80096da:	9b06      	ldr	r3, [sp, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd09      	ble.n	80096f4 <_dtoa_r+0x74c>
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	9a00      	ldr	r2, [sp, #0]
 80096e4:	bfa8      	it	ge
 80096e6:	4633      	movge	r3, r6
 80096e8:	1ad2      	subs	r2, r2, r3
 80096ea:	9200      	str	r2, [sp, #0]
 80096ec:	9a06      	ldr	r2, [sp, #24]
 80096ee:	1af6      	subs	r6, r6, r3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	9306      	str	r3, [sp, #24]
 80096f4:	9b08      	ldr	r3, [sp, #32]
 80096f6:	b30b      	cbz	r3, 800973c <_dtoa_r+0x794>
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 80c6 	beq.w	800988c <_dtoa_r+0x8e4>
 8009700:	2c00      	cmp	r4, #0
 8009702:	f000 80c0 	beq.w	8009886 <_dtoa_r+0x8de>
 8009706:	4629      	mov	r1, r5
 8009708:	4622      	mov	r2, r4
 800970a:	4648      	mov	r0, r9
 800970c:	f000 fcc8 	bl	800a0a0 <__pow5mult>
 8009710:	9a02      	ldr	r2, [sp, #8]
 8009712:	4601      	mov	r1, r0
 8009714:	4605      	mov	r5, r0
 8009716:	4648      	mov	r0, r9
 8009718:	f000 fc20 	bl	8009f5c <__multiply>
 800971c:	9902      	ldr	r1, [sp, #8]
 800971e:	4680      	mov	r8, r0
 8009720:	4648      	mov	r0, r9
 8009722:	f000 fb51 	bl	8009dc8 <_Bfree>
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	1b1b      	subs	r3, r3, r4
 800972a:	9308      	str	r3, [sp, #32]
 800972c:	f000 80b1 	beq.w	8009892 <_dtoa_r+0x8ea>
 8009730:	9a08      	ldr	r2, [sp, #32]
 8009732:	4641      	mov	r1, r8
 8009734:	4648      	mov	r0, r9
 8009736:	f000 fcb3 	bl	800a0a0 <__pow5mult>
 800973a:	9002      	str	r0, [sp, #8]
 800973c:	2101      	movs	r1, #1
 800973e:	4648      	mov	r0, r9
 8009740:	f000 fbf6 	bl	8009f30 <__i2b>
 8009744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009746:	4604      	mov	r4, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 81d8 	beq.w	8009afe <_dtoa_r+0xb56>
 800974e:	461a      	mov	r2, r3
 8009750:	4601      	mov	r1, r0
 8009752:	4648      	mov	r0, r9
 8009754:	f000 fca4 	bl	800a0a0 <__pow5mult>
 8009758:	9b07      	ldr	r3, [sp, #28]
 800975a:	2b01      	cmp	r3, #1
 800975c:	4604      	mov	r4, r0
 800975e:	f300 809f 	bgt.w	80098a0 <_dtoa_r+0x8f8>
 8009762:	9b04      	ldr	r3, [sp, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 8097 	bne.w	8009898 <_dtoa_r+0x8f0>
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009770:	2b00      	cmp	r3, #0
 8009772:	f040 8093 	bne.w	800989c <_dtoa_r+0x8f4>
 8009776:	9b05      	ldr	r3, [sp, #20]
 8009778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800977c:	0d1b      	lsrs	r3, r3, #20
 800977e:	051b      	lsls	r3, r3, #20
 8009780:	b133      	cbz	r3, 8009790 <_dtoa_r+0x7e8>
 8009782:	9b00      	ldr	r3, [sp, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	9b06      	ldr	r3, [sp, #24]
 800978a:	3301      	adds	r3, #1
 800978c:	9306      	str	r3, [sp, #24]
 800978e:	2301      	movs	r3, #1
 8009790:	9308      	str	r3, [sp, #32]
 8009792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 81b8 	beq.w	8009b0a <_dtoa_r+0xb62>
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097a0:	6918      	ldr	r0, [r3, #16]
 80097a2:	f000 fb79 	bl	8009e98 <__hi0bits>
 80097a6:	f1c0 0020 	rsb	r0, r0, #32
 80097aa:	9b06      	ldr	r3, [sp, #24]
 80097ac:	4418      	add	r0, r3
 80097ae:	f010 001f 	ands.w	r0, r0, #31
 80097b2:	f000 8082 	beq.w	80098ba <_dtoa_r+0x912>
 80097b6:	f1c0 0320 	rsb	r3, r0, #32
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	dd73      	ble.n	80098a6 <_dtoa_r+0x8fe>
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	f1c0 001c 	rsb	r0, r0, #28
 80097c4:	4403      	add	r3, r0
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	9b06      	ldr	r3, [sp, #24]
 80097ca:	4403      	add	r3, r0
 80097cc:	4406      	add	r6, r0
 80097ce:	9306      	str	r3, [sp, #24]
 80097d0:	9b00      	ldr	r3, [sp, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	dd05      	ble.n	80097e2 <_dtoa_r+0x83a>
 80097d6:	9902      	ldr	r1, [sp, #8]
 80097d8:	461a      	mov	r2, r3
 80097da:	4648      	mov	r0, r9
 80097dc:	f000 fcba 	bl	800a154 <__lshift>
 80097e0:	9002      	str	r0, [sp, #8]
 80097e2:	9b06      	ldr	r3, [sp, #24]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd05      	ble.n	80097f4 <_dtoa_r+0x84c>
 80097e8:	4621      	mov	r1, r4
 80097ea:	461a      	mov	r2, r3
 80097ec:	4648      	mov	r0, r9
 80097ee:	f000 fcb1 	bl	800a154 <__lshift>
 80097f2:	4604      	mov	r4, r0
 80097f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d061      	beq.n	80098be <_dtoa_r+0x916>
 80097fa:	9802      	ldr	r0, [sp, #8]
 80097fc:	4621      	mov	r1, r4
 80097fe:	f000 fd15 	bl	800a22c <__mcmp>
 8009802:	2800      	cmp	r0, #0
 8009804:	da5b      	bge.n	80098be <_dtoa_r+0x916>
 8009806:	2300      	movs	r3, #0
 8009808:	9902      	ldr	r1, [sp, #8]
 800980a:	220a      	movs	r2, #10
 800980c:	4648      	mov	r0, r9
 800980e:	f000 fafd 	bl	8009e0c <__multadd>
 8009812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	f107 38ff 	add.w	r8, r7, #4294967295
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8177 	beq.w	8009b0e <_dtoa_r+0xb66>
 8009820:	4629      	mov	r1, r5
 8009822:	2300      	movs	r3, #0
 8009824:	220a      	movs	r2, #10
 8009826:	4648      	mov	r0, r9
 8009828:	f000 faf0 	bl	8009e0c <__multadd>
 800982c:	f1bb 0f00 	cmp.w	fp, #0
 8009830:	4605      	mov	r5, r0
 8009832:	dc6f      	bgt.n	8009914 <_dtoa_r+0x96c>
 8009834:	9b07      	ldr	r3, [sp, #28]
 8009836:	2b02      	cmp	r3, #2
 8009838:	dc49      	bgt.n	80098ce <_dtoa_r+0x926>
 800983a:	e06b      	b.n	8009914 <_dtoa_r+0x96c>
 800983c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800983e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009842:	e73c      	b.n	80096be <_dtoa_r+0x716>
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	40240000 	.word	0x40240000
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1e5c      	subs	r4, r3, #1
 8009850:	9b08      	ldr	r3, [sp, #32]
 8009852:	42a3      	cmp	r3, r4
 8009854:	db09      	blt.n	800986a <_dtoa_r+0x8c2>
 8009856:	1b1c      	subs	r4, r3, r4
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f6bf af30 	bge.w	80096c0 <_dtoa_r+0x718>
 8009860:	9b00      	ldr	r3, [sp, #0]
 8009862:	9a03      	ldr	r2, [sp, #12]
 8009864:	1a9e      	subs	r6, r3, r2
 8009866:	2300      	movs	r3, #0
 8009868:	e72b      	b.n	80096c2 <_dtoa_r+0x71a>
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800986e:	9408      	str	r4, [sp, #32]
 8009870:	1ae3      	subs	r3, r4, r3
 8009872:	441a      	add	r2, r3
 8009874:	9e00      	ldr	r6, [sp, #0]
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	920d      	str	r2, [sp, #52]	@ 0x34
 800987a:	2400      	movs	r4, #0
 800987c:	e721      	b.n	80096c2 <_dtoa_r+0x71a>
 800987e:	9c08      	ldr	r4, [sp, #32]
 8009880:	9e00      	ldr	r6, [sp, #0]
 8009882:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009884:	e728      	b.n	80096d8 <_dtoa_r+0x730>
 8009886:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800988a:	e751      	b.n	8009730 <_dtoa_r+0x788>
 800988c:	9a08      	ldr	r2, [sp, #32]
 800988e:	9902      	ldr	r1, [sp, #8]
 8009890:	e750      	b.n	8009734 <_dtoa_r+0x78c>
 8009892:	f8cd 8008 	str.w	r8, [sp, #8]
 8009896:	e751      	b.n	800973c <_dtoa_r+0x794>
 8009898:	2300      	movs	r3, #0
 800989a:	e779      	b.n	8009790 <_dtoa_r+0x7e8>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	e777      	b.n	8009790 <_dtoa_r+0x7e8>
 80098a0:	2300      	movs	r3, #0
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	e779      	b.n	800979a <_dtoa_r+0x7f2>
 80098a6:	d093      	beq.n	80097d0 <_dtoa_r+0x828>
 80098a8:	9a00      	ldr	r2, [sp, #0]
 80098aa:	331c      	adds	r3, #28
 80098ac:	441a      	add	r2, r3
 80098ae:	9200      	str	r2, [sp, #0]
 80098b0:	9a06      	ldr	r2, [sp, #24]
 80098b2:	441a      	add	r2, r3
 80098b4:	441e      	add	r6, r3
 80098b6:	9206      	str	r2, [sp, #24]
 80098b8:	e78a      	b.n	80097d0 <_dtoa_r+0x828>
 80098ba:	4603      	mov	r3, r0
 80098bc:	e7f4      	b.n	80098a8 <_dtoa_r+0x900>
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	46b8      	mov	r8, r7
 80098c4:	dc20      	bgt.n	8009908 <_dtoa_r+0x960>
 80098c6:	469b      	mov	fp, r3
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	dd1e      	ble.n	800990c <_dtoa_r+0x964>
 80098ce:	f1bb 0f00 	cmp.w	fp, #0
 80098d2:	f47f adb1 	bne.w	8009438 <_dtoa_r+0x490>
 80098d6:	4621      	mov	r1, r4
 80098d8:	465b      	mov	r3, fp
 80098da:	2205      	movs	r2, #5
 80098dc:	4648      	mov	r0, r9
 80098de:	f000 fa95 	bl	8009e0c <__multadd>
 80098e2:	4601      	mov	r1, r0
 80098e4:	4604      	mov	r4, r0
 80098e6:	9802      	ldr	r0, [sp, #8]
 80098e8:	f000 fca0 	bl	800a22c <__mcmp>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f77f ada3 	ble.w	8009438 <_dtoa_r+0x490>
 80098f2:	4656      	mov	r6, sl
 80098f4:	2331      	movs	r3, #49	@ 0x31
 80098f6:	f806 3b01 	strb.w	r3, [r6], #1
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	e59f      	b.n	8009440 <_dtoa_r+0x498>
 8009900:	9c03      	ldr	r4, [sp, #12]
 8009902:	46b8      	mov	r8, r7
 8009904:	4625      	mov	r5, r4
 8009906:	e7f4      	b.n	80098f2 <_dtoa_r+0x94a>
 8009908:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800990c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 8101 	beq.w	8009b16 <_dtoa_r+0xb6e>
 8009914:	2e00      	cmp	r6, #0
 8009916:	dd05      	ble.n	8009924 <_dtoa_r+0x97c>
 8009918:	4629      	mov	r1, r5
 800991a:	4632      	mov	r2, r6
 800991c:	4648      	mov	r0, r9
 800991e:	f000 fc19 	bl	800a154 <__lshift>
 8009922:	4605      	mov	r5, r0
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d05c      	beq.n	80099e4 <_dtoa_r+0xa3c>
 800992a:	6869      	ldr	r1, [r5, #4]
 800992c:	4648      	mov	r0, r9
 800992e:	f000 fa0b 	bl	8009d48 <_Balloc>
 8009932:	4606      	mov	r6, r0
 8009934:	b928      	cbnz	r0, 8009942 <_dtoa_r+0x99a>
 8009936:	4b82      	ldr	r3, [pc, #520]	@ (8009b40 <_dtoa_r+0xb98>)
 8009938:	4602      	mov	r2, r0
 800993a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800993e:	f7ff bb4a 	b.w	8008fd6 <_dtoa_r+0x2e>
 8009942:	692a      	ldr	r2, [r5, #16]
 8009944:	3202      	adds	r2, #2
 8009946:	0092      	lsls	r2, r2, #2
 8009948:	f105 010c 	add.w	r1, r5, #12
 800994c:	300c      	adds	r0, #12
 800994e:	f7ff fa74 	bl	8008e3a <memcpy>
 8009952:	2201      	movs	r2, #1
 8009954:	4631      	mov	r1, r6
 8009956:	4648      	mov	r0, r9
 8009958:	f000 fbfc 	bl	800a154 <__lshift>
 800995c:	f10a 0301 	add.w	r3, sl, #1
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	eb0a 030b 	add.w	r3, sl, fp
 8009966:	9308      	str	r3, [sp, #32]
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	462f      	mov	r7, r5
 8009970:	9306      	str	r3, [sp, #24]
 8009972:	4605      	mov	r5, r0
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	9802      	ldr	r0, [sp, #8]
 8009978:	4621      	mov	r1, r4
 800997a:	f103 3bff 	add.w	fp, r3, #4294967295
 800997e:	f7ff fa89 	bl	8008e94 <quorem>
 8009982:	4603      	mov	r3, r0
 8009984:	3330      	adds	r3, #48	@ 0x30
 8009986:	9003      	str	r0, [sp, #12]
 8009988:	4639      	mov	r1, r7
 800998a:	9802      	ldr	r0, [sp, #8]
 800998c:	9309      	str	r3, [sp, #36]	@ 0x24
 800998e:	f000 fc4d 	bl	800a22c <__mcmp>
 8009992:	462a      	mov	r2, r5
 8009994:	9004      	str	r0, [sp, #16]
 8009996:	4621      	mov	r1, r4
 8009998:	4648      	mov	r0, r9
 800999a:	f000 fc63 	bl	800a264 <__mdiff>
 800999e:	68c2      	ldr	r2, [r0, #12]
 80099a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a2:	4606      	mov	r6, r0
 80099a4:	bb02      	cbnz	r2, 80099e8 <_dtoa_r+0xa40>
 80099a6:	4601      	mov	r1, r0
 80099a8:	9802      	ldr	r0, [sp, #8]
 80099aa:	f000 fc3f 	bl	800a22c <__mcmp>
 80099ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b0:	4602      	mov	r2, r0
 80099b2:	4631      	mov	r1, r6
 80099b4:	4648      	mov	r0, r9
 80099b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80099b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ba:	f000 fa05 	bl	8009dc8 <_Bfree>
 80099be:	9b07      	ldr	r3, [sp, #28]
 80099c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099c2:	9e00      	ldr	r6, [sp, #0]
 80099c4:	ea42 0103 	orr.w	r1, r2, r3
 80099c8:	9b06      	ldr	r3, [sp, #24]
 80099ca:	4319      	orrs	r1, r3
 80099cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ce:	d10d      	bne.n	80099ec <_dtoa_r+0xa44>
 80099d0:	2b39      	cmp	r3, #57	@ 0x39
 80099d2:	d027      	beq.n	8009a24 <_dtoa_r+0xa7c>
 80099d4:	9a04      	ldr	r2, [sp, #16]
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	dd01      	ble.n	80099de <_dtoa_r+0xa36>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3331      	adds	r3, #49	@ 0x31
 80099de:	f88b 3000 	strb.w	r3, [fp]
 80099e2:	e52e      	b.n	8009442 <_dtoa_r+0x49a>
 80099e4:	4628      	mov	r0, r5
 80099e6:	e7b9      	b.n	800995c <_dtoa_r+0x9b4>
 80099e8:	2201      	movs	r2, #1
 80099ea:	e7e2      	b.n	80099b2 <_dtoa_r+0xa0a>
 80099ec:	9904      	ldr	r1, [sp, #16]
 80099ee:	2900      	cmp	r1, #0
 80099f0:	db04      	blt.n	80099fc <_dtoa_r+0xa54>
 80099f2:	9807      	ldr	r0, [sp, #28]
 80099f4:	4301      	orrs	r1, r0
 80099f6:	9806      	ldr	r0, [sp, #24]
 80099f8:	4301      	orrs	r1, r0
 80099fa:	d120      	bne.n	8009a3e <_dtoa_r+0xa96>
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	ddee      	ble.n	80099de <_dtoa_r+0xa36>
 8009a00:	9902      	ldr	r1, [sp, #8]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2201      	movs	r2, #1
 8009a06:	4648      	mov	r0, r9
 8009a08:	f000 fba4 	bl	800a154 <__lshift>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	9002      	str	r0, [sp, #8]
 8009a10:	f000 fc0c 	bl	800a22c <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	9b00      	ldr	r3, [sp, #0]
 8009a18:	dc02      	bgt.n	8009a20 <_dtoa_r+0xa78>
 8009a1a:	d1e0      	bne.n	80099de <_dtoa_r+0xa36>
 8009a1c:	07da      	lsls	r2, r3, #31
 8009a1e:	d5de      	bpl.n	80099de <_dtoa_r+0xa36>
 8009a20:	2b39      	cmp	r3, #57	@ 0x39
 8009a22:	d1da      	bne.n	80099da <_dtoa_r+0xa32>
 8009a24:	2339      	movs	r3, #57	@ 0x39
 8009a26:	f88b 3000 	strb.w	r3, [fp]
 8009a2a:	4633      	mov	r3, r6
 8009a2c:	461e      	mov	r6, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a34:	2a39      	cmp	r2, #57	@ 0x39
 8009a36:	d04e      	beq.n	8009ad6 <_dtoa_r+0xb2e>
 8009a38:	3201      	adds	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e501      	b.n	8009442 <_dtoa_r+0x49a>
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	dd03      	ble.n	8009a4a <_dtoa_r+0xaa2>
 8009a42:	2b39      	cmp	r3, #57	@ 0x39
 8009a44:	d0ee      	beq.n	8009a24 <_dtoa_r+0xa7c>
 8009a46:	3301      	adds	r3, #1
 8009a48:	e7c9      	b.n	80099de <_dtoa_r+0xa36>
 8009a4a:	9a00      	ldr	r2, [sp, #0]
 8009a4c:	9908      	ldr	r1, [sp, #32]
 8009a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a52:	428a      	cmp	r2, r1
 8009a54:	d028      	beq.n	8009aa8 <_dtoa_r+0xb00>
 8009a56:	9902      	ldr	r1, [sp, #8]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	4648      	mov	r0, r9
 8009a5e:	f000 f9d5 	bl	8009e0c <__multadd>
 8009a62:	42af      	cmp	r7, r5
 8009a64:	9002      	str	r0, [sp, #8]
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	f04f 020a 	mov.w	r2, #10
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4648      	mov	r0, r9
 8009a72:	d107      	bne.n	8009a84 <_dtoa_r+0xadc>
 8009a74:	f000 f9ca 	bl	8009e0c <__multadd>
 8009a78:	4607      	mov	r7, r0
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	e777      	b.n	8009974 <_dtoa_r+0x9cc>
 8009a84:	f000 f9c2 	bl	8009e0c <__multadd>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	220a      	movs	r2, #10
 8009a90:	4648      	mov	r0, r9
 8009a92:	f000 f9bb 	bl	8009e0c <__multadd>
 8009a96:	4605      	mov	r5, r0
 8009a98:	e7f0      	b.n	8009a7c <_dtoa_r+0xad4>
 8009a9a:	f1bb 0f00 	cmp.w	fp, #0
 8009a9e:	bfcc      	ite	gt
 8009aa0:	465e      	movgt	r6, fp
 8009aa2:	2601      	movle	r6, #1
 8009aa4:	4456      	add	r6, sl
 8009aa6:	2700      	movs	r7, #0
 8009aa8:	9902      	ldr	r1, [sp, #8]
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	2201      	movs	r2, #1
 8009aae:	4648      	mov	r0, r9
 8009ab0:	f000 fb50 	bl	800a154 <__lshift>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	9002      	str	r0, [sp, #8]
 8009ab8:	f000 fbb8 	bl	800a22c <__mcmp>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	dcb4      	bgt.n	8009a2a <_dtoa_r+0xa82>
 8009ac0:	d102      	bne.n	8009ac8 <_dtoa_r+0xb20>
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	07db      	lsls	r3, r3, #31
 8009ac6:	d4b0      	bmi.n	8009a2a <_dtoa_r+0xa82>
 8009ac8:	4633      	mov	r3, r6
 8009aca:	461e      	mov	r6, r3
 8009acc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad0:	2a30      	cmp	r2, #48	@ 0x30
 8009ad2:	d0fa      	beq.n	8009aca <_dtoa_r+0xb22>
 8009ad4:	e4b5      	b.n	8009442 <_dtoa_r+0x49a>
 8009ad6:	459a      	cmp	sl, r3
 8009ad8:	d1a8      	bne.n	8009a2c <_dtoa_r+0xa84>
 8009ada:	2331      	movs	r3, #49	@ 0x31
 8009adc:	f108 0801 	add.w	r8, r8, #1
 8009ae0:	f88a 3000 	strb.w	r3, [sl]
 8009ae4:	e4ad      	b.n	8009442 <_dtoa_r+0x49a>
 8009ae6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ae8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009b44 <_dtoa_r+0xb9c>
 8009aec:	b11b      	cbz	r3, 8009af6 <_dtoa_r+0xb4e>
 8009aee:	f10a 0308 	add.w	r3, sl, #8
 8009af2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	4650      	mov	r0, sl
 8009af8:	b017      	add	sp, #92	@ 0x5c
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	9b07      	ldr	r3, [sp, #28]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	f77f ae2e 	ble.w	8009762 <_dtoa_r+0x7ba>
 8009b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b08:	9308      	str	r3, [sp, #32]
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	e64d      	b.n	80097aa <_dtoa_r+0x802>
 8009b0e:	f1bb 0f00 	cmp.w	fp, #0
 8009b12:	f77f aed9 	ble.w	80098c8 <_dtoa_r+0x920>
 8009b16:	4656      	mov	r6, sl
 8009b18:	9802      	ldr	r0, [sp, #8]
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f7ff f9ba 	bl	8008e94 <quorem>
 8009b20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009b24:	f806 3b01 	strb.w	r3, [r6], #1
 8009b28:	eba6 020a 	sub.w	r2, r6, sl
 8009b2c:	4593      	cmp	fp, r2
 8009b2e:	ddb4      	ble.n	8009a9a <_dtoa_r+0xaf2>
 8009b30:	9902      	ldr	r1, [sp, #8]
 8009b32:	2300      	movs	r3, #0
 8009b34:	220a      	movs	r2, #10
 8009b36:	4648      	mov	r0, r9
 8009b38:	f000 f968 	bl	8009e0c <__multadd>
 8009b3c:	9002      	str	r0, [sp, #8]
 8009b3e:	e7eb      	b.n	8009b18 <_dtoa_r+0xb70>
 8009b40:	0800bb50 	.word	0x0800bb50
 8009b44:	0800baeb 	.word	0x0800baeb

08009b48 <_free_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	d041      	beq.n	8009bd4 <_free_r+0x8c>
 8009b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b54:	1f0c      	subs	r4, r1, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	bfb8      	it	lt
 8009b5a:	18e4      	addlt	r4, r4, r3
 8009b5c:	f000 f8e8 	bl	8009d30 <__malloc_lock>
 8009b60:	4a1d      	ldr	r2, [pc, #116]	@ (8009bd8 <_free_r+0x90>)
 8009b62:	6813      	ldr	r3, [r2, #0]
 8009b64:	b933      	cbnz	r3, 8009b74 <_free_r+0x2c>
 8009b66:	6063      	str	r3, [r4, #4]
 8009b68:	6014      	str	r4, [r2, #0]
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b70:	f000 b8e4 	b.w	8009d3c <__malloc_unlock>
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d908      	bls.n	8009b8a <_free_r+0x42>
 8009b78:	6820      	ldr	r0, [r4, #0]
 8009b7a:	1821      	adds	r1, r4, r0
 8009b7c:	428b      	cmp	r3, r1
 8009b7e:	bf01      	itttt	eq
 8009b80:	6819      	ldreq	r1, [r3, #0]
 8009b82:	685b      	ldreq	r3, [r3, #4]
 8009b84:	1809      	addeq	r1, r1, r0
 8009b86:	6021      	streq	r1, [r4, #0]
 8009b88:	e7ed      	b.n	8009b66 <_free_r+0x1e>
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b10b      	cbz	r3, 8009b94 <_free_r+0x4c>
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d9fa      	bls.n	8009b8a <_free_r+0x42>
 8009b94:	6811      	ldr	r1, [r2, #0]
 8009b96:	1850      	adds	r0, r2, r1
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d10b      	bne.n	8009bb4 <_free_r+0x6c>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	4401      	add	r1, r0
 8009ba0:	1850      	adds	r0, r2, r1
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	d1e0      	bne.n	8009b6a <_free_r+0x22>
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	6053      	str	r3, [r2, #4]
 8009bae:	4408      	add	r0, r1
 8009bb0:	6010      	str	r0, [r2, #0]
 8009bb2:	e7da      	b.n	8009b6a <_free_r+0x22>
 8009bb4:	d902      	bls.n	8009bbc <_free_r+0x74>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	e7d6      	b.n	8009b6a <_free_r+0x22>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	1821      	adds	r1, r4, r0
 8009bc0:	428b      	cmp	r3, r1
 8009bc2:	bf04      	itt	eq
 8009bc4:	6819      	ldreq	r1, [r3, #0]
 8009bc6:	685b      	ldreq	r3, [r3, #4]
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	bf04      	itt	eq
 8009bcc:	1809      	addeq	r1, r1, r0
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	6054      	str	r4, [r2, #4]
 8009bd2:	e7ca      	b.n	8009b6a <_free_r+0x22>
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000aa0 	.word	0x20000aa0

08009bdc <malloc>:
 8009bdc:	4b02      	ldr	r3, [pc, #8]	@ (8009be8 <malloc+0xc>)
 8009bde:	4601      	mov	r1, r0
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f000 b825 	b.w	8009c30 <_malloc_r>
 8009be6:	bf00      	nop
 8009be8:	20000038 	.word	0x20000038

08009bec <sbrk_aligned>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	4e0f      	ldr	r6, [pc, #60]	@ (8009c2c <sbrk_aligned+0x40>)
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6831      	ldr	r1, [r6, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b911      	cbnz	r1, 8009bfe <sbrk_aligned+0x12>
 8009bf8:	f001 f84a 	bl	800ac90 <_sbrk_r>
 8009bfc:	6030      	str	r0, [r6, #0]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f001 f845 	bl	800ac90 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d103      	bne.n	8009c12 <sbrk_aligned+0x26>
 8009c0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c0e:	4620      	mov	r0, r4
 8009c10:	bd70      	pop	{r4, r5, r6, pc}
 8009c12:	1cc4      	adds	r4, r0, #3
 8009c14:	f024 0403 	bic.w	r4, r4, #3
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d0f8      	beq.n	8009c0e <sbrk_aligned+0x22>
 8009c1c:	1a21      	subs	r1, r4, r0
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f001 f836 	bl	800ac90 <_sbrk_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d1f2      	bne.n	8009c0e <sbrk_aligned+0x22>
 8009c28:	e7ef      	b.n	8009c0a <sbrk_aligned+0x1e>
 8009c2a:	bf00      	nop
 8009c2c:	20000a9c 	.word	0x20000a9c

08009c30 <_malloc_r>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	1ccd      	adds	r5, r1, #3
 8009c36:	f025 0503 	bic.w	r5, r5, #3
 8009c3a:	3508      	adds	r5, #8
 8009c3c:	2d0c      	cmp	r5, #12
 8009c3e:	bf38      	it	cc
 8009c40:	250c      	movcc	r5, #12
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	4606      	mov	r6, r0
 8009c46:	db01      	blt.n	8009c4c <_malloc_r+0x1c>
 8009c48:	42a9      	cmp	r1, r5
 8009c4a:	d904      	bls.n	8009c56 <_malloc_r+0x26>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	6033      	str	r3, [r6, #0]
 8009c50:	2000      	movs	r0, #0
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d2c <_malloc_r+0xfc>
 8009c5a:	f000 f869 	bl	8009d30 <__malloc_lock>
 8009c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c62:	461c      	mov	r4, r3
 8009c64:	bb44      	cbnz	r4, 8009cb8 <_malloc_r+0x88>
 8009c66:	4629      	mov	r1, r5
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff ffbf 	bl	8009bec <sbrk_aligned>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	4604      	mov	r4, r0
 8009c72:	d158      	bne.n	8009d26 <_malloc_r+0xf6>
 8009c74:	f8d8 4000 	ldr.w	r4, [r8]
 8009c78:	4627      	mov	r7, r4
 8009c7a:	2f00      	cmp	r7, #0
 8009c7c:	d143      	bne.n	8009d06 <_malloc_r+0xd6>
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	d04b      	beq.n	8009d1a <_malloc_r+0xea>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	4639      	mov	r1, r7
 8009c86:	4630      	mov	r0, r6
 8009c88:	eb04 0903 	add.w	r9, r4, r3
 8009c8c:	f001 f800 	bl	800ac90 <_sbrk_r>
 8009c90:	4581      	cmp	r9, r0
 8009c92:	d142      	bne.n	8009d1a <_malloc_r+0xea>
 8009c94:	6821      	ldr	r1, [r4, #0]
 8009c96:	1a6d      	subs	r5, r5, r1
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff ffa6 	bl	8009bec <sbrk_aligned>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d03a      	beq.n	8009d1a <_malloc_r+0xea>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	442b      	add	r3, r5
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	f8d8 3000 	ldr.w	r3, [r8]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	bb62      	cbnz	r2, 8009d0c <_malloc_r+0xdc>
 8009cb2:	f8c8 7000 	str.w	r7, [r8]
 8009cb6:	e00f      	b.n	8009cd8 <_malloc_r+0xa8>
 8009cb8:	6822      	ldr	r2, [r4, #0]
 8009cba:	1b52      	subs	r2, r2, r5
 8009cbc:	d420      	bmi.n	8009d00 <_malloc_r+0xd0>
 8009cbe:	2a0b      	cmp	r2, #11
 8009cc0:	d917      	bls.n	8009cf2 <_malloc_r+0xc2>
 8009cc2:	1961      	adds	r1, r4, r5
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	6025      	str	r5, [r4, #0]
 8009cc8:	bf18      	it	ne
 8009cca:	6059      	strne	r1, [r3, #4]
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	bf08      	it	eq
 8009cd0:	f8c8 1000 	streq.w	r1, [r8]
 8009cd4:	5162      	str	r2, [r4, r5]
 8009cd6:	604b      	str	r3, [r1, #4]
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f82f 	bl	8009d3c <__malloc_unlock>
 8009cde:	f104 000b 	add.w	r0, r4, #11
 8009ce2:	1d23      	adds	r3, r4, #4
 8009ce4:	f020 0007 	bic.w	r0, r0, #7
 8009ce8:	1ac2      	subs	r2, r0, r3
 8009cea:	bf1c      	itt	ne
 8009cec:	1a1b      	subne	r3, r3, r0
 8009cee:	50a3      	strne	r3, [r4, r2]
 8009cf0:	e7af      	b.n	8009c52 <_malloc_r+0x22>
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	bf0c      	ite	eq
 8009cf8:	f8c8 2000 	streq.w	r2, [r8]
 8009cfc:	605a      	strne	r2, [r3, #4]
 8009cfe:	e7eb      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d00:	4623      	mov	r3, r4
 8009d02:	6864      	ldr	r4, [r4, #4]
 8009d04:	e7ae      	b.n	8009c64 <_malloc_r+0x34>
 8009d06:	463c      	mov	r4, r7
 8009d08:	687f      	ldr	r7, [r7, #4]
 8009d0a:	e7b6      	b.n	8009c7a <_malloc_r+0x4a>
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d1fb      	bne.n	8009d0c <_malloc_r+0xdc>
 8009d14:	2300      	movs	r3, #0
 8009d16:	6053      	str	r3, [r2, #4]
 8009d18:	e7de      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 f80c 	bl	8009d3c <__malloc_unlock>
 8009d24:	e794      	b.n	8009c50 <_malloc_r+0x20>
 8009d26:	6005      	str	r5, [r0, #0]
 8009d28:	e7d6      	b.n	8009cd8 <_malloc_r+0xa8>
 8009d2a:	bf00      	nop
 8009d2c:	20000aa0 	.word	0x20000aa0

08009d30 <__malloc_lock>:
 8009d30:	4801      	ldr	r0, [pc, #4]	@ (8009d38 <__malloc_lock+0x8>)
 8009d32:	f7ff b880 	b.w	8008e36 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	20000a98 	.word	0x20000a98

08009d3c <__malloc_unlock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__malloc_unlock+0x8>)
 8009d3e:	f7ff b87b 	b.w	8008e38 <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	20000a98 	.word	0x20000a98

08009d48 <_Balloc>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	69c6      	ldr	r6, [r0, #28]
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	460d      	mov	r5, r1
 8009d50:	b976      	cbnz	r6, 8009d70 <_Balloc+0x28>
 8009d52:	2010      	movs	r0, #16
 8009d54:	f7ff ff42 	bl	8009bdc <malloc>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	61e0      	str	r0, [r4, #28]
 8009d5c:	b920      	cbnz	r0, 8009d68 <_Balloc+0x20>
 8009d5e:	4b18      	ldr	r3, [pc, #96]	@ (8009dc0 <_Balloc+0x78>)
 8009d60:	4818      	ldr	r0, [pc, #96]	@ (8009dc4 <_Balloc+0x7c>)
 8009d62:	216b      	movs	r1, #107	@ 0x6b
 8009d64:	f7ff f878 	bl	8008e58 <__assert_func>
 8009d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d6c:	6006      	str	r6, [r0, #0]
 8009d6e:	60c6      	str	r6, [r0, #12]
 8009d70:	69e6      	ldr	r6, [r4, #28]
 8009d72:	68f3      	ldr	r3, [r6, #12]
 8009d74:	b183      	cbz	r3, 8009d98 <_Balloc+0x50>
 8009d76:	69e3      	ldr	r3, [r4, #28]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d7e:	b9b8      	cbnz	r0, 8009db0 <_Balloc+0x68>
 8009d80:	2101      	movs	r1, #1
 8009d82:	fa01 f605 	lsl.w	r6, r1, r5
 8009d86:	1d72      	adds	r2, r6, #5
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 ff97 	bl	800acbe <_calloc_r>
 8009d90:	b160      	cbz	r0, 8009dac <_Balloc+0x64>
 8009d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d96:	e00e      	b.n	8009db6 <_Balloc+0x6e>
 8009d98:	2221      	movs	r2, #33	@ 0x21
 8009d9a:	2104      	movs	r1, #4
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 ff8e 	bl	800acbe <_calloc_r>
 8009da2:	69e3      	ldr	r3, [r4, #28]
 8009da4:	60f0      	str	r0, [r6, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e4      	bne.n	8009d76 <_Balloc+0x2e>
 8009dac:	2000      	movs	r0, #0
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	6802      	ldr	r2, [r0, #0]
 8009db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009db6:	2300      	movs	r3, #0
 8009db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dbc:	e7f7      	b.n	8009dae <_Balloc+0x66>
 8009dbe:	bf00      	nop
 8009dc0:	0800ba0c 	.word	0x0800ba0c
 8009dc4:	0800bb61 	.word	0x0800bb61

08009dc8 <_Bfree>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	69c6      	ldr	r6, [r0, #28]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b976      	cbnz	r6, 8009df0 <_Bfree+0x28>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f7ff ff02 	bl	8009bdc <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	61e8      	str	r0, [r5, #28]
 8009ddc:	b920      	cbnz	r0, 8009de8 <_Bfree+0x20>
 8009dde:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <_Bfree+0x3c>)
 8009de0:	4809      	ldr	r0, [pc, #36]	@ (8009e08 <_Bfree+0x40>)
 8009de2:	218f      	movs	r1, #143	@ 0x8f
 8009de4:	f7ff f838 	bl	8008e58 <__assert_func>
 8009de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dec:	6006      	str	r6, [r0, #0]
 8009dee:	60c6      	str	r6, [r0, #12]
 8009df0:	b13c      	cbz	r4, 8009e02 <_Bfree+0x3a>
 8009df2:	69eb      	ldr	r3, [r5, #28]
 8009df4:	6862      	ldr	r2, [r4, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dfc:	6021      	str	r1, [r4, #0]
 8009dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	0800ba0c 	.word	0x0800ba0c
 8009e08:	0800bb61 	.word	0x0800bb61

08009e0c <__multadd>:
 8009e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e10:	690d      	ldr	r5, [r1, #16]
 8009e12:	4607      	mov	r7, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	461e      	mov	r6, r3
 8009e18:	f101 0c14 	add.w	ip, r1, #20
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e22:	b299      	uxth	r1, r3
 8009e24:	fb02 6101 	mla	r1, r2, r1, r6
 8009e28:	0c1e      	lsrs	r6, r3, #16
 8009e2a:	0c0b      	lsrs	r3, r1, #16
 8009e2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e30:	b289      	uxth	r1, r1
 8009e32:	3001      	adds	r0, #1
 8009e34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e38:	4285      	cmp	r5, r0
 8009e3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e42:	dcec      	bgt.n	8009e1e <__multadd+0x12>
 8009e44:	b30e      	cbz	r6, 8009e8a <__multadd+0x7e>
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	dc19      	bgt.n	8009e80 <__multadd+0x74>
 8009e4c:	6861      	ldr	r1, [r4, #4]
 8009e4e:	4638      	mov	r0, r7
 8009e50:	3101      	adds	r1, #1
 8009e52:	f7ff ff79 	bl	8009d48 <_Balloc>
 8009e56:	4680      	mov	r8, r0
 8009e58:	b928      	cbnz	r0, 8009e66 <__multadd+0x5a>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e90 <__multadd+0x84>)
 8009e5e:	480d      	ldr	r0, [pc, #52]	@ (8009e94 <__multadd+0x88>)
 8009e60:	21ba      	movs	r1, #186	@ 0xba
 8009e62:	f7fe fff9 	bl	8008e58 <__assert_func>
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	3202      	adds	r2, #2
 8009e6a:	f104 010c 	add.w	r1, r4, #12
 8009e6e:	0092      	lsls	r2, r2, #2
 8009e70:	300c      	adds	r0, #12
 8009e72:	f7fe ffe2 	bl	8008e3a <memcpy>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff ffa5 	bl	8009dc8 <_Bfree>
 8009e7e:	4644      	mov	r4, r8
 8009e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e84:	3501      	adds	r5, #1
 8009e86:	615e      	str	r6, [r3, #20]
 8009e88:	6125      	str	r5, [r4, #16]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	0800bb50 	.word	0x0800bb50
 8009e94:	0800bb61 	.word	0x0800bb61

08009e98 <__hi0bits>:
 8009e98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	bf36      	itet	cc
 8009ea0:	0403      	lslcc	r3, r0, #16
 8009ea2:	2000      	movcs	r0, #0
 8009ea4:	2010      	movcc	r0, #16
 8009ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eaa:	bf3c      	itt	cc
 8009eac:	021b      	lslcc	r3, r3, #8
 8009eae:	3008      	addcc	r0, #8
 8009eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eb4:	bf3c      	itt	cc
 8009eb6:	011b      	lslcc	r3, r3, #4
 8009eb8:	3004      	addcc	r0, #4
 8009eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ebe:	bf3c      	itt	cc
 8009ec0:	009b      	lslcc	r3, r3, #2
 8009ec2:	3002      	addcc	r0, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	db05      	blt.n	8009ed4 <__hi0bits+0x3c>
 8009ec8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ecc:	f100 0001 	add.w	r0, r0, #1
 8009ed0:	bf08      	it	eq
 8009ed2:	2020      	moveq	r0, #32
 8009ed4:	4770      	bx	lr

08009ed6 <__lo0bits>:
 8009ed6:	6803      	ldr	r3, [r0, #0]
 8009ed8:	4602      	mov	r2, r0
 8009eda:	f013 0007 	ands.w	r0, r3, #7
 8009ede:	d00b      	beq.n	8009ef8 <__lo0bits+0x22>
 8009ee0:	07d9      	lsls	r1, r3, #31
 8009ee2:	d421      	bmi.n	8009f28 <__lo0bits+0x52>
 8009ee4:	0798      	lsls	r0, r3, #30
 8009ee6:	bf49      	itett	mi
 8009ee8:	085b      	lsrmi	r3, r3, #1
 8009eea:	089b      	lsrpl	r3, r3, #2
 8009eec:	2001      	movmi	r0, #1
 8009eee:	6013      	strmi	r3, [r2, #0]
 8009ef0:	bf5c      	itt	pl
 8009ef2:	6013      	strpl	r3, [r2, #0]
 8009ef4:	2002      	movpl	r0, #2
 8009ef6:	4770      	bx	lr
 8009ef8:	b299      	uxth	r1, r3
 8009efa:	b909      	cbnz	r1, 8009f00 <__lo0bits+0x2a>
 8009efc:	0c1b      	lsrs	r3, r3, #16
 8009efe:	2010      	movs	r0, #16
 8009f00:	b2d9      	uxtb	r1, r3
 8009f02:	b909      	cbnz	r1, 8009f08 <__lo0bits+0x32>
 8009f04:	3008      	adds	r0, #8
 8009f06:	0a1b      	lsrs	r3, r3, #8
 8009f08:	0719      	lsls	r1, r3, #28
 8009f0a:	bf04      	itt	eq
 8009f0c:	091b      	lsreq	r3, r3, #4
 8009f0e:	3004      	addeq	r0, #4
 8009f10:	0799      	lsls	r1, r3, #30
 8009f12:	bf04      	itt	eq
 8009f14:	089b      	lsreq	r3, r3, #2
 8009f16:	3002      	addeq	r0, #2
 8009f18:	07d9      	lsls	r1, r3, #31
 8009f1a:	d403      	bmi.n	8009f24 <__lo0bits+0x4e>
 8009f1c:	085b      	lsrs	r3, r3, #1
 8009f1e:	f100 0001 	add.w	r0, r0, #1
 8009f22:	d003      	beq.n	8009f2c <__lo0bits+0x56>
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	4770      	bx	lr
 8009f28:	2000      	movs	r0, #0
 8009f2a:	4770      	bx	lr
 8009f2c:	2020      	movs	r0, #32
 8009f2e:	4770      	bx	lr

08009f30 <__i2b>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	2101      	movs	r1, #1
 8009f36:	f7ff ff07 	bl	8009d48 <_Balloc>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	b928      	cbnz	r0, 8009f4a <__i2b+0x1a>
 8009f3e:	4b05      	ldr	r3, [pc, #20]	@ (8009f54 <__i2b+0x24>)
 8009f40:	4805      	ldr	r0, [pc, #20]	@ (8009f58 <__i2b+0x28>)
 8009f42:	f240 1145 	movw	r1, #325	@ 0x145
 8009f46:	f7fe ff87 	bl	8008e58 <__assert_func>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	6144      	str	r4, [r0, #20]
 8009f4e:	6103      	str	r3, [r0, #16]
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	bf00      	nop
 8009f54:	0800bb50 	.word	0x0800bb50
 8009f58:	0800bb61 	.word	0x0800bb61

08009f5c <__multiply>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	4617      	mov	r7, r2
 8009f62:	690a      	ldr	r2, [r1, #16]
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	bfa8      	it	ge
 8009f6a:	463b      	movge	r3, r7
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	bfa4      	itt	ge
 8009f70:	460f      	movge	r7, r1
 8009f72:	4699      	movge	r9, r3
 8009f74:	693d      	ldr	r5, [r7, #16]
 8009f76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	eb05 060a 	add.w	r6, r5, sl
 8009f82:	42b3      	cmp	r3, r6
 8009f84:	b085      	sub	sp, #20
 8009f86:	bfb8      	it	lt
 8009f88:	3101      	addlt	r1, #1
 8009f8a:	f7ff fedd 	bl	8009d48 <_Balloc>
 8009f8e:	b930      	cbnz	r0, 8009f9e <__multiply+0x42>
 8009f90:	4602      	mov	r2, r0
 8009f92:	4b41      	ldr	r3, [pc, #260]	@ (800a098 <__multiply+0x13c>)
 8009f94:	4841      	ldr	r0, [pc, #260]	@ (800a09c <__multiply+0x140>)
 8009f96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f9a:	f7fe ff5d 	bl	8008e58 <__assert_func>
 8009f9e:	f100 0414 	add.w	r4, r0, #20
 8009fa2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4573      	cmp	r3, lr
 8009fac:	d320      	bcc.n	8009ff0 <__multiply+0x94>
 8009fae:	f107 0814 	add.w	r8, r7, #20
 8009fb2:	f109 0114 	add.w	r1, r9, #20
 8009fb6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009fba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009fbe:	9302      	str	r3, [sp, #8]
 8009fc0:	1beb      	subs	r3, r5, r7
 8009fc2:	3b15      	subs	r3, #21
 8009fc4:	f023 0303 	bic.w	r3, r3, #3
 8009fc8:	3304      	adds	r3, #4
 8009fca:	3715      	adds	r7, #21
 8009fcc:	42bd      	cmp	r5, r7
 8009fce:	bf38      	it	cc
 8009fd0:	2304      	movcc	r3, #4
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	9103      	str	r1, [sp, #12]
 8009fd8:	428b      	cmp	r3, r1
 8009fda:	d80c      	bhi.n	8009ff6 <__multiply+0x9a>
 8009fdc:	2e00      	cmp	r6, #0
 8009fde:	dd03      	ble.n	8009fe8 <__multiply+0x8c>
 8009fe0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d055      	beq.n	800a094 <__multiply+0x138>
 8009fe8:	6106      	str	r6, [r0, #16]
 8009fea:	b005      	add	sp, #20
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	f843 2b04 	str.w	r2, [r3], #4
 8009ff4:	e7d9      	b.n	8009faa <__multiply+0x4e>
 8009ff6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ffa:	f1ba 0f00 	cmp.w	sl, #0
 8009ffe:	d01f      	beq.n	800a040 <__multiply+0xe4>
 800a000:	46c4      	mov	ip, r8
 800a002:	46a1      	mov	r9, r4
 800a004:	2700      	movs	r7, #0
 800a006:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a00a:	f8d9 3000 	ldr.w	r3, [r9]
 800a00e:	fa1f fb82 	uxth.w	fp, r2
 800a012:	b29b      	uxth	r3, r3
 800a014:	fb0a 330b 	mla	r3, sl, fp, r3
 800a018:	443b      	add	r3, r7
 800a01a:	f8d9 7000 	ldr.w	r7, [r9]
 800a01e:	0c12      	lsrs	r2, r2, #16
 800a020:	0c3f      	lsrs	r7, r7, #16
 800a022:	fb0a 7202 	mla	r2, sl, r2, r7
 800a026:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a030:	4565      	cmp	r5, ip
 800a032:	f849 3b04 	str.w	r3, [r9], #4
 800a036:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a03a:	d8e4      	bhi.n	800a006 <__multiply+0xaa>
 800a03c:	9b01      	ldr	r3, [sp, #4]
 800a03e:	50e7      	str	r7, [r4, r3]
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a046:	3104      	adds	r1, #4
 800a048:	f1b9 0f00 	cmp.w	r9, #0
 800a04c:	d020      	beq.n	800a090 <__multiply+0x134>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	4647      	mov	r7, r8
 800a052:	46a4      	mov	ip, r4
 800a054:	f04f 0a00 	mov.w	sl, #0
 800a058:	f8b7 b000 	ldrh.w	fp, [r7]
 800a05c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a060:	fb09 220b 	mla	r2, r9, fp, r2
 800a064:	4452      	add	r2, sl
 800a066:	b29b      	uxth	r3, r3
 800a068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a06c:	f84c 3b04 	str.w	r3, [ip], #4
 800a070:	f857 3b04 	ldr.w	r3, [r7], #4
 800a074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a078:	f8bc 3000 	ldrh.w	r3, [ip]
 800a07c:	fb09 330a 	mla	r3, r9, sl, r3
 800a080:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a084:	42bd      	cmp	r5, r7
 800a086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a08a:	d8e5      	bhi.n	800a058 <__multiply+0xfc>
 800a08c:	9a01      	ldr	r2, [sp, #4]
 800a08e:	50a3      	str	r3, [r4, r2]
 800a090:	3404      	adds	r4, #4
 800a092:	e79f      	b.n	8009fd4 <__multiply+0x78>
 800a094:	3e01      	subs	r6, #1
 800a096:	e7a1      	b.n	8009fdc <__multiply+0x80>
 800a098:	0800bb50 	.word	0x0800bb50
 800a09c:	0800bb61 	.word	0x0800bb61

0800a0a0 <__pow5mult>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	f012 0203 	ands.w	r2, r2, #3
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	d007      	beq.n	800a0c0 <__pow5mult+0x20>
 800a0b0:	4c25      	ldr	r4, [pc, #148]	@ (800a148 <__pow5mult+0xa8>)
 800a0b2:	3a01      	subs	r2, #1
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0ba:	f7ff fea7 	bl	8009e0c <__multadd>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	10ad      	asrs	r5, r5, #2
 800a0c2:	d03d      	beq.n	800a140 <__pow5mult+0xa0>
 800a0c4:	69fc      	ldr	r4, [r7, #28]
 800a0c6:	b97c      	cbnz	r4, 800a0e8 <__pow5mult+0x48>
 800a0c8:	2010      	movs	r0, #16
 800a0ca:	f7ff fd87 	bl	8009bdc <malloc>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	61f8      	str	r0, [r7, #28]
 800a0d2:	b928      	cbnz	r0, 800a0e0 <__pow5mult+0x40>
 800a0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <__pow5mult+0xac>)
 800a0d6:	481e      	ldr	r0, [pc, #120]	@ (800a150 <__pow5mult+0xb0>)
 800a0d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0dc:	f7fe febc 	bl	8008e58 <__assert_func>
 800a0e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0e4:	6004      	str	r4, [r0, #0]
 800a0e6:	60c4      	str	r4, [r0, #12]
 800a0e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a0ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0f0:	b94c      	cbnz	r4, 800a106 <__pow5mult+0x66>
 800a0f2:	f240 2171 	movw	r1, #625	@ 0x271
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f7ff ff1a 	bl	8009f30 <__i2b>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a102:	4604      	mov	r4, r0
 800a104:	6003      	str	r3, [r0, #0]
 800a106:	f04f 0900 	mov.w	r9, #0
 800a10a:	07eb      	lsls	r3, r5, #31
 800a10c:	d50a      	bpl.n	800a124 <__pow5mult+0x84>
 800a10e:	4631      	mov	r1, r6
 800a110:	4622      	mov	r2, r4
 800a112:	4638      	mov	r0, r7
 800a114:	f7ff ff22 	bl	8009f5c <__multiply>
 800a118:	4631      	mov	r1, r6
 800a11a:	4680      	mov	r8, r0
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7ff fe53 	bl	8009dc8 <_Bfree>
 800a122:	4646      	mov	r6, r8
 800a124:	106d      	asrs	r5, r5, #1
 800a126:	d00b      	beq.n	800a140 <__pow5mult+0xa0>
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	b938      	cbnz	r0, 800a13c <__pow5mult+0x9c>
 800a12c:	4622      	mov	r2, r4
 800a12e:	4621      	mov	r1, r4
 800a130:	4638      	mov	r0, r7
 800a132:	f7ff ff13 	bl	8009f5c <__multiply>
 800a136:	6020      	str	r0, [r4, #0]
 800a138:	f8c0 9000 	str.w	r9, [r0]
 800a13c:	4604      	mov	r4, r0
 800a13e:	e7e4      	b.n	800a10a <__pow5mult+0x6a>
 800a140:	4630      	mov	r0, r6
 800a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a146:	bf00      	nop
 800a148:	0800bbd8 	.word	0x0800bbd8
 800a14c:	0800ba0c 	.word	0x0800ba0c
 800a150:	0800bb61 	.word	0x0800bb61

0800a154 <__lshift>:
 800a154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	460c      	mov	r4, r1
 800a15a:	6849      	ldr	r1, [r1, #4]
 800a15c:	6923      	ldr	r3, [r4, #16]
 800a15e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	4607      	mov	r7, r0
 800a166:	4691      	mov	r9, r2
 800a168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a16c:	f108 0601 	add.w	r6, r8, #1
 800a170:	42b3      	cmp	r3, r6
 800a172:	db0b      	blt.n	800a18c <__lshift+0x38>
 800a174:	4638      	mov	r0, r7
 800a176:	f7ff fde7 	bl	8009d48 <_Balloc>
 800a17a:	4605      	mov	r5, r0
 800a17c:	b948      	cbnz	r0, 800a192 <__lshift+0x3e>
 800a17e:	4602      	mov	r2, r0
 800a180:	4b28      	ldr	r3, [pc, #160]	@ (800a224 <__lshift+0xd0>)
 800a182:	4829      	ldr	r0, [pc, #164]	@ (800a228 <__lshift+0xd4>)
 800a184:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a188:	f7fe fe66 	bl	8008e58 <__assert_func>
 800a18c:	3101      	adds	r1, #1
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	e7ee      	b.n	800a170 <__lshift+0x1c>
 800a192:	2300      	movs	r3, #0
 800a194:	f100 0114 	add.w	r1, r0, #20
 800a198:	f100 0210 	add.w	r2, r0, #16
 800a19c:	4618      	mov	r0, r3
 800a19e:	4553      	cmp	r3, sl
 800a1a0:	db33      	blt.n	800a20a <__lshift+0xb6>
 800a1a2:	6920      	ldr	r0, [r4, #16]
 800a1a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1a8:	f104 0314 	add.w	r3, r4, #20
 800a1ac:	f019 091f 	ands.w	r9, r9, #31
 800a1b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1b8:	d02b      	beq.n	800a212 <__lshift+0xbe>
 800a1ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a1be:	468a      	mov	sl, r1
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	6818      	ldr	r0, [r3, #0]
 800a1c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a1c8:	4310      	orrs	r0, r2
 800a1ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d2:	459c      	cmp	ip, r3
 800a1d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1d8:	d8f3      	bhi.n	800a1c2 <__lshift+0x6e>
 800a1da:	ebac 0304 	sub.w	r3, ip, r4
 800a1de:	3b15      	subs	r3, #21
 800a1e0:	f023 0303 	bic.w	r3, r3, #3
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	f104 0015 	add.w	r0, r4, #21
 800a1ea:	4560      	cmp	r0, ip
 800a1ec:	bf88      	it	hi
 800a1ee:	2304      	movhi	r3, #4
 800a1f0:	50ca      	str	r2, [r1, r3]
 800a1f2:	b10a      	cbz	r2, 800a1f8 <__lshift+0xa4>
 800a1f4:	f108 0602 	add.w	r6, r8, #2
 800a1f8:	3e01      	subs	r6, #1
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	612e      	str	r6, [r5, #16]
 800a1fe:	4621      	mov	r1, r4
 800a200:	f7ff fde2 	bl	8009dc8 <_Bfree>
 800a204:	4628      	mov	r0, r5
 800a206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a20e:	3301      	adds	r3, #1
 800a210:	e7c5      	b.n	800a19e <__lshift+0x4a>
 800a212:	3904      	subs	r1, #4
 800a214:	f853 2b04 	ldr.w	r2, [r3], #4
 800a218:	f841 2f04 	str.w	r2, [r1, #4]!
 800a21c:	459c      	cmp	ip, r3
 800a21e:	d8f9      	bhi.n	800a214 <__lshift+0xc0>
 800a220:	e7ea      	b.n	800a1f8 <__lshift+0xa4>
 800a222:	bf00      	nop
 800a224:	0800bb50 	.word	0x0800bb50
 800a228:	0800bb61 	.word	0x0800bb61

0800a22c <__mcmp>:
 800a22c:	690a      	ldr	r2, [r1, #16]
 800a22e:	4603      	mov	r3, r0
 800a230:	6900      	ldr	r0, [r0, #16]
 800a232:	1a80      	subs	r0, r0, r2
 800a234:	b530      	push	{r4, r5, lr}
 800a236:	d10e      	bne.n	800a256 <__mcmp+0x2a>
 800a238:	3314      	adds	r3, #20
 800a23a:	3114      	adds	r1, #20
 800a23c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a240:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a24c:	4295      	cmp	r5, r2
 800a24e:	d003      	beq.n	800a258 <__mcmp+0x2c>
 800a250:	d205      	bcs.n	800a25e <__mcmp+0x32>
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	bd30      	pop	{r4, r5, pc}
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d3f3      	bcc.n	800a244 <__mcmp+0x18>
 800a25c:	e7fb      	b.n	800a256 <__mcmp+0x2a>
 800a25e:	2001      	movs	r0, #1
 800a260:	e7f9      	b.n	800a256 <__mcmp+0x2a>
	...

0800a264 <__mdiff>:
 800a264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	4689      	mov	r9, r1
 800a26a:	4606      	mov	r6, r0
 800a26c:	4611      	mov	r1, r2
 800a26e:	4648      	mov	r0, r9
 800a270:	4614      	mov	r4, r2
 800a272:	f7ff ffdb 	bl	800a22c <__mcmp>
 800a276:	1e05      	subs	r5, r0, #0
 800a278:	d112      	bne.n	800a2a0 <__mdiff+0x3c>
 800a27a:	4629      	mov	r1, r5
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff fd63 	bl	8009d48 <_Balloc>
 800a282:	4602      	mov	r2, r0
 800a284:	b928      	cbnz	r0, 800a292 <__mdiff+0x2e>
 800a286:	4b3f      	ldr	r3, [pc, #252]	@ (800a384 <__mdiff+0x120>)
 800a288:	f240 2137 	movw	r1, #567	@ 0x237
 800a28c:	483e      	ldr	r0, [pc, #248]	@ (800a388 <__mdiff+0x124>)
 800a28e:	f7fe fde3 	bl	8008e58 <__assert_func>
 800a292:	2301      	movs	r3, #1
 800a294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a298:	4610      	mov	r0, r2
 800a29a:	b003      	add	sp, #12
 800a29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a0:	bfbc      	itt	lt
 800a2a2:	464b      	movlt	r3, r9
 800a2a4:	46a1      	movlt	r9, r4
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2ac:	bfba      	itte	lt
 800a2ae:	461c      	movlt	r4, r3
 800a2b0:	2501      	movlt	r5, #1
 800a2b2:	2500      	movge	r5, #0
 800a2b4:	f7ff fd48 	bl	8009d48 <_Balloc>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	b918      	cbnz	r0, 800a2c4 <__mdiff+0x60>
 800a2bc:	4b31      	ldr	r3, [pc, #196]	@ (800a384 <__mdiff+0x120>)
 800a2be:	f240 2145 	movw	r1, #581	@ 0x245
 800a2c2:	e7e3      	b.n	800a28c <__mdiff+0x28>
 800a2c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2c8:	6926      	ldr	r6, [r4, #16]
 800a2ca:	60c5      	str	r5, [r0, #12]
 800a2cc:	f109 0310 	add.w	r3, r9, #16
 800a2d0:	f109 0514 	add.w	r5, r9, #20
 800a2d4:	f104 0e14 	add.w	lr, r4, #20
 800a2d8:	f100 0b14 	add.w	fp, r0, #20
 800a2dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	46d9      	mov	r9, fp
 800a2e8:	f04f 0c00 	mov.w	ip, #0
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a2f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	fa1f f38a 	uxth.w	r3, sl
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	b283      	uxth	r3, r0
 800a300:	1acb      	subs	r3, r1, r3
 800a302:	0c00      	lsrs	r0, r0, #16
 800a304:	4463      	add	r3, ip
 800a306:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a30a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a30e:	b29b      	uxth	r3, r3
 800a310:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a314:	4576      	cmp	r6, lr
 800a316:	f849 3b04 	str.w	r3, [r9], #4
 800a31a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a31e:	d8e5      	bhi.n	800a2ec <__mdiff+0x88>
 800a320:	1b33      	subs	r3, r6, r4
 800a322:	3b15      	subs	r3, #21
 800a324:	f023 0303 	bic.w	r3, r3, #3
 800a328:	3415      	adds	r4, #21
 800a32a:	3304      	adds	r3, #4
 800a32c:	42a6      	cmp	r6, r4
 800a32e:	bf38      	it	cc
 800a330:	2304      	movcc	r3, #4
 800a332:	441d      	add	r5, r3
 800a334:	445b      	add	r3, fp
 800a336:	461e      	mov	r6, r3
 800a338:	462c      	mov	r4, r5
 800a33a:	4544      	cmp	r4, r8
 800a33c:	d30e      	bcc.n	800a35c <__mdiff+0xf8>
 800a33e:	f108 0103 	add.w	r1, r8, #3
 800a342:	1b49      	subs	r1, r1, r5
 800a344:	f021 0103 	bic.w	r1, r1, #3
 800a348:	3d03      	subs	r5, #3
 800a34a:	45a8      	cmp	r8, r5
 800a34c:	bf38      	it	cc
 800a34e:	2100      	movcc	r1, #0
 800a350:	440b      	add	r3, r1
 800a352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a356:	b191      	cbz	r1, 800a37e <__mdiff+0x11a>
 800a358:	6117      	str	r7, [r2, #16]
 800a35a:	e79d      	b.n	800a298 <__mdiff+0x34>
 800a35c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a360:	46e6      	mov	lr, ip
 800a362:	0c08      	lsrs	r0, r1, #16
 800a364:	fa1c fc81 	uxtah	ip, ip, r1
 800a368:	4471      	add	r1, lr
 800a36a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a36e:	b289      	uxth	r1, r1
 800a370:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a374:	f846 1b04 	str.w	r1, [r6], #4
 800a378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a37c:	e7dd      	b.n	800a33a <__mdiff+0xd6>
 800a37e:	3f01      	subs	r7, #1
 800a380:	e7e7      	b.n	800a352 <__mdiff+0xee>
 800a382:	bf00      	nop
 800a384:	0800bb50 	.word	0x0800bb50
 800a388:	0800bb61 	.word	0x0800bb61

0800a38c <__d2b>:
 800a38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a390:	460f      	mov	r7, r1
 800a392:	2101      	movs	r1, #1
 800a394:	ec59 8b10 	vmov	r8, r9, d0
 800a398:	4616      	mov	r6, r2
 800a39a:	f7ff fcd5 	bl	8009d48 <_Balloc>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	b930      	cbnz	r0, 800a3b0 <__d2b+0x24>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b23      	ldr	r3, [pc, #140]	@ (800a434 <__d2b+0xa8>)
 800a3a6:	4824      	ldr	r0, [pc, #144]	@ (800a438 <__d2b+0xac>)
 800a3a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a3ac:	f7fe fd54 	bl	8008e58 <__assert_func>
 800a3b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3b8:	b10d      	cbz	r5, 800a3be <__d2b+0x32>
 800a3ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	f1b8 0300 	subs.w	r3, r8, #0
 800a3c4:	d023      	beq.n	800a40e <__d2b+0x82>
 800a3c6:	4668      	mov	r0, sp
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	f7ff fd84 	bl	8009ed6 <__lo0bits>
 800a3ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a3d2:	b1d0      	cbz	r0, 800a40a <__d2b+0x7e>
 800a3d4:	f1c0 0320 	rsb	r3, r0, #32
 800a3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	40c2      	lsrs	r2, r0
 800a3e0:	6163      	str	r3, [r4, #20]
 800a3e2:	9201      	str	r2, [sp, #4]
 800a3e4:	9b01      	ldr	r3, [sp, #4]
 800a3e6:	61a3      	str	r3, [r4, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2201      	moveq	r2, #1
 800a3ee:	2202      	movne	r2, #2
 800a3f0:	6122      	str	r2, [r4, #16]
 800a3f2:	b1a5      	cbz	r5, 800a41e <__d2b+0x92>
 800a3f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a3f8:	4405      	add	r5, r0
 800a3fa:	603d      	str	r5, [r7, #0]
 800a3fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a400:	6030      	str	r0, [r6, #0]
 800a402:	4620      	mov	r0, r4
 800a404:	b003      	add	sp, #12
 800a406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40a:	6161      	str	r1, [r4, #20]
 800a40c:	e7ea      	b.n	800a3e4 <__d2b+0x58>
 800a40e:	a801      	add	r0, sp, #4
 800a410:	f7ff fd61 	bl	8009ed6 <__lo0bits>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	6163      	str	r3, [r4, #20]
 800a418:	3020      	adds	r0, #32
 800a41a:	2201      	movs	r2, #1
 800a41c:	e7e8      	b.n	800a3f0 <__d2b+0x64>
 800a41e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a422:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a426:	6038      	str	r0, [r7, #0]
 800a428:	6918      	ldr	r0, [r3, #16]
 800a42a:	f7ff fd35 	bl	8009e98 <__hi0bits>
 800a42e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a432:	e7e5      	b.n	800a400 <__d2b+0x74>
 800a434:	0800bb50 	.word	0x0800bb50
 800a438:	0800bb61 	.word	0x0800bb61

0800a43c <__ssputs_r>:
 800a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	688e      	ldr	r6, [r1, #8]
 800a442:	461f      	mov	r7, r3
 800a444:	42be      	cmp	r6, r7
 800a446:	680b      	ldr	r3, [r1, #0]
 800a448:	4682      	mov	sl, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4690      	mov	r8, r2
 800a44e:	d82d      	bhi.n	800a4ac <__ssputs_r+0x70>
 800a450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a458:	d026      	beq.n	800a4a8 <__ssputs_r+0x6c>
 800a45a:	6965      	ldr	r5, [r4, #20]
 800a45c:	6909      	ldr	r1, [r1, #16]
 800a45e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a462:	eba3 0901 	sub.w	r9, r3, r1
 800a466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a46a:	1c7b      	adds	r3, r7, #1
 800a46c:	444b      	add	r3, r9
 800a46e:	106d      	asrs	r5, r5, #1
 800a470:	429d      	cmp	r5, r3
 800a472:	bf38      	it	cc
 800a474:	461d      	movcc	r5, r3
 800a476:	0553      	lsls	r3, r2, #21
 800a478:	d527      	bpl.n	800a4ca <__ssputs_r+0x8e>
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7ff fbd8 	bl	8009c30 <_malloc_r>
 800a480:	4606      	mov	r6, r0
 800a482:	b360      	cbz	r0, 800a4de <__ssputs_r+0xa2>
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	464a      	mov	r2, r9
 800a488:	f7fe fcd7 	bl	8008e3a <memcpy>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	6126      	str	r6, [r4, #16]
 800a49a:	6165      	str	r5, [r4, #20]
 800a49c:	444e      	add	r6, r9
 800a49e:	eba5 0509 	sub.w	r5, r5, r9
 800a4a2:	6026      	str	r6, [r4, #0]
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	463e      	mov	r6, r7
 800a4a8:	42be      	cmp	r6, r7
 800a4aa:	d900      	bls.n	800a4ae <__ssputs_r+0x72>
 800a4ac:	463e      	mov	r6, r7
 800a4ae:	6820      	ldr	r0, [r4, #0]
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	f000 fbb0 	bl	800ac18 <memmove>
 800a4b8:	68a3      	ldr	r3, [r4, #8]
 800a4ba:	1b9b      	subs	r3, r3, r6
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	4433      	add	r3, r6
 800a4c2:	6023      	str	r3, [r4, #0]
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ca:	462a      	mov	r2, r5
 800a4cc:	f000 fc1d 	bl	800ad0a <_realloc_r>
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1e0      	bne.n	800a498 <__ssputs_r+0x5c>
 800a4d6:	6921      	ldr	r1, [r4, #16]
 800a4d8:	4650      	mov	r0, sl
 800a4da:	f7ff fb35 	bl	8009b48 <_free_r>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	f8ca 3000 	str.w	r3, [sl]
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	e7e9      	b.n	800a4c6 <__ssputs_r+0x8a>
	...

0800a4f4 <_svfiprintf_r>:
 800a4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f8:	4698      	mov	r8, r3
 800a4fa:	898b      	ldrh	r3, [r1, #12]
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	b09d      	sub	sp, #116	@ 0x74
 800a500:	4607      	mov	r7, r0
 800a502:	460d      	mov	r5, r1
 800a504:	4614      	mov	r4, r2
 800a506:	d510      	bpl.n	800a52a <_svfiprintf_r+0x36>
 800a508:	690b      	ldr	r3, [r1, #16]
 800a50a:	b973      	cbnz	r3, 800a52a <_svfiprintf_r+0x36>
 800a50c:	2140      	movs	r1, #64	@ 0x40
 800a50e:	f7ff fb8f 	bl	8009c30 <_malloc_r>
 800a512:	6028      	str	r0, [r5, #0]
 800a514:	6128      	str	r0, [r5, #16]
 800a516:	b930      	cbnz	r0, 800a526 <_svfiprintf_r+0x32>
 800a518:	230c      	movs	r3, #12
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	b01d      	add	sp, #116	@ 0x74
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a526:	2340      	movs	r3, #64	@ 0x40
 800a528:	616b      	str	r3, [r5, #20]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a52e:	2320      	movs	r3, #32
 800a530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a534:	f8cd 800c 	str.w	r8, [sp, #12]
 800a538:	2330      	movs	r3, #48	@ 0x30
 800a53a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6d8 <_svfiprintf_r+0x1e4>
 800a53e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a542:	f04f 0901 	mov.w	r9, #1
 800a546:	4623      	mov	r3, r4
 800a548:	469a      	mov	sl, r3
 800a54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54e:	b10a      	cbz	r2, 800a554 <_svfiprintf_r+0x60>
 800a550:	2a25      	cmp	r2, #37	@ 0x25
 800a552:	d1f9      	bne.n	800a548 <_svfiprintf_r+0x54>
 800a554:	ebba 0b04 	subs.w	fp, sl, r4
 800a558:	d00b      	beq.n	800a572 <_svfiprintf_r+0x7e>
 800a55a:	465b      	mov	r3, fp
 800a55c:	4622      	mov	r2, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ff6b 	bl	800a43c <__ssputs_r>
 800a566:	3001      	adds	r0, #1
 800a568:	f000 80a7 	beq.w	800a6ba <_svfiprintf_r+0x1c6>
 800a56c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a56e:	445a      	add	r2, fp
 800a570:	9209      	str	r2, [sp, #36]	@ 0x24
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 809f 	beq.w	800a6ba <_svfiprintf_r+0x1c6>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a586:	f10a 0a01 	add.w	sl, sl, #1
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	9307      	str	r3, [sp, #28]
 800a58e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a592:	931a      	str	r3, [sp, #104]	@ 0x68
 800a594:	4654      	mov	r4, sl
 800a596:	2205      	movs	r2, #5
 800a598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59c:	484e      	ldr	r0, [pc, #312]	@ (800a6d8 <_svfiprintf_r+0x1e4>)
 800a59e:	f7f5 fe1f 	bl	80001e0 <memchr>
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	b9d8      	cbnz	r0, 800a5de <_svfiprintf_r+0xea>
 800a5a6:	06d0      	lsls	r0, r2, #27
 800a5a8:	bf44      	itt	mi
 800a5aa:	2320      	movmi	r3, #32
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5b0:	0711      	lsls	r1, r2, #28
 800a5b2:	bf44      	itt	mi
 800a5b4:	232b      	movmi	r3, #43	@ 0x2b
 800a5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a5be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5c0:	d015      	beq.n	800a5ee <_svfiprintf_r+0xfa>
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4654      	mov	r4, sl
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d2:	3b30      	subs	r3, #48	@ 0x30
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d94b      	bls.n	800a670 <_svfiprintf_r+0x17c>
 800a5d8:	b1b0      	cbz	r0, 800a608 <_svfiprintf_r+0x114>
 800a5da:	9207      	str	r2, [sp, #28]
 800a5dc:	e014      	b.n	800a608 <_svfiprintf_r+0x114>
 800a5de:	eba0 0308 	sub.w	r3, r0, r8
 800a5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	46a2      	mov	sl, r4
 800a5ec:	e7d2      	b.n	800a594 <_svfiprintf_r+0xa0>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	1d19      	adds	r1, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9103      	str	r1, [sp, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfbb      	ittet	lt
 800a5fa:	425b      	neglt	r3, r3
 800a5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a600:	9307      	strge	r3, [sp, #28]
 800a602:	9307      	strlt	r3, [sp, #28]
 800a604:	bfb8      	it	lt
 800a606:	9204      	strlt	r2, [sp, #16]
 800a608:	7823      	ldrb	r3, [r4, #0]
 800a60a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a60c:	d10a      	bne.n	800a624 <_svfiprintf_r+0x130>
 800a60e:	7863      	ldrb	r3, [r4, #1]
 800a610:	2b2a      	cmp	r3, #42	@ 0x2a
 800a612:	d132      	bne.n	800a67a <_svfiprintf_r+0x186>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	1d1a      	adds	r2, r3, #4
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	9203      	str	r2, [sp, #12]
 800a61c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a620:	3402      	adds	r4, #2
 800a622:	9305      	str	r3, [sp, #20]
 800a624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6e8 <_svfiprintf_r+0x1f4>
 800a628:	7821      	ldrb	r1, [r4, #0]
 800a62a:	2203      	movs	r2, #3
 800a62c:	4650      	mov	r0, sl
 800a62e:	f7f5 fdd7 	bl	80001e0 <memchr>
 800a632:	b138      	cbz	r0, 800a644 <_svfiprintf_r+0x150>
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	eba0 000a 	sub.w	r0, r0, sl
 800a63a:	2240      	movs	r2, #64	@ 0x40
 800a63c:	4082      	lsls	r2, r0
 800a63e:	4313      	orrs	r3, r2
 800a640:	3401      	adds	r4, #1
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a648:	4824      	ldr	r0, [pc, #144]	@ (800a6dc <_svfiprintf_r+0x1e8>)
 800a64a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a64e:	2206      	movs	r2, #6
 800a650:	f7f5 fdc6 	bl	80001e0 <memchr>
 800a654:	2800      	cmp	r0, #0
 800a656:	d036      	beq.n	800a6c6 <_svfiprintf_r+0x1d2>
 800a658:	4b21      	ldr	r3, [pc, #132]	@ (800a6e0 <_svfiprintf_r+0x1ec>)
 800a65a:	bb1b      	cbnz	r3, 800a6a4 <_svfiprintf_r+0x1b0>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	3307      	adds	r3, #7
 800a660:	f023 0307 	bic.w	r3, r3, #7
 800a664:	3308      	adds	r3, #8
 800a666:	9303      	str	r3, [sp, #12]
 800a668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66a:	4433      	add	r3, r6
 800a66c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a66e:	e76a      	b.n	800a546 <_svfiprintf_r+0x52>
 800a670:	fb0c 3202 	mla	r2, ip, r2, r3
 800a674:	460c      	mov	r4, r1
 800a676:	2001      	movs	r0, #1
 800a678:	e7a8      	b.n	800a5cc <_svfiprintf_r+0xd8>
 800a67a:	2300      	movs	r3, #0
 800a67c:	3401      	adds	r4, #1
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	4619      	mov	r1, r3
 800a682:	f04f 0c0a 	mov.w	ip, #10
 800a686:	4620      	mov	r0, r4
 800a688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a68c:	3a30      	subs	r2, #48	@ 0x30
 800a68e:	2a09      	cmp	r2, #9
 800a690:	d903      	bls.n	800a69a <_svfiprintf_r+0x1a6>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0c6      	beq.n	800a624 <_svfiprintf_r+0x130>
 800a696:	9105      	str	r1, [sp, #20]
 800a698:	e7c4      	b.n	800a624 <_svfiprintf_r+0x130>
 800a69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a69e:	4604      	mov	r4, r0
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e7f0      	b.n	800a686 <_svfiprintf_r+0x192>
 800a6a4:	ab03      	add	r3, sp, #12
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e4 <_svfiprintf_r+0x1f0>)
 800a6ac:	a904      	add	r1, sp, #16
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7fd fd2c 	bl	800810c <_printf_float>
 800a6b4:	1c42      	adds	r2, r0, #1
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	d1d6      	bne.n	800a668 <_svfiprintf_r+0x174>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	065b      	lsls	r3, r3, #25
 800a6be:	f53f af2d 	bmi.w	800a51c <_svfiprintf_r+0x28>
 800a6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6c4:	e72c      	b.n	800a520 <_svfiprintf_r+0x2c>
 800a6c6:	ab03      	add	r3, sp, #12
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	4b05      	ldr	r3, [pc, #20]	@ (800a6e4 <_svfiprintf_r+0x1f0>)
 800a6ce:	a904      	add	r1, sp, #16
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7fd ffb3 	bl	800863c <_printf_i>
 800a6d6:	e7ed      	b.n	800a6b4 <_svfiprintf_r+0x1c0>
 800a6d8:	0800bbba 	.word	0x0800bbba
 800a6dc:	0800bbc4 	.word	0x0800bbc4
 800a6e0:	0800810d 	.word	0x0800810d
 800a6e4:	0800a43d 	.word	0x0800a43d
 800a6e8:	0800bbc0 	.word	0x0800bbc0

0800a6ec <__sfputc_r>:
 800a6ec:	6893      	ldr	r3, [r2, #8]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	b410      	push	{r4}
 800a6f4:	6093      	str	r3, [r2, #8]
 800a6f6:	da08      	bge.n	800a70a <__sfputc_r+0x1e>
 800a6f8:	6994      	ldr	r4, [r2, #24]
 800a6fa:	42a3      	cmp	r3, r4
 800a6fc:	db01      	blt.n	800a702 <__sfputc_r+0x16>
 800a6fe:	290a      	cmp	r1, #10
 800a700:	d103      	bne.n	800a70a <__sfputc_r+0x1e>
 800a702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a706:	f7fe ba56 	b.w	8008bb6 <__swbuf_r>
 800a70a:	6813      	ldr	r3, [r2, #0]
 800a70c:	1c58      	adds	r0, r3, #1
 800a70e:	6010      	str	r0, [r2, #0]
 800a710:	7019      	strb	r1, [r3, #0]
 800a712:	4608      	mov	r0, r1
 800a714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <__sfputs_r>:
 800a71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71c:	4606      	mov	r6, r0
 800a71e:	460f      	mov	r7, r1
 800a720:	4614      	mov	r4, r2
 800a722:	18d5      	adds	r5, r2, r3
 800a724:	42ac      	cmp	r4, r5
 800a726:	d101      	bne.n	800a72c <__sfputs_r+0x12>
 800a728:	2000      	movs	r0, #0
 800a72a:	e007      	b.n	800a73c <__sfputs_r+0x22>
 800a72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a730:	463a      	mov	r2, r7
 800a732:	4630      	mov	r0, r6
 800a734:	f7ff ffda 	bl	800a6ec <__sfputc_r>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d1f3      	bne.n	800a724 <__sfputs_r+0xa>
 800a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a740 <_vfiprintf_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	460d      	mov	r5, r1
 800a746:	b09d      	sub	sp, #116	@ 0x74
 800a748:	4614      	mov	r4, r2
 800a74a:	4698      	mov	r8, r3
 800a74c:	4606      	mov	r6, r0
 800a74e:	b118      	cbz	r0, 800a758 <_vfiprintf_r+0x18>
 800a750:	6a03      	ldr	r3, [r0, #32]
 800a752:	b90b      	cbnz	r3, 800a758 <_vfiprintf_r+0x18>
 800a754:	f7fe f91c 	bl	8008990 <__sinit>
 800a758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a75a:	07d9      	lsls	r1, r3, #31
 800a75c:	d405      	bmi.n	800a76a <_vfiprintf_r+0x2a>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	059a      	lsls	r2, r3, #22
 800a762:	d402      	bmi.n	800a76a <_vfiprintf_r+0x2a>
 800a764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a766:	f7fe fb66 	bl	8008e36 <__retarget_lock_acquire_recursive>
 800a76a:	89ab      	ldrh	r3, [r5, #12]
 800a76c:	071b      	lsls	r3, r3, #28
 800a76e:	d501      	bpl.n	800a774 <_vfiprintf_r+0x34>
 800a770:	692b      	ldr	r3, [r5, #16]
 800a772:	b99b      	cbnz	r3, 800a79c <_vfiprintf_r+0x5c>
 800a774:	4629      	mov	r1, r5
 800a776:	4630      	mov	r0, r6
 800a778:	f7fe fa5c 	bl	8008c34 <__swsetup_r>
 800a77c:	b170      	cbz	r0, 800a79c <_vfiprintf_r+0x5c>
 800a77e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a780:	07dc      	lsls	r4, r3, #31
 800a782:	d504      	bpl.n	800a78e <_vfiprintf_r+0x4e>
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	b01d      	add	sp, #116	@ 0x74
 800a78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	0598      	lsls	r0, r3, #22
 800a792:	d4f7      	bmi.n	800a784 <_vfiprintf_r+0x44>
 800a794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a796:	f7fe fb4f 	bl	8008e38 <__retarget_lock_release_recursive>
 800a79a:	e7f3      	b.n	800a784 <_vfiprintf_r+0x44>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7aa:	2330      	movs	r3, #48	@ 0x30
 800a7ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a95c <_vfiprintf_r+0x21c>
 800a7b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7b4:	f04f 0901 	mov.w	r9, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	469a      	mov	sl, r3
 800a7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_vfiprintf_r+0x86>
 800a7c2:	2a25      	cmp	r2, #37	@ 0x25
 800a7c4:	d1f9      	bne.n	800a7ba <_vfiprintf_r+0x7a>
 800a7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ca:	d00b      	beq.n	800a7e4 <_vfiprintf_r+0xa4>
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ffa1 	bl	800a71a <__sfputs_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f000 80a7 	beq.w	800a92c <_vfiprintf_r+0x1ec>
 800a7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e0:	445a      	add	r2, fp
 800a7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 809f 	beq.w	800a92c <_vfiprintf_r+0x1ec>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f8:	f10a 0a01 	add.w	sl, sl, #1
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a804:	931a      	str	r3, [sp, #104]	@ 0x68
 800a806:	4654      	mov	r4, sl
 800a808:	2205      	movs	r2, #5
 800a80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80e:	4853      	ldr	r0, [pc, #332]	@ (800a95c <_vfiprintf_r+0x21c>)
 800a810:	f7f5 fce6 	bl	80001e0 <memchr>
 800a814:	9a04      	ldr	r2, [sp, #16]
 800a816:	b9d8      	cbnz	r0, 800a850 <_vfiprintf_r+0x110>
 800a818:	06d1      	lsls	r1, r2, #27
 800a81a:	bf44      	itt	mi
 800a81c:	2320      	movmi	r3, #32
 800a81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a822:	0713      	lsls	r3, r2, #28
 800a824:	bf44      	itt	mi
 800a826:	232b      	movmi	r3, #43	@ 0x2b
 800a828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a82c:	f89a 3000 	ldrb.w	r3, [sl]
 800a830:	2b2a      	cmp	r3, #42	@ 0x2a
 800a832:	d015      	beq.n	800a860 <_vfiprintf_r+0x120>
 800a834:	9a07      	ldr	r2, [sp, #28]
 800a836:	4654      	mov	r4, sl
 800a838:	2000      	movs	r0, #0
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4621      	mov	r1, r4
 800a840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a844:	3b30      	subs	r3, #48	@ 0x30
 800a846:	2b09      	cmp	r3, #9
 800a848:	d94b      	bls.n	800a8e2 <_vfiprintf_r+0x1a2>
 800a84a:	b1b0      	cbz	r0, 800a87a <_vfiprintf_r+0x13a>
 800a84c:	9207      	str	r2, [sp, #28]
 800a84e:	e014      	b.n	800a87a <_vfiprintf_r+0x13a>
 800a850:	eba0 0308 	sub.w	r3, r0, r8
 800a854:	fa09 f303 	lsl.w	r3, r9, r3
 800a858:	4313      	orrs	r3, r2
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	46a2      	mov	sl, r4
 800a85e:	e7d2      	b.n	800a806 <_vfiprintf_r+0xc6>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	1d19      	adds	r1, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfbb      	ittet	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	f042 0202 	orrlt.w	r2, r2, #2
 800a872:	9307      	strge	r3, [sp, #28]
 800a874:	9307      	strlt	r3, [sp, #28]
 800a876:	bfb8      	it	lt
 800a878:	9204      	strlt	r2, [sp, #16]
 800a87a:	7823      	ldrb	r3, [r4, #0]
 800a87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a87e:	d10a      	bne.n	800a896 <_vfiprintf_r+0x156>
 800a880:	7863      	ldrb	r3, [r4, #1]
 800a882:	2b2a      	cmp	r3, #42	@ 0x2a
 800a884:	d132      	bne.n	800a8ec <_vfiprintf_r+0x1ac>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9203      	str	r2, [sp, #12]
 800a88e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a892:	3402      	adds	r4, #2
 800a894:	9305      	str	r3, [sp, #20]
 800a896:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a96c <_vfiprintf_r+0x22c>
 800a89a:	7821      	ldrb	r1, [r4, #0]
 800a89c:	2203      	movs	r2, #3
 800a89e:	4650      	mov	r0, sl
 800a8a0:	f7f5 fc9e 	bl	80001e0 <memchr>
 800a8a4:	b138      	cbz	r0, 800a8b6 <_vfiprintf_r+0x176>
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	eba0 000a 	sub.w	r0, r0, sl
 800a8ac:	2240      	movs	r2, #64	@ 0x40
 800a8ae:	4082      	lsls	r2, r0
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	3401      	adds	r4, #1
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ba:	4829      	ldr	r0, [pc, #164]	@ (800a960 <_vfiprintf_r+0x220>)
 800a8bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8c0:	2206      	movs	r2, #6
 800a8c2:	f7f5 fc8d 	bl	80001e0 <memchr>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d03f      	beq.n	800a94a <_vfiprintf_r+0x20a>
 800a8ca:	4b26      	ldr	r3, [pc, #152]	@ (800a964 <_vfiprintf_r+0x224>)
 800a8cc:	bb1b      	cbnz	r3, 800a916 <_vfiprintf_r+0x1d6>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	3307      	adds	r3, #7
 800a8d2:	f023 0307 	bic.w	r3, r3, #7
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	9303      	str	r3, [sp, #12]
 800a8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8dc:	443b      	add	r3, r7
 800a8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e0:	e76a      	b.n	800a7b8 <_vfiprintf_r+0x78>
 800a8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	e7a8      	b.n	800a83e <_vfiprintf_r+0xfe>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	3401      	adds	r4, #1
 800a8f0:	9305      	str	r3, [sp, #20]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	f04f 0c0a 	mov.w	ip, #10
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8fe:	3a30      	subs	r2, #48	@ 0x30
 800a900:	2a09      	cmp	r2, #9
 800a902:	d903      	bls.n	800a90c <_vfiprintf_r+0x1cc>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0c6      	beq.n	800a896 <_vfiprintf_r+0x156>
 800a908:	9105      	str	r1, [sp, #20]
 800a90a:	e7c4      	b.n	800a896 <_vfiprintf_r+0x156>
 800a90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a910:	4604      	mov	r4, r0
 800a912:	2301      	movs	r3, #1
 800a914:	e7f0      	b.n	800a8f8 <_vfiprintf_r+0x1b8>
 800a916:	ab03      	add	r3, sp, #12
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	462a      	mov	r2, r5
 800a91c:	4b12      	ldr	r3, [pc, #72]	@ (800a968 <_vfiprintf_r+0x228>)
 800a91e:	a904      	add	r1, sp, #16
 800a920:	4630      	mov	r0, r6
 800a922:	f7fd fbf3 	bl	800810c <_printf_float>
 800a926:	4607      	mov	r7, r0
 800a928:	1c78      	adds	r0, r7, #1
 800a92a:	d1d6      	bne.n	800a8da <_vfiprintf_r+0x19a>
 800a92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a92e:	07d9      	lsls	r1, r3, #31
 800a930:	d405      	bmi.n	800a93e <_vfiprintf_r+0x1fe>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	059a      	lsls	r2, r3, #22
 800a936:	d402      	bmi.n	800a93e <_vfiprintf_r+0x1fe>
 800a938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a93a:	f7fe fa7d 	bl	8008e38 <__retarget_lock_release_recursive>
 800a93e:	89ab      	ldrh	r3, [r5, #12]
 800a940:	065b      	lsls	r3, r3, #25
 800a942:	f53f af1f 	bmi.w	800a784 <_vfiprintf_r+0x44>
 800a946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a948:	e71e      	b.n	800a788 <_vfiprintf_r+0x48>
 800a94a:	ab03      	add	r3, sp, #12
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	462a      	mov	r2, r5
 800a950:	4b05      	ldr	r3, [pc, #20]	@ (800a968 <_vfiprintf_r+0x228>)
 800a952:	a904      	add	r1, sp, #16
 800a954:	4630      	mov	r0, r6
 800a956:	f7fd fe71 	bl	800863c <_printf_i>
 800a95a:	e7e4      	b.n	800a926 <_vfiprintf_r+0x1e6>
 800a95c:	0800bbba 	.word	0x0800bbba
 800a960:	0800bbc4 	.word	0x0800bbc4
 800a964:	0800810d 	.word	0x0800810d
 800a968:	0800a71b 	.word	0x0800a71b
 800a96c:	0800bbc0 	.word	0x0800bbc0

0800a970 <__sflush_r>:
 800a970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a978:	0716      	lsls	r6, r2, #28
 800a97a:	4605      	mov	r5, r0
 800a97c:	460c      	mov	r4, r1
 800a97e:	d454      	bmi.n	800aa2a <__sflush_r+0xba>
 800a980:	684b      	ldr	r3, [r1, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dc02      	bgt.n	800a98c <__sflush_r+0x1c>
 800a986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dd48      	ble.n	800aa1e <__sflush_r+0xae>
 800a98c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d045      	beq.n	800aa1e <__sflush_r+0xae>
 800a992:	2300      	movs	r3, #0
 800a994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a998:	682f      	ldr	r7, [r5, #0]
 800a99a:	6a21      	ldr	r1, [r4, #32]
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	d030      	beq.n	800aa02 <__sflush_r+0x92>
 800a9a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	0759      	lsls	r1, r3, #29
 800a9a6:	d505      	bpl.n	800a9b4 <__sflush_r+0x44>
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	1ad2      	subs	r2, r2, r3
 800a9ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9ae:	b10b      	cbz	r3, 800a9b4 <__sflush_r+0x44>
 800a9b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9b8:	6a21      	ldr	r1, [r4, #32]
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b0      	blx	r6
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	d106      	bne.n	800a9d2 <__sflush_r+0x62>
 800a9c4:	6829      	ldr	r1, [r5, #0]
 800a9c6:	291d      	cmp	r1, #29
 800a9c8:	d82b      	bhi.n	800aa22 <__sflush_r+0xb2>
 800a9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800aa74 <__sflush_r+0x104>)
 800a9cc:	40ca      	lsrs	r2, r1
 800a9ce:	07d6      	lsls	r6, r2, #31
 800a9d0:	d527      	bpl.n	800aa22 <__sflush_r+0xb2>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	6062      	str	r2, [r4, #4]
 800a9d6:	04d9      	lsls	r1, r3, #19
 800a9d8:	6922      	ldr	r2, [r4, #16]
 800a9da:	6022      	str	r2, [r4, #0]
 800a9dc:	d504      	bpl.n	800a9e8 <__sflush_r+0x78>
 800a9de:	1c42      	adds	r2, r0, #1
 800a9e0:	d101      	bne.n	800a9e6 <__sflush_r+0x76>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	b903      	cbnz	r3, 800a9e8 <__sflush_r+0x78>
 800a9e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9ea:	602f      	str	r7, [r5, #0]
 800a9ec:	b1b9      	cbz	r1, 800aa1e <__sflush_r+0xae>
 800a9ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	d002      	beq.n	800a9fc <__sflush_r+0x8c>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7ff f8a6 	bl	8009b48 <_free_r>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa00:	e00d      	b.n	800aa1e <__sflush_r+0xae>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4628      	mov	r0, r5
 800aa06:	47b0      	blx	r6
 800aa08:	4602      	mov	r2, r0
 800aa0a:	1c50      	adds	r0, r2, #1
 800aa0c:	d1c9      	bne.n	800a9a2 <__sflush_r+0x32>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0c6      	beq.n	800a9a2 <__sflush_r+0x32>
 800aa14:	2b1d      	cmp	r3, #29
 800aa16:	d001      	beq.n	800aa1c <__sflush_r+0xac>
 800aa18:	2b16      	cmp	r3, #22
 800aa1a:	d11e      	bne.n	800aa5a <__sflush_r+0xea>
 800aa1c:	602f      	str	r7, [r5, #0]
 800aa1e:	2000      	movs	r0, #0
 800aa20:	e022      	b.n	800aa68 <__sflush_r+0xf8>
 800aa22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa26:	b21b      	sxth	r3, r3
 800aa28:	e01b      	b.n	800aa62 <__sflush_r+0xf2>
 800aa2a:	690f      	ldr	r7, [r1, #16]
 800aa2c:	2f00      	cmp	r7, #0
 800aa2e:	d0f6      	beq.n	800aa1e <__sflush_r+0xae>
 800aa30:	0793      	lsls	r3, r2, #30
 800aa32:	680e      	ldr	r6, [r1, #0]
 800aa34:	bf08      	it	eq
 800aa36:	694b      	ldreq	r3, [r1, #20]
 800aa38:	600f      	str	r7, [r1, #0]
 800aa3a:	bf18      	it	ne
 800aa3c:	2300      	movne	r3, #0
 800aa3e:	eba6 0807 	sub.w	r8, r6, r7
 800aa42:	608b      	str	r3, [r1, #8]
 800aa44:	f1b8 0f00 	cmp.w	r8, #0
 800aa48:	dde9      	ble.n	800aa1e <__sflush_r+0xae>
 800aa4a:	6a21      	ldr	r1, [r4, #32]
 800aa4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa4e:	4643      	mov	r3, r8
 800aa50:	463a      	mov	r2, r7
 800aa52:	4628      	mov	r0, r5
 800aa54:	47b0      	blx	r6
 800aa56:	2800      	cmp	r0, #0
 800aa58:	dc08      	bgt.n	800aa6c <__sflush_r+0xfc>
 800aa5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6c:	4407      	add	r7, r0
 800aa6e:	eba8 0800 	sub.w	r8, r8, r0
 800aa72:	e7e7      	b.n	800aa44 <__sflush_r+0xd4>
 800aa74:	20400001 	.word	0x20400001

0800aa78 <_fflush_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b913      	cbnz	r3, 800aa88 <_fflush_r+0x10>
 800aa82:	2500      	movs	r5, #0
 800aa84:	4628      	mov	r0, r5
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	b118      	cbz	r0, 800aa92 <_fflush_r+0x1a>
 800aa8a:	6a03      	ldr	r3, [r0, #32]
 800aa8c:	b90b      	cbnz	r3, 800aa92 <_fflush_r+0x1a>
 800aa8e:	f7fd ff7f 	bl	8008990 <__sinit>
 800aa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f3      	beq.n	800aa82 <_fflush_r+0xa>
 800aa9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa9c:	07d0      	lsls	r0, r2, #31
 800aa9e:	d404      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa0:	0599      	lsls	r1, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaa6:	f7fe f9c6 	bl	8008e36 <__retarget_lock_acquire_recursive>
 800aaaa:	4628      	mov	r0, r5
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7ff ff5f 	bl	800a970 <__sflush_r>
 800aab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aab4:	07da      	lsls	r2, r3, #31
 800aab6:	4605      	mov	r5, r0
 800aab8:	d4e4      	bmi.n	800aa84 <_fflush_r+0xc>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	059b      	lsls	r3, r3, #22
 800aabe:	d4e1      	bmi.n	800aa84 <_fflush_r+0xc>
 800aac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac2:	f7fe f9b9 	bl	8008e38 <__retarget_lock_release_recursive>
 800aac6:	e7dd      	b.n	800aa84 <_fflush_r+0xc>

0800aac8 <fiprintf>:
 800aac8:	b40e      	push	{r1, r2, r3}
 800aaca:	b503      	push	{r0, r1, lr}
 800aacc:	4601      	mov	r1, r0
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	4805      	ldr	r0, [pc, #20]	@ (800aae8 <fiprintf+0x20>)
 800aad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad6:	6800      	ldr	r0, [r0, #0]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	f7ff fe31 	bl	800a740 <_vfiprintf_r>
 800aade:	b002      	add	sp, #8
 800aae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aae4:	b003      	add	sp, #12
 800aae6:	4770      	bx	lr
 800aae8:	20000038 	.word	0x20000038

0800aaec <__swhatbuf_r>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	460c      	mov	r4, r1
 800aaf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	b096      	sub	sp, #88	@ 0x58
 800aaf8:	4615      	mov	r5, r2
 800aafa:	461e      	mov	r6, r3
 800aafc:	da0d      	bge.n	800ab1a <__swhatbuf_r+0x2e>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab04:	f04f 0100 	mov.w	r1, #0
 800ab08:	bf14      	ite	ne
 800ab0a:	2340      	movne	r3, #64	@ 0x40
 800ab0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab10:	2000      	movs	r0, #0
 800ab12:	6031      	str	r1, [r6, #0]
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	b016      	add	sp, #88	@ 0x58
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	466a      	mov	r2, sp
 800ab1c:	f000 f896 	bl	800ac4c <_fstat_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	dbec      	blt.n	800aafe <__swhatbuf_r+0x12>
 800ab24:	9901      	ldr	r1, [sp, #4]
 800ab26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab2e:	4259      	negs	r1, r3
 800ab30:	4159      	adcs	r1, r3
 800ab32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab36:	e7eb      	b.n	800ab10 <__swhatbuf_r+0x24>

0800ab38 <__smakebuf_r>:
 800ab38:	898b      	ldrh	r3, [r1, #12]
 800ab3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab3c:	079d      	lsls	r5, r3, #30
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	d507      	bpl.n	800ab54 <__smakebuf_r+0x1c>
 800ab44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	6163      	str	r3, [r4, #20]
 800ab50:	b003      	add	sp, #12
 800ab52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab54:	ab01      	add	r3, sp, #4
 800ab56:	466a      	mov	r2, sp
 800ab58:	f7ff ffc8 	bl	800aaec <__swhatbuf_r>
 800ab5c:	9f00      	ldr	r7, [sp, #0]
 800ab5e:	4605      	mov	r5, r0
 800ab60:	4639      	mov	r1, r7
 800ab62:	4630      	mov	r0, r6
 800ab64:	f7ff f864 	bl	8009c30 <_malloc_r>
 800ab68:	b948      	cbnz	r0, 800ab7e <__smakebuf_r+0x46>
 800ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6e:	059a      	lsls	r2, r3, #22
 800ab70:	d4ee      	bmi.n	800ab50 <__smakebuf_r+0x18>
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	f043 0302 	orr.w	r3, r3, #2
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	e7e2      	b.n	800ab44 <__smakebuf_r+0xc>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	6020      	str	r0, [r4, #0]
 800ab82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab86:	81a3      	strh	r3, [r4, #12]
 800ab88:	9b01      	ldr	r3, [sp, #4]
 800ab8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab8e:	b15b      	cbz	r3, 800aba8 <__smakebuf_r+0x70>
 800ab90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab94:	4630      	mov	r0, r6
 800ab96:	f000 f86b 	bl	800ac70 <_isatty_r>
 800ab9a:	b128      	cbz	r0, 800aba8 <__smakebuf_r+0x70>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f023 0303 	bic.w	r3, r3, #3
 800aba2:	f043 0301 	orr.w	r3, r3, #1
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	431d      	orrs	r5, r3
 800abac:	81a5      	strh	r5, [r4, #12]
 800abae:	e7cf      	b.n	800ab50 <__smakebuf_r+0x18>

0800abb0 <_putc_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	460d      	mov	r5, r1
 800abb4:	4614      	mov	r4, r2
 800abb6:	4606      	mov	r6, r0
 800abb8:	b118      	cbz	r0, 800abc2 <_putc_r+0x12>
 800abba:	6a03      	ldr	r3, [r0, #32]
 800abbc:	b90b      	cbnz	r3, 800abc2 <_putc_r+0x12>
 800abbe:	f7fd fee7 	bl	8008990 <__sinit>
 800abc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abc4:	07d8      	lsls	r0, r3, #31
 800abc6:	d405      	bmi.n	800abd4 <_putc_r+0x24>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	0599      	lsls	r1, r3, #22
 800abcc:	d402      	bmi.n	800abd4 <_putc_r+0x24>
 800abce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd0:	f7fe f931 	bl	8008e36 <__retarget_lock_acquire_recursive>
 800abd4:	68a3      	ldr	r3, [r4, #8]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	60a3      	str	r3, [r4, #8]
 800abdc:	da05      	bge.n	800abea <_putc_r+0x3a>
 800abde:	69a2      	ldr	r2, [r4, #24]
 800abe0:	4293      	cmp	r3, r2
 800abe2:	db12      	blt.n	800ac0a <_putc_r+0x5a>
 800abe4:	b2eb      	uxtb	r3, r5
 800abe6:	2b0a      	cmp	r3, #10
 800abe8:	d00f      	beq.n	800ac0a <_putc_r+0x5a>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	701d      	strb	r5, [r3, #0]
 800abf2:	b2ed      	uxtb	r5, r5
 800abf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abf6:	07da      	lsls	r2, r3, #31
 800abf8:	d405      	bmi.n	800ac06 <_putc_r+0x56>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	059b      	lsls	r3, r3, #22
 800abfe:	d402      	bmi.n	800ac06 <_putc_r+0x56>
 800ac00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac02:	f7fe f919 	bl	8008e38 <__retarget_lock_release_recursive>
 800ac06:	4628      	mov	r0, r5
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7fd ffd1 	bl	8008bb6 <__swbuf_r>
 800ac14:	4605      	mov	r5, r0
 800ac16:	e7ed      	b.n	800abf4 <_putc_r+0x44>

0800ac18 <memmove>:
 800ac18:	4288      	cmp	r0, r1
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	eb01 0402 	add.w	r4, r1, r2
 800ac20:	d902      	bls.n	800ac28 <memmove+0x10>
 800ac22:	4284      	cmp	r4, r0
 800ac24:	4623      	mov	r3, r4
 800ac26:	d807      	bhi.n	800ac38 <memmove+0x20>
 800ac28:	1e43      	subs	r3, r0, #1
 800ac2a:	42a1      	cmp	r1, r4
 800ac2c:	d008      	beq.n	800ac40 <memmove+0x28>
 800ac2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac36:	e7f8      	b.n	800ac2a <memmove+0x12>
 800ac38:	4402      	add	r2, r0
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	428a      	cmp	r2, r1
 800ac3e:	d100      	bne.n	800ac42 <memmove+0x2a>
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac4a:	e7f7      	b.n	800ac3c <memmove+0x24>

0800ac4c <_fstat_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d07      	ldr	r5, [pc, #28]	@ (800ac6c <_fstat_r+0x20>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f7f8 f979 	bl	8002f50 <_fstat>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	d102      	bne.n	800ac68 <_fstat_r+0x1c>
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	b103      	cbz	r3, 800ac68 <_fstat_r+0x1c>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000a94 	.word	0x20000a94

0800ac70 <_isatty_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d06      	ldr	r5, [pc, #24]	@ (800ac8c <_isatty_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f8 f978 	bl	8002f70 <_isatty>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_isatty_r+0x1a>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_isatty_r+0x1a>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000a94 	.word	0x20000a94

0800ac90 <_sbrk_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d06      	ldr	r5, [pc, #24]	@ (800acac <_sbrk_r+0x1c>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	f7f8 f980 	bl	8002fa0 <_sbrk>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_sbrk_r+0x1a>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_sbrk_r+0x1a>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	20000a94 	.word	0x20000a94

0800acb0 <abort>:
 800acb0:	b508      	push	{r3, lr}
 800acb2:	2006      	movs	r0, #6
 800acb4:	f000 f88c 	bl	800add0 <raise>
 800acb8:	2001      	movs	r0, #1
 800acba:	f7f8 f8f9 	bl	8002eb0 <_exit>

0800acbe <_calloc_r>:
 800acbe:	b570      	push	{r4, r5, r6, lr}
 800acc0:	fba1 5402 	umull	r5, r4, r1, r2
 800acc4:	b934      	cbnz	r4, 800acd4 <_calloc_r+0x16>
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7fe ffb2 	bl	8009c30 <_malloc_r>
 800accc:	4606      	mov	r6, r0
 800acce:	b928      	cbnz	r0, 800acdc <_calloc_r+0x1e>
 800acd0:	4630      	mov	r0, r6
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	220c      	movs	r2, #12
 800acd6:	6002      	str	r2, [r0, #0]
 800acd8:	2600      	movs	r6, #0
 800acda:	e7f9      	b.n	800acd0 <_calloc_r+0x12>
 800acdc:	462a      	mov	r2, r5
 800acde:	4621      	mov	r1, r4
 800ace0:	f7fd fffe 	bl	8008ce0 <memset>
 800ace4:	e7f4      	b.n	800acd0 <_calloc_r+0x12>

0800ace6 <__ascii_mbtowc>:
 800ace6:	b082      	sub	sp, #8
 800ace8:	b901      	cbnz	r1, 800acec <__ascii_mbtowc+0x6>
 800acea:	a901      	add	r1, sp, #4
 800acec:	b142      	cbz	r2, 800ad00 <__ascii_mbtowc+0x1a>
 800acee:	b14b      	cbz	r3, 800ad04 <__ascii_mbtowc+0x1e>
 800acf0:	7813      	ldrb	r3, [r2, #0]
 800acf2:	600b      	str	r3, [r1, #0]
 800acf4:	7812      	ldrb	r2, [r2, #0]
 800acf6:	1e10      	subs	r0, r2, #0
 800acf8:	bf18      	it	ne
 800acfa:	2001      	movne	r0, #1
 800acfc:	b002      	add	sp, #8
 800acfe:	4770      	bx	lr
 800ad00:	4610      	mov	r0, r2
 800ad02:	e7fb      	b.n	800acfc <__ascii_mbtowc+0x16>
 800ad04:	f06f 0001 	mvn.w	r0, #1
 800ad08:	e7f8      	b.n	800acfc <__ascii_mbtowc+0x16>

0800ad0a <_realloc_r>:
 800ad0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4614      	mov	r4, r2
 800ad12:	460d      	mov	r5, r1
 800ad14:	b921      	cbnz	r1, 800ad20 <_realloc_r+0x16>
 800ad16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	f7fe bf88 	b.w	8009c30 <_malloc_r>
 800ad20:	b92a      	cbnz	r2, 800ad2e <_realloc_r+0x24>
 800ad22:	f7fe ff11 	bl	8009b48 <_free_r>
 800ad26:	4625      	mov	r5, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2e:	f000 f86b 	bl	800ae08 <_malloc_usable_size_r>
 800ad32:	4284      	cmp	r4, r0
 800ad34:	4606      	mov	r6, r0
 800ad36:	d802      	bhi.n	800ad3e <_realloc_r+0x34>
 800ad38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad3c:	d8f4      	bhi.n	800ad28 <_realloc_r+0x1e>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7fe ff75 	bl	8009c30 <_malloc_r>
 800ad46:	4680      	mov	r8, r0
 800ad48:	b908      	cbnz	r0, 800ad4e <_realloc_r+0x44>
 800ad4a:	4645      	mov	r5, r8
 800ad4c:	e7ec      	b.n	800ad28 <_realloc_r+0x1e>
 800ad4e:	42b4      	cmp	r4, r6
 800ad50:	4622      	mov	r2, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	bf28      	it	cs
 800ad56:	4632      	movcs	r2, r6
 800ad58:	f7fe f86f 	bl	8008e3a <memcpy>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f7fe fef2 	bl	8009b48 <_free_r>
 800ad64:	e7f1      	b.n	800ad4a <_realloc_r+0x40>

0800ad66 <__ascii_wctomb>:
 800ad66:	4603      	mov	r3, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	b141      	cbz	r1, 800ad7e <__ascii_wctomb+0x18>
 800ad6c:	2aff      	cmp	r2, #255	@ 0xff
 800ad6e:	d904      	bls.n	800ad7a <__ascii_wctomb+0x14>
 800ad70:	228a      	movs	r2, #138	@ 0x8a
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	4770      	bx	lr
 800ad7a:	700a      	strb	r2, [r1, #0]
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	4770      	bx	lr

0800ad80 <_raise_r>:
 800ad80:	291f      	cmp	r1, #31
 800ad82:	b538      	push	{r3, r4, r5, lr}
 800ad84:	4605      	mov	r5, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	d904      	bls.n	800ad94 <_raise_r+0x14>
 800ad8a:	2316      	movs	r3, #22
 800ad8c:	6003      	str	r3, [r0, #0]
 800ad8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad96:	b112      	cbz	r2, 800ad9e <_raise_r+0x1e>
 800ad98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad9c:	b94b      	cbnz	r3, 800adb2 <_raise_r+0x32>
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f830 	bl	800ae04 <_getpid_r>
 800ada4:	4622      	mov	r2, r4
 800ada6:	4601      	mov	r1, r0
 800ada8:	4628      	mov	r0, r5
 800adaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adae:	f000 b817 	b.w	800ade0 <_kill_r>
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d00a      	beq.n	800adcc <_raise_r+0x4c>
 800adb6:	1c59      	adds	r1, r3, #1
 800adb8:	d103      	bne.n	800adc2 <_raise_r+0x42>
 800adba:	2316      	movs	r3, #22
 800adbc:	6003      	str	r3, [r0, #0]
 800adbe:	2001      	movs	r0, #1
 800adc0:	e7e7      	b.n	800ad92 <_raise_r+0x12>
 800adc2:	2100      	movs	r1, #0
 800adc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800adc8:	4620      	mov	r0, r4
 800adca:	4798      	blx	r3
 800adcc:	2000      	movs	r0, #0
 800adce:	e7e0      	b.n	800ad92 <_raise_r+0x12>

0800add0 <raise>:
 800add0:	4b02      	ldr	r3, [pc, #8]	@ (800addc <raise+0xc>)
 800add2:	4601      	mov	r1, r0
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	f7ff bfd3 	b.w	800ad80 <_raise_r>
 800adda:	bf00      	nop
 800addc:	20000038 	.word	0x20000038

0800ade0 <_kill_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4d07      	ldr	r5, [pc, #28]	@ (800ae00 <_kill_r+0x20>)
 800ade4:	2300      	movs	r3, #0
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	4611      	mov	r1, r2
 800adec:	602b      	str	r3, [r5, #0]
 800adee:	f7f8 f84f 	bl	8002e90 <_kill>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d102      	bne.n	800adfc <_kill_r+0x1c>
 800adf6:	682b      	ldr	r3, [r5, #0]
 800adf8:	b103      	cbz	r3, 800adfc <_kill_r+0x1c>
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
 800adfe:	bf00      	nop
 800ae00:	20000a94 	.word	0x20000a94

0800ae04 <_getpid_r>:
 800ae04:	f7f8 b83c 	b.w	8002e80 <_getpid>

0800ae08 <_malloc_usable_size_r>:
 800ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae0c:	1f18      	subs	r0, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	bfbc      	itt	lt
 800ae12:	580b      	ldrlt	r3, [r1, r0]
 800ae14:	18c0      	addlt	r0, r0, r3
 800ae16:	4770      	bx	lr

0800ae18 <atan2f>:
 800ae18:	f000 b800 	b.w	800ae1c <__ieee754_atan2f>

0800ae1c <__ieee754_atan2f>:
 800ae1c:	ee10 2a90 	vmov	r2, s1
 800ae20:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ae24:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	eef0 7a40 	vmov.f32	s15, s0
 800ae2e:	d806      	bhi.n	800ae3e <__ieee754_atan2f+0x22>
 800ae30:	ee10 0a10 	vmov	r0, s0
 800ae34:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ae38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ae3c:	d904      	bls.n	800ae48 <__ieee754_atan2f+0x2c>
 800ae3e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ae42:	eeb0 0a67 	vmov.f32	s0, s15
 800ae46:	bd10      	pop	{r4, pc}
 800ae48:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ae4c:	d103      	bne.n	800ae56 <__ieee754_atan2f+0x3a>
 800ae4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae52:	f000 b883 	b.w	800af5c <atanf>
 800ae56:	1794      	asrs	r4, r2, #30
 800ae58:	f004 0402 	and.w	r4, r4, #2
 800ae5c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ae60:	b943      	cbnz	r3, 800ae74 <__ieee754_atan2f+0x58>
 800ae62:	2c02      	cmp	r4, #2
 800ae64:	d05e      	beq.n	800af24 <__ieee754_atan2f+0x108>
 800ae66:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800af38 <__ieee754_atan2f+0x11c>
 800ae6a:	2c03      	cmp	r4, #3
 800ae6c:	bf08      	it	eq
 800ae6e:	eef0 7a47 	vmoveq.f32	s15, s14
 800ae72:	e7e6      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800ae74:	b941      	cbnz	r1, 800ae88 <__ieee754_atan2f+0x6c>
 800ae76:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800af3c <__ieee754_atan2f+0x120>
 800ae7a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800af40 <__ieee754_atan2f+0x124>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	bfa8      	it	ge
 800ae82:	eef0 7a47 	vmovge.f32	s15, s14
 800ae86:	e7dc      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800ae88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ae8c:	d110      	bne.n	800aeb0 <__ieee754_atan2f+0x94>
 800ae8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ae92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae96:	d107      	bne.n	800aea8 <__ieee754_atan2f+0x8c>
 800ae98:	2c02      	cmp	r4, #2
 800ae9a:	d846      	bhi.n	800af2a <__ieee754_atan2f+0x10e>
 800ae9c:	4b29      	ldr	r3, [pc, #164]	@ (800af44 <__ieee754_atan2f+0x128>)
 800ae9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aea2:	edd3 7a00 	vldr	s15, [r3]
 800aea6:	e7cc      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800aea8:	2c02      	cmp	r4, #2
 800aeaa:	d841      	bhi.n	800af30 <__ieee754_atan2f+0x114>
 800aeac:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <__ieee754_atan2f+0x12c>)
 800aeae:	e7f6      	b.n	800ae9e <__ieee754_atan2f+0x82>
 800aeb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aeb4:	d0df      	beq.n	800ae76 <__ieee754_atan2f+0x5a>
 800aeb6:	1a5b      	subs	r3, r3, r1
 800aeb8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800aebc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aec0:	da1a      	bge.n	800aef8 <__ieee754_atan2f+0xdc>
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	da01      	bge.n	800aeca <__ieee754_atan2f+0xae>
 800aec6:	313c      	adds	r1, #60	@ 0x3c
 800aec8:	db19      	blt.n	800aefe <__ieee754_atan2f+0xe2>
 800aeca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aece:	f000 f919 	bl	800b104 <fabsf>
 800aed2:	f000 f843 	bl	800af5c <atanf>
 800aed6:	eef0 7a40 	vmov.f32	s15, s0
 800aeda:	2c01      	cmp	r4, #1
 800aedc:	d012      	beq.n	800af04 <__ieee754_atan2f+0xe8>
 800aede:	2c02      	cmp	r4, #2
 800aee0:	d017      	beq.n	800af12 <__ieee754_atan2f+0xf6>
 800aee2:	2c00      	cmp	r4, #0
 800aee4:	d0ad      	beq.n	800ae42 <__ieee754_atan2f+0x26>
 800aee6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800af4c <__ieee754_atan2f+0x130>
 800aeea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aeee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800af50 <__ieee754_atan2f+0x134>
 800aef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aef6:	e7a4      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800aef8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800af40 <__ieee754_atan2f+0x124>
 800aefc:	e7ed      	b.n	800aeda <__ieee754_atan2f+0xbe>
 800aefe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800af54 <__ieee754_atan2f+0x138>
 800af02:	e7ea      	b.n	800aeda <__ieee754_atan2f+0xbe>
 800af04:	ee17 3a90 	vmov	r3, s15
 800af08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800af0c:	ee07 3a90 	vmov	s15, r3
 800af10:	e797      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800af12:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800af4c <__ieee754_atan2f+0x130>
 800af16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800af50 <__ieee754_atan2f+0x134>
 800af1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af22:	e78e      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800af24:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800af50 <__ieee754_atan2f+0x134>
 800af28:	e78b      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800af2a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800af58 <__ieee754_atan2f+0x13c>
 800af2e:	e788      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800af30:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800af54 <__ieee754_atan2f+0x138>
 800af34:	e785      	b.n	800ae42 <__ieee754_atan2f+0x26>
 800af36:	bf00      	nop
 800af38:	c0490fdb 	.word	0xc0490fdb
 800af3c:	bfc90fdb 	.word	0xbfc90fdb
 800af40:	3fc90fdb 	.word	0x3fc90fdb
 800af44:	0800bde8 	.word	0x0800bde8
 800af48:	0800bddc 	.word	0x0800bddc
 800af4c:	33bbbd2e 	.word	0x33bbbd2e
 800af50:	40490fdb 	.word	0x40490fdb
 800af54:	00000000 	.word	0x00000000
 800af58:	3f490fdb 	.word	0x3f490fdb

0800af5c <atanf>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	ee10 5a10 	vmov	r5, s0
 800af62:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800af66:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800af6a:	eef0 7a40 	vmov.f32	s15, s0
 800af6e:	d310      	bcc.n	800af92 <atanf+0x36>
 800af70:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800af74:	d904      	bls.n	800af80 <atanf+0x24>
 800af76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af7a:	eeb0 0a67 	vmov.f32	s0, s15
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b0b8 <atanf+0x15c>
 800af84:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b0bc <atanf+0x160>
 800af88:	2d00      	cmp	r5, #0
 800af8a:	bfc8      	it	gt
 800af8c:	eef0 7a47 	vmovgt.f32	s15, s14
 800af90:	e7f3      	b.n	800af7a <atanf+0x1e>
 800af92:	4b4b      	ldr	r3, [pc, #300]	@ (800b0c0 <atanf+0x164>)
 800af94:	429c      	cmp	r4, r3
 800af96:	d810      	bhi.n	800afba <atanf+0x5e>
 800af98:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800af9c:	d20a      	bcs.n	800afb4 <atanf+0x58>
 800af9e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b0c4 <atanf+0x168>
 800afa2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb2:	dce2      	bgt.n	800af7a <atanf+0x1e>
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	e013      	b.n	800afe2 <atanf+0x86>
 800afba:	f000 f8a3 	bl	800b104 <fabsf>
 800afbe:	4b42      	ldr	r3, [pc, #264]	@ (800b0c8 <atanf+0x16c>)
 800afc0:	429c      	cmp	r4, r3
 800afc2:	d84f      	bhi.n	800b064 <atanf+0x108>
 800afc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800afc8:	429c      	cmp	r4, r3
 800afca:	d841      	bhi.n	800b050 <atanf+0xf4>
 800afcc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800afd0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800afd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afd8:	2300      	movs	r3, #0
 800afda:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800afe8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b0cc <atanf+0x170>
 800afec:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b0d0 <atanf+0x174>
 800aff0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b0d4 <atanf+0x178>
 800aff4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800aff8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800affc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b0d8 <atanf+0x17c>
 800b000:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b004:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b0dc <atanf+0x180>
 800b008:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b00c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b0e0 <atanf+0x184>
 800b010:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b014:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b0e4 <atanf+0x188>
 800b018:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b01c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b0e8 <atanf+0x18c>
 800b020:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b024:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b0ec <atanf+0x190>
 800b028:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b02c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b0f0 <atanf+0x194>
 800b030:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b034:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b0f4 <atanf+0x198>
 800b038:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b03c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b040:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b044:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b048:	d121      	bne.n	800b08e <atanf+0x132>
 800b04a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b04e:	e794      	b.n	800af7a <atanf+0x1e>
 800b050:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b054:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b058:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b05c:	2301      	movs	r3, #1
 800b05e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b062:	e7be      	b.n	800afe2 <atanf+0x86>
 800b064:	4b24      	ldr	r3, [pc, #144]	@ (800b0f8 <atanf+0x19c>)
 800b066:	429c      	cmp	r4, r3
 800b068:	d80b      	bhi.n	800b082 <atanf+0x126>
 800b06a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b06e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b072:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b076:	2302      	movs	r3, #2
 800b078:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b080:	e7af      	b.n	800afe2 <atanf+0x86>
 800b082:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b086:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b08a:	2303      	movs	r3, #3
 800b08c:	e7a9      	b.n	800afe2 <atanf+0x86>
 800b08e:	4a1b      	ldr	r2, [pc, #108]	@ (800b0fc <atanf+0x1a0>)
 800b090:	491b      	ldr	r1, [pc, #108]	@ (800b100 <atanf+0x1a4>)
 800b092:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b096:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b09a:	edd3 6a00 	vldr	s13, [r3]
 800b09e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0a2:	2d00      	cmp	r5, #0
 800b0a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0a8:	edd2 7a00 	vldr	s15, [r2]
 800b0ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0b0:	bfb8      	it	lt
 800b0b2:	eef1 7a67 	vneglt.f32	s15, s15
 800b0b6:	e760      	b.n	800af7a <atanf+0x1e>
 800b0b8:	bfc90fdb 	.word	0xbfc90fdb
 800b0bc:	3fc90fdb 	.word	0x3fc90fdb
 800b0c0:	3edfffff 	.word	0x3edfffff
 800b0c4:	7149f2ca 	.word	0x7149f2ca
 800b0c8:	3f97ffff 	.word	0x3f97ffff
 800b0cc:	3c8569d7 	.word	0x3c8569d7
 800b0d0:	3d4bda59 	.word	0x3d4bda59
 800b0d4:	bd6ef16b 	.word	0xbd6ef16b
 800b0d8:	3d886b35 	.word	0x3d886b35
 800b0dc:	3dba2e6e 	.word	0x3dba2e6e
 800b0e0:	3e124925 	.word	0x3e124925
 800b0e4:	3eaaaaab 	.word	0x3eaaaaab
 800b0e8:	bd15a221 	.word	0xbd15a221
 800b0ec:	bd9d8795 	.word	0xbd9d8795
 800b0f0:	bde38e38 	.word	0xbde38e38
 800b0f4:	be4ccccd 	.word	0xbe4ccccd
 800b0f8:	401bffff 	.word	0x401bffff
 800b0fc:	0800be04 	.word	0x0800be04
 800b100:	0800bdf4 	.word	0x0800bdf4

0800b104 <fabsf>:
 800b104:	ee10 3a10 	vmov	r3, s0
 800b108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b10c:	ee00 3a10 	vmov	s0, r3
 800b110:	4770      	bx	lr
	...

0800b114 <_gettimeofday>:
 800b114:	4b02      	ldr	r3, [pc, #8]	@ (800b120 <_gettimeofday+0xc>)
 800b116:	2258      	movs	r2, #88	@ 0x58
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295
 800b11e:	4770      	bx	lr
 800b120:	20000a94 	.word	0x20000a94

0800b124 <_init>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr

0800b130 <_fini>:
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	bf00      	nop
 800b134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b136:	bc08      	pop	{r3}
 800b138:	469e      	mov	lr, r3
 800b13a:	4770      	bx	lr
